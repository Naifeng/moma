
/*
 * This code was generated by Spiral 8.5.1, www.spiral.net
 */

#include <stdint.h>
__device__ uint64_t P2[2097152];
__device__ uint64_t P1[2097152];

void init_nttmpcuda() {
    /* skip */
}

__global__ void ker_code0(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4389, a4390, a4391, a4392, a4393, a4394, a4415, a4416, 
            a4417, a4418, a4419, a4420, a4421, a4422, a4423, a4424, 
            a4425, a4426, a4428, a4429, a4430, a4432, a4433, a4434, 
            a4435, a4436, b300, b301, b302, b303, b304, b305, 
            c229, c230, i528, i529, i530;
    uint64_t a4399, a4400, a4401, a4402, a4403, a4408, a4409, d241, 
            d242, d243, d244, d245, d246, d247, d248, d249, 
            d250, d251, d252, m23, p41, p42, t1083, t1084, 
            t1085, t1086, t1087, t1088, t1089, t1090, t1091, t1092, 
            t1093, t1094, t1095, t1096, t1097, t1098, t1099, t1100, 
            t1101, t1102, t1103, t1104, t1105, t885, t886, t889, 
            t890;
    uint128_t a4395, a4396, a4397, a4398, a4404, a4405, a4406, a4407, 
            a4410, a4411, a4412, c221, c222, c223, c224, c225, 
            c226, c227, c228, s381, s382, s383, s384, s385, 
            s387;
    for(int i41 = 0; i41 <= 8191; i41++) {
        a4389 = (1048576*blockIdx.x);
        a4390 = (64*i41);
        b300 = (a4389 + threadIdx.x);
        a4391 = (b300 + a4390);
        a4392 = (a4391 + 524288);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4393 = (2*a4392);
        a4394 = (a4393 + 1);
        a4395 = (((uint128_t ) twiddles[3])*((uint128_t ) X[a4394]));
        a4396 = (((uint128_t ) twiddles[3])*((uint128_t ) X[a4393]));
        a4397 = (((uint128_t ) twiddles[2])*((uint128_t ) X[a4394]));
        a4398 = (((uint128_t ) twiddles[2])*((uint128_t ) X[a4393]));
        c221 = (((uint128_t ) a4396) + ((uint128_t ) a4397));
        t1083 = (a4395 >> 64);
        c222 = (((uint128_t ) c221) + ((uint128_t ) t1083));
        t1084 = (c222 >> 64);
        c223 = (((uint128_t ) a4398) + ((uint128_t ) t1084));
        t1085 = (c223 >> 64);
        t1086 = ((uint64_t ) c223);
        t1087 = ((uint64_t ) c222);
        t1088 = ((uint64_t ) a4395);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p41 = (t1087 >> 58);
        a4399 = ((uint64_t ) 1);
        a4400 = (a4399 << 58);
        m23 = (a4400 - 1);
        p42 = (((t1085)&(m23)));
        a4401 = (p42 << 6);
        a4402 = (t1086 >> 58);
        t1089 = (((a4401)|(a4402)));
        a4403 = (t1086 << 6);
        t1090 = (((a4403)|(p41)));
        /* End of MPShiftRight3 */
        t889 = mu[0];
        t890 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4404 = (((uint128_t ) t1090)*((uint128_t ) t890));
        a4405 = (((uint128_t ) t1090)*((uint128_t ) t889));
        a4406 = (((uint128_t ) t1089)*((uint128_t ) t890));
        a4407 = (((uint128_t ) t1089)*((uint128_t ) t889));
        c224 = (((uint128_t ) a4405) + ((uint128_t ) a4406));
        t1091 = (a4404 >> 64);
        c225 = (((uint128_t ) c224) + ((uint128_t ) t1091));
        t1092 = (c225 >> 64);
        c226 = (((uint128_t ) a4407) + ((uint128_t ) t1092));
        t1093 = (c226 >> 64);
        t1094 = ((uint64_t ) c226);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1095 = (t1093 >> 1);
        a4408 = (t1093 << 63);
        a4409 = (t1094 >> 1);
        t1096 = (((a4408)|(a4409)));
        /* End of MPShiftRight2 */
        t885 = modulus[0];
        t886 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4410 = (((uint128_t ) t1096)*((uint128_t ) t886));
        a4411 = (((uint128_t ) t1096)*((uint128_t ) t885));
        a4412 = (((uint128_t ) t1095)*((uint128_t ) t886));
        c227 = (((uint128_t ) a4411) + ((uint128_t ) a4412));
        t1097 = (a4410 >> 64);
        c228 = (((uint128_t ) c227) + ((uint128_t ) t1097));
        t1098 = ((uint64_t ) c228);
        t1099 = ((uint64_t ) a4410);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d241 = (t1088 - t1099);
        b301 = ((t1088 < t1099));
        d242 = (t1087 - t1098);
        d243 = (d242 - b301);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d244 = (d241 - t886);
        b302 = ((d241 < t886));
        d245 = (d243 - t885);
        d246 = (d245 - b302);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4415 = ((d243 < t885));
        a4416 = ((d243 == t885));
        a4417 = ((a4416) && (b302));
        i528 = ((a4415) || (a4417));
        t1100 = ((i528) ? (d243) : (d246));
        t1101 = ((i528) ? (d241) : (d244));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4418 = (128*i41);
        a4419 = (2*threadIdx.x);
        a4420 = (a4418 + a4419);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4421 = (2*a4391);
        a4422 = (a4421 + 1);
        s381 = (((uint128_t ) X[a4422]) + ((uint128_t ) t1101));
        t1102 = ((uint64_t ) s381);
        c229 = (s381 >> 64);
        s382 = (((uint128_t ) X[a4421]) + ((uint128_t ) t1100));
        s383 = (((uint128_t ) s382) + ((uint128_t ) c229));
        t1103 = ((uint64_t ) s383);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4423 = ((t885 < t1103));
        a4424 = ((t885 == t1103));
        a4425 = ((t886 < t1102));
        a4426 = ((a4424) && (a4425));
        i529 = ((a4423) || (a4426));
        /* Begin of MPSubDDD 64 */
        d247 = (t1102 - t886);
        b303 = ((t1102 < t886));
        d248 = (t1103 - t885);
        d249 = (d248 - b303);
        /* End of MPSubDDD 64 */
        a4428 = (2*a4420);
        P1[a4428] = ((i529) ? (d249) : (t1103));
        a4429 = (a4428 + 1);
        P1[a4429] = ((i529) ? (d247) : (t1102));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b304 = (a4419 + a4418);
        a4430 = (b304 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d250 = (X[a4422] - t1101);
        b305 = ((X[a4422] < t1101));
        d251 = (X[a4421] - t1100);
        d252 = (d251 - b305);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s384 = (((uint128_t ) d250) + ((uint128_t ) t886));
        t1104 = ((uint64_t ) s384);
        c230 = (s384 >> 64);
        s385 = (((uint128_t ) d252) + ((uint128_t ) t885));
        s387 = (((uint128_t ) s385) + ((uint128_t ) c230));
        t1105 = ((uint64_t ) s387);
        /* MPLessThan 64 */
        a4432 = ((X[a4421] < t1100));
        a4433 = ((X[a4421] == t1100));
        a4434 = ((a4433) && (b305));
        i530 = ((a4432) || (a4434));
        a4435 = (2*a4430);
        P1[a4435] = ((i530) ? (t1105) : (d252));
        a4436 = (a4435 + 1);
        P1[a4436] = ((i530) ? (t1104) : (d250));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code1(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4437, a4438, a4439, a4440, a4441, a4442, a4443, a4444, 
            a4445, a4466, a4467, a4468, a4469, a4470, a4471, a4472, 
            a4473, a4474, a4475, a4476, a4477, a4479, a4480, a4481, 
            a4483, a4484, a4485, a4486, a4487, b306, b307, b308, 
            b309, b310, b311, c239, c240, i531, i532, i533;
    uint64_t a4450, a4451, a4452, a4453, a4454, a4459, a4460, d253, 
            d254, d255, d256, d257, d258, d259, d260, d261, 
            d262, d263, d264, m24, p43, p44, t1106, t1107, 
            t1108, t1109, t1110, t1111, t1112, t1113, t1114, t1115, 
            t1116, t1117, t1118, t1119, t1120, t1121, t1122, t1123, 
            t1124, t1125, t1126, t1127, t1128, t847, t848, t853, 
            t854;
    uint128_t a4446, a4447, a4448, a4449, a4455, a4456, a4457, a4458, 
            a4461, a4462, a4463, c231, c232, c233, c234, c235, 
            c236, c237, c238, s388, s389, s390, s391, s392, 
            s393;
    for(int i39 = 0; i39 <= 8191; i39++) {
        a4437 = (64*i39);
        a4438 = (a4437 + threadIdx.x);
        b306 = (threadIdx.x + a4437);
        a4439 = (b306 + 524288);
        a4440 = (a4439 % 2);
        a4441 = (2 + a4440);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4442 = (2*a4441);
        a4443 = (a4442 + 1);
        a4444 = (2*a4439);
        a4445 = (a4444 + 1);
        a4446 = (((uint128_t ) twiddles[a4443])*((uint128_t ) P1[a4445]));
        a4447 = (((uint128_t ) twiddles[a4443])*((uint128_t ) P1[a4444]));
        a4448 = (((uint128_t ) twiddles[a4442])*((uint128_t ) P1[a4445]));
        a4449 = (((uint128_t ) twiddles[a4442])*((uint128_t ) P1[a4444]));
        c231 = (((uint128_t ) a4447) + ((uint128_t ) a4448));
        t1106 = (a4446 >> 64);
        c232 = (((uint128_t ) c231) + ((uint128_t ) t1106));
        t1107 = (c232 >> 64);
        c233 = (((uint128_t ) a4449) + ((uint128_t ) t1107));
        t1108 = (c233 >> 64);
        t1109 = ((uint64_t ) c233);
        t1110 = ((uint64_t ) c232);
        t1111 = ((uint64_t ) a4446);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p43 = (t1110 >> 58);
        a4450 = ((uint64_t ) 1);
        a4451 = (a4450 << 58);
        m24 = (a4451 - 1);
        p44 = (((t1108)&(m24)));
        a4452 = (p44 << 6);
        a4453 = (t1109 >> 58);
        t1112 = (((a4452)|(a4453)));
        a4454 = (t1109 << 6);
        t1113 = (((a4454)|(p43)));
        /* End of MPShiftRight3 */
        t853 = mu[0];
        t854 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4455 = (((uint128_t ) t1113)*((uint128_t ) t854));
        a4456 = (((uint128_t ) t1113)*((uint128_t ) t853));
        a4457 = (((uint128_t ) t1112)*((uint128_t ) t854));
        a4458 = (((uint128_t ) t1112)*((uint128_t ) t853));
        c234 = (((uint128_t ) a4456) + ((uint128_t ) a4457));
        t1114 = (a4455 >> 64);
        c235 = (((uint128_t ) c234) + ((uint128_t ) t1114));
        t1115 = (c235 >> 64);
        c236 = (((uint128_t ) a4458) + ((uint128_t ) t1115));
        t1116 = (c236 >> 64);
        t1117 = ((uint64_t ) c236);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1118 = (t1116 >> 1);
        a4459 = (t1116 << 63);
        a4460 = (t1117 >> 1);
        t1119 = (((a4459)|(a4460)));
        /* End of MPShiftRight2 */
        t847 = modulus[0];
        t848 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4461 = (((uint128_t ) t1119)*((uint128_t ) t848));
        a4462 = (((uint128_t ) t1119)*((uint128_t ) t847));
        a4463 = (((uint128_t ) t1118)*((uint128_t ) t848));
        c237 = (((uint128_t ) a4462) + ((uint128_t ) a4463));
        t1120 = (a4461 >> 64);
        c238 = (((uint128_t ) c237) + ((uint128_t ) t1120));
        t1121 = ((uint64_t ) c238);
        t1122 = ((uint64_t ) a4461);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d253 = (t1111 - t1122);
        b307 = ((t1111 < t1122));
        d254 = (t1110 - t1121);
        d255 = (d254 - b307);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d256 = (d253 - t848);
        b308 = ((d253 < t848));
        d257 = (d255 - t847);
        d258 = (d257 - b308);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4466 = ((d255 < t847));
        a4467 = ((d255 == t847));
        a4468 = ((a4467) && (b308));
        i531 = ((a4466) || (a4468));
        t1123 = ((i531) ? (d255) : (d258));
        t1124 = ((i531) ? (d253) : (d256));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4469 = (128*i39);
        a4470 = (2*threadIdx.x);
        a4471 = (a4469 + a4470);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4472 = (2*a4438);
        a4473 = (a4472 + 1);
        s388 = (((uint128_t ) P1[a4473]) + ((uint128_t ) t1124));
        t1125 = ((uint64_t ) s388);
        c239 = (s388 >> 64);
        s389 = (((uint128_t ) P1[a4472]) + ((uint128_t ) t1123));
        s390 = (((uint128_t ) s389) + ((uint128_t ) c239));
        t1126 = ((uint64_t ) s390);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4474 = ((t847 < t1126));
        a4475 = ((t847 == t1126));
        a4476 = ((t848 < t1125));
        a4477 = ((a4475) && (a4476));
        i532 = ((a4474) || (a4477));
        /* Begin of MPSubDDD 64 */
        d259 = (t1125 - t848);
        b309 = ((t1125 < t848));
        d260 = (t1126 - t847);
        d261 = (d260 - b309);
        /* End of MPSubDDD 64 */
        a4479 = (2*a4471);
        P2[a4479] = ((i532) ? (d261) : (t1126));
        a4480 = (a4479 + 1);
        P2[a4480] = ((i532) ? (d259) : (t1125));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b310 = (a4470 + a4469);
        a4481 = (b310 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d262 = (P1[a4473] - t1124);
        b311 = ((P1[a4473] < t1124));
        d263 = (P1[a4472] - t1123);
        d264 = (d263 - b311);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s391 = (((uint128_t ) d262) + ((uint128_t ) t848));
        t1127 = ((uint64_t ) s391);
        c240 = (s391 >> 64);
        s392 = (((uint128_t ) d264) + ((uint128_t ) t847));
        s393 = (((uint128_t ) s392) + ((uint128_t ) c240));
        t1128 = ((uint64_t ) s393);
        /* MPLessThan 64 */
        a4483 = ((P1[a4472] < t1123));
        a4484 = ((P1[a4472] == t1123));
        a4485 = ((a4484) && (b311));
        i533 = ((a4483) || (a4485));
        a4486 = (2*a4481);
        P2[a4486] = ((i533) ? (t1128) : (d264));
        a4487 = (a4486 + 1);
        P2[a4487] = ((i533) ? (t1127) : (d262));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code2(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4488, a4489, a4490, a4491, a4492, a4493, a4494, a4495, 
            a4496, a4517, a4518, a4519, a4520, a4521, a4522, a4523, 
            a4524, a4525, a4526, a4527, a4528, a4530, a4531, a4532, 
            a4534, a4535, a4536, a4537, a4538, b312, b313, b314, 
            b315, b316, b317, c249, c250, i534, i535, i536;
    uint64_t a4501, a4502, a4503, a4504, a4505, a4510, a4511, d265, 
            d266, d267, d268, d269, d270, d271, d272, d273, 
            d274, d275, d276, m25, p45, p46, t1129, t1130, 
            t1131, t1132, t1133, t1134, t1135, t1136, t1137, t1138, 
            t1139, t1140, t1141, t1142, t1143, t1144, t1145, t1146, 
            t1147, t1148, t1149, t1150, t1151, t811, t812, t815, 
            t816;
    uint128_t a4497, a4498, a4499, a4500, a4506, a4507, a4508, a4509, 
            a4512, a4513, a4514, c241, c242, c243, c244, c245, 
            c246, c247, c248, s394, s395, s396, s397, s398, 
            s399;
    for(int i37 = 0; i37 <= 8191; i37++) {
        a4488 = (64*i37);
        a4489 = (a4488 + threadIdx.x);
        b312 = (threadIdx.x + a4488);
        a4490 = (b312 + 524288);
        a4491 = (a4490 % 4);
        a4492 = (4 + a4491);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4493 = (2*a4492);
        a4494 = (a4493 + 1);
        a4495 = (2*a4490);
        a4496 = (a4495 + 1);
        a4497 = (((uint128_t ) twiddles[a4494])*((uint128_t ) P2[a4496]));
        a4498 = (((uint128_t ) twiddles[a4494])*((uint128_t ) P2[a4495]));
        a4499 = (((uint128_t ) twiddles[a4493])*((uint128_t ) P2[a4496]));
        a4500 = (((uint128_t ) twiddles[a4493])*((uint128_t ) P2[a4495]));
        c241 = (((uint128_t ) a4498) + ((uint128_t ) a4499));
        t1129 = (a4497 >> 64);
        c242 = (((uint128_t ) c241) + ((uint128_t ) t1129));
        t1130 = (c242 >> 64);
        c243 = (((uint128_t ) a4500) + ((uint128_t ) t1130));
        t1131 = (c243 >> 64);
        t1132 = ((uint64_t ) c243);
        t1133 = ((uint64_t ) c242);
        t1134 = ((uint64_t ) a4497);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p45 = (t1133 >> 58);
        a4501 = ((uint64_t ) 1);
        a4502 = (a4501 << 58);
        m25 = (a4502 - 1);
        p46 = (((t1131)&(m25)));
        a4503 = (p46 << 6);
        a4504 = (t1132 >> 58);
        t1135 = (((a4503)|(a4504)));
        a4505 = (t1132 << 6);
        t1136 = (((a4505)|(p45)));
        /* End of MPShiftRight3 */
        t815 = mu[0];
        t816 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4506 = (((uint128_t ) t1136)*((uint128_t ) t816));
        a4507 = (((uint128_t ) t1136)*((uint128_t ) t815));
        a4508 = (((uint128_t ) t1135)*((uint128_t ) t816));
        a4509 = (((uint128_t ) t1135)*((uint128_t ) t815));
        c244 = (((uint128_t ) a4507) + ((uint128_t ) a4508));
        t1137 = (a4506 >> 64);
        c245 = (((uint128_t ) c244) + ((uint128_t ) t1137));
        t1138 = (c245 >> 64);
        c246 = (((uint128_t ) a4509) + ((uint128_t ) t1138));
        t1139 = (c246 >> 64);
        t1140 = ((uint64_t ) c246);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1141 = (t1139 >> 1);
        a4510 = (t1139 << 63);
        a4511 = (t1140 >> 1);
        t1142 = (((a4510)|(a4511)));
        /* End of MPShiftRight2 */
        t811 = modulus[0];
        t812 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4512 = (((uint128_t ) t1142)*((uint128_t ) t812));
        a4513 = (((uint128_t ) t1142)*((uint128_t ) t811));
        a4514 = (((uint128_t ) t1141)*((uint128_t ) t812));
        c247 = (((uint128_t ) a4513) + ((uint128_t ) a4514));
        t1143 = (a4512 >> 64);
        c248 = (((uint128_t ) c247) + ((uint128_t ) t1143));
        t1144 = ((uint64_t ) c248);
        t1145 = ((uint64_t ) a4512);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d265 = (t1134 - t1145);
        b313 = ((t1134 < t1145));
        d266 = (t1133 - t1144);
        d267 = (d266 - b313);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d268 = (d265 - t812);
        b314 = ((d265 < t812));
        d269 = (d267 - t811);
        d270 = (d269 - b314);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4517 = ((d267 < t811));
        a4518 = ((d267 == t811));
        a4519 = ((a4518) && (b314));
        i534 = ((a4517) || (a4519));
        t1146 = ((i534) ? (d267) : (d270));
        t1147 = ((i534) ? (d265) : (d268));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4520 = (128*i37);
        a4521 = (2*threadIdx.x);
        a4522 = (a4520 + a4521);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4523 = (2*a4489);
        a4524 = (a4523 + 1);
        s394 = (((uint128_t ) P2[a4524]) + ((uint128_t ) t1147));
        t1148 = ((uint64_t ) s394);
        c249 = (s394 >> 64);
        s395 = (((uint128_t ) P2[a4523]) + ((uint128_t ) t1146));
        s396 = (((uint128_t ) s395) + ((uint128_t ) c249));
        t1149 = ((uint64_t ) s396);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4525 = ((t811 < t1149));
        a4526 = ((t811 == t1149));
        a4527 = ((t812 < t1148));
        a4528 = ((a4526) && (a4527));
        i535 = ((a4525) || (a4528));
        /* Begin of MPSubDDD 64 */
        d271 = (t1148 - t812);
        b315 = ((t1148 < t812));
        d272 = (t1149 - t811);
        d273 = (d272 - b315);
        /* End of MPSubDDD 64 */
        a4530 = (2*a4522);
        P1[a4530] = ((i535) ? (d273) : (t1149));
        a4531 = (a4530 + 1);
        P1[a4531] = ((i535) ? (d271) : (t1148));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b316 = (a4521 + a4520);
        a4532 = (b316 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d274 = (P2[a4524] - t1147);
        b317 = ((P2[a4524] < t1147));
        d275 = (P2[a4523] - t1146);
        d276 = (d275 - b317);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s397 = (((uint128_t ) d274) + ((uint128_t ) t812));
        t1150 = ((uint64_t ) s397);
        c250 = (s397 >> 64);
        s398 = (((uint128_t ) d276) + ((uint128_t ) t811));
        s399 = (((uint128_t ) s398) + ((uint128_t ) c250));
        t1151 = ((uint64_t ) s399);
        /* MPLessThan 64 */
        a4534 = ((P2[a4523] < t1146));
        a4535 = ((P2[a4523] == t1146));
        a4536 = ((a4535) && (b317));
        i536 = ((a4534) || (a4536));
        a4537 = (2*a4532);
        P1[a4537] = ((i536) ? (t1151) : (d276));
        a4538 = (a4537 + 1);
        P1[a4538] = ((i536) ? (t1150) : (d274));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code3(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4539, a4540, a4541, a4542, a4543, a4544, a4545, a4546, 
            a4547, a4568, a4569, a4570, a4571, a4572, a4573, a4574, 
            a4575, a4576, a4577, a4578, a4579, a4581, a4582, a4583, 
            a4585, a4586, a4587, a4588, a4589, b318, b319, b320, 
            b321, b322, b323, c259, c260, i537, i538, i539;
    uint64_t a4552, a4553, a4554, a4555, a4556, a4561, a4562, d277, 
            d278, d279, d280, d281, d282, d283, d284, d285, 
            d286, d287, d288, m26, p47, p48, t1152, t1153, 
            t1154, t1155, t1156, t1157, t1158, t1159, t1160, t1161, 
            t1162, t1163, t1164, t1165, t1166, t1167, t1168, t1169, 
            t1170, t1171, t1172, t1173, t1174, t775, t776, t779, 
            t780;
    uint128_t a4548, a4549, a4550, a4551, a4557, a4558, a4559, a4560, 
            a4563, a4564, a4565, c251, c252, c253, c254, c255, 
            c256, c257, c258, s400, s401, s402, s403, s404, 
            s405;
    for(int i35 = 0; i35 <= 8191; i35++) {
        a4539 = (64*i35);
        a4540 = (a4539 + threadIdx.x);
        b318 = (threadIdx.x + a4539);
        a4541 = (b318 + 524288);
        a4542 = (a4541 % 8);
        a4543 = (8 + a4542);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4544 = (2*a4543);
        a4545 = (a4544 + 1);
        a4546 = (2*a4541);
        a4547 = (a4546 + 1);
        a4548 = (((uint128_t ) twiddles[a4545])*((uint128_t ) P1[a4547]));
        a4549 = (((uint128_t ) twiddles[a4545])*((uint128_t ) P1[a4546]));
        a4550 = (((uint128_t ) twiddles[a4544])*((uint128_t ) P1[a4547]));
        a4551 = (((uint128_t ) twiddles[a4544])*((uint128_t ) P1[a4546]));
        c251 = (((uint128_t ) a4549) + ((uint128_t ) a4550));
        t1152 = (a4548 >> 64);
        c252 = (((uint128_t ) c251) + ((uint128_t ) t1152));
        t1153 = (c252 >> 64);
        c253 = (((uint128_t ) a4551) + ((uint128_t ) t1153));
        t1154 = (c253 >> 64);
        t1155 = ((uint64_t ) c253);
        t1156 = ((uint64_t ) c252);
        t1157 = ((uint64_t ) a4548);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p47 = (t1156 >> 58);
        a4552 = ((uint64_t ) 1);
        a4553 = (a4552 << 58);
        m26 = (a4553 - 1);
        p48 = (((t1154)&(m26)));
        a4554 = (p48 << 6);
        a4555 = (t1155 >> 58);
        t1158 = (((a4554)|(a4555)));
        a4556 = (t1155 << 6);
        t1159 = (((a4556)|(p47)));
        /* End of MPShiftRight3 */
        t779 = mu[0];
        t780 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4557 = (((uint128_t ) t1159)*((uint128_t ) t780));
        a4558 = (((uint128_t ) t1159)*((uint128_t ) t779));
        a4559 = (((uint128_t ) t1158)*((uint128_t ) t780));
        a4560 = (((uint128_t ) t1158)*((uint128_t ) t779));
        c254 = (((uint128_t ) a4558) + ((uint128_t ) a4559));
        t1160 = (a4557 >> 64);
        c255 = (((uint128_t ) c254) + ((uint128_t ) t1160));
        t1161 = (c255 >> 64);
        c256 = (((uint128_t ) a4560) + ((uint128_t ) t1161));
        t1162 = (c256 >> 64);
        t1163 = ((uint64_t ) c256);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1164 = (t1162 >> 1);
        a4561 = (t1162 << 63);
        a4562 = (t1163 >> 1);
        t1165 = (((a4561)|(a4562)));
        /* End of MPShiftRight2 */
        t775 = modulus[0];
        t776 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4563 = (((uint128_t ) t1165)*((uint128_t ) t776));
        a4564 = (((uint128_t ) t1165)*((uint128_t ) t775));
        a4565 = (((uint128_t ) t1164)*((uint128_t ) t776));
        c257 = (((uint128_t ) a4564) + ((uint128_t ) a4565));
        t1166 = (a4563 >> 64);
        c258 = (((uint128_t ) c257) + ((uint128_t ) t1166));
        t1167 = ((uint64_t ) c258);
        t1168 = ((uint64_t ) a4563);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d277 = (t1157 - t1168);
        b319 = ((t1157 < t1168));
        d278 = (t1156 - t1167);
        d279 = (d278 - b319);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d280 = (d277 - t776);
        b320 = ((d277 < t776));
        d281 = (d279 - t775);
        d282 = (d281 - b320);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4568 = ((d279 < t775));
        a4569 = ((d279 == t775));
        a4570 = ((a4569) && (b320));
        i537 = ((a4568) || (a4570));
        t1169 = ((i537) ? (d279) : (d282));
        t1170 = ((i537) ? (d277) : (d280));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4571 = (128*i35);
        a4572 = (2*threadIdx.x);
        a4573 = (a4571 + a4572);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4574 = (2*a4540);
        a4575 = (a4574 + 1);
        s400 = (((uint128_t ) P1[a4575]) + ((uint128_t ) t1170));
        t1171 = ((uint64_t ) s400);
        c259 = (s400 >> 64);
        s401 = (((uint128_t ) P1[a4574]) + ((uint128_t ) t1169));
        s402 = (((uint128_t ) s401) + ((uint128_t ) c259));
        t1172 = ((uint64_t ) s402);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4576 = ((t775 < t1172));
        a4577 = ((t775 == t1172));
        a4578 = ((t776 < t1171));
        a4579 = ((a4577) && (a4578));
        i538 = ((a4576) || (a4579));
        /* Begin of MPSubDDD 64 */
        d283 = (t1171 - t776);
        b321 = ((t1171 < t776));
        d284 = (t1172 - t775);
        d285 = (d284 - b321);
        /* End of MPSubDDD 64 */
        a4581 = (2*a4573);
        P2[a4581] = ((i538) ? (d285) : (t1172));
        a4582 = (a4581 + 1);
        P2[a4582] = ((i538) ? (d283) : (t1171));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b322 = (a4572 + a4571);
        a4583 = (b322 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d286 = (P1[a4575] - t1170);
        b323 = ((P1[a4575] < t1170));
        d287 = (P1[a4574] - t1169);
        d288 = (d287 - b323);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s403 = (((uint128_t ) d286) + ((uint128_t ) t776));
        t1173 = ((uint64_t ) s403);
        c260 = (s403 >> 64);
        s404 = (((uint128_t ) d288) + ((uint128_t ) t775));
        s405 = (((uint128_t ) s404) + ((uint128_t ) c260));
        t1174 = ((uint64_t ) s405);
        /* MPLessThan 64 */
        a4585 = ((P1[a4574] < t1169));
        a4586 = ((P1[a4574] == t1169));
        a4587 = ((a4586) && (b323));
        i539 = ((a4585) || (a4587));
        a4588 = (2*a4583);
        P2[a4588] = ((i539) ? (t1174) : (d288));
        a4589 = (a4588 + 1);
        P2[a4589] = ((i539) ? (t1173) : (d286));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code4(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4590, a4591, a4592, a4593, a4594, a4595, a4596, a4597, 
            a4598, a4619, a4620, a4621, a4622, a4623, a4624, a4625, 
            a4626, a4627, a4628, a4629, a4630, a4632, a4633, a4634, 
            a4636, a4637, a4638, a4639, a4640, b324, b325, b326, 
            b327, b328, b329, c269, c270, i540, i541, i542;
    uint64_t a4603, a4604, a4605, a4606, a4607, a4612, a4613, d289, 
            d290, d291, d292, d293, d294, d295, d296, d297, 
            d298, d299, d300, m27, p49, p50, t1175, t1176, 
            t1177, t1178, t1179, t1180, t1181, t1182, t1183, t1184, 
            t1185, t1186, t1187, t1188, t1189, t1190, t1191, t1192, 
            t1193, t1194, t1195, t1196, t1197, t739, t740, t743, 
            t744;
    uint128_t a4599, a4600, a4601, a4602, a4608, a4609, a4610, a4611, 
            a4614, a4615, a4616, c261, c262, c263, c264, c265, 
            c266, c267, c268, s406, s407, s408, s409, s410, 
            s411;
    for(int i33 = 0; i33 <= 8191; i33++) {
        a4590 = (64*i33);
        a4591 = (a4590 + threadIdx.x);
        b324 = (threadIdx.x + a4590);
        a4592 = (b324 + 524288);
        a4593 = (a4592 % 16);
        a4594 = (16 + a4593);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4595 = (2*a4594);
        a4596 = (a4595 + 1);
        a4597 = (2*a4592);
        a4598 = (a4597 + 1);
        a4599 = (((uint128_t ) twiddles[a4596])*((uint128_t ) P2[a4598]));
        a4600 = (((uint128_t ) twiddles[a4596])*((uint128_t ) P2[a4597]));
        a4601 = (((uint128_t ) twiddles[a4595])*((uint128_t ) P2[a4598]));
        a4602 = (((uint128_t ) twiddles[a4595])*((uint128_t ) P2[a4597]));
        c261 = (((uint128_t ) a4600) + ((uint128_t ) a4601));
        t1175 = (a4599 >> 64);
        c262 = (((uint128_t ) c261) + ((uint128_t ) t1175));
        t1176 = (c262 >> 64);
        c263 = (((uint128_t ) a4602) + ((uint128_t ) t1176));
        t1177 = (c263 >> 64);
        t1178 = ((uint64_t ) c263);
        t1179 = ((uint64_t ) c262);
        t1180 = ((uint64_t ) a4599);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p49 = (t1179 >> 58);
        a4603 = ((uint64_t ) 1);
        a4604 = (a4603 << 58);
        m27 = (a4604 - 1);
        p50 = (((t1177)&(m27)));
        a4605 = (p50 << 6);
        a4606 = (t1178 >> 58);
        t1181 = (((a4605)|(a4606)));
        a4607 = (t1178 << 6);
        t1182 = (((a4607)|(p49)));
        /* End of MPShiftRight3 */
        t743 = mu[0];
        t744 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4608 = (((uint128_t ) t1182)*((uint128_t ) t744));
        a4609 = (((uint128_t ) t1182)*((uint128_t ) t743));
        a4610 = (((uint128_t ) t1181)*((uint128_t ) t744));
        a4611 = (((uint128_t ) t1181)*((uint128_t ) t743));
        c264 = (((uint128_t ) a4609) + ((uint128_t ) a4610));
        t1183 = (a4608 >> 64);
        c265 = (((uint128_t ) c264) + ((uint128_t ) t1183));
        t1184 = (c265 >> 64);
        c266 = (((uint128_t ) a4611) + ((uint128_t ) t1184));
        t1185 = (c266 >> 64);
        t1186 = ((uint64_t ) c266);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1187 = (t1185 >> 1);
        a4612 = (t1185 << 63);
        a4613 = (t1186 >> 1);
        t1188 = (((a4612)|(a4613)));
        /* End of MPShiftRight2 */
        t739 = modulus[0];
        t740 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4614 = (((uint128_t ) t1188)*((uint128_t ) t740));
        a4615 = (((uint128_t ) t1188)*((uint128_t ) t739));
        a4616 = (((uint128_t ) t1187)*((uint128_t ) t740));
        c267 = (((uint128_t ) a4615) + ((uint128_t ) a4616));
        t1189 = (a4614 >> 64);
        c268 = (((uint128_t ) c267) + ((uint128_t ) t1189));
        t1190 = ((uint64_t ) c268);
        t1191 = ((uint64_t ) a4614);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d289 = (t1180 - t1191);
        b325 = ((t1180 < t1191));
        d290 = (t1179 - t1190);
        d291 = (d290 - b325);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d292 = (d289 - t740);
        b326 = ((d289 < t740));
        d293 = (d291 - t739);
        d294 = (d293 - b326);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4619 = ((d291 < t739));
        a4620 = ((d291 == t739));
        a4621 = ((a4620) && (b326));
        i540 = ((a4619) || (a4621));
        t1192 = ((i540) ? (d291) : (d294));
        t1193 = ((i540) ? (d289) : (d292));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4622 = (128*i33);
        a4623 = (2*threadIdx.x);
        a4624 = (a4622 + a4623);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4625 = (2*a4591);
        a4626 = (a4625 + 1);
        s406 = (((uint128_t ) P2[a4626]) + ((uint128_t ) t1193));
        t1194 = ((uint64_t ) s406);
        c269 = (s406 >> 64);
        s407 = (((uint128_t ) P2[a4625]) + ((uint128_t ) t1192));
        s408 = (((uint128_t ) s407) + ((uint128_t ) c269));
        t1195 = ((uint64_t ) s408);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4627 = ((t739 < t1195));
        a4628 = ((t739 == t1195));
        a4629 = ((t740 < t1194));
        a4630 = ((a4628) && (a4629));
        i541 = ((a4627) || (a4630));
        /* Begin of MPSubDDD 64 */
        d295 = (t1194 - t740);
        b327 = ((t1194 < t740));
        d296 = (t1195 - t739);
        d297 = (d296 - b327);
        /* End of MPSubDDD 64 */
        a4632 = (2*a4624);
        P1[a4632] = ((i541) ? (d297) : (t1195));
        a4633 = (a4632 + 1);
        P1[a4633] = ((i541) ? (d295) : (t1194));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b328 = (a4623 + a4622);
        a4634 = (b328 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d298 = (P2[a4626] - t1193);
        b329 = ((P2[a4626] < t1193));
        d299 = (P2[a4625] - t1192);
        d300 = (d299 - b329);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s409 = (((uint128_t ) d298) + ((uint128_t ) t740));
        t1196 = ((uint64_t ) s409);
        c270 = (s409 >> 64);
        s410 = (((uint128_t ) d300) + ((uint128_t ) t739));
        s411 = (((uint128_t ) s410) + ((uint128_t ) c270));
        t1197 = ((uint64_t ) s411);
        /* MPLessThan 64 */
        a4636 = ((P2[a4625] < t1192));
        a4637 = ((P2[a4625] == t1192));
        a4638 = ((a4637) && (b329));
        i542 = ((a4636) || (a4638));
        a4639 = (2*a4634);
        P1[a4639] = ((i542) ? (t1197) : (d300));
        a4640 = (a4639 + 1);
        P1[a4640] = ((i542) ? (t1196) : (d298));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code5(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4641, a4642, a4643, a4644, a4645, a4646, a4647, a4648, 
            a4649, a4670, a4671, a4672, a4673, a4674, a4675, a4676, 
            a4677, a4678, a4679, a4680, a4681, a4683, a4684, a4685, 
            a4687, a4688, a4689, a4690, a4691, b330, b331, b332, 
            b333, b334, b335, c279, c280, i543, i544, i545;
    uint64_t a4654, a4655, a4656, a4657, a4658, a4663, a4664, d301, 
            d302, d303, d304, d305, d306, d307, d308, d309, 
            d310, d311, d312, m28, p51, p52, t1198, t1199, 
            t1200, t1201, t1202, t1203, t1204, t1205, t1206, t1207, 
            t1208, t1209, t1210, t1211, t1212, t1213, t1214, t1215, 
            t1216, t1217, t1218, t1219, t1220, t703, t704, t707, 
            t708;
    uint128_t a4650, a4651, a4652, a4653, a4659, a4660, a4661, a4662, 
            a4665, a4666, a4667, c271, c272, c273, c274, c275, 
            c276, c277, c278, s412, s413, s414, s415, s416, 
            s417;
    for(int i31 = 0; i31 <= 8191; i31++) {
        a4641 = (64*i31);
        a4642 = (a4641 + threadIdx.x);
        b330 = (threadIdx.x + a4641);
        a4643 = (b330 + 524288);
        a4644 = (a4643 % 32);
        a4645 = (32 + a4644);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4646 = (2*a4645);
        a4647 = (a4646 + 1);
        a4648 = (2*a4643);
        a4649 = (a4648 + 1);
        a4650 = (((uint128_t ) twiddles[a4647])*((uint128_t ) P1[a4649]));
        a4651 = (((uint128_t ) twiddles[a4647])*((uint128_t ) P1[a4648]));
        a4652 = (((uint128_t ) twiddles[a4646])*((uint128_t ) P1[a4649]));
        a4653 = (((uint128_t ) twiddles[a4646])*((uint128_t ) P1[a4648]));
        c271 = (((uint128_t ) a4651) + ((uint128_t ) a4652));
        t1198 = (a4650 >> 64);
        c272 = (((uint128_t ) c271) + ((uint128_t ) t1198));
        t1199 = (c272 >> 64);
        c273 = (((uint128_t ) a4653) + ((uint128_t ) t1199));
        t1200 = (c273 >> 64);
        t1201 = ((uint64_t ) c273);
        t1202 = ((uint64_t ) c272);
        t1203 = ((uint64_t ) a4650);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p51 = (t1202 >> 58);
        a4654 = ((uint64_t ) 1);
        a4655 = (a4654 << 58);
        m28 = (a4655 - 1);
        p52 = (((t1200)&(m28)));
        a4656 = (p52 << 6);
        a4657 = (t1201 >> 58);
        t1204 = (((a4656)|(a4657)));
        a4658 = (t1201 << 6);
        t1205 = (((a4658)|(p51)));
        /* End of MPShiftRight3 */
        t707 = mu[0];
        t708 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4659 = (((uint128_t ) t1205)*((uint128_t ) t708));
        a4660 = (((uint128_t ) t1205)*((uint128_t ) t707));
        a4661 = (((uint128_t ) t1204)*((uint128_t ) t708));
        a4662 = (((uint128_t ) t1204)*((uint128_t ) t707));
        c274 = (((uint128_t ) a4660) + ((uint128_t ) a4661));
        t1206 = (a4659 >> 64);
        c275 = (((uint128_t ) c274) + ((uint128_t ) t1206));
        t1207 = (c275 >> 64);
        c276 = (((uint128_t ) a4662) + ((uint128_t ) t1207));
        t1208 = (c276 >> 64);
        t1209 = ((uint64_t ) c276);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1210 = (t1208 >> 1);
        a4663 = (t1208 << 63);
        a4664 = (t1209 >> 1);
        t1211 = (((a4663)|(a4664)));
        /* End of MPShiftRight2 */
        t703 = modulus[0];
        t704 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4665 = (((uint128_t ) t1211)*((uint128_t ) t704));
        a4666 = (((uint128_t ) t1211)*((uint128_t ) t703));
        a4667 = (((uint128_t ) t1210)*((uint128_t ) t704));
        c277 = (((uint128_t ) a4666) + ((uint128_t ) a4667));
        t1212 = (a4665 >> 64);
        c278 = (((uint128_t ) c277) + ((uint128_t ) t1212));
        t1213 = ((uint64_t ) c278);
        t1214 = ((uint64_t ) a4665);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d301 = (t1203 - t1214);
        b331 = ((t1203 < t1214));
        d302 = (t1202 - t1213);
        d303 = (d302 - b331);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d304 = (d301 - t704);
        b332 = ((d301 < t704));
        d305 = (d303 - t703);
        d306 = (d305 - b332);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4670 = ((d303 < t703));
        a4671 = ((d303 == t703));
        a4672 = ((a4671) && (b332));
        i543 = ((a4670) || (a4672));
        t1215 = ((i543) ? (d303) : (d306));
        t1216 = ((i543) ? (d301) : (d304));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4673 = (128*i31);
        a4674 = (2*threadIdx.x);
        a4675 = (a4673 + a4674);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4676 = (2*a4642);
        a4677 = (a4676 + 1);
        s412 = (((uint128_t ) P1[a4677]) + ((uint128_t ) t1216));
        t1217 = ((uint64_t ) s412);
        c279 = (s412 >> 64);
        s413 = (((uint128_t ) P1[a4676]) + ((uint128_t ) t1215));
        s414 = (((uint128_t ) s413) + ((uint128_t ) c279));
        t1218 = ((uint64_t ) s414);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4678 = ((t703 < t1218));
        a4679 = ((t703 == t1218));
        a4680 = ((t704 < t1217));
        a4681 = ((a4679) && (a4680));
        i544 = ((a4678) || (a4681));
        /* Begin of MPSubDDD 64 */
        d307 = (t1217 - t704);
        b333 = ((t1217 < t704));
        d308 = (t1218 - t703);
        d309 = (d308 - b333);
        /* End of MPSubDDD 64 */
        a4683 = (2*a4675);
        P2[a4683] = ((i544) ? (d309) : (t1218));
        a4684 = (a4683 + 1);
        P2[a4684] = ((i544) ? (d307) : (t1217));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b334 = (a4674 + a4673);
        a4685 = (b334 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d310 = (P1[a4677] - t1216);
        b335 = ((P1[a4677] < t1216));
        d311 = (P1[a4676] - t1215);
        d312 = (d311 - b335);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s415 = (((uint128_t ) d310) + ((uint128_t ) t704));
        t1219 = ((uint64_t ) s415);
        c280 = (s415 >> 64);
        s416 = (((uint128_t ) d312) + ((uint128_t ) t703));
        s417 = (((uint128_t ) s416) + ((uint128_t ) c280));
        t1220 = ((uint64_t ) s417);
        /* MPLessThan 64 */
        a4687 = ((P1[a4676] < t1215));
        a4688 = ((P1[a4676] == t1215));
        a4689 = ((a4688) && (b335));
        i545 = ((a4687) || (a4689));
        a4690 = (2*a4685);
        P2[a4690] = ((i545) ? (t1220) : (d312));
        a4691 = (a4690 + 1);
        P2[a4691] = ((i545) ? (t1219) : (d310));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code6(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4692, a4693, a4694, a4695, a4696, a4697, a4698, a4699, 
            a4700, a4721, a4722, a4723, a4724, a4725, a4726, a4727, 
            a4728, a4729, a4730, a4731, a4732, a4734, a4735, a4736, 
            a4738, a4739, a4740, a4741, a4742, b336, b337, b338, 
            b339, b340, b341, c289, c290, i546, i547, i548;
    uint64_t a4705, a4706, a4707, a4708, a4709, a4714, a4715, d313, 
            d314, d315, d316, d317, d318, d319, d320, d321, 
            d322, d323, d324, m29, p53, p54, t1221, t1222, 
            t1223, t1224, t1225, t1226, t1227, t1228, t1229, t1230, 
            t1231, t1232, t1233, t1234, t1235, t1236, t1237, t1238, 
            t1239, t1240, t1241, t1242, t1243, t667, t668, t671, 
            t672;
    uint128_t a4701, a4702, a4703, a4704, a4710, a4711, a4712, a4713, 
            a4716, a4717, a4718, c281, c282, c283, c284, c285, 
            c286, c287, c288, s418, s419, s420, s421, s422, 
            s423;
    for(int i29 = 0; i29 <= 8191; i29++) {
        a4692 = (64*i29);
        a4693 = (a4692 + threadIdx.x);
        b336 = (threadIdx.x + a4692);
        a4694 = (b336 + 524288);
        a4695 = (a4694 % 64);
        a4696 = (64 + a4695);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4697 = (2*a4696);
        a4698 = (a4697 + 1);
        a4699 = (2*a4694);
        a4700 = (a4699 + 1);
        a4701 = (((uint128_t ) twiddles[a4698])*((uint128_t ) P2[a4700]));
        a4702 = (((uint128_t ) twiddles[a4698])*((uint128_t ) P2[a4699]));
        a4703 = (((uint128_t ) twiddles[a4697])*((uint128_t ) P2[a4700]));
        a4704 = (((uint128_t ) twiddles[a4697])*((uint128_t ) P2[a4699]));
        c281 = (((uint128_t ) a4702) + ((uint128_t ) a4703));
        t1221 = (a4701 >> 64);
        c282 = (((uint128_t ) c281) + ((uint128_t ) t1221));
        t1222 = (c282 >> 64);
        c283 = (((uint128_t ) a4704) + ((uint128_t ) t1222));
        t1223 = (c283 >> 64);
        t1224 = ((uint64_t ) c283);
        t1225 = ((uint64_t ) c282);
        t1226 = ((uint64_t ) a4701);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p53 = (t1225 >> 58);
        a4705 = ((uint64_t ) 1);
        a4706 = (a4705 << 58);
        m29 = (a4706 - 1);
        p54 = (((t1223)&(m29)));
        a4707 = (p54 << 6);
        a4708 = (t1224 >> 58);
        t1227 = (((a4707)|(a4708)));
        a4709 = (t1224 << 6);
        t1228 = (((a4709)|(p53)));
        /* End of MPShiftRight3 */
        t671 = mu[0];
        t672 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4710 = (((uint128_t ) t1228)*((uint128_t ) t672));
        a4711 = (((uint128_t ) t1228)*((uint128_t ) t671));
        a4712 = (((uint128_t ) t1227)*((uint128_t ) t672));
        a4713 = (((uint128_t ) t1227)*((uint128_t ) t671));
        c284 = (((uint128_t ) a4711) + ((uint128_t ) a4712));
        t1229 = (a4710 >> 64);
        c285 = (((uint128_t ) c284) + ((uint128_t ) t1229));
        t1230 = (c285 >> 64);
        c286 = (((uint128_t ) a4713) + ((uint128_t ) t1230));
        t1231 = (c286 >> 64);
        t1232 = ((uint64_t ) c286);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1233 = (t1231 >> 1);
        a4714 = (t1231 << 63);
        a4715 = (t1232 >> 1);
        t1234 = (((a4714)|(a4715)));
        /* End of MPShiftRight2 */
        t667 = modulus[0];
        t668 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4716 = (((uint128_t ) t1234)*((uint128_t ) t668));
        a4717 = (((uint128_t ) t1234)*((uint128_t ) t667));
        a4718 = (((uint128_t ) t1233)*((uint128_t ) t668));
        c287 = (((uint128_t ) a4717) + ((uint128_t ) a4718));
        t1235 = (a4716 >> 64);
        c288 = (((uint128_t ) c287) + ((uint128_t ) t1235));
        t1236 = ((uint64_t ) c288);
        t1237 = ((uint64_t ) a4716);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d313 = (t1226 - t1237);
        b337 = ((t1226 < t1237));
        d314 = (t1225 - t1236);
        d315 = (d314 - b337);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d316 = (d313 - t668);
        b338 = ((d313 < t668));
        d317 = (d315 - t667);
        d318 = (d317 - b338);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4721 = ((d315 < t667));
        a4722 = ((d315 == t667));
        a4723 = ((a4722) && (b338));
        i546 = ((a4721) || (a4723));
        t1238 = ((i546) ? (d315) : (d318));
        t1239 = ((i546) ? (d313) : (d316));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4724 = (128*i29);
        a4725 = (2*threadIdx.x);
        a4726 = (a4724 + a4725);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4727 = (2*a4693);
        a4728 = (a4727 + 1);
        s418 = (((uint128_t ) P2[a4728]) + ((uint128_t ) t1239));
        t1240 = ((uint64_t ) s418);
        c289 = (s418 >> 64);
        s419 = (((uint128_t ) P2[a4727]) + ((uint128_t ) t1238));
        s420 = (((uint128_t ) s419) + ((uint128_t ) c289));
        t1241 = ((uint64_t ) s420);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4729 = ((t667 < t1241));
        a4730 = ((t667 == t1241));
        a4731 = ((t668 < t1240));
        a4732 = ((a4730) && (a4731));
        i547 = ((a4729) || (a4732));
        /* Begin of MPSubDDD 64 */
        d319 = (t1240 - t668);
        b339 = ((t1240 < t668));
        d320 = (t1241 - t667);
        d321 = (d320 - b339);
        /* End of MPSubDDD 64 */
        a4734 = (2*a4726);
        P1[a4734] = ((i547) ? (d321) : (t1241));
        a4735 = (a4734 + 1);
        P1[a4735] = ((i547) ? (d319) : (t1240));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b340 = (a4725 + a4724);
        a4736 = (b340 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d322 = (P2[a4728] - t1239);
        b341 = ((P2[a4728] < t1239));
        d323 = (P2[a4727] - t1238);
        d324 = (d323 - b341);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s421 = (((uint128_t ) d322) + ((uint128_t ) t668));
        t1242 = ((uint64_t ) s421);
        c290 = (s421 >> 64);
        s422 = (((uint128_t ) d324) + ((uint128_t ) t667));
        s423 = (((uint128_t ) s422) + ((uint128_t ) c290));
        t1243 = ((uint64_t ) s423);
        /* MPLessThan 64 */
        a4738 = ((P2[a4727] < t1238));
        a4739 = ((P2[a4727] == t1238));
        a4740 = ((a4739) && (b341));
        i548 = ((a4738) || (a4740));
        a4741 = (2*a4736);
        P1[a4741] = ((i548) ? (t1243) : (d324));
        a4742 = (a4741 + 1);
        P1[a4742] = ((i548) ? (t1242) : (d322));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code7(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4743, a4744, a4745, a4746, a4747, a4748, a4749, a4750, 
            a4751, a4772, a4773, a4774, a4775, a4776, a4777, a4778, 
            a4779, a4780, a4781, a4782, a4783, a4785, a4786, a4787, 
            a4789, a4790, a4791, a4792, a4793, b342, b343, b344, 
            b345, b346, b347, c299, c300, i549, i550, i551;
    uint64_t a4756, a4757, a4758, a4759, a4760, a4765, a4766, d325, 
            d326, d327, d328, d329, d330, d331, d332, d333, 
            d334, d335, d336, m30, p55, p56, t1244, t1245, 
            t1246, t1247, t1248, t1249, t1250, t1251, t1252, t1253, 
            t1254, t1255, t1256, t1257, t1258, t1259, t1260, t1261, 
            t1262, t1263, t1264, t1265, t1266, t635, t636, t639, 
            t640;
    uint128_t a4752, a4753, a4754, a4755, a4761, a4762, a4763, a4764, 
            a4767, a4768, a4769, c291, c292, c293, c294, c295, 
            c296, c297, c298, s424, s425, s426, s427, s428, 
            s429;
    for(int i27 = 0; i27 <= 8191; i27++) {
        a4743 = (64*i27);
        a4744 = (a4743 + threadIdx.x);
        b342 = (threadIdx.x + a4743);
        a4745 = (b342 + 524288);
        a4746 = (a4745 % 128);
        a4747 = (128 + a4746);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4748 = (2*a4747);
        a4749 = (a4748 + 1);
        a4750 = (2*a4745);
        a4751 = (a4750 + 1);
        a4752 = (((uint128_t ) twiddles[a4749])*((uint128_t ) P1[a4751]));
        a4753 = (((uint128_t ) twiddles[a4749])*((uint128_t ) P1[a4750]));
        a4754 = (((uint128_t ) twiddles[a4748])*((uint128_t ) P1[a4751]));
        a4755 = (((uint128_t ) twiddles[a4748])*((uint128_t ) P1[a4750]));
        c291 = (((uint128_t ) a4753) + ((uint128_t ) a4754));
        t1244 = (a4752 >> 64);
        c292 = (((uint128_t ) c291) + ((uint128_t ) t1244));
        t1245 = (c292 >> 64);
        c293 = (((uint128_t ) a4755) + ((uint128_t ) t1245));
        t1246 = (c293 >> 64);
        t1247 = ((uint64_t ) c293);
        t1248 = ((uint64_t ) c292);
        t1249 = ((uint64_t ) a4752);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p55 = (t1248 >> 58);
        a4756 = ((uint64_t ) 1);
        a4757 = (a4756 << 58);
        m30 = (a4757 - 1);
        p56 = (((t1246)&(m30)));
        a4758 = (p56 << 6);
        a4759 = (t1247 >> 58);
        t1250 = (((a4758)|(a4759)));
        a4760 = (t1247 << 6);
        t1251 = (((a4760)|(p55)));
        /* End of MPShiftRight3 */
        t639 = mu[0];
        t640 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4761 = (((uint128_t ) t1251)*((uint128_t ) t640));
        a4762 = (((uint128_t ) t1251)*((uint128_t ) t639));
        a4763 = (((uint128_t ) t1250)*((uint128_t ) t640));
        a4764 = (((uint128_t ) t1250)*((uint128_t ) t639));
        c294 = (((uint128_t ) a4762) + ((uint128_t ) a4763));
        t1252 = (a4761 >> 64);
        c295 = (((uint128_t ) c294) + ((uint128_t ) t1252));
        t1253 = (c295 >> 64);
        c296 = (((uint128_t ) a4764) + ((uint128_t ) t1253));
        t1254 = (c296 >> 64);
        t1255 = ((uint64_t ) c296);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1256 = (t1254 >> 1);
        a4765 = (t1254 << 63);
        a4766 = (t1255 >> 1);
        t1257 = (((a4765)|(a4766)));
        /* End of MPShiftRight2 */
        t635 = modulus[0];
        t636 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4767 = (((uint128_t ) t1257)*((uint128_t ) t636));
        a4768 = (((uint128_t ) t1257)*((uint128_t ) t635));
        a4769 = (((uint128_t ) t1256)*((uint128_t ) t636));
        c297 = (((uint128_t ) a4768) + ((uint128_t ) a4769));
        t1258 = (a4767 >> 64);
        c298 = (((uint128_t ) c297) + ((uint128_t ) t1258));
        t1259 = ((uint64_t ) c298);
        t1260 = ((uint64_t ) a4767);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d325 = (t1249 - t1260);
        b343 = ((t1249 < t1260));
        d326 = (t1248 - t1259);
        d327 = (d326 - b343);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d328 = (d325 - t636);
        b344 = ((d325 < t636));
        d329 = (d327 - t635);
        d330 = (d329 - b344);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4772 = ((d327 < t635));
        a4773 = ((d327 == t635));
        a4774 = ((a4773) && (b344));
        i549 = ((a4772) || (a4774));
        t1261 = ((i549) ? (d327) : (d330));
        t1262 = ((i549) ? (d325) : (d328));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4775 = (128*i27);
        a4776 = (2*threadIdx.x);
        a4777 = (a4775 + a4776);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4778 = (2*a4744);
        a4779 = (a4778 + 1);
        s424 = (((uint128_t ) P1[a4779]) + ((uint128_t ) t1262));
        t1263 = ((uint64_t ) s424);
        c299 = (s424 >> 64);
        s425 = (((uint128_t ) P1[a4778]) + ((uint128_t ) t1261));
        s426 = (((uint128_t ) s425) + ((uint128_t ) c299));
        t1264 = ((uint64_t ) s426);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4780 = ((t635 < t1264));
        a4781 = ((t635 == t1264));
        a4782 = ((t636 < t1263));
        a4783 = ((a4781) && (a4782));
        i550 = ((a4780) || (a4783));
        /* Begin of MPSubDDD 64 */
        d331 = (t1263 - t636);
        b345 = ((t1263 < t636));
        d332 = (t1264 - t635);
        d333 = (d332 - b345);
        /* End of MPSubDDD 64 */
        a4785 = (2*a4777);
        P2[a4785] = ((i550) ? (d333) : (t1264));
        a4786 = (a4785 + 1);
        P2[a4786] = ((i550) ? (d331) : (t1263));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b346 = (a4776 + a4775);
        a4787 = (b346 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d334 = (P1[a4779] - t1262);
        b347 = ((P1[a4779] < t1262));
        d335 = (P1[a4778] - t1261);
        d336 = (d335 - b347);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s427 = (((uint128_t ) d334) + ((uint128_t ) t636));
        t1265 = ((uint64_t ) s427);
        c300 = (s427 >> 64);
        s428 = (((uint128_t ) d336) + ((uint128_t ) t635));
        s429 = (((uint128_t ) s428) + ((uint128_t ) c300));
        t1266 = ((uint64_t ) s429);
        /* MPLessThan 64 */
        a4789 = ((P1[a4778] < t1261));
        a4790 = ((P1[a4778] == t1261));
        a4791 = ((a4790) && (b347));
        i551 = ((a4789) || (a4791));
        a4792 = (2*a4787);
        P2[a4792] = ((i551) ? (t1266) : (d336));
        a4793 = (a4792 + 1);
        P2[a4793] = ((i551) ? (t1265) : (d334));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code8(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4794, a4795, a4796, a4797, a4798, a4799, a4800, a4801, 
            a4802, a4823, a4824, a4825, a4826, a4827, a4828, a4829, 
            a4830, a4831, a4832, a4833, a4834, a4836, a4837, a4838, 
            a4840, a4841, a4842, a4843, a4844, b348, b349, b350, 
            b351, b352, b353, c309, c310, i552, i553, i554;
    uint64_t a4807, a4808, a4809, a4810, a4811, a4816, a4817, d337, 
            d338, d339, d340, d341, d342, d343, d344, d345, 
            d346, d347, d348, m31, p57, p58, t1267, t1268, 
            t1269, t1270, t1271, t1272, t1273, t1274, t1275, t1276, 
            t1277, t1278, t1279, t1280, t1281, t1282, t1283, t1284, 
            t1285, t1286, t1287, t1288, t1289, t571, t572, t575, 
            t576;
    uint128_t a4803, a4804, a4805, a4806, a4812, a4813, a4814, a4815, 
            a4818, a4819, a4820, c301, c302, c303, c304, c305, 
            c306, c307, c308, s430, s431, s432, s433, s434, 
            s435;
    for(int i25 = 0; i25 <= 8191; i25++) {
        a4794 = (64*i25);
        a4795 = (a4794 + threadIdx.x);
        b348 = (threadIdx.x + a4794);
        a4796 = (b348 + 524288);
        a4797 = (a4796 % 256);
        a4798 = (256 + a4797);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4799 = (2*a4798);
        a4800 = (a4799 + 1);
        a4801 = (2*a4796);
        a4802 = (a4801 + 1);
        a4803 = (((uint128_t ) twiddles[a4800])*((uint128_t ) P2[a4802]));
        a4804 = (((uint128_t ) twiddles[a4800])*((uint128_t ) P2[a4801]));
        a4805 = (((uint128_t ) twiddles[a4799])*((uint128_t ) P2[a4802]));
        a4806 = (((uint128_t ) twiddles[a4799])*((uint128_t ) P2[a4801]));
        c301 = (((uint128_t ) a4804) + ((uint128_t ) a4805));
        t1267 = (a4803 >> 64);
        c302 = (((uint128_t ) c301) + ((uint128_t ) t1267));
        t1268 = (c302 >> 64);
        c303 = (((uint128_t ) a4806) + ((uint128_t ) t1268));
        t1269 = (c303 >> 64);
        t1270 = ((uint64_t ) c303);
        t1271 = ((uint64_t ) c302);
        t1272 = ((uint64_t ) a4803);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p57 = (t1271 >> 58);
        a4807 = ((uint64_t ) 1);
        a4808 = (a4807 << 58);
        m31 = (a4808 - 1);
        p58 = (((t1269)&(m31)));
        a4809 = (p58 << 6);
        a4810 = (t1270 >> 58);
        t1273 = (((a4809)|(a4810)));
        a4811 = (t1270 << 6);
        t1274 = (((a4811)|(p57)));
        /* End of MPShiftRight3 */
        t575 = mu[0];
        t576 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4812 = (((uint128_t ) t1274)*((uint128_t ) t576));
        a4813 = (((uint128_t ) t1274)*((uint128_t ) t575));
        a4814 = (((uint128_t ) t1273)*((uint128_t ) t576));
        a4815 = (((uint128_t ) t1273)*((uint128_t ) t575));
        c304 = (((uint128_t ) a4813) + ((uint128_t ) a4814));
        t1275 = (a4812 >> 64);
        c305 = (((uint128_t ) c304) + ((uint128_t ) t1275));
        t1276 = (c305 >> 64);
        c306 = (((uint128_t ) a4815) + ((uint128_t ) t1276));
        t1277 = (c306 >> 64);
        t1278 = ((uint64_t ) c306);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1279 = (t1277 >> 1);
        a4816 = (t1277 << 63);
        a4817 = (t1278 >> 1);
        t1280 = (((a4816)|(a4817)));
        /* End of MPShiftRight2 */
        t571 = modulus[0];
        t572 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4818 = (((uint128_t ) t1280)*((uint128_t ) t572));
        a4819 = (((uint128_t ) t1280)*((uint128_t ) t571));
        a4820 = (((uint128_t ) t1279)*((uint128_t ) t572));
        c307 = (((uint128_t ) a4819) + ((uint128_t ) a4820));
        t1281 = (a4818 >> 64);
        c308 = (((uint128_t ) c307) + ((uint128_t ) t1281));
        t1282 = ((uint64_t ) c308);
        t1283 = ((uint64_t ) a4818);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d337 = (t1272 - t1283);
        b349 = ((t1272 < t1283));
        d338 = (t1271 - t1282);
        d339 = (d338 - b349);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d340 = (d337 - t572);
        b350 = ((d337 < t572));
        d341 = (d339 - t571);
        d342 = (d341 - b350);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4823 = ((d339 < t571));
        a4824 = ((d339 == t571));
        a4825 = ((a4824) && (b350));
        i552 = ((a4823) || (a4825));
        t1284 = ((i552) ? (d339) : (d342));
        t1285 = ((i552) ? (d337) : (d340));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4826 = (128*i25);
        a4827 = (2*threadIdx.x);
        a4828 = (a4826 + a4827);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4829 = (2*a4795);
        a4830 = (a4829 + 1);
        s430 = (((uint128_t ) P2[a4830]) + ((uint128_t ) t1285));
        t1286 = ((uint64_t ) s430);
        c309 = (s430 >> 64);
        s431 = (((uint128_t ) P2[a4829]) + ((uint128_t ) t1284));
        s432 = (((uint128_t ) s431) + ((uint128_t ) c309));
        t1287 = ((uint64_t ) s432);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4831 = ((t571 < t1287));
        a4832 = ((t571 == t1287));
        a4833 = ((t572 < t1286));
        a4834 = ((a4832) && (a4833));
        i553 = ((a4831) || (a4834));
        /* Begin of MPSubDDD 64 */
        d343 = (t1286 - t572);
        b351 = ((t1286 < t572));
        d344 = (t1287 - t571);
        d345 = (d344 - b351);
        /* End of MPSubDDD 64 */
        a4836 = (2*a4828);
        P1[a4836] = ((i553) ? (d345) : (t1287));
        a4837 = (a4836 + 1);
        P1[a4837] = ((i553) ? (d343) : (t1286));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b352 = (a4827 + a4826);
        a4838 = (b352 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d346 = (P2[a4830] - t1285);
        b353 = ((P2[a4830] < t1285));
        d347 = (P2[a4829] - t1284);
        d348 = (d347 - b353);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s433 = (((uint128_t ) d346) + ((uint128_t ) t572));
        t1288 = ((uint64_t ) s433);
        c310 = (s433 >> 64);
        s434 = (((uint128_t ) d348) + ((uint128_t ) t571));
        s435 = (((uint128_t ) s434) + ((uint128_t ) c310));
        t1289 = ((uint64_t ) s435);
        /* MPLessThan 64 */
        a4840 = ((P2[a4829] < t1284));
        a4841 = ((P2[a4829] == t1284));
        a4842 = ((a4841) && (b353));
        i554 = ((a4840) || (a4842));
        a4843 = (2*a4838);
        P1[a4843] = ((i554) ? (t1289) : (d348));
        a4844 = (a4843 + 1);
        P1[a4844] = ((i554) ? (t1288) : (d346));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code9(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4845, a4846, a4847, a4848, a4849, a4850, a4851, a4852, 
            a4853, a4874, a4875, a4876, a4877, a4878, a4879, a4880, 
            a4881, a4882, a4883, a4884, a4885, a4887, a4888, a4889, 
            a4891, a4892, a4893, a4894, a4895, b354, b355, b356, 
            b357, b358, b359, c319, c320, i555, i556, i557;
    uint64_t a4858, a4859, a4860, a4861, a4862, a4867, a4868, d349, 
            d350, d351, d352, d353, d354, d355, d356, d357, 
            d358, d359, d360, m32, p59, p60, t1290, t1291, 
            t1292, t1293, t1294, t1295, t1296, t1297, t1298, t1299, 
            t1300, t1301, t1302, t1303, t1304, t1305, t1306, t1307, 
            t1308, t1309, t1310, t1311, t1312, t507, t508, t511, 
            t512;
    uint128_t a4854, a4855, a4856, a4857, a4863, a4864, a4865, a4866, 
            a4869, a4870, a4871, c311, c312, c313, c314, c315, 
            c316, c317, c318, s436, s437, s438, s439, s440, 
            s441;
    for(int i23 = 0; i23 <= 8191; i23++) {
        a4845 = (64*i23);
        a4846 = (a4845 + threadIdx.x);
        b354 = (threadIdx.x + a4845);
        a4847 = (b354 + 524288);
        a4848 = (a4847 % 512);
        a4849 = (512 + a4848);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4850 = (2*a4849);
        a4851 = (a4850 + 1);
        a4852 = (2*a4847);
        a4853 = (a4852 + 1);
        a4854 = (((uint128_t ) twiddles[a4851])*((uint128_t ) P1[a4853]));
        a4855 = (((uint128_t ) twiddles[a4851])*((uint128_t ) P1[a4852]));
        a4856 = (((uint128_t ) twiddles[a4850])*((uint128_t ) P1[a4853]));
        a4857 = (((uint128_t ) twiddles[a4850])*((uint128_t ) P1[a4852]));
        c311 = (((uint128_t ) a4855) + ((uint128_t ) a4856));
        t1290 = (a4854 >> 64);
        c312 = (((uint128_t ) c311) + ((uint128_t ) t1290));
        t1291 = (c312 >> 64);
        c313 = (((uint128_t ) a4857) + ((uint128_t ) t1291));
        t1292 = (c313 >> 64);
        t1293 = ((uint64_t ) c313);
        t1294 = ((uint64_t ) c312);
        t1295 = ((uint64_t ) a4854);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p59 = (t1294 >> 58);
        a4858 = ((uint64_t ) 1);
        a4859 = (a4858 << 58);
        m32 = (a4859 - 1);
        p60 = (((t1292)&(m32)));
        a4860 = (p60 << 6);
        a4861 = (t1293 >> 58);
        t1296 = (((a4860)|(a4861)));
        a4862 = (t1293 << 6);
        t1297 = (((a4862)|(p59)));
        /* End of MPShiftRight3 */
        t511 = mu[0];
        t512 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4863 = (((uint128_t ) t1297)*((uint128_t ) t512));
        a4864 = (((uint128_t ) t1297)*((uint128_t ) t511));
        a4865 = (((uint128_t ) t1296)*((uint128_t ) t512));
        a4866 = (((uint128_t ) t1296)*((uint128_t ) t511));
        c314 = (((uint128_t ) a4864) + ((uint128_t ) a4865));
        t1298 = (a4863 >> 64);
        c315 = (((uint128_t ) c314) + ((uint128_t ) t1298));
        t1299 = (c315 >> 64);
        c316 = (((uint128_t ) a4866) + ((uint128_t ) t1299));
        t1300 = (c316 >> 64);
        t1301 = ((uint64_t ) c316);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1302 = (t1300 >> 1);
        a4867 = (t1300 << 63);
        a4868 = (t1301 >> 1);
        t1303 = (((a4867)|(a4868)));
        /* End of MPShiftRight2 */
        t507 = modulus[0];
        t508 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4869 = (((uint128_t ) t1303)*((uint128_t ) t508));
        a4870 = (((uint128_t ) t1303)*((uint128_t ) t507));
        a4871 = (((uint128_t ) t1302)*((uint128_t ) t508));
        c317 = (((uint128_t ) a4870) + ((uint128_t ) a4871));
        t1304 = (a4869 >> 64);
        c318 = (((uint128_t ) c317) + ((uint128_t ) t1304));
        t1305 = ((uint64_t ) c318);
        t1306 = ((uint64_t ) a4869);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d349 = (t1295 - t1306);
        b355 = ((t1295 < t1306));
        d350 = (t1294 - t1305);
        d351 = (d350 - b355);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d352 = (d349 - t508);
        b356 = ((d349 < t508));
        d353 = (d351 - t507);
        d354 = (d353 - b356);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4874 = ((d351 < t507));
        a4875 = ((d351 == t507));
        a4876 = ((a4875) && (b356));
        i555 = ((a4874) || (a4876));
        t1307 = ((i555) ? (d351) : (d354));
        t1308 = ((i555) ? (d349) : (d352));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4877 = (128*i23);
        a4878 = (2*threadIdx.x);
        a4879 = (a4877 + a4878);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4880 = (2*a4846);
        a4881 = (a4880 + 1);
        s436 = (((uint128_t ) P1[a4881]) + ((uint128_t ) t1308));
        t1309 = ((uint64_t ) s436);
        c319 = (s436 >> 64);
        s437 = (((uint128_t ) P1[a4880]) + ((uint128_t ) t1307));
        s438 = (((uint128_t ) s437) + ((uint128_t ) c319));
        t1310 = ((uint64_t ) s438);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4882 = ((t507 < t1310));
        a4883 = ((t507 == t1310));
        a4884 = ((t508 < t1309));
        a4885 = ((a4883) && (a4884));
        i556 = ((a4882) || (a4885));
        /* Begin of MPSubDDD 64 */
        d355 = (t1309 - t508);
        b357 = ((t1309 < t508));
        d356 = (t1310 - t507);
        d357 = (d356 - b357);
        /* End of MPSubDDD 64 */
        a4887 = (2*a4879);
        P2[a4887] = ((i556) ? (d357) : (t1310));
        a4888 = (a4887 + 1);
        P2[a4888] = ((i556) ? (d355) : (t1309));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b358 = (a4878 + a4877);
        a4889 = (b358 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d358 = (P1[a4881] - t1308);
        b359 = ((P1[a4881] < t1308));
        d359 = (P1[a4880] - t1307);
        d360 = (d359 - b359);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s439 = (((uint128_t ) d358) + ((uint128_t ) t508));
        t1311 = ((uint64_t ) s439);
        c320 = (s439 >> 64);
        s440 = (((uint128_t ) d360) + ((uint128_t ) t507));
        s441 = (((uint128_t ) s440) + ((uint128_t ) c320));
        t1312 = ((uint64_t ) s441);
        /* MPLessThan 64 */
        a4891 = ((P1[a4880] < t1307));
        a4892 = ((P1[a4880] == t1307));
        a4893 = ((a4892) && (b359));
        i557 = ((a4891) || (a4893));
        a4894 = (2*a4889);
        P2[a4894] = ((i557) ? (t1312) : (d360));
        a4895 = (a4894 + 1);
        P2[a4895] = ((i557) ? (t1311) : (d358));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code10(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4896, a4897, a4898, a4899, a4900, a4901, a4902, a4903, 
            a4904, a4925, a4926, a4927, a4928, a4929, a4930, a4931, 
            a4932, a4933, a4934, a4935, a4936, a4938, a4939, a4940, 
            a4942, a4943, a4944, a4945, a4946, b360, b361, b362, 
            b363, b364, b365, c329, c330, i558, i559, i560;
    uint64_t a4909, a4910, a4911, a4912, a4913, a4918, a4919, d361, 
            d362, d363, d364, d365, d366, d367, d368, d369, 
            d370, d371, d372, m33, p61, p62, t1313, t1314, 
            t1315, t1316, t1317, t1318, t1319, t1320, t1321, t1322, 
            t1323, t1324, t1325, t1326, t1327, t1328, t1329, t1330, 
            t1331, t1332, t1333, t1334, t1335, t443, t444, t447, 
            t448;
    uint128_t a4905, a4906, a4907, a4908, a4914, a4915, a4916, a4917, 
            a4920, a4921, a4922, c321, c322, c323, c324, c325, 
            c326, c327, c328, s442, s443, s444, s445, s446, 
            s447;
    for(int i21 = 0; i21 <= 8191; i21++) {
        a4896 = (64*i21);
        a4897 = (a4896 + threadIdx.x);
        b360 = (threadIdx.x + a4896);
        a4898 = (b360 + 524288);
        a4899 = (a4898 % 1024);
        a4900 = (1024 + a4899);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4901 = (2*a4900);
        a4902 = (a4901 + 1);
        a4903 = (2*a4898);
        a4904 = (a4903 + 1);
        a4905 = (((uint128_t ) twiddles[a4902])*((uint128_t ) P2[a4904]));
        a4906 = (((uint128_t ) twiddles[a4902])*((uint128_t ) P2[a4903]));
        a4907 = (((uint128_t ) twiddles[a4901])*((uint128_t ) P2[a4904]));
        a4908 = (((uint128_t ) twiddles[a4901])*((uint128_t ) P2[a4903]));
        c321 = (((uint128_t ) a4906) + ((uint128_t ) a4907));
        t1313 = (a4905 >> 64);
        c322 = (((uint128_t ) c321) + ((uint128_t ) t1313));
        t1314 = (c322 >> 64);
        c323 = (((uint128_t ) a4908) + ((uint128_t ) t1314));
        t1315 = (c323 >> 64);
        t1316 = ((uint64_t ) c323);
        t1317 = ((uint64_t ) c322);
        t1318 = ((uint64_t ) a4905);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p61 = (t1317 >> 58);
        a4909 = ((uint64_t ) 1);
        a4910 = (a4909 << 58);
        m33 = (a4910 - 1);
        p62 = (((t1315)&(m33)));
        a4911 = (p62 << 6);
        a4912 = (t1316 >> 58);
        t1319 = (((a4911)|(a4912)));
        a4913 = (t1316 << 6);
        t1320 = (((a4913)|(p61)));
        /* End of MPShiftRight3 */
        t447 = mu[0];
        t448 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4914 = (((uint128_t ) t1320)*((uint128_t ) t448));
        a4915 = (((uint128_t ) t1320)*((uint128_t ) t447));
        a4916 = (((uint128_t ) t1319)*((uint128_t ) t448));
        a4917 = (((uint128_t ) t1319)*((uint128_t ) t447));
        c324 = (((uint128_t ) a4915) + ((uint128_t ) a4916));
        t1321 = (a4914 >> 64);
        c325 = (((uint128_t ) c324) + ((uint128_t ) t1321));
        t1322 = (c325 >> 64);
        c326 = (((uint128_t ) a4917) + ((uint128_t ) t1322));
        t1323 = (c326 >> 64);
        t1324 = ((uint64_t ) c326);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1325 = (t1323 >> 1);
        a4918 = (t1323 << 63);
        a4919 = (t1324 >> 1);
        t1326 = (((a4918)|(a4919)));
        /* End of MPShiftRight2 */
        t443 = modulus[0];
        t444 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4920 = (((uint128_t ) t1326)*((uint128_t ) t444));
        a4921 = (((uint128_t ) t1326)*((uint128_t ) t443));
        a4922 = (((uint128_t ) t1325)*((uint128_t ) t444));
        c327 = (((uint128_t ) a4921) + ((uint128_t ) a4922));
        t1327 = (a4920 >> 64);
        c328 = (((uint128_t ) c327) + ((uint128_t ) t1327));
        t1328 = ((uint64_t ) c328);
        t1329 = ((uint64_t ) a4920);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d361 = (t1318 - t1329);
        b361 = ((t1318 < t1329));
        d362 = (t1317 - t1328);
        d363 = (d362 - b361);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d364 = (d361 - t444);
        b362 = ((d361 < t444));
        d365 = (d363 - t443);
        d366 = (d365 - b362);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4925 = ((d363 < t443));
        a4926 = ((d363 == t443));
        a4927 = ((a4926) && (b362));
        i558 = ((a4925) || (a4927));
        t1330 = ((i558) ? (d363) : (d366));
        t1331 = ((i558) ? (d361) : (d364));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4928 = (128*i21);
        a4929 = (2*threadIdx.x);
        a4930 = (a4928 + a4929);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4931 = (2*a4897);
        a4932 = (a4931 + 1);
        s442 = (((uint128_t ) P2[a4932]) + ((uint128_t ) t1331));
        t1332 = ((uint64_t ) s442);
        c329 = (s442 >> 64);
        s443 = (((uint128_t ) P2[a4931]) + ((uint128_t ) t1330));
        s444 = (((uint128_t ) s443) + ((uint128_t ) c329));
        t1333 = ((uint64_t ) s444);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4933 = ((t443 < t1333));
        a4934 = ((t443 == t1333));
        a4935 = ((t444 < t1332));
        a4936 = ((a4934) && (a4935));
        i559 = ((a4933) || (a4936));
        /* Begin of MPSubDDD 64 */
        d367 = (t1332 - t444);
        b363 = ((t1332 < t444));
        d368 = (t1333 - t443);
        d369 = (d368 - b363);
        /* End of MPSubDDD 64 */
        a4938 = (2*a4930);
        P1[a4938] = ((i559) ? (d369) : (t1333));
        a4939 = (a4938 + 1);
        P1[a4939] = ((i559) ? (d367) : (t1332));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b364 = (a4929 + a4928);
        a4940 = (b364 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d370 = (P2[a4932] - t1331);
        b365 = ((P2[a4932] < t1331));
        d371 = (P2[a4931] - t1330);
        d372 = (d371 - b365);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s445 = (((uint128_t ) d370) + ((uint128_t ) t444));
        t1334 = ((uint64_t ) s445);
        c330 = (s445 >> 64);
        s446 = (((uint128_t ) d372) + ((uint128_t ) t443));
        s447 = (((uint128_t ) s446) + ((uint128_t ) c330));
        t1335 = ((uint64_t ) s447);
        /* MPLessThan 64 */
        a4942 = ((P2[a4931] < t1330));
        a4943 = ((P2[a4931] == t1330));
        a4944 = ((a4943) && (b365));
        i560 = ((a4942) || (a4944));
        a4945 = (2*a4940);
        P1[a4945] = ((i560) ? (t1335) : (d372));
        a4946 = (a4945 + 1);
        P1[a4946] = ((i560) ? (t1334) : (d370));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code11(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4947, a4948, a4949, a4950, a4951, a4952, a4953, a4954, 
            a4955, a4976, a4977, a4978, a4979, a4980, a4981, a4982, 
            a4983, a4984, a4985, a4986, a4987, a4989, a4990, a4991, 
            a4993, a4994, a4995, a4996, a4997, b366, b367, b368, 
            b369, b370, b371, c339, c340, i561, i562, i563;
    uint64_t a4960, a4961, a4962, a4963, a4964, a4969, a4970, d373, 
            d374, d375, d376, d377, d378, d379, d380, d381, 
            d382, d383, d384, m34, p63, p64, t1336, t1337, 
            t1338, t1339, t1340, t1341, t1342, t1343, t1344, t1345, 
            t1346, t1347, t1348, t1349, t1350, t1351, t1352, t1353, 
            t1354, t1355, t1356, t1357, t1358, t378, t379, t382, 
            t383;
    uint128_t a4956, a4957, a4958, a4959, a4965, a4966, a4967, a4968, 
            a4971, a4972, a4973, c331, c332, c333, c334, c335, 
            c336, c337, c338, s448, s449, s450, s451, s452, 
            s453;
    for(int i19 = 0; i19 <= 8191; i19++) {
        a4947 = (64*i19);
        a4948 = (a4947 + threadIdx.x);
        b366 = (threadIdx.x + a4947);
        a4949 = (b366 + 524288);
        a4950 = (a4949 % 2048);
        a4951 = (2048 + a4950);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4952 = (2*a4951);
        a4953 = (a4952 + 1);
        a4954 = (2*a4949);
        a4955 = (a4954 + 1);
        a4956 = (((uint128_t ) twiddles[a4953])*((uint128_t ) P1[a4955]));
        a4957 = (((uint128_t ) twiddles[a4953])*((uint128_t ) P1[a4954]));
        a4958 = (((uint128_t ) twiddles[a4952])*((uint128_t ) P1[a4955]));
        a4959 = (((uint128_t ) twiddles[a4952])*((uint128_t ) P1[a4954]));
        c331 = (((uint128_t ) a4957) + ((uint128_t ) a4958));
        t1336 = (a4956 >> 64);
        c332 = (((uint128_t ) c331) + ((uint128_t ) t1336));
        t1337 = (c332 >> 64);
        c333 = (((uint128_t ) a4959) + ((uint128_t ) t1337));
        t1338 = (c333 >> 64);
        t1339 = ((uint64_t ) c333);
        t1340 = ((uint64_t ) c332);
        t1341 = ((uint64_t ) a4956);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p63 = (t1340 >> 58);
        a4960 = ((uint64_t ) 1);
        a4961 = (a4960 << 58);
        m34 = (a4961 - 1);
        p64 = (((t1338)&(m34)));
        a4962 = (p64 << 6);
        a4963 = (t1339 >> 58);
        t1342 = (((a4962)|(a4963)));
        a4964 = (t1339 << 6);
        t1343 = (((a4964)|(p63)));
        /* End of MPShiftRight3 */
        t382 = mu[0];
        t383 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4965 = (((uint128_t ) t1343)*((uint128_t ) t383));
        a4966 = (((uint128_t ) t1343)*((uint128_t ) t382));
        a4967 = (((uint128_t ) t1342)*((uint128_t ) t383));
        a4968 = (((uint128_t ) t1342)*((uint128_t ) t382));
        c334 = (((uint128_t ) a4966) + ((uint128_t ) a4967));
        t1344 = (a4965 >> 64);
        c335 = (((uint128_t ) c334) + ((uint128_t ) t1344));
        t1345 = (c335 >> 64);
        c336 = (((uint128_t ) a4968) + ((uint128_t ) t1345));
        t1346 = (c336 >> 64);
        t1347 = ((uint64_t ) c336);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1348 = (t1346 >> 1);
        a4969 = (t1346 << 63);
        a4970 = (t1347 >> 1);
        t1349 = (((a4969)|(a4970)));
        /* End of MPShiftRight2 */
        t378 = modulus[0];
        t379 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a4971 = (((uint128_t ) t1349)*((uint128_t ) t379));
        a4972 = (((uint128_t ) t1349)*((uint128_t ) t378));
        a4973 = (((uint128_t ) t1348)*((uint128_t ) t379));
        c337 = (((uint128_t ) a4972) + ((uint128_t ) a4973));
        t1350 = (a4971 >> 64);
        c338 = (((uint128_t ) c337) + ((uint128_t ) t1350));
        t1351 = ((uint64_t ) c338);
        t1352 = ((uint64_t ) a4971);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d373 = (t1341 - t1352);
        b367 = ((t1341 < t1352));
        d374 = (t1340 - t1351);
        d375 = (d374 - b367);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d376 = (d373 - t379);
        b368 = ((d373 < t379));
        d377 = (d375 - t378);
        d378 = (d377 - b368);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a4976 = ((d375 < t378));
        a4977 = ((d375 == t378));
        a4978 = ((a4977) && (b368));
        i561 = ((a4976) || (a4978));
        t1353 = ((i561) ? (d375) : (d378));
        t1354 = ((i561) ? (d373) : (d376));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a4979 = (128*i19);
        a4980 = (2*threadIdx.x);
        a4981 = (a4979 + a4980);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a4982 = (2*a4948);
        a4983 = (a4982 + 1);
        s448 = (((uint128_t ) P1[a4983]) + ((uint128_t ) t1354));
        t1355 = ((uint64_t ) s448);
        c339 = (s448 >> 64);
        s449 = (((uint128_t ) P1[a4982]) + ((uint128_t ) t1353));
        s450 = (((uint128_t ) s449) + ((uint128_t ) c339));
        t1356 = ((uint64_t ) s450);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a4984 = ((t378 < t1356));
        a4985 = ((t378 == t1356));
        a4986 = ((t379 < t1355));
        a4987 = ((a4985) && (a4986));
        i562 = ((a4984) || (a4987));
        /* Begin of MPSubDDD 64 */
        d379 = (t1355 - t379);
        b369 = ((t1355 < t379));
        d380 = (t1356 - t378);
        d381 = (d380 - b369);
        /* End of MPSubDDD 64 */
        a4989 = (2*a4981);
        P2[a4989] = ((i562) ? (d381) : (t1356));
        a4990 = (a4989 + 1);
        P2[a4990] = ((i562) ? (d379) : (t1355));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b370 = (a4980 + a4979);
        a4991 = (b370 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d382 = (P1[a4983] - t1354);
        b371 = ((P1[a4983] < t1354));
        d383 = (P1[a4982] - t1353);
        d384 = (d383 - b371);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s451 = (((uint128_t ) d382) + ((uint128_t ) t379));
        t1357 = ((uint64_t ) s451);
        c340 = (s451 >> 64);
        s452 = (((uint128_t ) d384) + ((uint128_t ) t378));
        s453 = (((uint128_t ) s452) + ((uint128_t ) c340));
        t1358 = ((uint64_t ) s453);
        /* MPLessThan 64 */
        a4993 = ((P1[a4982] < t1353));
        a4994 = ((P1[a4982] == t1353));
        a4995 = ((a4994) && (b371));
        i563 = ((a4993) || (a4995));
        a4996 = (2*a4991);
        P2[a4996] = ((i563) ? (t1358) : (d384));
        a4997 = (a4996 + 1);
        P2[a4997] = ((i563) ? (t1357) : (d382));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code12(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a4998, a4999, a5000, a5001, a5002, a5003, a5004, a5005, 
            a5006, a5027, a5028, a5029, a5030, a5031, a5032, a5033, 
            a5034, a5035, a5036, a5037, a5038, a5040, a5041, a5042, 
            a5044, a5045, a5046, a5047, a5048, b372, b373, b374, 
            b375, b376, b377, c349, c350, i564, i565, i566;
    uint64_t a5011, a5012, a5013, a5014, a5015, a5020, a5021, d385, 
            d387, d388, d389, d390, d391, d392, d393, d394, 
            d395, d396, d397, m35, p65, p66, t1359, t1360, 
            t1361, t1362, t1363, t1364, t1365, t1366, t1367, t1368, 
            t1369, t1370, t1371, t1372, t1373, t1374, t1375, t1376, 
            t1377, t1378, t1379, t1380, t1381, t314, t315, t318, 
            t319;
    uint128_t a5007, a5008, a5009, a5010, a5016, a5017, a5018, a5019, 
            a5022, a5023, a5024, c341, c342, c343, c344, c345, 
            c346, c347, c348, s454, s455, s456, s457, s458, 
            s459;
    for(int i17 = 0; i17 <= 8191; i17++) {
        a4998 = (64*i17);
        a4999 = (a4998 + threadIdx.x);
        b372 = (threadIdx.x + a4998);
        a5000 = (b372 + 524288);
        a5001 = (a5000 % 4096);
        a5002 = (4096 + a5001);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5003 = (2*a5002);
        a5004 = (a5003 + 1);
        a5005 = (2*a5000);
        a5006 = (a5005 + 1);
        a5007 = (((uint128_t ) twiddles[a5004])*((uint128_t ) P2[a5006]));
        a5008 = (((uint128_t ) twiddles[a5004])*((uint128_t ) P2[a5005]));
        a5009 = (((uint128_t ) twiddles[a5003])*((uint128_t ) P2[a5006]));
        a5010 = (((uint128_t ) twiddles[a5003])*((uint128_t ) P2[a5005]));
        c341 = (((uint128_t ) a5008) + ((uint128_t ) a5009));
        t1359 = (a5007 >> 64);
        c342 = (((uint128_t ) c341) + ((uint128_t ) t1359));
        t1360 = (c342 >> 64);
        c343 = (((uint128_t ) a5010) + ((uint128_t ) t1360));
        t1361 = (c343 >> 64);
        t1362 = ((uint64_t ) c343);
        t1363 = ((uint64_t ) c342);
        t1364 = ((uint64_t ) a5007);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p65 = (t1363 >> 58);
        a5011 = ((uint64_t ) 1);
        a5012 = (a5011 << 58);
        m35 = (a5012 - 1);
        p66 = (((t1361)&(m35)));
        a5013 = (p66 << 6);
        a5014 = (t1362 >> 58);
        t1365 = (((a5013)|(a5014)));
        a5015 = (t1362 << 6);
        t1366 = (((a5015)|(p65)));
        /* End of MPShiftRight3 */
        t318 = mu[0];
        t319 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5016 = (((uint128_t ) t1366)*((uint128_t ) t319));
        a5017 = (((uint128_t ) t1366)*((uint128_t ) t318));
        a5018 = (((uint128_t ) t1365)*((uint128_t ) t319));
        a5019 = (((uint128_t ) t1365)*((uint128_t ) t318));
        c344 = (((uint128_t ) a5017) + ((uint128_t ) a5018));
        t1367 = (a5016 >> 64);
        c345 = (((uint128_t ) c344) + ((uint128_t ) t1367));
        t1368 = (c345 >> 64);
        c346 = (((uint128_t ) a5019) + ((uint128_t ) t1368));
        t1369 = (c346 >> 64);
        t1370 = ((uint64_t ) c346);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1371 = (t1369 >> 1);
        a5020 = (t1369 << 63);
        a5021 = (t1370 >> 1);
        t1372 = (((a5020)|(a5021)));
        /* End of MPShiftRight2 */
        t314 = modulus[0];
        t315 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5022 = (((uint128_t ) t1372)*((uint128_t ) t315));
        a5023 = (((uint128_t ) t1372)*((uint128_t ) t314));
        a5024 = (((uint128_t ) t1371)*((uint128_t ) t315));
        c347 = (((uint128_t ) a5023) + ((uint128_t ) a5024));
        t1373 = (a5022 >> 64);
        c348 = (((uint128_t ) c347) + ((uint128_t ) t1373));
        t1374 = ((uint64_t ) c348);
        t1375 = ((uint64_t ) a5022);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d385 = (t1364 - t1375);
        b373 = ((t1364 < t1375));
        d387 = (t1363 - t1374);
        d388 = (d387 - b373);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d389 = (d385 - t315);
        b374 = ((d385 < t315));
        d390 = (d388 - t314);
        d391 = (d390 - b374);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5027 = ((d388 < t314));
        a5028 = ((d388 == t314));
        a5029 = ((a5028) && (b374));
        i564 = ((a5027) || (a5029));
        t1376 = ((i564) ? (d388) : (d391));
        t1377 = ((i564) ? (d385) : (d389));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5030 = (128*i17);
        a5031 = (2*threadIdx.x);
        a5032 = (a5030 + a5031);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5033 = (2*a4999);
        a5034 = (a5033 + 1);
        s454 = (((uint128_t ) P2[a5034]) + ((uint128_t ) t1377));
        t1378 = ((uint64_t ) s454);
        c349 = (s454 >> 64);
        s455 = (((uint128_t ) P2[a5033]) + ((uint128_t ) t1376));
        s456 = (((uint128_t ) s455) + ((uint128_t ) c349));
        t1379 = ((uint64_t ) s456);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5035 = ((t314 < t1379));
        a5036 = ((t314 == t1379));
        a5037 = ((t315 < t1378));
        a5038 = ((a5036) && (a5037));
        i565 = ((a5035) || (a5038));
        /* Begin of MPSubDDD 64 */
        d392 = (t1378 - t315);
        b375 = ((t1378 < t315));
        d393 = (t1379 - t314);
        d394 = (d393 - b375);
        /* End of MPSubDDD 64 */
        a5040 = (2*a5032);
        P1[a5040] = ((i565) ? (d394) : (t1379));
        a5041 = (a5040 + 1);
        P1[a5041] = ((i565) ? (d392) : (t1378));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b376 = (a5031 + a5030);
        a5042 = (b376 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d395 = (P2[a5034] - t1377);
        b377 = ((P2[a5034] < t1377));
        d396 = (P2[a5033] - t1376);
        d397 = (d396 - b377);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s457 = (((uint128_t ) d395) + ((uint128_t ) t315));
        t1380 = ((uint64_t ) s457);
        c350 = (s457 >> 64);
        s458 = (((uint128_t ) d397) + ((uint128_t ) t314));
        s459 = (((uint128_t ) s458) + ((uint128_t ) c350));
        t1381 = ((uint64_t ) s459);
        /* MPLessThan 64 */
        a5044 = ((P2[a5033] < t1376));
        a5045 = ((P2[a5033] == t1376));
        a5046 = ((a5045) && (b377));
        i566 = ((a5044) || (a5046));
        a5047 = (2*a5042);
        P1[a5047] = ((i566) ? (t1381) : (d397));
        a5048 = (a5047 + 1);
        P1[a5048] = ((i566) ? (t1380) : (d395));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code13(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5049, a5050, a5051, a5052, a5053, a5054, a5055, a5056, 
            a5057, a5078, a5079, a5080, a5081, a5082, a5083, a5084, 
            a5085, a5086, a5087, a5088, a5089, a5091, a5092, a5093, 
            a5095, a5096, a5097, a5098, a5099, b378, b379, b380, 
            b381, b382, b383, c359, c360, i567, i568, i569;
    uint64_t a5062, a5063, a5064, a5065, a5066, a5071, a5072, d398, 
            d399, d400, d401, d402, d403, d404, d405, d406, 
            d407, d408, d409, m36, p67, p68, t1382, t1383, 
            t1384, t1385, t1386, t1387, t1388, t1389, t1390, t1391, 
            t1392, t1393, t1394, t1395, t1396, t1397, t1398, t1399, 
            t1400, t1401, t1402, t1403, t1404, t250, t251, t254, 
            t255;
    uint128_t a5058, a5059, a5060, a5061, a5067, a5068, a5069, a5070, 
            a5073, a5074, a5075, c351, c352, c353, c354, c355, 
            c356, c357, c358, s460, s461, s462, s463, s464, 
            s465;
    for(int i15 = 0; i15 <= 8191; i15++) {
        a5049 = (64*i15);
        a5050 = (a5049 + threadIdx.x);
        b378 = (threadIdx.x + a5049);
        a5051 = (b378 + 524288);
        a5052 = (a5051 % 8192);
        a5053 = (8192 + a5052);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5054 = (2*a5053);
        a5055 = (a5054 + 1);
        a5056 = (2*a5051);
        a5057 = (a5056 + 1);
        a5058 = (((uint128_t ) twiddles[a5055])*((uint128_t ) P1[a5057]));
        a5059 = (((uint128_t ) twiddles[a5055])*((uint128_t ) P1[a5056]));
        a5060 = (((uint128_t ) twiddles[a5054])*((uint128_t ) P1[a5057]));
        a5061 = (((uint128_t ) twiddles[a5054])*((uint128_t ) P1[a5056]));
        c351 = (((uint128_t ) a5059) + ((uint128_t ) a5060));
        t1382 = (a5058 >> 64);
        c352 = (((uint128_t ) c351) + ((uint128_t ) t1382));
        t1383 = (c352 >> 64);
        c353 = (((uint128_t ) a5061) + ((uint128_t ) t1383));
        t1384 = (c353 >> 64);
        t1385 = ((uint64_t ) c353);
        t1386 = ((uint64_t ) c352);
        t1387 = ((uint64_t ) a5058);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p67 = (t1386 >> 58);
        a5062 = ((uint64_t ) 1);
        a5063 = (a5062 << 58);
        m36 = (a5063 - 1);
        p68 = (((t1384)&(m36)));
        a5064 = (p68 << 6);
        a5065 = (t1385 >> 58);
        t1388 = (((a5064)|(a5065)));
        a5066 = (t1385 << 6);
        t1389 = (((a5066)|(p67)));
        /* End of MPShiftRight3 */
        t254 = mu[0];
        t255 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5067 = (((uint128_t ) t1389)*((uint128_t ) t255));
        a5068 = (((uint128_t ) t1389)*((uint128_t ) t254));
        a5069 = (((uint128_t ) t1388)*((uint128_t ) t255));
        a5070 = (((uint128_t ) t1388)*((uint128_t ) t254));
        c354 = (((uint128_t ) a5068) + ((uint128_t ) a5069));
        t1390 = (a5067 >> 64);
        c355 = (((uint128_t ) c354) + ((uint128_t ) t1390));
        t1391 = (c355 >> 64);
        c356 = (((uint128_t ) a5070) + ((uint128_t ) t1391));
        t1392 = (c356 >> 64);
        t1393 = ((uint64_t ) c356);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1394 = (t1392 >> 1);
        a5071 = (t1392 << 63);
        a5072 = (t1393 >> 1);
        t1395 = (((a5071)|(a5072)));
        /* End of MPShiftRight2 */
        t250 = modulus[0];
        t251 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5073 = (((uint128_t ) t1395)*((uint128_t ) t251));
        a5074 = (((uint128_t ) t1395)*((uint128_t ) t250));
        a5075 = (((uint128_t ) t1394)*((uint128_t ) t251));
        c357 = (((uint128_t ) a5074) + ((uint128_t ) a5075));
        t1396 = (a5073 >> 64);
        c358 = (((uint128_t ) c357) + ((uint128_t ) t1396));
        t1397 = ((uint64_t ) c358);
        t1398 = ((uint64_t ) a5073);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d398 = (t1387 - t1398);
        b379 = ((t1387 < t1398));
        d399 = (t1386 - t1397);
        d400 = (d399 - b379);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d401 = (d398 - t251);
        b380 = ((d398 < t251));
        d402 = (d400 - t250);
        d403 = (d402 - b380);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5078 = ((d400 < t250));
        a5079 = ((d400 == t250));
        a5080 = ((a5079) && (b380));
        i567 = ((a5078) || (a5080));
        t1399 = ((i567) ? (d400) : (d403));
        t1400 = ((i567) ? (d398) : (d401));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5081 = (128*i15);
        a5082 = (2*threadIdx.x);
        a5083 = (a5081 + a5082);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5084 = (2*a5050);
        a5085 = (a5084 + 1);
        s460 = (((uint128_t ) P1[a5085]) + ((uint128_t ) t1400));
        t1401 = ((uint64_t ) s460);
        c359 = (s460 >> 64);
        s461 = (((uint128_t ) P1[a5084]) + ((uint128_t ) t1399));
        s462 = (((uint128_t ) s461) + ((uint128_t ) c359));
        t1402 = ((uint64_t ) s462);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5086 = ((t250 < t1402));
        a5087 = ((t250 == t1402));
        a5088 = ((t251 < t1401));
        a5089 = ((a5087) && (a5088));
        i568 = ((a5086) || (a5089));
        /* Begin of MPSubDDD 64 */
        d404 = (t1401 - t251);
        b381 = ((t1401 < t251));
        d405 = (t1402 - t250);
        d406 = (d405 - b381);
        /* End of MPSubDDD 64 */
        a5091 = (2*a5083);
        P2[a5091] = ((i568) ? (d406) : (t1402));
        a5092 = (a5091 + 1);
        P2[a5092] = ((i568) ? (d404) : (t1401));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b382 = (a5082 + a5081);
        a5093 = (b382 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d407 = (P1[a5085] - t1400);
        b383 = ((P1[a5085] < t1400));
        d408 = (P1[a5084] - t1399);
        d409 = (d408 - b383);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s463 = (((uint128_t ) d407) + ((uint128_t ) t251));
        t1403 = ((uint64_t ) s463);
        c360 = (s463 >> 64);
        s464 = (((uint128_t ) d409) + ((uint128_t ) t250));
        s465 = (((uint128_t ) s464) + ((uint128_t ) c360));
        t1404 = ((uint64_t ) s465);
        /* MPLessThan 64 */
        a5095 = ((P1[a5084] < t1399));
        a5096 = ((P1[a5084] == t1399));
        a5097 = ((a5096) && (b383));
        i569 = ((a5095) || (a5097));
        a5098 = (2*a5093);
        P2[a5098] = ((i569) ? (t1404) : (d409));
        a5099 = (a5098 + 1);
        P2[a5099] = ((i569) ? (t1403) : (d407));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code14(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5100, a5101, a5102, a5103, a5104, a5105, a5106, a5107, 
            a5108, a5129, a5130, a5131, a5132, a5133, a5134, a5135, 
            a5136, a5137, a5138, a5139, a5140, a5142, a5143, a5144, 
            a5146, a5147, a5148, a5149, a5150, b384, b385, b387, 
            b388, b389, b390, c369, c370, i570, i571, i572;
    uint64_t a5113, a5114, a5115, a5116, a5117, a5122, a5123, d410, 
            d411, d412, d413, d414, d415, d416, d417, d418, 
            d419, d420, d421, m37, p69, p70, t1405, t1406, 
            t1407, t1408, t1409, t1410, t1411, t1412, t1413, t1414, 
            t1415, t1416, t1417, t1418, t1419, t1420, t1421, t1422, 
            t1423, t1424, t1425, t1426, t1427, t292, t293, t296, 
            t297;
    uint128_t a5109, a5110, a5111, a5112, a5118, a5119, a5120, a5121, 
            a5124, a5125, a5126, c361, c362, c363, c364, c365, 
            c366, c367, c368, s466, s467, s468, s469, s470, 
            s471;
    for(int i13 = 0; i13 <= 8191; i13++) {
        a5100 = (64*i13);
        a5101 = (a5100 + threadIdx.x);
        b384 = (threadIdx.x + a5100);
        a5102 = (b384 + 524288);
        a5103 = (a5102 % 16384);
        a5104 = (16384 + a5103);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5105 = (2*a5104);
        a5106 = (a5105 + 1);
        a5107 = (2*a5102);
        a5108 = (a5107 + 1);
        a5109 = (((uint128_t ) twiddles[a5106])*((uint128_t ) P2[a5108]));
        a5110 = (((uint128_t ) twiddles[a5106])*((uint128_t ) P2[a5107]));
        a5111 = (((uint128_t ) twiddles[a5105])*((uint128_t ) P2[a5108]));
        a5112 = (((uint128_t ) twiddles[a5105])*((uint128_t ) P2[a5107]));
        c361 = (((uint128_t ) a5110) + ((uint128_t ) a5111));
        t1405 = (a5109 >> 64);
        c362 = (((uint128_t ) c361) + ((uint128_t ) t1405));
        t1406 = (c362 >> 64);
        c363 = (((uint128_t ) a5112) + ((uint128_t ) t1406));
        t1407 = (c363 >> 64);
        t1408 = ((uint64_t ) c363);
        t1409 = ((uint64_t ) c362);
        t1410 = ((uint64_t ) a5109);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p69 = (t1409 >> 58);
        a5113 = ((uint64_t ) 1);
        a5114 = (a5113 << 58);
        m37 = (a5114 - 1);
        p70 = (((t1407)&(m37)));
        a5115 = (p70 << 6);
        a5116 = (t1408 >> 58);
        t1411 = (((a5115)|(a5116)));
        a5117 = (t1408 << 6);
        t1412 = (((a5117)|(p69)));
        /* End of MPShiftRight3 */
        t292 = mu[0];
        t293 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5118 = (((uint128_t ) t1412)*((uint128_t ) t293));
        a5119 = (((uint128_t ) t1412)*((uint128_t ) t292));
        a5120 = (((uint128_t ) t1411)*((uint128_t ) t293));
        a5121 = (((uint128_t ) t1411)*((uint128_t ) t292));
        c364 = (((uint128_t ) a5119) + ((uint128_t ) a5120));
        t1413 = (a5118 >> 64);
        c365 = (((uint128_t ) c364) + ((uint128_t ) t1413));
        t1414 = (c365 >> 64);
        c366 = (((uint128_t ) a5121) + ((uint128_t ) t1414));
        t1415 = (c366 >> 64);
        t1416 = ((uint64_t ) c366);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1417 = (t1415 >> 1);
        a5122 = (t1415 << 63);
        a5123 = (t1416 >> 1);
        t1418 = (((a5122)|(a5123)));
        /* End of MPShiftRight2 */
        t296 = modulus[0];
        t297 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5124 = (((uint128_t ) t1418)*((uint128_t ) t297));
        a5125 = (((uint128_t ) t1418)*((uint128_t ) t296));
        a5126 = (((uint128_t ) t1417)*((uint128_t ) t297));
        c367 = (((uint128_t ) a5125) + ((uint128_t ) a5126));
        t1419 = (a5124 >> 64);
        c368 = (((uint128_t ) c367) + ((uint128_t ) t1419));
        t1420 = ((uint64_t ) c368);
        t1421 = ((uint64_t ) a5124);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d410 = (t1410 - t1421);
        b385 = ((t1410 < t1421));
        d411 = (t1409 - t1420);
        d412 = (d411 - b385);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d413 = (d410 - t297);
        b387 = ((d410 < t297));
        d414 = (d412 - t296);
        d415 = (d414 - b387);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5129 = ((d412 < t296));
        a5130 = ((d412 == t296));
        a5131 = ((a5130) && (b387));
        i570 = ((a5129) || (a5131));
        t1422 = ((i570) ? (d412) : (d415));
        t1423 = ((i570) ? (d410) : (d413));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5132 = (128*i13);
        a5133 = (2*threadIdx.x);
        a5134 = (a5132 + a5133);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5135 = (2*a5101);
        a5136 = (a5135 + 1);
        s466 = (((uint128_t ) P2[a5136]) + ((uint128_t ) t1423));
        t1424 = ((uint64_t ) s466);
        c369 = (s466 >> 64);
        s467 = (((uint128_t ) P2[a5135]) + ((uint128_t ) t1422));
        s468 = (((uint128_t ) s467) + ((uint128_t ) c369));
        t1425 = ((uint64_t ) s468);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5137 = ((t296 < t1425));
        a5138 = ((t296 == t1425));
        a5139 = ((t297 < t1424));
        a5140 = ((a5138) && (a5139));
        i571 = ((a5137) || (a5140));
        /* Begin of MPSubDDD 64 */
        d416 = (t1424 - t297);
        b388 = ((t1424 < t297));
        d417 = (t1425 - t296);
        d418 = (d417 - b388);
        /* End of MPSubDDD 64 */
        a5142 = (2*a5134);
        P1[a5142] = ((i571) ? (d418) : (t1425));
        a5143 = (a5142 + 1);
        P1[a5143] = ((i571) ? (d416) : (t1424));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b389 = (a5133 + a5132);
        a5144 = (b389 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d419 = (P2[a5136] - t1423);
        b390 = ((P2[a5136] < t1423));
        d420 = (P2[a5135] - t1422);
        d421 = (d420 - b390);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s469 = (((uint128_t ) d419) + ((uint128_t ) t297));
        t1426 = ((uint64_t ) s469);
        c370 = (s469 >> 64);
        s470 = (((uint128_t ) d421) + ((uint128_t ) t296));
        s471 = (((uint128_t ) s470) + ((uint128_t ) c370));
        t1427 = ((uint64_t ) s471);
        /* MPLessThan 64 */
        a5146 = ((P2[a5135] < t1422));
        a5147 = ((P2[a5135] == t1422));
        a5148 = ((a5147) && (b390));
        i572 = ((a5146) || (a5148));
        a5149 = (2*a5144);
        P1[a5149] = ((i572) ? (t1427) : (d421));
        a5150 = (a5149 + 1);
        P1[a5150] = ((i572) ? (t1426) : (d419));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code15(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5151, a5152, a5153, a5154, a5155, a5156, a5157, a5158, 
            a5159, a5180, a5181, a5182, a5183, a5184, a5185, a5186, 
            a5187, a5188, a5189, a5190, a5191, a5193, a5194, a5195, 
            a5197, a5198, a5199, a5200, a5201, b391, b392, b393, 
            b394, b395, b396, c379, c380, i573, i574, i575;
    uint64_t a5164, a5165, a5166, a5167, a5168, a5173, a5174, d422, 
            d423, d424, d425, d426, d427, d428, d429, d430, 
            d431, d432, d433, m38, p71, p72, t1428, t1429, 
            t1430, t1431, t1432, t1433, t1434, t1435, t1436, t1437, 
            t1438, t1439, t1440, t1441, t1442, t1443, t1444, t1445, 
            t1446, t1447, t1448, t1449, t1450, t356, t357, t360, 
            t361;
    uint128_t a5160, a5161, a5162, a5163, a5169, a5170, a5171, a5172, 
            a5175, a5176, a5177, c371, c372, c373, c374, c375, 
            c376, c377, c378, s472, s473, s474, s475, s476, 
            s477;
    for(int i11 = 0; i11 <= 8191; i11++) {
        a5151 = (64*i11);
        a5152 = (a5151 + threadIdx.x);
        b391 = (threadIdx.x + a5151);
        a5153 = (b391 + 524288);
        a5154 = (a5153 % 32768);
        a5155 = (32768 + a5154);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5156 = (2*a5155);
        a5157 = (a5156 + 1);
        a5158 = (2*a5153);
        a5159 = (a5158 + 1);
        a5160 = (((uint128_t ) twiddles[a5157])*((uint128_t ) P1[a5159]));
        a5161 = (((uint128_t ) twiddles[a5157])*((uint128_t ) P1[a5158]));
        a5162 = (((uint128_t ) twiddles[a5156])*((uint128_t ) P1[a5159]));
        a5163 = (((uint128_t ) twiddles[a5156])*((uint128_t ) P1[a5158]));
        c371 = (((uint128_t ) a5161) + ((uint128_t ) a5162));
        t1428 = (a5160 >> 64);
        c372 = (((uint128_t ) c371) + ((uint128_t ) t1428));
        t1429 = (c372 >> 64);
        c373 = (((uint128_t ) a5163) + ((uint128_t ) t1429));
        t1430 = (c373 >> 64);
        t1431 = ((uint64_t ) c373);
        t1432 = ((uint64_t ) c372);
        t1433 = ((uint64_t ) a5160);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p71 = (t1432 >> 58);
        a5164 = ((uint64_t ) 1);
        a5165 = (a5164 << 58);
        m38 = (a5165 - 1);
        p72 = (((t1430)&(m38)));
        a5166 = (p72 << 6);
        a5167 = (t1431 >> 58);
        t1434 = (((a5166)|(a5167)));
        a5168 = (t1431 << 6);
        t1435 = (((a5168)|(p71)));
        /* End of MPShiftRight3 */
        t356 = mu[0];
        t357 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5169 = (((uint128_t ) t1435)*((uint128_t ) t357));
        a5170 = (((uint128_t ) t1435)*((uint128_t ) t356));
        a5171 = (((uint128_t ) t1434)*((uint128_t ) t357));
        a5172 = (((uint128_t ) t1434)*((uint128_t ) t356));
        c374 = (((uint128_t ) a5170) + ((uint128_t ) a5171));
        t1436 = (a5169 >> 64);
        c375 = (((uint128_t ) c374) + ((uint128_t ) t1436));
        t1437 = (c375 >> 64);
        c376 = (((uint128_t ) a5172) + ((uint128_t ) t1437));
        t1438 = (c376 >> 64);
        t1439 = ((uint64_t ) c376);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1440 = (t1438 >> 1);
        a5173 = (t1438 << 63);
        a5174 = (t1439 >> 1);
        t1441 = (((a5173)|(a5174)));
        /* End of MPShiftRight2 */
        t360 = modulus[0];
        t361 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5175 = (((uint128_t ) t1441)*((uint128_t ) t361));
        a5176 = (((uint128_t ) t1441)*((uint128_t ) t360));
        a5177 = (((uint128_t ) t1440)*((uint128_t ) t361));
        c377 = (((uint128_t ) a5176) + ((uint128_t ) a5177));
        t1442 = (a5175 >> 64);
        c378 = (((uint128_t ) c377) + ((uint128_t ) t1442));
        t1443 = ((uint64_t ) c378);
        t1444 = ((uint64_t ) a5175);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d422 = (t1433 - t1444);
        b392 = ((t1433 < t1444));
        d423 = (t1432 - t1443);
        d424 = (d423 - b392);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d425 = (d422 - t361);
        b393 = ((d422 < t361));
        d426 = (d424 - t360);
        d427 = (d426 - b393);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5180 = ((d424 < t360));
        a5181 = ((d424 == t360));
        a5182 = ((a5181) && (b393));
        i573 = ((a5180) || (a5182));
        t1445 = ((i573) ? (d424) : (d427));
        t1446 = ((i573) ? (d422) : (d425));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5183 = (128*i11);
        a5184 = (2*threadIdx.x);
        a5185 = (a5183 + a5184);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5186 = (2*a5152);
        a5187 = (a5186 + 1);
        s472 = (((uint128_t ) P1[a5187]) + ((uint128_t ) t1446));
        t1447 = ((uint64_t ) s472);
        c379 = (s472 >> 64);
        s473 = (((uint128_t ) P1[a5186]) + ((uint128_t ) t1445));
        s474 = (((uint128_t ) s473) + ((uint128_t ) c379));
        t1448 = ((uint64_t ) s474);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5188 = ((t360 < t1448));
        a5189 = ((t360 == t1448));
        a5190 = ((t361 < t1447));
        a5191 = ((a5189) && (a5190));
        i574 = ((a5188) || (a5191));
        /* Begin of MPSubDDD 64 */
        d428 = (t1447 - t361);
        b394 = ((t1447 < t361));
        d429 = (t1448 - t360);
        d430 = (d429 - b394);
        /* End of MPSubDDD 64 */
        a5193 = (2*a5185);
        P2[a5193] = ((i574) ? (d430) : (t1448));
        a5194 = (a5193 + 1);
        P2[a5194] = ((i574) ? (d428) : (t1447));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b395 = (a5184 + a5183);
        a5195 = (b395 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d431 = (P1[a5187] - t1446);
        b396 = ((P1[a5187] < t1446));
        d432 = (P1[a5186] - t1445);
        d433 = (d432 - b396);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s475 = (((uint128_t ) d431) + ((uint128_t ) t361));
        t1449 = ((uint64_t ) s475);
        c380 = (s475 >> 64);
        s476 = (((uint128_t ) d433) + ((uint128_t ) t360));
        s477 = (((uint128_t ) s476) + ((uint128_t ) c380));
        t1450 = ((uint64_t ) s477);
        /* MPLessThan 64 */
        a5197 = ((P1[a5186] < t1445));
        a5198 = ((P1[a5186] == t1445));
        a5199 = ((a5198) && (b396));
        i575 = ((a5197) || (a5199));
        a5200 = (2*a5195);
        P2[a5200] = ((i575) ? (t1450) : (d433));
        a5201 = (a5200 + 1);
        P2[a5201] = ((i575) ? (t1449) : (d431));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code16(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5202, a5203, a5204, a5205, a5206, a5207, a5208, a5209, 
            a5210, a5231, a5232, a5233, a5234, a5235, a5236, a5237, 
            a5238, a5239, a5240, a5241, a5242, a5244, a5245, a5246, 
            a5248, a5249, a5250, a5251, a5252, b397, b398, b399, 
            b400, c390, c391, i576, i577, i578;
    uint64_t a5215, a5216, a5217, a5218, a5219, a5224, a5225, d434, 
            d435, d436, d437, d438, d439, d440, d441, d442, 
            d443, d444, d445, m39, p73, p74, t1451, t1452, 
            t1453, t1454, t1455, t1456, t1457, t1458, t1459, t1460, 
            t1461, t1462, t1463, t1464, t1465, t1466, t1467, t1468, 
            t1469, t1470, t1471, t1472, t1473, t421, t422, t425, 
            t426;
    uint128_t a5211, a5212, a5213, a5214, a5220, a5221, a5222, a5223, 
            a5226, a5227, a5228, c381, c382, c383, c384, c385, 
            c387, c388, c389, s478, s479, s480, s481, s482, 
            s483;
    for(int i9 = 0; i9 <= 8191; i9++) {
        a5202 = (64*i9);
        a5203 = (threadIdx.x + a5202);
        a5204 = (a5203 + 524288);
        a5205 = (a5204 % 65536);
        a5206 = (65536 + a5205);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5207 = (2*a5206);
        a5208 = (a5207 + 1);
        a5209 = (2*a5204);
        a5210 = (a5209 + 1);
        a5211 = (((uint128_t ) twiddles[a5208])*((uint128_t ) P2[a5210]));
        a5212 = (((uint128_t ) twiddles[a5208])*((uint128_t ) P2[a5209]));
        a5213 = (((uint128_t ) twiddles[a5207])*((uint128_t ) P2[a5210]));
        a5214 = (((uint128_t ) twiddles[a5207])*((uint128_t ) P2[a5209]));
        c381 = (((uint128_t ) a5212) + ((uint128_t ) a5213));
        t1451 = (a5211 >> 64);
        c382 = (((uint128_t ) c381) + ((uint128_t ) t1451));
        t1452 = (c382 >> 64);
        c383 = (((uint128_t ) a5214) + ((uint128_t ) t1452));
        t1453 = (c383 >> 64);
        t1454 = ((uint64_t ) c383);
        t1455 = ((uint64_t ) c382);
        t1456 = ((uint64_t ) a5211);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p73 = (t1455 >> 58);
        a5215 = ((uint64_t ) 1);
        a5216 = (a5215 << 58);
        m39 = (a5216 - 1);
        p74 = (((t1453)&(m39)));
        a5217 = (p74 << 6);
        a5218 = (t1454 >> 58);
        t1457 = (((a5217)|(a5218)));
        a5219 = (t1454 << 6);
        t1458 = (((a5219)|(p73)));
        /* End of MPShiftRight3 */
        t421 = mu[0];
        t422 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5220 = (((uint128_t ) t1458)*((uint128_t ) t422));
        a5221 = (((uint128_t ) t1458)*((uint128_t ) t421));
        a5222 = (((uint128_t ) t1457)*((uint128_t ) t422));
        a5223 = (((uint128_t ) t1457)*((uint128_t ) t421));
        c384 = (((uint128_t ) a5221) + ((uint128_t ) a5222));
        t1459 = (a5220 >> 64);
        c385 = (((uint128_t ) c384) + ((uint128_t ) t1459));
        t1460 = (c385 >> 64);
        c387 = (((uint128_t ) a5223) + ((uint128_t ) t1460));
        t1461 = (c387 >> 64);
        t1462 = ((uint64_t ) c387);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1463 = (t1461 >> 1);
        a5224 = (t1461 << 63);
        a5225 = (t1462 >> 1);
        t1464 = (((a5224)|(a5225)));
        /* End of MPShiftRight2 */
        t425 = modulus[0];
        t426 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5226 = (((uint128_t ) t1464)*((uint128_t ) t426));
        a5227 = (((uint128_t ) t1464)*((uint128_t ) t425));
        a5228 = (((uint128_t ) t1463)*((uint128_t ) t426));
        c388 = (((uint128_t ) a5227) + ((uint128_t ) a5228));
        t1465 = (a5226 >> 64);
        c389 = (((uint128_t ) c388) + ((uint128_t ) t1465));
        t1466 = ((uint64_t ) c389);
        t1467 = ((uint64_t ) a5226);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d434 = (t1456 - t1467);
        b397 = ((t1456 < t1467));
        d435 = (t1455 - t1466);
        d436 = (d435 - b397);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d437 = (d434 - t426);
        b398 = ((d434 < t426));
        d438 = (d436 - t425);
        d439 = (d438 - b398);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5231 = ((d436 < t425));
        a5232 = ((d436 == t425));
        a5233 = ((a5232) && (b398));
        i576 = ((a5231) || (a5233));
        t1468 = ((i576) ? (d436) : (d439));
        t1469 = ((i576) ? (d434) : (d437));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5234 = (2*threadIdx.x);
        a5235 = (128*i9);
        a5236 = (a5234 + a5235);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5237 = (2*a5203);
        a5238 = (a5237 + 1);
        s478 = (((uint128_t ) P2[a5238]) + ((uint128_t ) t1469));
        t1470 = ((uint64_t ) s478);
        c390 = (s478 >> 64);
        s479 = (((uint128_t ) P2[a5237]) + ((uint128_t ) t1468));
        s480 = (((uint128_t ) s479) + ((uint128_t ) c390));
        t1471 = ((uint64_t ) s480);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5239 = ((t425 < t1471));
        a5240 = ((t425 == t1471));
        a5241 = ((t426 < t1470));
        a5242 = ((a5240) && (a5241));
        i577 = ((a5239) || (a5242));
        /* Begin of MPSubDDD 64 */
        d440 = (t1470 - t426);
        b399 = ((t1470 < t426));
        d441 = (t1471 - t425);
        d442 = (d441 - b399);
        /* End of MPSubDDD 64 */
        a5244 = (2*a5236);
        P1[a5244] = ((i577) ? (d442) : (t1471));
        a5245 = (a5244 + 1);
        P1[a5245] = ((i577) ? (d440) : (t1470));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a5246 = (a5236 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d443 = (P2[a5238] - t1469);
        b400 = ((P2[a5238] < t1469));
        d444 = (P2[a5237] - t1468);
        d445 = (d444 - b400);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s481 = (((uint128_t ) d443) + ((uint128_t ) t426));
        t1472 = ((uint64_t ) s481);
        c391 = (s481 >> 64);
        s482 = (((uint128_t ) d445) + ((uint128_t ) t425));
        s483 = (((uint128_t ) s482) + ((uint128_t ) c391));
        t1473 = ((uint64_t ) s483);
        /* MPLessThan 64 */
        a5248 = ((P2[a5237] < t1468));
        a5249 = ((P2[a5237] == t1468));
        a5250 = ((a5249) && (b400));
        i578 = ((a5248) || (a5250));
        a5251 = (2*a5246);
        P1[a5251] = ((i578) ? (t1473) : (d445));
        a5252 = (a5251 + 1);
        P1[a5252] = ((i578) ? (t1472) : (d443));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code17(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5253, a5254, a5255, a5256, a5257, a5258, a5259, a5260, 
            a5261, a5282, a5283, a5284, a5285, a5286, a5287, a5288, 
            a5289, a5290, a5291, a5292, a5293, a5295, a5296, a5297, 
            a5299, a5300, a5301, a5302, a5303, b401, b402, b403, 
            b404, c400, c401, i579, i580, i581;
    uint64_t a5266, a5267, a5268, a5269, a5270, a5275, a5276, d446, 
            d447, d448, d449, d450, d451, d452, d453, d454, 
            d455, d456, d457, m40, p75, p76, t1474, t1475, 
            t1476, t1477, t1478, t1479, t1480, t1481, t1482, t1483, 
            t1484, t1485, t1486, t1487, t1488, t1489, t1490, t1491, 
            t1492, t1493, t1494, t1495, t1496, t485, t486, t489, 
            t490;
    uint128_t a5262, a5263, a5264, a5265, a5271, a5272, a5273, a5274, 
            a5277, a5278, a5279, c392, c393, c394, c395, c396, 
            c397, c398, c399, s484, s485, s486, s487, s488, 
            s489;
    for(int i7 = 0; i7 <= 8191; i7++) {
        a5253 = (64*i7);
        a5254 = (threadIdx.x + a5253);
        a5255 = (a5254 + 524288);
        a5256 = (a5255 % 131072);
        a5257 = (131072 + a5256);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5258 = (2*a5257);
        a5259 = (a5258 + 1);
        a5260 = (2*a5255);
        a5261 = (a5260 + 1);
        a5262 = (((uint128_t ) twiddles[a5259])*((uint128_t ) P1[a5261]));
        a5263 = (((uint128_t ) twiddles[a5259])*((uint128_t ) P1[a5260]));
        a5264 = (((uint128_t ) twiddles[a5258])*((uint128_t ) P1[a5261]));
        a5265 = (((uint128_t ) twiddles[a5258])*((uint128_t ) P1[a5260]));
        c392 = (((uint128_t ) a5263) + ((uint128_t ) a5264));
        t1474 = (a5262 >> 64);
        c393 = (((uint128_t ) c392) + ((uint128_t ) t1474));
        t1475 = (c393 >> 64);
        c394 = (((uint128_t ) a5265) + ((uint128_t ) t1475));
        t1476 = (c394 >> 64);
        t1477 = ((uint64_t ) c394);
        t1478 = ((uint64_t ) c393);
        t1479 = ((uint64_t ) a5262);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p75 = (t1478 >> 58);
        a5266 = ((uint64_t ) 1);
        a5267 = (a5266 << 58);
        m40 = (a5267 - 1);
        p76 = (((t1476)&(m40)));
        a5268 = (p76 << 6);
        a5269 = (t1477 >> 58);
        t1480 = (((a5268)|(a5269)));
        a5270 = (t1477 << 6);
        t1481 = (((a5270)|(p75)));
        /* End of MPShiftRight3 */
        t485 = mu[0];
        t486 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5271 = (((uint128_t ) t1481)*((uint128_t ) t486));
        a5272 = (((uint128_t ) t1481)*((uint128_t ) t485));
        a5273 = (((uint128_t ) t1480)*((uint128_t ) t486));
        a5274 = (((uint128_t ) t1480)*((uint128_t ) t485));
        c395 = (((uint128_t ) a5272) + ((uint128_t ) a5273));
        t1482 = (a5271 >> 64);
        c396 = (((uint128_t ) c395) + ((uint128_t ) t1482));
        t1483 = (c396 >> 64);
        c397 = (((uint128_t ) a5274) + ((uint128_t ) t1483));
        t1484 = (c397 >> 64);
        t1485 = ((uint64_t ) c397);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1486 = (t1484 >> 1);
        a5275 = (t1484 << 63);
        a5276 = (t1485 >> 1);
        t1487 = (((a5275)|(a5276)));
        /* End of MPShiftRight2 */
        t489 = modulus[0];
        t490 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5277 = (((uint128_t ) t1487)*((uint128_t ) t490));
        a5278 = (((uint128_t ) t1487)*((uint128_t ) t489));
        a5279 = (((uint128_t ) t1486)*((uint128_t ) t490));
        c398 = (((uint128_t ) a5278) + ((uint128_t ) a5279));
        t1488 = (a5277 >> 64);
        c399 = (((uint128_t ) c398) + ((uint128_t ) t1488));
        t1489 = ((uint64_t ) c399);
        t1490 = ((uint64_t ) a5277);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d446 = (t1479 - t1490);
        b401 = ((t1479 < t1490));
        d447 = (t1478 - t1489);
        d448 = (d447 - b401);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d449 = (d446 - t490);
        b402 = ((d446 < t490));
        d450 = (d448 - t489);
        d451 = (d450 - b402);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5282 = ((d448 < t489));
        a5283 = ((d448 == t489));
        a5284 = ((a5283) && (b402));
        i579 = ((a5282) || (a5284));
        t1491 = ((i579) ? (d448) : (d451));
        t1492 = ((i579) ? (d446) : (d449));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5285 = (2*threadIdx.x);
        a5286 = (128*i7);
        a5287 = (a5285 + a5286);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5288 = (2*a5254);
        a5289 = (a5288 + 1);
        s484 = (((uint128_t ) P1[a5289]) + ((uint128_t ) t1492));
        t1493 = ((uint64_t ) s484);
        c400 = (s484 >> 64);
        s485 = (((uint128_t ) P1[a5288]) + ((uint128_t ) t1491));
        s486 = (((uint128_t ) s485) + ((uint128_t ) c400));
        t1494 = ((uint64_t ) s486);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5290 = ((t489 < t1494));
        a5291 = ((t489 == t1494));
        a5292 = ((t490 < t1493));
        a5293 = ((a5291) && (a5292));
        i580 = ((a5290) || (a5293));
        /* Begin of MPSubDDD 64 */
        d452 = (t1493 - t490);
        b403 = ((t1493 < t490));
        d453 = (t1494 - t489);
        d454 = (d453 - b403);
        /* End of MPSubDDD 64 */
        a5295 = (2*a5287);
        P2[a5295] = ((i580) ? (d454) : (t1494));
        a5296 = (a5295 + 1);
        P2[a5296] = ((i580) ? (d452) : (t1493));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a5297 = (a5287 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d455 = (P1[a5289] - t1492);
        b404 = ((P1[a5289] < t1492));
        d456 = (P1[a5288] - t1491);
        d457 = (d456 - b404);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s487 = (((uint128_t ) d455) + ((uint128_t ) t490));
        t1495 = ((uint64_t ) s487);
        c401 = (s487 >> 64);
        s488 = (((uint128_t ) d457) + ((uint128_t ) t489));
        s489 = (((uint128_t ) s488) + ((uint128_t ) c401));
        t1496 = ((uint64_t ) s489);
        /* MPLessThan 64 */
        a5299 = ((P1[a5288] < t1491));
        a5300 = ((P1[a5288] == t1491));
        a5301 = ((a5300) && (b404));
        i581 = ((a5299) || (a5301));
        a5302 = (2*a5297);
        P2[a5302] = ((i581) ? (t1496) : (d457));
        a5303 = (a5302 + 1);
        P2[a5303] = ((i581) ? (t1495) : (d455));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code18(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5304, a5305, a5306, a5307, a5308, a5309, a5310, a5311, 
            a5312, a5333, a5334, a5335, a5336, a5337, a5338, a5339, 
            a5340, a5341, a5342, a5343, a5344, a5346, a5347, a5348, 
            a5350, a5351, a5352, a5353, a5354, b405, b406, b407, 
            b408, c410, c411, i582, i583, i584;
    uint64_t a5317, a5318, a5319, a5320, a5321, a5326, a5327, d458, 
            d459, d460, d461, d462, d463, d464, d465, d466, 
            d467, d468, d469, m41, p77, p78, t1497, t1498, 
            t1499, t1500, t1501, t1502, t1503, t1504, t1505, t1506, 
            t1507, t1508, t1509, t1510, t1511, t1512, t1513, t1514, 
            t1515, t1516, t1517, t1518, t1519, t549, t550, t553, 
            t554;
    uint128_t a5313, a5314, a5315, a5316, a5322, a5323, a5324, a5325, 
            a5328, a5329, a5330, c402, c403, c404, c405, c406, 
            c407, c408, c409, s490, s491, s492, s493, s494, 
            s495;
    for(int i5 = 0; i5 <= 8191; i5++) {
        a5304 = (64*i5);
        a5305 = (threadIdx.x + a5304);
        a5306 = (a5305 + 524288);
        a5307 = (a5306 % 262144);
        a5308 = (262144 + a5307);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5309 = (2*a5308);
        a5310 = (a5309 + 1);
        a5311 = (2*a5306);
        a5312 = (a5311 + 1);
        a5313 = (((uint128_t ) twiddles[a5310])*((uint128_t ) P2[a5312]));
        a5314 = (((uint128_t ) twiddles[a5310])*((uint128_t ) P2[a5311]));
        a5315 = (((uint128_t ) twiddles[a5309])*((uint128_t ) P2[a5312]));
        a5316 = (((uint128_t ) twiddles[a5309])*((uint128_t ) P2[a5311]));
        c402 = (((uint128_t ) a5314) + ((uint128_t ) a5315));
        t1497 = (a5313 >> 64);
        c403 = (((uint128_t ) c402) + ((uint128_t ) t1497));
        t1498 = (c403 >> 64);
        c404 = (((uint128_t ) a5316) + ((uint128_t ) t1498));
        t1499 = (c404 >> 64);
        t1500 = ((uint64_t ) c404);
        t1501 = ((uint64_t ) c403);
        t1502 = ((uint64_t ) a5313);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p77 = (t1501 >> 58);
        a5317 = ((uint64_t ) 1);
        a5318 = (a5317 << 58);
        m41 = (a5318 - 1);
        p78 = (((t1499)&(m41)));
        a5319 = (p78 << 6);
        a5320 = (t1500 >> 58);
        t1503 = (((a5319)|(a5320)));
        a5321 = (t1500 << 6);
        t1504 = (((a5321)|(p77)));
        /* End of MPShiftRight3 */
        t549 = mu[0];
        t550 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5322 = (((uint128_t ) t1504)*((uint128_t ) t550));
        a5323 = (((uint128_t ) t1504)*((uint128_t ) t549));
        a5324 = (((uint128_t ) t1503)*((uint128_t ) t550));
        a5325 = (((uint128_t ) t1503)*((uint128_t ) t549));
        c405 = (((uint128_t ) a5323) + ((uint128_t ) a5324));
        t1505 = (a5322 >> 64);
        c406 = (((uint128_t ) c405) + ((uint128_t ) t1505));
        t1506 = (c406 >> 64);
        c407 = (((uint128_t ) a5325) + ((uint128_t ) t1506));
        t1507 = (c407 >> 64);
        t1508 = ((uint64_t ) c407);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1509 = (t1507 >> 1);
        a5326 = (t1507 << 63);
        a5327 = (t1508 >> 1);
        t1510 = (((a5326)|(a5327)));
        /* End of MPShiftRight2 */
        t553 = modulus[0];
        t554 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5328 = (((uint128_t ) t1510)*((uint128_t ) t554));
        a5329 = (((uint128_t ) t1510)*((uint128_t ) t553));
        a5330 = (((uint128_t ) t1509)*((uint128_t ) t554));
        c408 = (((uint128_t ) a5329) + ((uint128_t ) a5330));
        t1511 = (a5328 >> 64);
        c409 = (((uint128_t ) c408) + ((uint128_t ) t1511));
        t1512 = ((uint64_t ) c409);
        t1513 = ((uint64_t ) a5328);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d458 = (t1502 - t1513);
        b405 = ((t1502 < t1513));
        d459 = (t1501 - t1512);
        d460 = (d459 - b405);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d461 = (d458 - t554);
        b406 = ((d458 < t554));
        d462 = (d460 - t553);
        d463 = (d462 - b406);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5333 = ((d460 < t553));
        a5334 = ((d460 == t553));
        a5335 = ((a5334) && (b406));
        i582 = ((a5333) || (a5335));
        t1514 = ((i582) ? (d460) : (d463));
        t1515 = ((i582) ? (d458) : (d461));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5336 = (2*threadIdx.x);
        a5337 = (128*i5);
        a5338 = (a5336 + a5337);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5339 = (2*a5305);
        a5340 = (a5339 + 1);
        s490 = (((uint128_t ) P2[a5340]) + ((uint128_t ) t1515));
        t1516 = ((uint64_t ) s490);
        c410 = (s490 >> 64);
        s491 = (((uint128_t ) P2[a5339]) + ((uint128_t ) t1514));
        s492 = (((uint128_t ) s491) + ((uint128_t ) c410));
        t1517 = ((uint64_t ) s492);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5341 = ((t553 < t1517));
        a5342 = ((t553 == t1517));
        a5343 = ((t554 < t1516));
        a5344 = ((a5342) && (a5343));
        i583 = ((a5341) || (a5344));
        /* Begin of MPSubDDD 64 */
        d464 = (t1516 - t554);
        b407 = ((t1516 < t554));
        d465 = (t1517 - t553);
        d466 = (d465 - b407);
        /* End of MPSubDDD 64 */
        a5346 = (2*a5338);
        P1[a5346] = ((i583) ? (d466) : (t1517));
        a5347 = (a5346 + 1);
        P1[a5347] = ((i583) ? (d464) : (t1516));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a5348 = (a5338 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d467 = (P2[a5340] - t1515);
        b408 = ((P2[a5340] < t1515));
        d468 = (P2[a5339] - t1514);
        d469 = (d468 - b408);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s493 = (((uint128_t ) d467) + ((uint128_t ) t554));
        t1518 = ((uint64_t ) s493);
        c411 = (s493 >> 64);
        s494 = (((uint128_t ) d469) + ((uint128_t ) t553));
        s495 = (((uint128_t ) s494) + ((uint128_t ) c411));
        t1519 = ((uint64_t ) s495);
        /* MPLessThan 64 */
        a5350 = ((P2[a5339] < t1514));
        a5351 = ((P2[a5339] == t1514));
        a5352 = ((a5351) && (b408));
        i584 = ((a5350) || (a5352));
        a5353 = (2*a5348);
        P1[a5353] = ((i584) ? (t1519) : (d469));
        a5354 = (a5353 + 1);
        P1[a5354] = ((i584) ? (t1518) : (d467));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code19(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a5355, a5356, a5357, a5358, a5359, a5360, a5361, a5362, 
            a5363, a5384, a5385, a5386, a5387, a5388, a5389, a5390, 
            a5391, a5392, a5393, a5394, a5395, a5396, a5398, a5399, 
            a5400, a5402, a5403, a5404, a5405, a5406, b409, b410, 
            b411, b412, b413, b414, c420, c421, i585, i586, 
            i587;
    uint64_t a5368, a5369, a5370, a5371, a5372, a5377, a5378, d470, 
            d471, d472, d473, d474, d475, d476, d477, d478, 
            d479, d480, d481, m42, p79, p80, t1520, t1521, 
            t1522, t1523, t1524, t1525, t1526, t1527, t1528, t1529, 
            t1530, t1531, t1532, t1533, t1534, t1535, t1536, t1537, 
            t1538, t1539, t1540, t1541, t1542, t613, t614, t617, 
            t618;
    uint128_t a5364, a5365, a5366, a5367, a5373, a5374, a5375, a5376, 
            a5379, a5380, a5381, c412, c413, c414, c415, c416, 
            c417, c418, c419, s496, s497, s498, s499, s500, 
            s501;
    for(int i3 = 0; i3 <= 8191; i3++) {
        a5355 = (64*i3);
        a5356 = (a5355 + threadIdx.x);
        b409 = (threadIdx.x + a5355);
        a5357 = (b409 + 524288);
        a5358 = (a5357 % 524288);
        a5359 = (524288 + a5358);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5360 = (2*a5359);
        a5361 = (a5360 + 1);
        a5362 = (2*a5357);
        a5363 = (a5362 + 1);
        a5364 = (((uint128_t ) twiddles[a5361])*((uint128_t ) P1[a5363]));
        a5365 = (((uint128_t ) twiddles[a5361])*((uint128_t ) P1[a5362]));
        a5366 = (((uint128_t ) twiddles[a5360])*((uint128_t ) P1[a5363]));
        a5367 = (((uint128_t ) twiddles[a5360])*((uint128_t ) P1[a5362]));
        c412 = (((uint128_t ) a5365) + ((uint128_t ) a5366));
        t1520 = (a5364 >> 64);
        c413 = (((uint128_t ) c412) + ((uint128_t ) t1520));
        t1521 = (c413 >> 64);
        c414 = (((uint128_t ) a5367) + ((uint128_t ) t1521));
        t1522 = (c414 >> 64);
        t1523 = ((uint64_t ) c414);
        t1524 = ((uint64_t ) c413);
        t1525 = ((uint64_t ) a5364);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p79 = (t1524 >> 58);
        a5368 = ((uint64_t ) 1);
        a5369 = (a5368 << 58);
        m42 = (a5369 - 1);
        p80 = (((t1522)&(m42)));
        a5370 = (p80 << 6);
        a5371 = (t1523 >> 58);
        t1526 = (((a5370)|(a5371)));
        a5372 = (t1523 << 6);
        t1527 = (((a5372)|(p79)));
        /* End of MPShiftRight3 */
        t613 = mu[0];
        t614 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5373 = (((uint128_t ) t1527)*((uint128_t ) t614));
        a5374 = (((uint128_t ) t1527)*((uint128_t ) t613));
        a5375 = (((uint128_t ) t1526)*((uint128_t ) t614));
        a5376 = (((uint128_t ) t1526)*((uint128_t ) t613));
        c415 = (((uint128_t ) a5374) + ((uint128_t ) a5375));
        t1528 = (a5373 >> 64);
        c416 = (((uint128_t ) c415) + ((uint128_t ) t1528));
        t1529 = (c416 >> 64);
        c417 = (((uint128_t ) a5376) + ((uint128_t ) t1529));
        t1530 = (c417 >> 64);
        t1531 = ((uint64_t ) c417);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1532 = (t1530 >> 1);
        a5377 = (t1530 << 63);
        a5378 = (t1531 >> 1);
        t1533 = (((a5377)|(a5378)));
        /* End of MPShiftRight2 */
        t617 = modulus[0];
        t618 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a5379 = (((uint128_t ) t1533)*((uint128_t ) t618));
        a5380 = (((uint128_t ) t1533)*((uint128_t ) t617));
        a5381 = (((uint128_t ) t1532)*((uint128_t ) t618));
        c418 = (((uint128_t ) a5380) + ((uint128_t ) a5381));
        t1534 = (a5379 >> 64);
        c419 = (((uint128_t ) c418) + ((uint128_t ) t1534));
        t1535 = ((uint64_t ) c419);
        t1536 = ((uint64_t ) a5379);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d470 = (t1525 - t1536);
        b410 = ((t1525 < t1536));
        d471 = (t1524 - t1535);
        d472 = (d471 - b410);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d473 = (d470 - t618);
        b411 = ((d470 < t618));
        d474 = (d472 - t617);
        d475 = (d474 - b411);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a5384 = ((d472 < t617));
        a5385 = ((d472 == t617));
        a5386 = ((a5385) && (b411));
        i585 = ((a5384) || (a5386));
        t1537 = ((i585) ? (d472) : (d475));
        t1538 = ((i585) ? (d470) : (d473));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a5387 = (1048576*blockIdx.x);
        a5388 = (2*threadIdx.x);
        a5389 = (128*i3);
        b412 = (a5387 + a5388);
        a5390 = (b412 + a5389);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a5391 = (2*a5356);
        a5392 = (a5391 + 1);
        s496 = (((uint128_t ) P1[a5392]) + ((uint128_t ) t1538));
        t1539 = ((uint64_t ) s496);
        c420 = (s496 >> 64);
        s497 = (((uint128_t ) P1[a5391]) + ((uint128_t ) t1537));
        s498 = (((uint128_t ) s497) + ((uint128_t ) c420));
        t1540 = ((uint64_t ) s498);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a5393 = ((t617 < t1540));
        a5394 = ((t617 == t1540));
        a5395 = ((t618 < t1539));
        a5396 = ((a5394) && (a5395));
        i586 = ((a5393) || (a5396));
        /* Begin of MPSubDDD 64 */
        d476 = (t1539 - t618);
        b413 = ((t1539 < t618));
        d477 = (t1540 - t617);
        d478 = (d477 - b413);
        /* End of MPSubDDD 64 */
        a5398 = (2*a5390);
        Y[a5398] = ((i586) ? (d478) : (t1540));
        a5399 = (a5398 + 1);
        Y[a5399] = ((i586) ? (d476) : (t1539));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a5400 = (a5390 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d479 = (P1[a5392] - t1538);
        b414 = ((P1[a5392] < t1538));
        d480 = (P1[a5391] - t1537);
        d481 = (d480 - b414);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s499 = (((uint128_t ) d479) + ((uint128_t ) t618));
        t1541 = ((uint64_t ) s499);
        c421 = (s499 >> 64);
        s500 = (((uint128_t ) d481) + ((uint128_t ) t617));
        s501 = (((uint128_t ) s500) + ((uint128_t ) c421));
        t1542 = ((uint64_t ) s501);
        /* MPLessThan 64 */
        a5402 = ((P1[a5391] < t1537));
        a5403 = ((P1[a5391] == t1537));
        a5404 = ((a5403) && (b414));
        i587 = ((a5402) || (a5404));
        a5405 = (2*a5400);
        Y[a5405] = ((i587) ? (t1542) : (d481));
        a5406 = (a5405 + 1);
        Y[a5406] = ((i587) ? (t1541) : (d479));
        /* End of MPModSub 64 */
    }
}

void nttmpcuda(uint64_t  *Y, uint64_t  *X, uint64_t modulus[2], uint64_t  *twiddles, uint64_t mu[2]) {
    dim3 b100(64, 1, 1), b101(64, 1, 1), b102(64, 1, 1), b103(64, 1, 1), b104(64, 1, 1), b105(64, 1, 1), b106(64, 1, 1), b107(64, 1, 1), 
    b108(64, 1, 1), b109(64, 1, 1), b110(64, 1, 1), b111(64, 1, 1), b112(64, 1, 1), b113(64, 1, 1), b114(64, 1, 1), b115(64, 1, 1), 
    b116(64, 1, 1), b117(64, 1, 1), b98(64, 1, 1), b99(64, 1, 1), g1(2, 1, 1), g10(2, 1, 1), g11(2, 1, 1), g12(2, 1, 1), 
    g13(2, 1, 1), g14(2, 1, 1), g15(2, 1, 1), g16(2, 1, 1), g17(2, 1, 1), g18(2, 1, 1), g19(2, 1, 1), g2(2, 1, 1), 
    g20(2, 1, 1), g3(2, 1, 1), g4(2, 1, 1), g5(2, 1, 1), g6(2, 1, 1), g7(2, 1, 1), g8(2, 1, 1), g9(2, 1, 1);
    ker_code0<<<g1, b98>>>(X, Y, modulus, twiddles, mu);
    ker_code1<<<g2, b99>>>(X, Y, modulus, twiddles, mu);
    ker_code2<<<g3, b100>>>(X, Y, modulus, twiddles, mu);
    ker_code3<<<g4, b101>>>(X, Y, modulus, twiddles, mu);
    ker_code4<<<g5, b102>>>(X, Y, modulus, twiddles, mu);
    ker_code5<<<g6, b103>>>(X, Y, modulus, twiddles, mu);
    ker_code6<<<g7, b104>>>(X, Y, modulus, twiddles, mu);
    ker_code7<<<g8, b105>>>(X, Y, modulus, twiddles, mu);
    ker_code8<<<g9, b106>>>(X, Y, modulus, twiddles, mu);
    ker_code9<<<g10, b107>>>(X, Y, modulus, twiddles, mu);
    ker_code10<<<g11, b108>>>(X, Y, modulus, twiddles, mu);
    ker_code11<<<g12, b109>>>(X, Y, modulus, twiddles, mu);
    ker_code12<<<g13, b110>>>(X, Y, modulus, twiddles, mu);
    ker_code13<<<g14, b111>>>(X, Y, modulus, twiddles, mu);
    ker_code14<<<g15, b112>>>(X, Y, modulus, twiddles, mu);
    ker_code15<<<g16, b113>>>(X, Y, modulus, twiddles, mu);
    ker_code16<<<g17, b114>>>(X, Y, modulus, twiddles, mu);
    ker_code17<<<g18, b115>>>(X, Y, modulus, twiddles, mu);
    ker_code18<<<g19, b116>>>(X, Y, modulus, twiddles, mu);
    ker_code19<<<g20, b117>>>(X, Y, modulus, twiddles, mu);
}

void destroy_nttmpcuda() {
    /* skip */
}
