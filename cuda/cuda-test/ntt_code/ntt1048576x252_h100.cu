
/*
 * This code was generated by Spiral 8.5.1, www.spiral.net
 */

#include <stdint.h>
__device__ uint64_t P2[8388608];
__device__ uint64_t P1[8388608];

__device__ void MPMulQDD_L2(uint64_t &t2821, uint64_t &t2822, uint64_t &t2813, uint64_t &t2814, uint64_t &t2805, uint64_t &t2802, uint64_t &t2797, uint64_t &t2798, uint64_t t1827, uint64_t t1828, uint64_t t1825, uint64_t t1826, uint64_t t1823, uint64_t t1824, uint64_t t1821, uint64_t t1822) {
    int a13535, a13537, a13538, a13548, a13550, a13551, a13556, c238, 
            c239, c240, c241, c242, c243, c244, c245, c246, 
            c247, c248, c249, c250, c251, c252, c253, c254, 
            c255, c256, c257, c258, c259, c260, c261, c262;
    uint64_t a13536, a13539, a13549, a13552, a13557, t3885, t3886, t3887, 
            t3888, t3889, t3890, t3891, t3892, t3893, t3894, t3895, 
            t3896, t3897, t3898, t3899, t3900, t3901, t3902, t3903, 
            t3904, t3905, t3906, t3907, t3908, t3909, t3910, t3911, 
            t3912, t3913, t3914, t3915, t3916, t3917, t3918, t3919, 
            t3920, t3921, t3922, t3923, t3924, t3925, t3926, t3927, 
            t3928, t3929, t3930, t3931, t3932, t3933, t3934, t3935, 
            t3936, t3937, t3938, t3939, t3940, t3941, t3942, t3943, 
            t3944, t3945, t3946, t3947, t3949, t3950, t3951, t3952, 
            t3954, t3955;
    uint128_t a13519, a13520, a13521, a13522, a13523, a13524, a13525, a13526, 
            a13527, a13528, a13529, a13530, a13531, a13532, a13533, a13534, 
            s689, s690, s691, s692, s693, s694, s695, s696, 
            s697, s698, s699, s700, s701, s702, s703, s704, 
            s705, s706, s707, s708, s709, s710, s711, s712, 
            s713, s714, s715, s716, s717, s718, s719, s720, 
            s721, s722, s723, s724, s725, s726, s727, s728, 
            s729, s730, s731, s732, s733, s734;
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a13519 = (((uint128_t ) t1826)*((uint128_t ) t1822));
    t3885 = (a13519 >> 64);
    t3886 = ((uint64_t ) a13519);
    a13520 = (((uint128_t ) t1825)*((uint128_t ) t1821));
    t3887 = (a13520 >> 64);
    t3888 = ((uint64_t ) a13520);
    a13521 = (((uint128_t ) t1825)*((uint128_t ) t1822));
    t3889 = (a13521 >> 64);
    t3890 = ((uint64_t ) a13521);
    a13522 = (((uint128_t ) t1826)*((uint128_t ) t1821));
    t3891 = (a13522 >> 64);
    t3892 = ((uint64_t ) a13522);
    /* MPAddQDD 64 */
    s689 = (((uint128_t ) t3890) + ((uint128_t ) t3892));
    t3893 = ((uint64_t ) s689);
    c238 = (s689 >> 64);
    s690 = (((uint128_t ) t3889) + ((uint128_t ) t3891));
    s691 = (((uint128_t ) s690) + ((uint128_t ) c238));
    t3894 = ((uint64_t ) s691);
    c239 = (s691 >> 64);
    /* Begin of MPAddQQQ 64 */
    t3895 = ((uint64_t ) t3886);
    s692 = (((uint128_t ) t3885) + ((uint128_t ) t3893));
    t3896 = ((uint64_t ) s692);
    c240 = (s692 >> 64);
    s693 = (((uint128_t ) t3888) + ((uint128_t ) t3894));
    s694 = (((uint128_t ) s693) + ((uint128_t ) c240));
    t3897 = ((uint64_t ) s694);
    c241 = (s694 >> 64);
    s695 = (((uint128_t ) t3887) + ((uint128_t ) c239));
    s696 = (((uint128_t ) s695) + ((uint128_t ) c241));
    t3898 = ((uint64_t ) s696);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a13523 = (((uint128_t ) t1828)*((uint128_t ) t1824));
    t3899 = (a13523 >> 64);
    t3900 = ((uint64_t ) a13523);
    a13524 = (((uint128_t ) t1827)*((uint128_t ) t1823));
    t3901 = (a13524 >> 64);
    t3902 = ((uint64_t ) a13524);
    a13525 = (((uint128_t ) t1827)*((uint128_t ) t1824));
    t3903 = (a13525 >> 64);
    t3904 = ((uint64_t ) a13525);
    a13526 = (((uint128_t ) t1828)*((uint128_t ) t1823));
    t3905 = (a13526 >> 64);
    t3906 = ((uint64_t ) a13526);
    /* MPAddQDD 64 */
    s697 = (((uint128_t ) t3904) + ((uint128_t ) t3906));
    t3907 = ((uint64_t ) s697);
    c242 = (s697 >> 64);
    s698 = (((uint128_t ) t3903) + ((uint128_t ) t3905));
    s699 = (((uint128_t ) s698) + ((uint128_t ) c242));
    t3908 = ((uint64_t ) s699);
    c243 = (s699 >> 64);
    /* Begin of MPAddQQQ 64 */
    t3909 = ((uint64_t ) t3900);
    s700 = (((uint128_t ) t3899) + ((uint128_t ) t3907));
    t3910 = ((uint64_t ) s700);
    c244 = (s700 >> 64);
    s701 = (((uint128_t ) t3902) + ((uint128_t ) t3908));
    s702 = (((uint128_t ) s701) + ((uint128_t ) c244));
    t3911 = ((uint64_t ) s702);
    c245 = (s702 >> 64);
    s703 = (((uint128_t ) t3901) + ((uint128_t ) c243));
    s704 = (((uint128_t ) s703) + ((uint128_t ) c245));
    t3912 = ((uint64_t ) s704);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a13527 = (((uint128_t ) t1828)*((uint128_t ) t1822));
    t3913 = (a13527 >> 64);
    t3914 = ((uint64_t ) a13527);
    a13528 = (((uint128_t ) t1827)*((uint128_t ) t1821));
    t3915 = (a13528 >> 64);
    t3916 = ((uint64_t ) a13528);
    a13529 = (((uint128_t ) t1827)*((uint128_t ) t1822));
    t3917 = (a13529 >> 64);
    t3918 = ((uint64_t ) a13529);
    a13530 = (((uint128_t ) t1828)*((uint128_t ) t1821));
    t3919 = (a13530 >> 64);
    t3920 = ((uint64_t ) a13530);
    /* MPAddQDD 64 */
    s705 = (((uint128_t ) t3918) + ((uint128_t ) t3920));
    t3921 = ((uint64_t ) s705);
    c246 = (s705 >> 64);
    s706 = (((uint128_t ) t3917) + ((uint128_t ) t3919));
    s707 = (((uint128_t ) s706) + ((uint128_t ) c246));
    t3922 = ((uint64_t ) s707);
    c247 = (s707 >> 64);
    /* Begin of MPAddQQQ 64 */
    t3923 = ((uint64_t ) t3914);
    s708 = (((uint128_t ) t3913) + ((uint128_t ) t3921));
    t3924 = ((uint64_t ) s708);
    c248 = (s708 >> 64);
    s709 = (((uint128_t ) t3916) + ((uint128_t ) t3922));
    s710 = (((uint128_t ) s709) + ((uint128_t ) c248));
    t3925 = ((uint64_t ) s710);
    c249 = (s710 >> 64);
    s711 = (((uint128_t ) t3915) + ((uint128_t ) c247));
    s712 = (((uint128_t ) s711) + ((uint128_t ) c249));
    t3926 = ((uint64_t ) s712);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a13531 = (((uint128_t ) t1826)*((uint128_t ) t1824));
    t3927 = (a13531 >> 64);
    t3928 = ((uint64_t ) a13531);
    a13532 = (((uint128_t ) t1825)*((uint128_t ) t1823));
    t3929 = (a13532 >> 64);
    t3930 = ((uint64_t ) a13532);
    a13533 = (((uint128_t ) t1825)*((uint128_t ) t1824));
    t3931 = (a13533 >> 64);
    t3932 = ((uint64_t ) a13533);
    a13534 = (((uint128_t ) t1826)*((uint128_t ) t1823));
    t3933 = (a13534 >> 64);
    t3934 = ((uint64_t ) a13534);
    /* MPAddQDD 64 */
    s713 = (((uint128_t ) t3932) + ((uint128_t ) t3934));
    t3935 = ((uint64_t ) s713);
    c250 = (s713 >> 64);
    s714 = (((uint128_t ) t3931) + ((uint128_t ) t3933));
    s715 = (((uint128_t ) s714) + ((uint128_t ) c250));
    t3936 = ((uint64_t ) s715);
    c251 = (s715 >> 64);
    /* Begin of MPAddQQQ 64 */
    t3937 = ((uint64_t ) t3928);
    s716 = (((uint128_t ) t3927) + ((uint128_t ) t3935));
    t3938 = ((uint64_t ) s716);
    c252 = (s716 >> 64);
    s717 = (((uint128_t ) t3930) + ((uint128_t ) t3936));
    s718 = (((uint128_t ) s717) + ((uint128_t ) c252));
    t3939 = ((uint64_t ) s718);
    c253 = (s718 >> 64);
    s719 = (((uint128_t ) t3929) + ((uint128_t ) c251));
    s720 = (((uint128_t ) s719) + ((uint128_t ) c253));
    t3940 = ((uint64_t ) s720);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s721 = (((uint128_t ) t3923) + ((uint128_t ) t3937));
    t3941 = ((uint64_t ) s721);
    c254 = (s721 >> 64);
    s722 = (((uint128_t ) t3924) + ((uint128_t ) t3938));
    s723 = (((uint128_t ) s722) + ((uint128_t ) c254));
    t3942 = ((uint64_t ) s723);
    c255 = (s723 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s724 = (((uint128_t ) t3925) + ((uint128_t ) t3939));
    t3943 = ((uint64_t ) s724);
    c256 = (s724 >> 64);
    s725 = (((uint128_t ) t3926) + ((uint128_t ) t3940));
    s726 = (((uint128_t ) s725) + ((uint128_t ) c256));
    t3944 = ((uint64_t ) s726);
    c257 = (s726 >> 64);
    /* MPPropagateCarry 64 */
    t3945 = (t3943 + c255);
    a13535 = ((t3945 == 0));
    a13536 = (t3944 + c255);
    t3946 = ((a13535) ? (a13536) : (t3944));
    a13537 = ((t3946 == 0));
    a13538 = ((a13537) && (a13535));
    a13539 = (c257 + c255);
    t3947 = ((a13538) ? (a13539) : (c257));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t2798 = ((uint64_t ) t3895);
    t2797 = ((uint64_t ) t3896);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s727 = (((uint128_t ) t3897) + ((uint128_t ) t3941));
    t2802 = ((uint64_t ) s727);
    c258 = (s727 >> 64);
    s728 = (((uint128_t ) t3898) + ((uint128_t ) t3942));
    s729 = (((uint128_t ) s728) + ((uint128_t ) c258));
    t3949 = ((uint64_t ) s729);
    c259 = (s729 >> 64);
    /* MPPropagateCarry 64 */
    t2805 = t3949;
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s730 = (((uint128_t ) t3909) + ((uint128_t ) t3945));
    t3950 = ((uint64_t ) s730);
    c260 = (s730 >> 64);
    s731 = (((uint128_t ) t3910) + ((uint128_t ) t3946));
    s732 = (((uint128_t ) s731) + ((uint128_t ) c260));
    t3951 = ((uint64_t ) s732);
    c261 = (s732 >> 64);
    /* MPPropagateCarry 64 */
    t2814 = (t3950 + c259);
    a13548 = ((t2814 == 0));
    a13549 = (t3951 + c259);
    t2813 = ((a13548) ? (a13549) : (t3951));
    a13550 = ((t2813 == 0));
    a13551 = ((a13550) && (a13548));
    a13552 = (c261 + c259);
    t3952 = ((a13551) ? (a13552) : (c261));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s733 = (((uint128_t ) t3911) + ((uint128_t ) t3947));
    t3954 = ((uint64_t ) s733);
    c262 = (s733 >> 64);
    s734 = (((uint128_t ) t3912) + ((uint128_t ) c262));
    t3955 = ((uint64_t ) s734);
    /* MPPropagateCarry 64 */
    t2822 = (t3954 + t3952);
    a13556 = ((t2822 == 0));
    a13557 = (t3955 + t3952);
    t2821 = ((a13556) ? (a13557) : (t3955));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
}

void init_nttmpcuda() {
    /* skip */
}

__global__ void ker_code0(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a13563, a13564, a13565, a13566, a13567, a13568, a13569, a13570, 
            a13571, a13572, a13582, a13583, a13584, a13589, a13590, a13591, 
            a13595, a13596, a13597, a13598, a13599, a13600, a13601, a13602, 
            a13603, a13604, a13605, a13606, a13607, a13608, a13609, a13610, 
            a13611, a13619, a13620, a13621, a13622, a13623, a13624, a13625, 
            a13626, a13627, a13628, a13629, a13630, a13631, a13633, a13634, 
            a13635, a13639, a13640, a13641, a13642, a13643, a13644, a13645, 
            a13647, a13648, a13649, a13653, a13661, a13662, a13663, a13664, 
            a13665, a13666, a13667, a13668, a13669, a13670, a13671, a13672, 
            a13673, b675, b676, b677, b678, b679, b680, b681, 
            b682, b683, b684, b685, b686, b687, b688, b689, 
            b690, b691, b692, b693, c264, c265, c266, c268, 
            c269, c270, i588, i589, i590;
    uint64_t a13573, a13574, a13575, a13576, a13577, a13578, a13579, a13580, 
            a13612, a13654, a5268, a5269, a5270, a5271, a5299, a5300, 
            a5301, a5302, d822, d823, d824, d825, d826, d827, 
            d828, d829, d830, d831, d832, d833, d834, d835, 
            d836, d837, d838, d839, d840, d841, d842, d843, 
            d844, d845, d846, d847, d848, d849, t1909, t1910, 
            t1911, t1912, t1913, t1914, t1915, t1916, t1917, t1918, 
            t1919, t1920, t1921, t1922, t1923, t1924, t1925, t1926, 
            t1927, t1928, t1929, t1930, t1931, t1932, t3958, t3959, 
            t3960, t3961, t3962, t3963, t3964, t3965, t3966, t3967, 
            t3968, t3969, t3970, t3971, t3972, t3973, t3974, t3975, 
            t3976, t3977, t3978, t3979, t3980, t3981, t3982, t3983, 
            t3984, t3985, t3986, t3987, t3988, t3989, t3990, t3991, 
            t3992, t3993, t3994, t3997, t3998, t3999, t4000, t4001, 
            t4002, t4003, t4004;
    uint128_t s735, s736, s737, s738, s739, s740, s741, s742, 
            s743, s744, s745, s746;
    for(int i41 = 0; i41 <= 1023; i41++) {
        a13563 = (1048576*blockIdx.x);
        a13564 = (512*i41);
        b675 = (a13563 + threadIdx.x);
        a13565 = (b675 + a13564);
        a13566 = (a13565 + 524288);
        /* Begin of MPModMul 128 */
        a13567 = (2*a13566);
        a13568 = (a13567 + 1);
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        a13569 = (2*a13567);
        t3958 = X[a13569];
        a13570 = (a13569 + 1);
        t3959 = X[a13570];
        /* MPAssignDD 64 */
        a13571 = (2*a13568);
        t3960 = X[a13571];
        a13572 = (a13571 + 1);
        t3961 = X[a13572];
        MPMulQDD_L2(t1915, t1916, t1913, t1914, t1911, t1912, t1909, t1910, 
    twiddles[4], twiddles[5], twiddles[6], twiddles[7], t3958, t3959, t3960, t3961);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3962 = (t1911 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b676 = ((int) 1);
        t3963 = (288230376151711744 - b676);
        /* MPBinAndD 64 */
        t3964 = (((t1915)&(t3963)));
        t3965 = (((t1916)&((-1))));
        /* Begin of MPShiftLeft2D */
        a13573 = (t3964 << 6);
        a13574 = (t3965 >> 58);
        t3966 = (((a13573)|(a13574)));
        t3967 = (t3965 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3968 = (t1913 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3969 = (((t3967)|(t3968)));
        /* Begin of MPShiftLeft2D */
        a13575 = (t1913 << 6);
        a13576 = (t1914 >> 58);
        t3970 = (((a13575)|(a13576)));
        t3971 = (t1914 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3972 = (((t3971)|(t3962)));
        /* End of MPShiftRight3 */
        a5268 = mu[0];
        a5269 = mu[1];
        a5270 = mu[2];
        a5271 = mu[3];
        MPMulQDD_L2(t1931, t1932, t1929, t1930, t1927, t1928, t1925, t1926, 
    t3966, t3969, t3970, t3972, a5268, a5269, a5270, a5271);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3973 = (t1931 >> 1);
        a13577 = (t1931 << 63);
        a13578 = (t1932 >> 1);
        t3974 = (((a13577)|(a13578)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3975 = (t1932 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3976 = (t1929 >> 1);
        a13579 = (t1929 << 63);
        a13580 = (t1930 >> 1);
        t3977 = (((a13579)|(a13580)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3978 = (((t3975)|(t3976)));
        /* End of MPShiftRight2 */
        a5299 = modulus[0];
        a5300 = modulus[1];
        a5301 = modulus[2];
        a5302 = modulus[3];
        MPMulQDD_L2(t1923, t1924, t1921, t1922, t1919, t1920, t1917, t1918, 
    t3973, t3974, t3978, t3977, a5299, a5300, a5301, a5302);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d822 = (t1910 - t1918);
        b677 = ((t1910 < t1918));
        d823 = (t1909 - t1917);
        d824 = (d823 - b677);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13582 = ((t1909 < t1917));
        a13583 = ((t1909 == t1917));
        a13584 = ((a13583) && (b677));
        b678 = ((a13582) || (a13584));
        /* Begin of MPSubDDD 64 */
        d825 = (t1912 - t1920);
        b679 = ((t1912 < t1920));
        d826 = (t1911 - t1919);
        d827 = (d826 - b679);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d828 = (d825 - b678);
        b680 = ((d825 < b678));
        t3979 = (d827 - b680);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d829 = (d822 - a5302);
        b681 = ((d822 < a5302));
        d830 = (d824 - a5301);
        d831 = (d830 - b681);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13589 = ((d824 < a5301));
        a13590 = ((d824 == a5301));
        a13591 = ((a13590) && (b681));
        b682 = ((a13589) || (a13591));
        /* Begin of MPSubDDD 64 */
        d832 = (d828 - a5300);
        b683 = ((d828 < a5300));
        d833 = (t3979 - a5299);
        d834 = (d833 - b683);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d835 = (d832 - b682);
        b684 = ((d832 < b682));
        t3980 = (d834 - b684);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13595 = ((t3979 < a5299));
        a13596 = ((t3979 == a5299));
        a13597 = ((a13596) && (b683));
        a13598 = ((a13595) || (a13597));
        /* MPEqual 64 */
        a13599 = ((d828 == a5300));
        a13600 = ((a13596) && (a13599));
        /* MPLessThan 64 */
        a13601 = ((a13600) && (b682));
        i588 = ((a13598) || (a13601));
        /* MPCondD 64 */
        t3981 = ((i588) ? (t3979) : (t3980));
        t3982 = ((i588) ? (d828) : (d835));
        /* MPCondD 64 */
        t3983 = ((i588) ? (d824) : (d831));
        t3984 = ((i588) ? (d822) : (d829));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a13602 = (1024*i41);
        a13603 = (2*threadIdx.x);
        a13604 = (a13602 + a13603);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a13605 = (2*a13565);
        a13606 = (a13605 + 1);
        /* MPAssignDD 64 */
        a13607 = (2*a13606);
        t3985 = X[a13607];
        a13608 = (a13607 + 1);
        t3986 = X[a13608];
        /* MPAddQDD 64 */
        s735 = (((uint128_t ) t3986) + ((uint128_t ) t3984));
        t3987 = ((uint64_t ) s735);
        c264 = (s735 >> 64);
        s736 = (((uint128_t ) t3985) + ((uint128_t ) t3983));
        s737 = (((uint128_t ) s736) + ((uint128_t ) c264));
        t3988 = ((uint64_t ) s737);
        c265 = (s737 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a13609 = (2*a13605);
        t3989 = X[a13609];
        a13610 = (a13609 + 1);
        t3990 = X[a13610];
        /* MPAddQDD 64 */
        s738 = (((uint128_t ) t3990) + ((uint128_t ) t3982));
        t3991 = ((uint64_t ) s738);
        c266 = (s738 >> 64);
        s739 = (((uint128_t ) t3989) + ((uint128_t ) t3981));
        s740 = (((uint128_t ) s739) + ((uint128_t ) c266));
        t3992 = ((uint64_t ) s740);
        /* MPPropagateCarry 64 */
        t3993 = (t3991 + c265);
        a13611 = ((t3993 == 0));
        a13612 = (t3992 + c265);
        t3994 = ((a13611) ? (a13612) : (t3992));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13619 = ((a5299 < t3994));
        a13620 = ((a5299 == t3994));
        a13621 = ((a5300 < t3993));
        a13622 = ((a13620) && (a13621));
        a13623 = ((a13619) || (a13622));
        /* MPEqual 64 */
        a13624 = ((a5300 == t3993));
        a13625 = ((a13620) && (a13624));
        /* MPLessThan 64 */
        a13626 = ((a5301 < t3988));
        a13627 = ((a5301 == t3988));
        a13628 = ((a5302 < t3987));
        a13629 = ((a13627) && (a13628));
        a13630 = ((a13626) || (a13629));
        a13631 = ((a13625) && (a13630));
        i589 = ((a13623) || (a13631));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d836 = (t3987 - a5302);
        b685 = ((t3987 < a5302));
        d837 = (t3988 - a5301);
        d838 = (d837 - b685);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13633 = ((t3988 < a5301));
        a13634 = ((t3988 == a5301));
        a13635 = ((a13634) && (b685));
        b686 = ((a13633) || (a13635));
        /* Begin of MPSubDDD 64 */
        d839 = (t3993 - a5300);
        b687 = ((t3993 < a5300));
        d840 = (t3994 - a5299);
        d841 = (d840 - b687);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d842 = (d839 - b686);
        b688 = ((d839 < b686));
        t3997 = (d841 - b688);
        /* End of MPSubDDD 128 */
        a13639 = (2*a13604);
        /* MPCondD 64 */
        a13640 = (2*a13639);
        P1[a13640] = ((i589) ? (t3997) : (t3994));
        a13641 = (a13640 + 1);
        P1[a13641] = ((i589) ? (d842) : (t3993));
        a13642 = (a13639 + 1);
        /* MPCondD 64 */
        a13643 = (2*a13642);
        P1[a13643] = ((i589) ? (d838) : (t3988));
        a13644 = (a13643 + 1);
        P1[a13644] = ((i589) ? (d836) : (t3987));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b689 = (a13603 + a13602);
        a13645 = (b689 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d843 = (t3986 - t3984);
        b690 = ((t3986 < t3984));
        d844 = (t3985 - t3983);
        d845 = (d844 - b690);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13647 = ((t3985 < t3983));
        a13648 = ((t3985 == t3983));
        a13649 = ((a13648) && (b690));
        b691 = ((a13647) || (a13649));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d846 = (t3990 - t3982);
        b692 = ((t3990 < t3982));
        d847 = (t3989 - t3981);
        d848 = (d847 - b692);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d849 = (d846 - b691);
        b693 = ((d846 < b691));
        t3998 = (d848 - b693);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s741 = (((uint128_t ) d843) + ((uint128_t ) a5302));
        t3999 = ((uint64_t ) s741);
        c268 = (s741 >> 64);
        s742 = (((uint128_t ) d845) + ((uint128_t ) a5301));
        s743 = (((uint128_t ) s742) + ((uint128_t ) c268));
        t4000 = ((uint64_t ) s743);
        c269 = (s743 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s744 = (((uint128_t ) d849) + ((uint128_t ) a5300));
        t4001 = ((uint64_t ) s744);
        c270 = (s744 >> 64);
        s745 = (((uint128_t ) t3998) + ((uint128_t ) a5299));
        s746 = (((uint128_t ) s745) + ((uint128_t ) c270));
        t4002 = ((uint64_t ) s746);
        /* MPPropagateCarry 64 */
        t4003 = (t4001 + c269);
        a13653 = ((t4003 == 0));
        a13654 = (t4002 + c269);
        t4004 = ((a13653) ? (a13654) : (t4002));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13661 = ((t3989 < t3981));
        a13662 = ((t3989 == t3981));
        a13663 = ((a13662) && (b692));
        a13664 = ((a13661) || (a13663));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a13665 = ((t3990 == t3982));
        a13666 = ((a13662) && (a13665));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13667 = ((a13666) && (b691));
        i590 = ((a13664) || (a13667));
        a13668 = (2*a13645);
        /* MPCondD 64 */
        a13669 = (2*a13668);
        P1[a13669] = ((i590) ? (t4004) : (t3998));
        a13670 = (a13669 + 1);
        P1[a13670] = ((i590) ? (t4003) : (d849));
        a13671 = (a13668 + 1);
        /* MPCondD 64 */
        a13672 = (2*a13671);
        P1[a13672] = ((i590) ? (t4000) : (d845));
        a13673 = (a13672 + 1);
        P1[a13673] = ((i590) ? (t3999) : (d843));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code1(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a13674, a13675, a13676, a13677, a13678, a13679, a13680, a13681, 
            a13682, a13683, a13684, a13685, a13686, a13687, a13688, a13689, 
            a13690, a13700, a13701, a13702, a13707, a13708, a13709, a13713, 
            a13714, a13715, a13716, a13717, a13718, a13719, a13720, a13721, 
            a13722, a13723, a13724, a13725, a13726, a13727, a13728, a13729, 
            a13737, a13738, a13739, a13740, a13741, a13742, a13743, a13744, 
            a13745, a13746, a13747, a13748, a13749, a13751, a13752, a13753, 
            a13757, a13758, a13759, a13760, a13761, a13762, a13763, a13765, 
            a13766, a13767, a13771, a13779, a13780, a13781, a13782, a13783, 
            a13784, a13785, a13786, a13787, a13788, a13789, a13790, a13791, 
            b694, b695, b696, b697, b698, b699, b700, b701, 
            b702, b703, b704, b705, b706, b707, b708, b709, 
            b710, b711, b712, c272, c273, c274, c276, c277, 
            c278, i591, i592, i593;
    uint64_t a13691, a13692, a13693, a13694, a13695, a13696, a13697, a13698, 
            a13730, a13772, a5684, a5685, a5686, a5687, a5715, a5716, 
            a5717, a5718, d850, d851, d852, d853, d854, d855, 
            d856, d857, d858, d859, d860, d861, d862, d863, 
            d864, d865, d866, d867, d868, d869, d870, d871, 
            d872, d873, d874, d875, d876, d877, t1945, t1946, 
            t1947, t1948, t1949, t1950, t1951, t1952, t1953, t1954, 
            t1955, t1956, t1957, t1958, t1959, t1960, t1961, t1962, 
            t1963, t1964, t1965, t1966, t1967, t1968, t4007, t4008, 
            t4009, t4010, t4011, t4012, t4013, t4014, t4015, t4016, 
            t4017, t4018, t4019, t4020, t4021, t4022, t4023, t4024, 
            t4025, t4026, t4027, t4028, t4029, t4030, t4031, t4032, 
            t4033, t4034, t4035, t4036, t4037, t4038, t4039, t4040, 
            t4041, t4042, t4043, t4044, t4045, t4046, t4047, t4050, 
            t4051, t4052, t4053, t4054, t4055, t4056, t4057;
    uint128_t s747, s748, s749, s750, s751, s752, s753, s754, 
            s755, s756, s757, s758;
    for(int i39 = 0; i39 <= 1023; i39++) {
        a13674 = (512*i39);
        a13675 = (a13674 + threadIdx.x);
        b694 = (threadIdx.x + a13674);
        a13676 = (b694 + 524288);
        a13677 = (a13676 % 2);
        a13678 = (2 + a13677);
        /* Begin of MPModMul 128 */
        a13679 = (2*a13678);
        a13680 = (a13679 + 1);
        a13681 = (2*a13676);
        a13682 = (a13681 + 1);
        /* MPAssignDD 64 */
        a13683 = (2*a13679);
        t4007 = twiddles[a13683];
        a13684 = (a13683 + 1);
        t4008 = twiddles[a13684];
        /* MPAssignDD 64 */
        a13685 = (2*a13680);
        t4009 = twiddles[a13685];
        a13686 = (a13685 + 1);
        t4010 = twiddles[a13686];
        /* MPAssignDD 64 */
        a13687 = (2*a13681);
        t4011 = P1[a13687];
        a13688 = (a13687 + 1);
        t4012 = P1[a13688];
        /* MPAssignDD 64 */
        a13689 = (2*a13682);
        t4013 = P1[a13689];
        a13690 = (a13689 + 1);
        t4014 = P1[a13690];
        MPMulQDD_L2(t1951, t1952, t1949, t1950, t1947, t1948, t1945, t1946, 
    t4007, t4008, t4009, t4010, t4011, t4012, t4013, t4014);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4015 = (t1947 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b695 = ((int) 1);
        t4016 = (288230376151711744 - b695);
        /* MPBinAndD 64 */
        t4017 = (((t1951)&(t4016)));
        t4018 = (((t1952)&((-1))));
        /* Begin of MPShiftLeft2D */
        a13691 = (t4017 << 6);
        a13692 = (t4018 >> 58);
        t4019 = (((a13691)|(a13692)));
        t4020 = (t4018 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4021 = (t1949 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4022 = (((t4020)|(t4021)));
        /* Begin of MPShiftLeft2D */
        a13693 = (t1949 << 6);
        a13694 = (t1950 >> 58);
        t4023 = (((a13693)|(a13694)));
        t4024 = (t1950 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4025 = (((t4024)|(t4015)));
        /* End of MPShiftRight3 */
        a5684 = mu[0];
        a5685 = mu[1];
        a5686 = mu[2];
        a5687 = mu[3];
        MPMulQDD_L2(t1967, t1968, t1965, t1966, t1963, t1964, t1961, t1962, 
    t4019, t4022, t4023, t4025, a5684, a5685, a5686, a5687);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4026 = (t1967 >> 1);
        a13695 = (t1967 << 63);
        a13696 = (t1968 >> 1);
        t4027 = (((a13695)|(a13696)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4028 = (t1968 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4029 = (t1965 >> 1);
        a13697 = (t1965 << 63);
        a13698 = (t1966 >> 1);
        t4030 = (((a13697)|(a13698)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4031 = (((t4028)|(t4029)));
        /* End of MPShiftRight2 */
        a5715 = modulus[0];
        a5716 = modulus[1];
        a5717 = modulus[2];
        a5718 = modulus[3];
        MPMulQDD_L2(t1959, t1960, t1957, t1958, t1955, t1956, t1953, t1954, 
    t4026, t4027, t4031, t4030, a5715, a5716, a5717, a5718);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d850 = (t1946 - t1954);
        b696 = ((t1946 < t1954));
        d851 = (t1945 - t1953);
        d852 = (d851 - b696);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13700 = ((t1945 < t1953));
        a13701 = ((t1945 == t1953));
        a13702 = ((a13701) && (b696));
        b697 = ((a13700) || (a13702));
        /* Begin of MPSubDDD 64 */
        d853 = (t1948 - t1956);
        b698 = ((t1948 < t1956));
        d854 = (t1947 - t1955);
        d855 = (d854 - b698);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d856 = (d853 - b697);
        b699 = ((d853 < b697));
        t4032 = (d855 - b699);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d857 = (d850 - a5718);
        b700 = ((d850 < a5718));
        d858 = (d852 - a5717);
        d859 = (d858 - b700);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13707 = ((d852 < a5717));
        a13708 = ((d852 == a5717));
        a13709 = ((a13708) && (b700));
        b701 = ((a13707) || (a13709));
        /* Begin of MPSubDDD 64 */
        d860 = (d856 - a5716);
        b702 = ((d856 < a5716));
        d861 = (t4032 - a5715);
        d862 = (d861 - b702);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d863 = (d860 - b701);
        b703 = ((d860 < b701));
        t4033 = (d862 - b703);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13713 = ((t4032 < a5715));
        a13714 = ((t4032 == a5715));
        a13715 = ((a13714) && (b702));
        a13716 = ((a13713) || (a13715));
        /* MPEqual 64 */
        a13717 = ((d856 == a5716));
        a13718 = ((a13714) && (a13717));
        /* MPLessThan 64 */
        a13719 = ((a13718) && (b701));
        i591 = ((a13716) || (a13719));
        /* MPCondD 64 */
        t4034 = ((i591) ? (t4032) : (t4033));
        t4035 = ((i591) ? (d856) : (d863));
        /* MPCondD 64 */
        t4036 = ((i591) ? (d852) : (d859));
        t4037 = ((i591) ? (d850) : (d857));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a13720 = (1024*i39);
        a13721 = (2*threadIdx.x);
        a13722 = (a13720 + a13721);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a13723 = (2*a13675);
        a13724 = (a13723 + 1);
        /* MPAssignDD 64 */
        a13725 = (2*a13724);
        t4038 = P1[a13725];
        a13726 = (a13725 + 1);
        t4039 = P1[a13726];
        /* MPAddQDD 64 */
        s747 = (((uint128_t ) t4039) + ((uint128_t ) t4037));
        t4040 = ((uint64_t ) s747);
        c272 = (s747 >> 64);
        s748 = (((uint128_t ) t4038) + ((uint128_t ) t4036));
        s749 = (((uint128_t ) s748) + ((uint128_t ) c272));
        t4041 = ((uint64_t ) s749);
        c273 = (s749 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a13727 = (2*a13723);
        t4042 = P1[a13727];
        a13728 = (a13727 + 1);
        t4043 = P1[a13728];
        /* MPAddQDD 64 */
        s750 = (((uint128_t ) t4043) + ((uint128_t ) t4035));
        t4044 = ((uint64_t ) s750);
        c274 = (s750 >> 64);
        s751 = (((uint128_t ) t4042) + ((uint128_t ) t4034));
        s752 = (((uint128_t ) s751) + ((uint128_t ) c274));
        t4045 = ((uint64_t ) s752);
        /* MPPropagateCarry 64 */
        t4046 = (t4044 + c273);
        a13729 = ((t4046 == 0));
        a13730 = (t4045 + c273);
        t4047 = ((a13729) ? (a13730) : (t4045));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13737 = ((a5715 < t4047));
        a13738 = ((a5715 == t4047));
        a13739 = ((a5716 < t4046));
        a13740 = ((a13738) && (a13739));
        a13741 = ((a13737) || (a13740));
        /* MPEqual 64 */
        a13742 = ((a5716 == t4046));
        a13743 = ((a13738) && (a13742));
        /* MPLessThan 64 */
        a13744 = ((a5717 < t4041));
        a13745 = ((a5717 == t4041));
        a13746 = ((a5718 < t4040));
        a13747 = ((a13745) && (a13746));
        a13748 = ((a13744) || (a13747));
        a13749 = ((a13743) && (a13748));
        i592 = ((a13741) || (a13749));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d864 = (t4040 - a5718);
        b704 = ((t4040 < a5718));
        d865 = (t4041 - a5717);
        d866 = (d865 - b704);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13751 = ((t4041 < a5717));
        a13752 = ((t4041 == a5717));
        a13753 = ((a13752) && (b704));
        b705 = ((a13751) || (a13753));
        /* Begin of MPSubDDD 64 */
        d867 = (t4046 - a5716);
        b706 = ((t4046 < a5716));
        d868 = (t4047 - a5715);
        d869 = (d868 - b706);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d870 = (d867 - b705);
        b707 = ((d867 < b705));
        t4050 = (d869 - b707);
        /* End of MPSubDDD 128 */
        a13757 = (2*a13722);
        /* MPCondD 64 */
        a13758 = (2*a13757);
        P2[a13758] = ((i592) ? (t4050) : (t4047));
        a13759 = (a13758 + 1);
        P2[a13759] = ((i592) ? (d870) : (t4046));
        a13760 = (a13757 + 1);
        /* MPCondD 64 */
        a13761 = (2*a13760);
        P2[a13761] = ((i592) ? (d866) : (t4041));
        a13762 = (a13761 + 1);
        P2[a13762] = ((i592) ? (d864) : (t4040));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b708 = (a13721 + a13720);
        a13763 = (b708 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d871 = (t4039 - t4037);
        b709 = ((t4039 < t4037));
        d872 = (t4038 - t4036);
        d873 = (d872 - b709);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13765 = ((t4038 < t4036));
        a13766 = ((t4038 == t4036));
        a13767 = ((a13766) && (b709));
        b710 = ((a13765) || (a13767));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d874 = (t4043 - t4035);
        b711 = ((t4043 < t4035));
        d875 = (t4042 - t4034);
        d876 = (d875 - b711);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d877 = (d874 - b710);
        b712 = ((d874 < b710));
        t4051 = (d876 - b712);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s753 = (((uint128_t ) d871) + ((uint128_t ) a5718));
        t4052 = ((uint64_t ) s753);
        c276 = (s753 >> 64);
        s754 = (((uint128_t ) d873) + ((uint128_t ) a5717));
        s755 = (((uint128_t ) s754) + ((uint128_t ) c276));
        t4053 = ((uint64_t ) s755);
        c277 = (s755 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s756 = (((uint128_t ) d877) + ((uint128_t ) a5716));
        t4054 = ((uint64_t ) s756);
        c278 = (s756 >> 64);
        s757 = (((uint128_t ) t4051) + ((uint128_t ) a5715));
        s758 = (((uint128_t ) s757) + ((uint128_t ) c278));
        t4055 = ((uint64_t ) s758);
        /* MPPropagateCarry 64 */
        t4056 = (t4054 + c277);
        a13771 = ((t4056 == 0));
        a13772 = (t4055 + c277);
        t4057 = ((a13771) ? (a13772) : (t4055));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13779 = ((t4042 < t4034));
        a13780 = ((t4042 == t4034));
        a13781 = ((a13780) && (b711));
        a13782 = ((a13779) || (a13781));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a13783 = ((t4043 == t4035));
        a13784 = ((a13780) && (a13783));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13785 = ((a13784) && (b710));
        i593 = ((a13782) || (a13785));
        a13786 = (2*a13763);
        /* MPCondD 64 */
        a13787 = (2*a13786);
        P2[a13787] = ((i593) ? (t4057) : (t4051));
        a13788 = (a13787 + 1);
        P2[a13788] = ((i593) ? (t4056) : (d877));
        a13789 = (a13786 + 1);
        /* MPCondD 64 */
        a13790 = (2*a13789);
        P2[a13790] = ((i593) ? (t4053) : (d873));
        a13791 = (a13790 + 1);
        P2[a13791] = ((i593) ? (t4052) : (d871));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code2(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a13792, a13793, a13794, a13795, a13796, a13797, a13798, a13799, 
            a13800, a13801, a13802, a13803, a13804, a13805, a13806, a13807, 
            a13808, a13818, a13819, a13820, a13825, a13826, a13827, a13831, 
            a13832, a13833, a13834, a13835, a13836, a13837, a13838, a13839, 
            a13840, a13841, a13842, a13843, a13844, a13845, a13846, a13847, 
            a13855, a13856, a13857, a13858, a13859, a13860, a13861, a13862, 
            a13863, a13864, a13865, a13866, a13867, a13869, a13870, a13871, 
            a13875, a13876, a13877, a13878, a13879, a13880, a13881, a13883, 
            a13884, a13885, a13889, a13897, a13898, a13899, a13900, a13901, 
            a13902, a13903, a13904, a13905, a13906, a13907, a13908, a13909, 
            b713, b714, b715, b716, b717, b718, b719, b720, 
            b721, b722, b723, b724, b725, b726, b727, b728, 
            b729, b730, b731, c280, c281, c282, c284, c285, 
            c286, i594, i595, i596;
    uint64_t a13809, a13810, a13811, a13812, a13813, a13814, a13815, a13816, 
            a13848, a13890, a6100, a6101, a6102, a6103, a6131, a6132, 
            a6133, a6134, d878, d879, d880, d881, d882, d883, 
            d884, d885, d886, d887, d888, d889, d890, d891, 
            d892, d893, d894, d895, d896, d897, d898, d899, 
            d900, d901, d902, d903, d904, d905, t1981, t1982, 
            t1983, t1984, t1985, t1986, t1987, t1988, t1989, t1990, 
            t1991, t1992, t1993, t1994, t1995, t1996, t1997, t1998, 
            t1999, t2000, t2001, t2002, t2003, t2004, t4060, t4061, 
            t4062, t4063, t4064, t4065, t4066, t4067, t4068, t4069, 
            t4070, t4071, t4072, t4073, t4074, t4075, t4076, t4077, 
            t4078, t4079, t4080, t4081, t4082, t4083, t4084, t4085, 
            t4086, t4087, t4088, t4089, t4090, t4091, t4092, t4093, 
            t4094, t4095, t4096, t4097, t4098, t4099, t4100, t4103, 
            t4104, t4105, t4106, t4107, t4108, t4109, t4110;
    uint128_t s759, s760, s761, s762, s763, s764, s765, s766, 
            s767, s768, s769, s770;
    for(int i37 = 0; i37 <= 1023; i37++) {
        a13792 = (512*i37);
        a13793 = (a13792 + threadIdx.x);
        b713 = (threadIdx.x + a13792);
        a13794 = (b713 + 524288);
        a13795 = (a13794 % 4);
        a13796 = (4 + a13795);
        /* Begin of MPModMul 128 */
        a13797 = (2*a13796);
        a13798 = (a13797 + 1);
        a13799 = (2*a13794);
        a13800 = (a13799 + 1);
        /* MPAssignDD 64 */
        a13801 = (2*a13797);
        t4060 = twiddles[a13801];
        a13802 = (a13801 + 1);
        t4061 = twiddles[a13802];
        /* MPAssignDD 64 */
        a13803 = (2*a13798);
        t4062 = twiddles[a13803];
        a13804 = (a13803 + 1);
        t4063 = twiddles[a13804];
        /* MPAssignDD 64 */
        a13805 = (2*a13799);
        t4064 = P2[a13805];
        a13806 = (a13805 + 1);
        t4065 = P2[a13806];
        /* MPAssignDD 64 */
        a13807 = (2*a13800);
        t4066 = P2[a13807];
        a13808 = (a13807 + 1);
        t4067 = P2[a13808];
        MPMulQDD_L2(t1987, t1988, t1985, t1986, t1983, t1984, t1981, t1982, 
    t4060, t4061, t4062, t4063, t4064, t4065, t4066, t4067);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4068 = (t1983 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b714 = ((int) 1);
        t4069 = (288230376151711744 - b714);
        /* MPBinAndD 64 */
        t4070 = (((t1987)&(t4069)));
        t4071 = (((t1988)&((-1))));
        /* Begin of MPShiftLeft2D */
        a13809 = (t4070 << 6);
        a13810 = (t4071 >> 58);
        t4072 = (((a13809)|(a13810)));
        t4073 = (t4071 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4074 = (t1985 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4075 = (((t4073)|(t4074)));
        /* Begin of MPShiftLeft2D */
        a13811 = (t1985 << 6);
        a13812 = (t1986 >> 58);
        t4076 = (((a13811)|(a13812)));
        t4077 = (t1986 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4078 = (((t4077)|(t4068)));
        /* End of MPShiftRight3 */
        a6100 = mu[0];
        a6101 = mu[1];
        a6102 = mu[2];
        a6103 = mu[3];
        MPMulQDD_L2(t2003, t2004, t2001, t2002, t1999, t2000, t1997, t1998, 
    t4072, t4075, t4076, t4078, a6100, a6101, a6102, a6103);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4079 = (t2003 >> 1);
        a13813 = (t2003 << 63);
        a13814 = (t2004 >> 1);
        t4080 = (((a13813)|(a13814)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4081 = (t2004 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4082 = (t2001 >> 1);
        a13815 = (t2001 << 63);
        a13816 = (t2002 >> 1);
        t4083 = (((a13815)|(a13816)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4084 = (((t4081)|(t4082)));
        /* End of MPShiftRight2 */
        a6131 = modulus[0];
        a6132 = modulus[1];
        a6133 = modulus[2];
        a6134 = modulus[3];
        MPMulQDD_L2(t1995, t1996, t1993, t1994, t1991, t1992, t1989, t1990, 
    t4079, t4080, t4084, t4083, a6131, a6132, a6133, a6134);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d878 = (t1982 - t1990);
        b715 = ((t1982 < t1990));
        d879 = (t1981 - t1989);
        d880 = (d879 - b715);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13818 = ((t1981 < t1989));
        a13819 = ((t1981 == t1989));
        a13820 = ((a13819) && (b715));
        b716 = ((a13818) || (a13820));
        /* Begin of MPSubDDD 64 */
        d881 = (t1984 - t1992);
        b717 = ((t1984 < t1992));
        d882 = (t1983 - t1991);
        d883 = (d882 - b717);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d884 = (d881 - b716);
        b718 = ((d881 < b716));
        t4085 = (d883 - b718);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d885 = (d878 - a6134);
        b719 = ((d878 < a6134));
        d886 = (d880 - a6133);
        d887 = (d886 - b719);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13825 = ((d880 < a6133));
        a13826 = ((d880 == a6133));
        a13827 = ((a13826) && (b719));
        b720 = ((a13825) || (a13827));
        /* Begin of MPSubDDD 64 */
        d888 = (d884 - a6132);
        b721 = ((d884 < a6132));
        d889 = (t4085 - a6131);
        d890 = (d889 - b721);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d891 = (d888 - b720);
        b722 = ((d888 < b720));
        t4086 = (d890 - b722);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13831 = ((t4085 < a6131));
        a13832 = ((t4085 == a6131));
        a13833 = ((a13832) && (b721));
        a13834 = ((a13831) || (a13833));
        /* MPEqual 64 */
        a13835 = ((d884 == a6132));
        a13836 = ((a13832) && (a13835));
        /* MPLessThan 64 */
        a13837 = ((a13836) && (b720));
        i594 = ((a13834) || (a13837));
        /* MPCondD 64 */
        t4087 = ((i594) ? (t4085) : (t4086));
        t4088 = ((i594) ? (d884) : (d891));
        /* MPCondD 64 */
        t4089 = ((i594) ? (d880) : (d887));
        t4090 = ((i594) ? (d878) : (d885));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a13838 = (1024*i37);
        a13839 = (2*threadIdx.x);
        a13840 = (a13838 + a13839);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a13841 = (2*a13793);
        a13842 = (a13841 + 1);
        /* MPAssignDD 64 */
        a13843 = (2*a13842);
        t4091 = P2[a13843];
        a13844 = (a13843 + 1);
        t4092 = P2[a13844];
        /* MPAddQDD 64 */
        s759 = (((uint128_t ) t4092) + ((uint128_t ) t4090));
        t4093 = ((uint64_t ) s759);
        c280 = (s759 >> 64);
        s760 = (((uint128_t ) t4091) + ((uint128_t ) t4089));
        s761 = (((uint128_t ) s760) + ((uint128_t ) c280));
        t4094 = ((uint64_t ) s761);
        c281 = (s761 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a13845 = (2*a13841);
        t4095 = P2[a13845];
        a13846 = (a13845 + 1);
        t4096 = P2[a13846];
        /* MPAddQDD 64 */
        s762 = (((uint128_t ) t4096) + ((uint128_t ) t4088));
        t4097 = ((uint64_t ) s762);
        c282 = (s762 >> 64);
        s763 = (((uint128_t ) t4095) + ((uint128_t ) t4087));
        s764 = (((uint128_t ) s763) + ((uint128_t ) c282));
        t4098 = ((uint64_t ) s764);
        /* MPPropagateCarry 64 */
        t4099 = (t4097 + c281);
        a13847 = ((t4099 == 0));
        a13848 = (t4098 + c281);
        t4100 = ((a13847) ? (a13848) : (t4098));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13855 = ((a6131 < t4100));
        a13856 = ((a6131 == t4100));
        a13857 = ((a6132 < t4099));
        a13858 = ((a13856) && (a13857));
        a13859 = ((a13855) || (a13858));
        /* MPEqual 64 */
        a13860 = ((a6132 == t4099));
        a13861 = ((a13856) && (a13860));
        /* MPLessThan 64 */
        a13862 = ((a6133 < t4094));
        a13863 = ((a6133 == t4094));
        a13864 = ((a6134 < t4093));
        a13865 = ((a13863) && (a13864));
        a13866 = ((a13862) || (a13865));
        a13867 = ((a13861) && (a13866));
        i595 = ((a13859) || (a13867));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d892 = (t4093 - a6134);
        b723 = ((t4093 < a6134));
        d893 = (t4094 - a6133);
        d894 = (d893 - b723);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13869 = ((t4094 < a6133));
        a13870 = ((t4094 == a6133));
        a13871 = ((a13870) && (b723));
        b724 = ((a13869) || (a13871));
        /* Begin of MPSubDDD 64 */
        d895 = (t4099 - a6132);
        b725 = ((t4099 < a6132));
        d896 = (t4100 - a6131);
        d897 = (d896 - b725);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d898 = (d895 - b724);
        b726 = ((d895 < b724));
        t4103 = (d897 - b726);
        /* End of MPSubDDD 128 */
        a13875 = (2*a13840);
        /* MPCondD 64 */
        a13876 = (2*a13875);
        P1[a13876] = ((i595) ? (t4103) : (t4100));
        a13877 = (a13876 + 1);
        P1[a13877] = ((i595) ? (d898) : (t4099));
        a13878 = (a13875 + 1);
        /* MPCondD 64 */
        a13879 = (2*a13878);
        P1[a13879] = ((i595) ? (d894) : (t4094));
        a13880 = (a13879 + 1);
        P1[a13880] = ((i595) ? (d892) : (t4093));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b727 = (a13839 + a13838);
        a13881 = (b727 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d899 = (t4092 - t4090);
        b728 = ((t4092 < t4090));
        d900 = (t4091 - t4089);
        d901 = (d900 - b728);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13883 = ((t4091 < t4089));
        a13884 = ((t4091 == t4089));
        a13885 = ((a13884) && (b728));
        b729 = ((a13883) || (a13885));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d902 = (t4096 - t4088);
        b730 = ((t4096 < t4088));
        d903 = (t4095 - t4087);
        d904 = (d903 - b730);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d905 = (d902 - b729);
        b731 = ((d902 < b729));
        t4104 = (d904 - b731);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s765 = (((uint128_t ) d899) + ((uint128_t ) a6134));
        t4105 = ((uint64_t ) s765);
        c284 = (s765 >> 64);
        s766 = (((uint128_t ) d901) + ((uint128_t ) a6133));
        s767 = (((uint128_t ) s766) + ((uint128_t ) c284));
        t4106 = ((uint64_t ) s767);
        c285 = (s767 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s768 = (((uint128_t ) d905) + ((uint128_t ) a6132));
        t4107 = ((uint64_t ) s768);
        c286 = (s768 >> 64);
        s769 = (((uint128_t ) t4104) + ((uint128_t ) a6131));
        s770 = (((uint128_t ) s769) + ((uint128_t ) c286));
        t4108 = ((uint64_t ) s770);
        /* MPPropagateCarry 64 */
        t4109 = (t4107 + c285);
        a13889 = ((t4109 == 0));
        a13890 = (t4108 + c285);
        t4110 = ((a13889) ? (a13890) : (t4108));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13897 = ((t4095 < t4087));
        a13898 = ((t4095 == t4087));
        a13899 = ((a13898) && (b730));
        a13900 = ((a13897) || (a13899));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a13901 = ((t4096 == t4088));
        a13902 = ((a13898) && (a13901));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a13903 = ((a13902) && (b729));
        i596 = ((a13900) || (a13903));
        a13904 = (2*a13881);
        /* MPCondD 64 */
        a13905 = (2*a13904);
        P1[a13905] = ((i596) ? (t4110) : (t4104));
        a13906 = (a13905 + 1);
        P1[a13906] = ((i596) ? (t4109) : (d905));
        a13907 = (a13904 + 1);
        /* MPCondD 64 */
        a13908 = (2*a13907);
        P1[a13908] = ((i596) ? (t4106) : (d901));
        a13909 = (a13908 + 1);
        P1[a13909] = ((i596) ? (t4105) : (d899));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code3(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a13910, a13911, a13912, a13913, a13914, a13915, a13916, a13917, 
            a13918, a13919, a13920, a13921, a13922, a13923, a13924, a13925, 
            a13926, a13936, a13937, a13938, a13943, a13944, a13945, a13949, 
            a13950, a13951, a13952, a13953, a13954, a13955, a13956, a13957, 
            a13958, a13959, a13960, a13961, a13962, a13963, a13964, a13965, 
            a13973, a13974, a13975, a13976, a13977, a13978, a13979, a13980, 
            a13981, a13982, a13983, a13984, a13985, a13987, a13988, a13989, 
            a13993, a13994, a13995, a13996, a13997, a13998, a13999, a14001, 
            a14002, a14003, a14007, a14015, a14016, a14017, a14018, a14019, 
            a14020, a14021, a14022, a14023, a14024, a14025, a14026, a14027, 
            b732, b733, b734, b735, b736, b737, b738, b739, 
            b740, b741, b742, b743, b744, b745, b746, b747, 
            b748, b749, b750, c288, c289, c290, c292, c293, 
            c294, i597, i598, i599;
    uint64_t a13927, a13928, a13929, a13930, a13931, a13932, a13933, a13934, 
            a13966, a14008, a6516, a6517, a6518, a6519, a6547, a6548, 
            a6549, a6550, d906, d907, d908, d909, d910, d911, 
            d912, d913, d914, d915, d916, d917, d918, d919, 
            d920, d921, d922, d923, d924, d925, d926, d927, 
            d928, d929, d930, d931, d932, d933, t2021, t2022, 
            t2023, t2024, t2025, t2026, t2027, t2028, t2029, t2030, 
            t2031, t2032, t2033, t2034, t2035, t2036, t2037, t2038, 
            t2039, t2040, t2041, t2042, t2043, t2044, t4113, t4114, 
            t4115, t4116, t4117, t4118, t4119, t4120, t4121, t4122, 
            t4123, t4124, t4125, t4126, t4127, t4128, t4129, t4130, 
            t4131, t4132, t4133, t4134, t4135, t4136, t4137, t4138, 
            t4139, t4140, t4141, t4142, t4143, t4144, t4145, t4146, 
            t4147, t4148, t4149, t4150, t4151, t4152, t4153, t4156, 
            t4157, t4158, t4159, t4160, t4161, t4162, t4163;
    uint128_t s771, s772, s773, s774, s775, s776, s777, s778, 
            s779, s780, s781, s782;
    for(int i35 = 0; i35 <= 1023; i35++) {
        a13910 = (512*i35);
        a13911 = (a13910 + threadIdx.x);
        b732 = (threadIdx.x + a13910);
        a13912 = (b732 + 524288);
        a13913 = (a13912 % 8);
        a13914 = (8 + a13913);
        /* Begin of MPModMul 128 */
        a13915 = (2*a13914);
        a13916 = (a13915 + 1);
        a13917 = (2*a13912);
        a13918 = (a13917 + 1);
        /* MPAssignDD 64 */
        a13919 = (2*a13915);
        t4113 = twiddles[a13919];
        a13920 = (a13919 + 1);
        t4114 = twiddles[a13920];
        /* MPAssignDD 64 */
        a13921 = (2*a13916);
        t4115 = twiddles[a13921];
        a13922 = (a13921 + 1);
        t4116 = twiddles[a13922];
        /* MPAssignDD 64 */
        a13923 = (2*a13917);
        t4117 = P1[a13923];
        a13924 = (a13923 + 1);
        t4118 = P1[a13924];
        /* MPAssignDD 64 */
        a13925 = (2*a13918);
        t4119 = P1[a13925];
        a13926 = (a13925 + 1);
        t4120 = P1[a13926];
        MPMulQDD_L2(t2027, t2028, t2025, t2026, t2023, t2024, t2021, t2022, 
    t4113, t4114, t4115, t4116, t4117, t4118, t4119, t4120);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4121 = (t2023 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b733 = ((int) 1);
        t4122 = (288230376151711744 - b733);
        /* MPBinAndD 64 */
        t4123 = (((t2027)&(t4122)));
        t4124 = (((t2028)&((-1))));
        /* Begin of MPShiftLeft2D */
        a13927 = (t4123 << 6);
        a13928 = (t4124 >> 58);
        t4125 = (((a13927)|(a13928)));
        t4126 = (t4124 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4127 = (t2025 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4128 = (((t4126)|(t4127)));
        /* Begin of MPShiftLeft2D */
        a13929 = (t2025 << 6);
        a13930 = (t2026 >> 58);
        t4129 = (((a13929)|(a13930)));
        t4130 = (t2026 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4131 = (((t4130)|(t4121)));
        /* End of MPShiftRight3 */
        a6516 = mu[0];
        a6517 = mu[1];
        a6518 = mu[2];
        a6519 = mu[3];
        MPMulQDD_L2(t2043, t2044, t2041, t2042, t2039, t2040, t2037, t2038, 
    t4125, t4128, t4129, t4131, a6516, a6517, a6518, a6519);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4132 = (t2043 >> 1);
        a13931 = (t2043 << 63);
        a13932 = (t2044 >> 1);
        t4133 = (((a13931)|(a13932)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4134 = (t2044 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4135 = (t2041 >> 1);
        a13933 = (t2041 << 63);
        a13934 = (t2042 >> 1);
        t4136 = (((a13933)|(a13934)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4137 = (((t4134)|(t4135)));
        /* End of MPShiftRight2 */
        a6547 = modulus[0];
        a6548 = modulus[1];
        a6549 = modulus[2];
        a6550 = modulus[3];
        MPMulQDD_L2(t2035, t2036, t2033, t2034, t2031, t2032, t2029, t2030, 
    t4132, t4133, t4137, t4136, a6547, a6548, a6549, a6550);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d906 = (t2022 - t2030);
        b734 = ((t2022 < t2030));
        d907 = (t2021 - t2029);
        d908 = (d907 - b734);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13936 = ((t2021 < t2029));
        a13937 = ((t2021 == t2029));
        a13938 = ((a13937) && (b734));
        b735 = ((a13936) || (a13938));
        /* Begin of MPSubDDD 64 */
        d909 = (t2024 - t2032);
        b736 = ((t2024 < t2032));
        d910 = (t2023 - t2031);
        d911 = (d910 - b736);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d912 = (d909 - b735);
        b737 = ((d909 < b735));
        t4138 = (d911 - b737);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d913 = (d906 - a6550);
        b738 = ((d906 < a6550));
        d914 = (d908 - a6549);
        d915 = (d914 - b738);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13943 = ((d908 < a6549));
        a13944 = ((d908 == a6549));
        a13945 = ((a13944) && (b738));
        b739 = ((a13943) || (a13945));
        /* Begin of MPSubDDD 64 */
        d916 = (d912 - a6548);
        b740 = ((d912 < a6548));
        d917 = (t4138 - a6547);
        d918 = (d917 - b740);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d919 = (d916 - b739);
        b741 = ((d916 < b739));
        t4139 = (d918 - b741);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13949 = ((t4138 < a6547));
        a13950 = ((t4138 == a6547));
        a13951 = ((a13950) && (b740));
        a13952 = ((a13949) || (a13951));
        /* MPEqual 64 */
        a13953 = ((d912 == a6548));
        a13954 = ((a13950) && (a13953));
        /* MPLessThan 64 */
        a13955 = ((a13954) && (b739));
        i597 = ((a13952) || (a13955));
        /* MPCondD 64 */
        t4140 = ((i597) ? (t4138) : (t4139));
        t4141 = ((i597) ? (d912) : (d919));
        /* MPCondD 64 */
        t4142 = ((i597) ? (d908) : (d915));
        t4143 = ((i597) ? (d906) : (d913));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a13956 = (1024*i35);
        a13957 = (2*threadIdx.x);
        a13958 = (a13956 + a13957);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a13959 = (2*a13911);
        a13960 = (a13959 + 1);
        /* MPAssignDD 64 */
        a13961 = (2*a13960);
        t4144 = P1[a13961];
        a13962 = (a13961 + 1);
        t4145 = P1[a13962];
        /* MPAddQDD 64 */
        s771 = (((uint128_t ) t4145) + ((uint128_t ) t4143));
        t4146 = ((uint64_t ) s771);
        c288 = (s771 >> 64);
        s772 = (((uint128_t ) t4144) + ((uint128_t ) t4142));
        s773 = (((uint128_t ) s772) + ((uint128_t ) c288));
        t4147 = ((uint64_t ) s773);
        c289 = (s773 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a13963 = (2*a13959);
        t4148 = P1[a13963];
        a13964 = (a13963 + 1);
        t4149 = P1[a13964];
        /* MPAddQDD 64 */
        s774 = (((uint128_t ) t4149) + ((uint128_t ) t4141));
        t4150 = ((uint64_t ) s774);
        c290 = (s774 >> 64);
        s775 = (((uint128_t ) t4148) + ((uint128_t ) t4140));
        s776 = (((uint128_t ) s775) + ((uint128_t ) c290));
        t4151 = ((uint64_t ) s776);
        /* MPPropagateCarry 64 */
        t4152 = (t4150 + c289);
        a13965 = ((t4152 == 0));
        a13966 = (t4151 + c289);
        t4153 = ((a13965) ? (a13966) : (t4151));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a13973 = ((a6547 < t4153));
        a13974 = ((a6547 == t4153));
        a13975 = ((a6548 < t4152));
        a13976 = ((a13974) && (a13975));
        a13977 = ((a13973) || (a13976));
        /* MPEqual 64 */
        a13978 = ((a6548 == t4152));
        a13979 = ((a13974) && (a13978));
        /* MPLessThan 64 */
        a13980 = ((a6549 < t4147));
        a13981 = ((a6549 == t4147));
        a13982 = ((a6550 < t4146));
        a13983 = ((a13981) && (a13982));
        a13984 = ((a13980) || (a13983));
        a13985 = ((a13979) && (a13984));
        i598 = ((a13977) || (a13985));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d920 = (t4146 - a6550);
        b742 = ((t4146 < a6550));
        d921 = (t4147 - a6549);
        d922 = (d921 - b742);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a13987 = ((t4147 < a6549));
        a13988 = ((t4147 == a6549));
        a13989 = ((a13988) && (b742));
        b743 = ((a13987) || (a13989));
        /* Begin of MPSubDDD 64 */
        d923 = (t4152 - a6548);
        b744 = ((t4152 < a6548));
        d924 = (t4153 - a6547);
        d925 = (d924 - b744);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d926 = (d923 - b743);
        b745 = ((d923 < b743));
        t4156 = (d925 - b745);
        /* End of MPSubDDD 128 */
        a13993 = (2*a13958);
        /* MPCondD 64 */
        a13994 = (2*a13993);
        P2[a13994] = ((i598) ? (t4156) : (t4153));
        a13995 = (a13994 + 1);
        P2[a13995] = ((i598) ? (d926) : (t4152));
        a13996 = (a13993 + 1);
        /* MPCondD 64 */
        a13997 = (2*a13996);
        P2[a13997] = ((i598) ? (d922) : (t4147));
        a13998 = (a13997 + 1);
        P2[a13998] = ((i598) ? (d920) : (t4146));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b746 = (a13957 + a13956);
        a13999 = (b746 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d927 = (t4145 - t4143);
        b747 = ((t4145 < t4143));
        d928 = (t4144 - t4142);
        d929 = (d928 - b747);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14001 = ((t4144 < t4142));
        a14002 = ((t4144 == t4142));
        a14003 = ((a14002) && (b747));
        b748 = ((a14001) || (a14003));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d930 = (t4149 - t4141);
        b749 = ((t4149 < t4141));
        d931 = (t4148 - t4140);
        d932 = (d931 - b749);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d933 = (d930 - b748);
        b750 = ((d930 < b748));
        t4157 = (d932 - b750);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s777 = (((uint128_t ) d927) + ((uint128_t ) a6550));
        t4158 = ((uint64_t ) s777);
        c292 = (s777 >> 64);
        s778 = (((uint128_t ) d929) + ((uint128_t ) a6549));
        s779 = (((uint128_t ) s778) + ((uint128_t ) c292));
        t4159 = ((uint64_t ) s779);
        c293 = (s779 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s780 = (((uint128_t ) d933) + ((uint128_t ) a6548));
        t4160 = ((uint64_t ) s780);
        c294 = (s780 >> 64);
        s781 = (((uint128_t ) t4157) + ((uint128_t ) a6547));
        s782 = (((uint128_t ) s781) + ((uint128_t ) c294));
        t4161 = ((uint64_t ) s782);
        /* MPPropagateCarry 64 */
        t4162 = (t4160 + c293);
        a14007 = ((t4162 == 0));
        a14008 = (t4161 + c293);
        t4163 = ((a14007) ? (a14008) : (t4161));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14015 = ((t4148 < t4140));
        a14016 = ((t4148 == t4140));
        a14017 = ((a14016) && (b749));
        a14018 = ((a14015) || (a14017));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14019 = ((t4149 == t4141));
        a14020 = ((a14016) && (a14019));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14021 = ((a14020) && (b748));
        i599 = ((a14018) || (a14021));
        a14022 = (2*a13999);
        /* MPCondD 64 */
        a14023 = (2*a14022);
        P2[a14023] = ((i599) ? (t4163) : (t4157));
        a14024 = (a14023 + 1);
        P2[a14024] = ((i599) ? (t4162) : (d933));
        a14025 = (a14022 + 1);
        /* MPCondD 64 */
        a14026 = (2*a14025);
        P2[a14026] = ((i599) ? (t4159) : (d929));
        a14027 = (a14026 + 1);
        P2[a14027] = ((i599) ? (t4158) : (d927));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code4(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14028, a14029, a14030, a14031, a14032, a14033, a14034, a14035, 
            a14036, a14037, a14038, a14039, a14040, a14041, a14042, a14043, 
            a14044, a14054, a14055, a14056, a14061, a14062, a14063, a14067, 
            a14068, a14069, a14070, a14071, a14072, a14073, a14074, a14075, 
            a14076, a14077, a14078, a14079, a14080, a14081, a14082, a14083, 
            a14091, a14092, a14093, a14094, a14095, a14096, a14097, a14098, 
            a14099, a14100, a14101, a14102, a14103, a14105, a14106, a14107, 
            a14111, a14112, a14113, a14114, a14115, a14116, a14117, a14119, 
            a14120, a14121, a14125, a14133, a14134, a14135, a14136, a14137, 
            a14138, a14139, a14140, a14141, a14142, a14143, a14144, a14145, 
            b751, b752, b753, b754, b755, b756, b757, b758, 
            b759, b760, b761, b762, b763, b764, b765, b766, 
            b767, b768, b769, c296, c297, c298, c300, c301, 
            c302, i600, i601, i602;
    uint64_t a14045, a14046, a14047, a14048, a14049, a14050, a14051, a14052, 
            a14084, a14126, a6932, a6933, a6934, a6935, a6963, a6964, 
            a6965, a6966, d934, d935, d936, d937, d938, d939, 
            d940, d941, d942, d943, d944, d945, d946, d947, 
            d948, d949, d950, d951, d952, d953, d954, d955, 
            d956, d957, d958, d959, d960, d961, t2057, t2058, 
            t2059, t2060, t2061, t2062, t2063, t2064, t2065, t2066, 
            t2067, t2068, t2069, t2070, t2071, t2072, t2073, t2074, 
            t2075, t2076, t2077, t2078, t2079, t2080, t4166, t4167, 
            t4168, t4169, t4170, t4171, t4172, t4173, t4174, t4175, 
            t4176, t4177, t4178, t4179, t4180, t4181, t4182, t4183, 
            t4184, t4185, t4186, t4187, t4188, t4189, t4190, t4191, 
            t4192, t4193, t4194, t4195, t4196, t4197, t4198, t4199, 
            t4200, t4201, t4202, t4203, t4204, t4205, t4206, t4209, 
            t4210, t4211, t4212, t4213, t4214, t4215, t4216;
    uint128_t s783, s784, s785, s786, s787, s788, s789, s790, 
            s791, s792, s793, s794;
    for(int i33 = 0; i33 <= 1023; i33++) {
        a14028 = (512*i33);
        a14029 = (a14028 + threadIdx.x);
        b751 = (threadIdx.x + a14028);
        a14030 = (b751 + 524288);
        a14031 = (a14030 % 16);
        a14032 = (16 + a14031);
        /* Begin of MPModMul 128 */
        a14033 = (2*a14032);
        a14034 = (a14033 + 1);
        a14035 = (2*a14030);
        a14036 = (a14035 + 1);
        /* MPAssignDD 64 */
        a14037 = (2*a14033);
        t4166 = twiddles[a14037];
        a14038 = (a14037 + 1);
        t4167 = twiddles[a14038];
        /* MPAssignDD 64 */
        a14039 = (2*a14034);
        t4168 = twiddles[a14039];
        a14040 = (a14039 + 1);
        t4169 = twiddles[a14040];
        /* MPAssignDD 64 */
        a14041 = (2*a14035);
        t4170 = P2[a14041];
        a14042 = (a14041 + 1);
        t4171 = P2[a14042];
        /* MPAssignDD 64 */
        a14043 = (2*a14036);
        t4172 = P2[a14043];
        a14044 = (a14043 + 1);
        t4173 = P2[a14044];
        MPMulQDD_L2(t2063, t2064, t2061, t2062, t2059, t2060, t2057, t2058, 
    t4166, t4167, t4168, t4169, t4170, t4171, t4172, t4173);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4174 = (t2059 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b752 = ((int) 1);
        t4175 = (288230376151711744 - b752);
        /* MPBinAndD 64 */
        t4176 = (((t2063)&(t4175)));
        t4177 = (((t2064)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14045 = (t4176 << 6);
        a14046 = (t4177 >> 58);
        t4178 = (((a14045)|(a14046)));
        t4179 = (t4177 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4180 = (t2061 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4181 = (((t4179)|(t4180)));
        /* Begin of MPShiftLeft2D */
        a14047 = (t2061 << 6);
        a14048 = (t2062 >> 58);
        t4182 = (((a14047)|(a14048)));
        t4183 = (t2062 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4184 = (((t4183)|(t4174)));
        /* End of MPShiftRight3 */
        a6932 = mu[0];
        a6933 = mu[1];
        a6934 = mu[2];
        a6935 = mu[3];
        MPMulQDD_L2(t2079, t2080, t2077, t2078, t2075, t2076, t2073, t2074, 
    t4178, t4181, t4182, t4184, a6932, a6933, a6934, a6935);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4185 = (t2079 >> 1);
        a14049 = (t2079 << 63);
        a14050 = (t2080 >> 1);
        t4186 = (((a14049)|(a14050)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4187 = (t2080 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4188 = (t2077 >> 1);
        a14051 = (t2077 << 63);
        a14052 = (t2078 >> 1);
        t4189 = (((a14051)|(a14052)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4190 = (((t4187)|(t4188)));
        /* End of MPShiftRight2 */
        a6963 = modulus[0];
        a6964 = modulus[1];
        a6965 = modulus[2];
        a6966 = modulus[3];
        MPMulQDD_L2(t2071, t2072, t2069, t2070, t2067, t2068, t2065, t2066, 
    t4185, t4186, t4190, t4189, a6963, a6964, a6965, a6966);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d934 = (t2058 - t2066);
        b753 = ((t2058 < t2066));
        d935 = (t2057 - t2065);
        d936 = (d935 - b753);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14054 = ((t2057 < t2065));
        a14055 = ((t2057 == t2065));
        a14056 = ((a14055) && (b753));
        b754 = ((a14054) || (a14056));
        /* Begin of MPSubDDD 64 */
        d937 = (t2060 - t2068);
        b755 = ((t2060 < t2068));
        d938 = (t2059 - t2067);
        d939 = (d938 - b755);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d940 = (d937 - b754);
        b756 = ((d937 < b754));
        t4191 = (d939 - b756);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d941 = (d934 - a6966);
        b757 = ((d934 < a6966));
        d942 = (d936 - a6965);
        d943 = (d942 - b757);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14061 = ((d936 < a6965));
        a14062 = ((d936 == a6965));
        a14063 = ((a14062) && (b757));
        b758 = ((a14061) || (a14063));
        /* Begin of MPSubDDD 64 */
        d944 = (d940 - a6964);
        b759 = ((d940 < a6964));
        d945 = (t4191 - a6963);
        d946 = (d945 - b759);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d947 = (d944 - b758);
        b760 = ((d944 < b758));
        t4192 = (d946 - b760);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14067 = ((t4191 < a6963));
        a14068 = ((t4191 == a6963));
        a14069 = ((a14068) && (b759));
        a14070 = ((a14067) || (a14069));
        /* MPEqual 64 */
        a14071 = ((d940 == a6964));
        a14072 = ((a14068) && (a14071));
        /* MPLessThan 64 */
        a14073 = ((a14072) && (b758));
        i600 = ((a14070) || (a14073));
        /* MPCondD 64 */
        t4193 = ((i600) ? (t4191) : (t4192));
        t4194 = ((i600) ? (d940) : (d947));
        /* MPCondD 64 */
        t4195 = ((i600) ? (d936) : (d943));
        t4196 = ((i600) ? (d934) : (d941));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14074 = (1024*i33);
        a14075 = (2*threadIdx.x);
        a14076 = (a14074 + a14075);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14077 = (2*a14029);
        a14078 = (a14077 + 1);
        /* MPAssignDD 64 */
        a14079 = (2*a14078);
        t4197 = P2[a14079];
        a14080 = (a14079 + 1);
        t4198 = P2[a14080];
        /* MPAddQDD 64 */
        s783 = (((uint128_t ) t4198) + ((uint128_t ) t4196));
        t4199 = ((uint64_t ) s783);
        c296 = (s783 >> 64);
        s784 = (((uint128_t ) t4197) + ((uint128_t ) t4195));
        s785 = (((uint128_t ) s784) + ((uint128_t ) c296));
        t4200 = ((uint64_t ) s785);
        c297 = (s785 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14081 = (2*a14077);
        t4201 = P2[a14081];
        a14082 = (a14081 + 1);
        t4202 = P2[a14082];
        /* MPAddQDD 64 */
        s786 = (((uint128_t ) t4202) + ((uint128_t ) t4194));
        t4203 = ((uint64_t ) s786);
        c298 = (s786 >> 64);
        s787 = (((uint128_t ) t4201) + ((uint128_t ) t4193));
        s788 = (((uint128_t ) s787) + ((uint128_t ) c298));
        t4204 = ((uint64_t ) s788);
        /* MPPropagateCarry 64 */
        t4205 = (t4203 + c297);
        a14083 = ((t4205 == 0));
        a14084 = (t4204 + c297);
        t4206 = ((a14083) ? (a14084) : (t4204));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14091 = ((a6963 < t4206));
        a14092 = ((a6963 == t4206));
        a14093 = ((a6964 < t4205));
        a14094 = ((a14092) && (a14093));
        a14095 = ((a14091) || (a14094));
        /* MPEqual 64 */
        a14096 = ((a6964 == t4205));
        a14097 = ((a14092) && (a14096));
        /* MPLessThan 64 */
        a14098 = ((a6965 < t4200));
        a14099 = ((a6965 == t4200));
        a14100 = ((a6966 < t4199));
        a14101 = ((a14099) && (a14100));
        a14102 = ((a14098) || (a14101));
        a14103 = ((a14097) && (a14102));
        i601 = ((a14095) || (a14103));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d948 = (t4199 - a6966);
        b761 = ((t4199 < a6966));
        d949 = (t4200 - a6965);
        d950 = (d949 - b761);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14105 = ((t4200 < a6965));
        a14106 = ((t4200 == a6965));
        a14107 = ((a14106) && (b761));
        b762 = ((a14105) || (a14107));
        /* Begin of MPSubDDD 64 */
        d951 = (t4205 - a6964);
        b763 = ((t4205 < a6964));
        d952 = (t4206 - a6963);
        d953 = (d952 - b763);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d954 = (d951 - b762);
        b764 = ((d951 < b762));
        t4209 = (d953 - b764);
        /* End of MPSubDDD 128 */
        a14111 = (2*a14076);
        /* MPCondD 64 */
        a14112 = (2*a14111);
        P1[a14112] = ((i601) ? (t4209) : (t4206));
        a14113 = (a14112 + 1);
        P1[a14113] = ((i601) ? (d954) : (t4205));
        a14114 = (a14111 + 1);
        /* MPCondD 64 */
        a14115 = (2*a14114);
        P1[a14115] = ((i601) ? (d950) : (t4200));
        a14116 = (a14115 + 1);
        P1[a14116] = ((i601) ? (d948) : (t4199));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b765 = (a14075 + a14074);
        a14117 = (b765 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d955 = (t4198 - t4196);
        b766 = ((t4198 < t4196));
        d956 = (t4197 - t4195);
        d957 = (d956 - b766);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14119 = ((t4197 < t4195));
        a14120 = ((t4197 == t4195));
        a14121 = ((a14120) && (b766));
        b767 = ((a14119) || (a14121));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d958 = (t4202 - t4194);
        b768 = ((t4202 < t4194));
        d959 = (t4201 - t4193);
        d960 = (d959 - b768);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d961 = (d958 - b767);
        b769 = ((d958 < b767));
        t4210 = (d960 - b769);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s789 = (((uint128_t ) d955) + ((uint128_t ) a6966));
        t4211 = ((uint64_t ) s789);
        c300 = (s789 >> 64);
        s790 = (((uint128_t ) d957) + ((uint128_t ) a6965));
        s791 = (((uint128_t ) s790) + ((uint128_t ) c300));
        t4212 = ((uint64_t ) s791);
        c301 = (s791 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s792 = (((uint128_t ) d961) + ((uint128_t ) a6964));
        t4213 = ((uint64_t ) s792);
        c302 = (s792 >> 64);
        s793 = (((uint128_t ) t4210) + ((uint128_t ) a6963));
        s794 = (((uint128_t ) s793) + ((uint128_t ) c302));
        t4214 = ((uint64_t ) s794);
        /* MPPropagateCarry 64 */
        t4215 = (t4213 + c301);
        a14125 = ((t4215 == 0));
        a14126 = (t4214 + c301);
        t4216 = ((a14125) ? (a14126) : (t4214));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14133 = ((t4201 < t4193));
        a14134 = ((t4201 == t4193));
        a14135 = ((a14134) && (b768));
        a14136 = ((a14133) || (a14135));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14137 = ((t4202 == t4194));
        a14138 = ((a14134) && (a14137));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14139 = ((a14138) && (b767));
        i602 = ((a14136) || (a14139));
        a14140 = (2*a14117);
        /* MPCondD 64 */
        a14141 = (2*a14140);
        P1[a14141] = ((i602) ? (t4216) : (t4210));
        a14142 = (a14141 + 1);
        P1[a14142] = ((i602) ? (t4215) : (d961));
        a14143 = (a14140 + 1);
        /* MPCondD 64 */
        a14144 = (2*a14143);
        P1[a14144] = ((i602) ? (t4212) : (d957));
        a14145 = (a14144 + 1);
        P1[a14145] = ((i602) ? (t4211) : (d955));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code5(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14146, a14147, a14148, a14149, a14150, a14151, a14152, a14153, 
            a14154, a14155, a14156, a14157, a14158, a14159, a14160, a14161, 
            a14162, a14172, a14173, a14174, a14179, a14180, a14181, a14185, 
            a14186, a14187, a14188, a14189, a14190, a14191, a14192, a14193, 
            a14194, a14195, a14196, a14197, a14198, a14199, a14200, a14201, 
            a14209, a14210, a14211, a14212, a14213, a14214, a14215, a14216, 
            a14217, a14218, a14219, a14220, a14221, a14223, a14224, a14225, 
            a14229, a14230, a14231, a14232, a14233, a14234, a14235, a14237, 
            a14238, a14239, a14243, a14251, a14252, a14253, a14254, a14255, 
            a14256, a14257, a14258, a14259, a14260, a14261, a14262, a14263, 
            b770, b771, b772, b773, b774, b775, b776, b777, 
            b778, b779, b780, b781, b782, b783, b784, b785, 
            b786, b787, b788, c304, c305, c306, c308, c309, 
            c310, i603, i604, i605;
    uint64_t a14163, a14164, a14165, a14166, a14167, a14168, a14169, a14170, 
            a14202, a14244, a7348, a7349, a7350, a7351, a7379, a7380, 
            a7381, a7382, d962, d963, d964, d965, d966, d967, 
            d968, d969, d970, d971, d972, d973, d974, d975, 
            d976, d977, d978, d979, d980, d981, d982, d983, 
            d984, d985, d986, d987, d988, d989, t2097, t2098, 
            t2099, t2100, t2101, t2102, t2103, t2104, t2105, t2106, 
            t2107, t2108, t2109, t2110, t2111, t2112, t2113, t2114, 
            t2115, t2116, t2117, t2118, t2119, t2120, t4219, t4220, 
            t4221, t4222, t4223, t4224, t4225, t4226, t4227, t4228, 
            t4229, t4230, t4231, t4232, t4233, t4234, t4235, t4236, 
            t4237, t4238, t4239, t4240, t4241, t4242, t4243, t4244, 
            t4245, t4246, t4247, t4248, t4249, t4250, t4251, t4252, 
            t4253, t4254, t4255, t4256, t4257, t4258, t4259, t4262, 
            t4263, t4264, t4265, t4266, t4267, t4268, t4269;
    uint128_t s795, s796, s797, s798, s799, s800, s801, s802, 
            s803, s804, s805, s806;
    for(int i31 = 0; i31 <= 1023; i31++) {
        a14146 = (512*i31);
        a14147 = (a14146 + threadIdx.x);
        b770 = (threadIdx.x + a14146);
        a14148 = (b770 + 524288);
        a14149 = (a14148 % 32);
        a14150 = (32 + a14149);
        /* Begin of MPModMul 128 */
        a14151 = (2*a14150);
        a14152 = (a14151 + 1);
        a14153 = (2*a14148);
        a14154 = (a14153 + 1);
        /* MPAssignDD 64 */
        a14155 = (2*a14151);
        t4219 = twiddles[a14155];
        a14156 = (a14155 + 1);
        t4220 = twiddles[a14156];
        /* MPAssignDD 64 */
        a14157 = (2*a14152);
        t4221 = twiddles[a14157];
        a14158 = (a14157 + 1);
        t4222 = twiddles[a14158];
        /* MPAssignDD 64 */
        a14159 = (2*a14153);
        t4223 = P1[a14159];
        a14160 = (a14159 + 1);
        t4224 = P1[a14160];
        /* MPAssignDD 64 */
        a14161 = (2*a14154);
        t4225 = P1[a14161];
        a14162 = (a14161 + 1);
        t4226 = P1[a14162];
        MPMulQDD_L2(t2103, t2104, t2101, t2102, t2099, t2100, t2097, t2098, 
    t4219, t4220, t4221, t4222, t4223, t4224, t4225, t4226);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4227 = (t2099 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b771 = ((int) 1);
        t4228 = (288230376151711744 - b771);
        /* MPBinAndD 64 */
        t4229 = (((t2103)&(t4228)));
        t4230 = (((t2104)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14163 = (t4229 << 6);
        a14164 = (t4230 >> 58);
        t4231 = (((a14163)|(a14164)));
        t4232 = (t4230 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4233 = (t2101 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4234 = (((t4232)|(t4233)));
        /* Begin of MPShiftLeft2D */
        a14165 = (t2101 << 6);
        a14166 = (t2102 >> 58);
        t4235 = (((a14165)|(a14166)));
        t4236 = (t2102 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4237 = (((t4236)|(t4227)));
        /* End of MPShiftRight3 */
        a7348 = mu[0];
        a7349 = mu[1];
        a7350 = mu[2];
        a7351 = mu[3];
        MPMulQDD_L2(t2119, t2120, t2117, t2118, t2115, t2116, t2113, t2114, 
    t4231, t4234, t4235, t4237, a7348, a7349, a7350, a7351);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4238 = (t2119 >> 1);
        a14167 = (t2119 << 63);
        a14168 = (t2120 >> 1);
        t4239 = (((a14167)|(a14168)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4240 = (t2120 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4241 = (t2117 >> 1);
        a14169 = (t2117 << 63);
        a14170 = (t2118 >> 1);
        t4242 = (((a14169)|(a14170)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4243 = (((t4240)|(t4241)));
        /* End of MPShiftRight2 */
        a7379 = modulus[0];
        a7380 = modulus[1];
        a7381 = modulus[2];
        a7382 = modulus[3];
        MPMulQDD_L2(t2111, t2112, t2109, t2110, t2107, t2108, t2105, t2106, 
    t4238, t4239, t4243, t4242, a7379, a7380, a7381, a7382);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d962 = (t2098 - t2106);
        b772 = ((t2098 < t2106));
        d963 = (t2097 - t2105);
        d964 = (d963 - b772);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14172 = ((t2097 < t2105));
        a14173 = ((t2097 == t2105));
        a14174 = ((a14173) && (b772));
        b773 = ((a14172) || (a14174));
        /* Begin of MPSubDDD 64 */
        d965 = (t2100 - t2108);
        b774 = ((t2100 < t2108));
        d966 = (t2099 - t2107);
        d967 = (d966 - b774);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d968 = (d965 - b773);
        b775 = ((d965 < b773));
        t4244 = (d967 - b775);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d969 = (d962 - a7382);
        b776 = ((d962 < a7382));
        d970 = (d964 - a7381);
        d971 = (d970 - b776);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14179 = ((d964 < a7381));
        a14180 = ((d964 == a7381));
        a14181 = ((a14180) && (b776));
        b777 = ((a14179) || (a14181));
        /* Begin of MPSubDDD 64 */
        d972 = (d968 - a7380);
        b778 = ((d968 < a7380));
        d973 = (t4244 - a7379);
        d974 = (d973 - b778);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d975 = (d972 - b777);
        b779 = ((d972 < b777));
        t4245 = (d974 - b779);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14185 = ((t4244 < a7379));
        a14186 = ((t4244 == a7379));
        a14187 = ((a14186) && (b778));
        a14188 = ((a14185) || (a14187));
        /* MPEqual 64 */
        a14189 = ((d968 == a7380));
        a14190 = ((a14186) && (a14189));
        /* MPLessThan 64 */
        a14191 = ((a14190) && (b777));
        i603 = ((a14188) || (a14191));
        /* MPCondD 64 */
        t4246 = ((i603) ? (t4244) : (t4245));
        t4247 = ((i603) ? (d968) : (d975));
        /* MPCondD 64 */
        t4248 = ((i603) ? (d964) : (d971));
        t4249 = ((i603) ? (d962) : (d969));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14192 = (1024*i31);
        a14193 = (2*threadIdx.x);
        a14194 = (a14192 + a14193);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14195 = (2*a14147);
        a14196 = (a14195 + 1);
        /* MPAssignDD 64 */
        a14197 = (2*a14196);
        t4250 = P1[a14197];
        a14198 = (a14197 + 1);
        t4251 = P1[a14198];
        /* MPAddQDD 64 */
        s795 = (((uint128_t ) t4251) + ((uint128_t ) t4249));
        t4252 = ((uint64_t ) s795);
        c304 = (s795 >> 64);
        s796 = (((uint128_t ) t4250) + ((uint128_t ) t4248));
        s797 = (((uint128_t ) s796) + ((uint128_t ) c304));
        t4253 = ((uint64_t ) s797);
        c305 = (s797 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14199 = (2*a14195);
        t4254 = P1[a14199];
        a14200 = (a14199 + 1);
        t4255 = P1[a14200];
        /* MPAddQDD 64 */
        s798 = (((uint128_t ) t4255) + ((uint128_t ) t4247));
        t4256 = ((uint64_t ) s798);
        c306 = (s798 >> 64);
        s799 = (((uint128_t ) t4254) + ((uint128_t ) t4246));
        s800 = (((uint128_t ) s799) + ((uint128_t ) c306));
        t4257 = ((uint64_t ) s800);
        /* MPPropagateCarry 64 */
        t4258 = (t4256 + c305);
        a14201 = ((t4258 == 0));
        a14202 = (t4257 + c305);
        t4259 = ((a14201) ? (a14202) : (t4257));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14209 = ((a7379 < t4259));
        a14210 = ((a7379 == t4259));
        a14211 = ((a7380 < t4258));
        a14212 = ((a14210) && (a14211));
        a14213 = ((a14209) || (a14212));
        /* MPEqual 64 */
        a14214 = ((a7380 == t4258));
        a14215 = ((a14210) && (a14214));
        /* MPLessThan 64 */
        a14216 = ((a7381 < t4253));
        a14217 = ((a7381 == t4253));
        a14218 = ((a7382 < t4252));
        a14219 = ((a14217) && (a14218));
        a14220 = ((a14216) || (a14219));
        a14221 = ((a14215) && (a14220));
        i604 = ((a14213) || (a14221));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d976 = (t4252 - a7382);
        b780 = ((t4252 < a7382));
        d977 = (t4253 - a7381);
        d978 = (d977 - b780);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14223 = ((t4253 < a7381));
        a14224 = ((t4253 == a7381));
        a14225 = ((a14224) && (b780));
        b781 = ((a14223) || (a14225));
        /* Begin of MPSubDDD 64 */
        d979 = (t4258 - a7380);
        b782 = ((t4258 < a7380));
        d980 = (t4259 - a7379);
        d981 = (d980 - b782);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d982 = (d979 - b781);
        b783 = ((d979 < b781));
        t4262 = (d981 - b783);
        /* End of MPSubDDD 128 */
        a14229 = (2*a14194);
        /* MPCondD 64 */
        a14230 = (2*a14229);
        P2[a14230] = ((i604) ? (t4262) : (t4259));
        a14231 = (a14230 + 1);
        P2[a14231] = ((i604) ? (d982) : (t4258));
        a14232 = (a14229 + 1);
        /* MPCondD 64 */
        a14233 = (2*a14232);
        P2[a14233] = ((i604) ? (d978) : (t4253));
        a14234 = (a14233 + 1);
        P2[a14234] = ((i604) ? (d976) : (t4252));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b784 = (a14193 + a14192);
        a14235 = (b784 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d983 = (t4251 - t4249);
        b785 = ((t4251 < t4249));
        d984 = (t4250 - t4248);
        d985 = (d984 - b785);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14237 = ((t4250 < t4248));
        a14238 = ((t4250 == t4248));
        a14239 = ((a14238) && (b785));
        b786 = ((a14237) || (a14239));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d986 = (t4255 - t4247);
        b787 = ((t4255 < t4247));
        d987 = (t4254 - t4246);
        d988 = (d987 - b787);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d989 = (d986 - b786);
        b788 = ((d986 < b786));
        t4263 = (d988 - b788);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s801 = (((uint128_t ) d983) + ((uint128_t ) a7382));
        t4264 = ((uint64_t ) s801);
        c308 = (s801 >> 64);
        s802 = (((uint128_t ) d985) + ((uint128_t ) a7381));
        s803 = (((uint128_t ) s802) + ((uint128_t ) c308));
        t4265 = ((uint64_t ) s803);
        c309 = (s803 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s804 = (((uint128_t ) d989) + ((uint128_t ) a7380));
        t4266 = ((uint64_t ) s804);
        c310 = (s804 >> 64);
        s805 = (((uint128_t ) t4263) + ((uint128_t ) a7379));
        s806 = (((uint128_t ) s805) + ((uint128_t ) c310));
        t4267 = ((uint64_t ) s806);
        /* MPPropagateCarry 64 */
        t4268 = (t4266 + c309);
        a14243 = ((t4268 == 0));
        a14244 = (t4267 + c309);
        t4269 = ((a14243) ? (a14244) : (t4267));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14251 = ((t4254 < t4246));
        a14252 = ((t4254 == t4246));
        a14253 = ((a14252) && (b787));
        a14254 = ((a14251) || (a14253));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14255 = ((t4255 == t4247));
        a14256 = ((a14252) && (a14255));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14257 = ((a14256) && (b786));
        i605 = ((a14254) || (a14257));
        a14258 = (2*a14235);
        /* MPCondD 64 */
        a14259 = (2*a14258);
        P2[a14259] = ((i605) ? (t4269) : (t4263));
        a14260 = (a14259 + 1);
        P2[a14260] = ((i605) ? (t4268) : (d989));
        a14261 = (a14258 + 1);
        /* MPCondD 64 */
        a14262 = (2*a14261);
        P2[a14262] = ((i605) ? (t4265) : (d985));
        a14263 = (a14262 + 1);
        P2[a14263] = ((i605) ? (t4264) : (d983));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code6(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14264, a14265, a14266, a14267, a14268, a14269, a14270, a14271, 
            a14272, a14273, a14274, a14275, a14276, a14277, a14278, a14279, 
            a14280, a14290, a14291, a14292, a14297, a14298, a14299, a14303, 
            a14304, a14305, a14306, a14307, a14308, a14309, a14310, a14311, 
            a14312, a14313, a14314, a14315, a14316, a14317, a14318, a14319, 
            a14327, a14328, a14329, a14330, a14331, a14332, a14333, a14334, 
            a14335, a14336, a14337, a14338, a14339, a14341, a14342, a14343, 
            a14347, a14348, a14349, a14350, a14351, a14352, a14353, a14355, 
            a14356, a14357, a14361, a14369, a14370, a14371, a14372, a14373, 
            a14374, a14375, a14376, a14377, a14378, a14379, a14380, a14381, 
            b789, b790, b791, b792, b793, b794, b795, b796, 
            b797, b798, b799, b800, b801, b802, b803, b804, 
            b805, b806, b807, c312, c313, c314, c316, c317, 
            c318, i606, i607, i608;
    uint64_t a14281, a14282, a14283, a14284, a14285, a14286, a14287, a14288, 
            a14320, a14362, a7764, a7765, a7766, a7767, a7795, a7796, 
            a7797, a7798, d1000, d1001, d1002, d1003, d1004, d1005, 
            d1006, d1007, d1008, d1009, d1010, d1011, d1012, d1013, 
            d1014, d1015, d1016, d1017, d990, d991, d992, d993, 
            d994, d995, d996, d997, d998, d999, t2133, t2134, 
            t2135, t2136, t2137, t2138, t2139, t2140, t2141, t2142, 
            t2143, t2144, t2145, t2146, t2147, t2148, t2149, t2150, 
            t2151, t2152, t2153, t2154, t2155, t2156, t4272, t4273, 
            t4274, t4275, t4276, t4277, t4278, t4279, t4280, t4281, 
            t4282, t4283, t4284, t4285, t4286, t4287, t4288, t4289, 
            t4290, t4291, t4292, t4293, t4294, t4295, t4296, t4297, 
            t4298, t4299, t4300, t4301, t4302, t4303, t4304, t4305, 
            t4306, t4307, t4308, t4309, t4310, t4311, t4312, t4315, 
            t4316, t4317, t4318, t4319, t4320, t4321, t4322;
    uint128_t s807, s808, s809, s810, s811, s812, s813, s814, 
            s815, s816, s817, s818;
    for(int i29 = 0; i29 <= 1023; i29++) {
        a14264 = (512*i29);
        a14265 = (a14264 + threadIdx.x);
        b789 = (threadIdx.x + a14264);
        a14266 = (b789 + 524288);
        a14267 = (a14266 % 64);
        a14268 = (64 + a14267);
        /* Begin of MPModMul 128 */
        a14269 = (2*a14268);
        a14270 = (a14269 + 1);
        a14271 = (2*a14266);
        a14272 = (a14271 + 1);
        /* MPAssignDD 64 */
        a14273 = (2*a14269);
        t4272 = twiddles[a14273];
        a14274 = (a14273 + 1);
        t4273 = twiddles[a14274];
        /* MPAssignDD 64 */
        a14275 = (2*a14270);
        t4274 = twiddles[a14275];
        a14276 = (a14275 + 1);
        t4275 = twiddles[a14276];
        /* MPAssignDD 64 */
        a14277 = (2*a14271);
        t4276 = P2[a14277];
        a14278 = (a14277 + 1);
        t4277 = P2[a14278];
        /* MPAssignDD 64 */
        a14279 = (2*a14272);
        t4278 = P2[a14279];
        a14280 = (a14279 + 1);
        t4279 = P2[a14280];
        MPMulQDD_L2(t2139, t2140, t2137, t2138, t2135, t2136, t2133, t2134, 
    t4272, t4273, t4274, t4275, t4276, t4277, t4278, t4279);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4280 = (t2135 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b790 = ((int) 1);
        t4281 = (288230376151711744 - b790);
        /* MPBinAndD 64 */
        t4282 = (((t2139)&(t4281)));
        t4283 = (((t2140)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14281 = (t4282 << 6);
        a14282 = (t4283 >> 58);
        t4284 = (((a14281)|(a14282)));
        t4285 = (t4283 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4286 = (t2137 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4287 = (((t4285)|(t4286)));
        /* Begin of MPShiftLeft2D */
        a14283 = (t2137 << 6);
        a14284 = (t2138 >> 58);
        t4288 = (((a14283)|(a14284)));
        t4289 = (t2138 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4290 = (((t4289)|(t4280)));
        /* End of MPShiftRight3 */
        a7764 = mu[0];
        a7765 = mu[1];
        a7766 = mu[2];
        a7767 = mu[3];
        MPMulQDD_L2(t2155, t2156, t2153, t2154, t2151, t2152, t2149, t2150, 
    t4284, t4287, t4288, t4290, a7764, a7765, a7766, a7767);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4291 = (t2155 >> 1);
        a14285 = (t2155 << 63);
        a14286 = (t2156 >> 1);
        t4292 = (((a14285)|(a14286)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4293 = (t2156 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4294 = (t2153 >> 1);
        a14287 = (t2153 << 63);
        a14288 = (t2154 >> 1);
        t4295 = (((a14287)|(a14288)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4296 = (((t4293)|(t4294)));
        /* End of MPShiftRight2 */
        a7795 = modulus[0];
        a7796 = modulus[1];
        a7797 = modulus[2];
        a7798 = modulus[3];
        MPMulQDD_L2(t2147, t2148, t2145, t2146, t2143, t2144, t2141, t2142, 
    t4291, t4292, t4296, t4295, a7795, a7796, a7797, a7798);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d990 = (t2134 - t2142);
        b791 = ((t2134 < t2142));
        d991 = (t2133 - t2141);
        d992 = (d991 - b791);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14290 = ((t2133 < t2141));
        a14291 = ((t2133 == t2141));
        a14292 = ((a14291) && (b791));
        b792 = ((a14290) || (a14292));
        /* Begin of MPSubDDD 64 */
        d993 = (t2136 - t2144);
        b793 = ((t2136 < t2144));
        d994 = (t2135 - t2143);
        d995 = (d994 - b793);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d996 = (d993 - b792);
        b794 = ((d993 < b792));
        t4297 = (d995 - b794);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d997 = (d990 - a7798);
        b795 = ((d990 < a7798));
        d998 = (d992 - a7797);
        d999 = (d998 - b795);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14297 = ((d992 < a7797));
        a14298 = ((d992 == a7797));
        a14299 = ((a14298) && (b795));
        b796 = ((a14297) || (a14299));
        /* Begin of MPSubDDD 64 */
        d1000 = (d996 - a7796);
        b797 = ((d996 < a7796));
        d1001 = (t4297 - a7795);
        d1002 = (d1001 - b797);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1003 = (d1000 - b796);
        b798 = ((d1000 < b796));
        t4298 = (d1002 - b798);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14303 = ((t4297 < a7795));
        a14304 = ((t4297 == a7795));
        a14305 = ((a14304) && (b797));
        a14306 = ((a14303) || (a14305));
        /* MPEqual 64 */
        a14307 = ((d996 == a7796));
        a14308 = ((a14304) && (a14307));
        /* MPLessThan 64 */
        a14309 = ((a14308) && (b796));
        i606 = ((a14306) || (a14309));
        /* MPCondD 64 */
        t4299 = ((i606) ? (t4297) : (t4298));
        t4300 = ((i606) ? (d996) : (d1003));
        /* MPCondD 64 */
        t4301 = ((i606) ? (d992) : (d999));
        t4302 = ((i606) ? (d990) : (d997));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14310 = (1024*i29);
        a14311 = (2*threadIdx.x);
        a14312 = (a14310 + a14311);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14313 = (2*a14265);
        a14314 = (a14313 + 1);
        /* MPAssignDD 64 */
        a14315 = (2*a14314);
        t4303 = P2[a14315];
        a14316 = (a14315 + 1);
        t4304 = P2[a14316];
        /* MPAddQDD 64 */
        s807 = (((uint128_t ) t4304) + ((uint128_t ) t4302));
        t4305 = ((uint64_t ) s807);
        c312 = (s807 >> 64);
        s808 = (((uint128_t ) t4303) + ((uint128_t ) t4301));
        s809 = (((uint128_t ) s808) + ((uint128_t ) c312));
        t4306 = ((uint64_t ) s809);
        c313 = (s809 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14317 = (2*a14313);
        t4307 = P2[a14317];
        a14318 = (a14317 + 1);
        t4308 = P2[a14318];
        /* MPAddQDD 64 */
        s810 = (((uint128_t ) t4308) + ((uint128_t ) t4300));
        t4309 = ((uint64_t ) s810);
        c314 = (s810 >> 64);
        s811 = (((uint128_t ) t4307) + ((uint128_t ) t4299));
        s812 = (((uint128_t ) s811) + ((uint128_t ) c314));
        t4310 = ((uint64_t ) s812);
        /* MPPropagateCarry 64 */
        t4311 = (t4309 + c313);
        a14319 = ((t4311 == 0));
        a14320 = (t4310 + c313);
        t4312 = ((a14319) ? (a14320) : (t4310));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14327 = ((a7795 < t4312));
        a14328 = ((a7795 == t4312));
        a14329 = ((a7796 < t4311));
        a14330 = ((a14328) && (a14329));
        a14331 = ((a14327) || (a14330));
        /* MPEqual 64 */
        a14332 = ((a7796 == t4311));
        a14333 = ((a14328) && (a14332));
        /* MPLessThan 64 */
        a14334 = ((a7797 < t4306));
        a14335 = ((a7797 == t4306));
        a14336 = ((a7798 < t4305));
        a14337 = ((a14335) && (a14336));
        a14338 = ((a14334) || (a14337));
        a14339 = ((a14333) && (a14338));
        i607 = ((a14331) || (a14339));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1004 = (t4305 - a7798);
        b799 = ((t4305 < a7798));
        d1005 = (t4306 - a7797);
        d1006 = (d1005 - b799);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14341 = ((t4306 < a7797));
        a14342 = ((t4306 == a7797));
        a14343 = ((a14342) && (b799));
        b800 = ((a14341) || (a14343));
        /* Begin of MPSubDDD 64 */
        d1007 = (t4311 - a7796);
        b801 = ((t4311 < a7796));
        d1008 = (t4312 - a7795);
        d1009 = (d1008 - b801);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1010 = (d1007 - b800);
        b802 = ((d1007 < b800));
        t4315 = (d1009 - b802);
        /* End of MPSubDDD 128 */
        a14347 = (2*a14312);
        /* MPCondD 64 */
        a14348 = (2*a14347);
        P1[a14348] = ((i607) ? (t4315) : (t4312));
        a14349 = (a14348 + 1);
        P1[a14349] = ((i607) ? (d1010) : (t4311));
        a14350 = (a14347 + 1);
        /* MPCondD 64 */
        a14351 = (2*a14350);
        P1[a14351] = ((i607) ? (d1006) : (t4306));
        a14352 = (a14351 + 1);
        P1[a14352] = ((i607) ? (d1004) : (t4305));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b803 = (a14311 + a14310);
        a14353 = (b803 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1011 = (t4304 - t4302);
        b804 = ((t4304 < t4302));
        d1012 = (t4303 - t4301);
        d1013 = (d1012 - b804);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14355 = ((t4303 < t4301));
        a14356 = ((t4303 == t4301));
        a14357 = ((a14356) && (b804));
        b805 = ((a14355) || (a14357));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1014 = (t4308 - t4300);
        b806 = ((t4308 < t4300));
        d1015 = (t4307 - t4299);
        d1016 = (d1015 - b806);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1017 = (d1014 - b805);
        b807 = ((d1014 < b805));
        t4316 = (d1016 - b807);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s813 = (((uint128_t ) d1011) + ((uint128_t ) a7798));
        t4317 = ((uint64_t ) s813);
        c316 = (s813 >> 64);
        s814 = (((uint128_t ) d1013) + ((uint128_t ) a7797));
        s815 = (((uint128_t ) s814) + ((uint128_t ) c316));
        t4318 = ((uint64_t ) s815);
        c317 = (s815 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s816 = (((uint128_t ) d1017) + ((uint128_t ) a7796));
        t4319 = ((uint64_t ) s816);
        c318 = (s816 >> 64);
        s817 = (((uint128_t ) t4316) + ((uint128_t ) a7795));
        s818 = (((uint128_t ) s817) + ((uint128_t ) c318));
        t4320 = ((uint64_t ) s818);
        /* MPPropagateCarry 64 */
        t4321 = (t4319 + c317);
        a14361 = ((t4321 == 0));
        a14362 = (t4320 + c317);
        t4322 = ((a14361) ? (a14362) : (t4320));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14369 = ((t4307 < t4299));
        a14370 = ((t4307 == t4299));
        a14371 = ((a14370) && (b806));
        a14372 = ((a14369) || (a14371));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14373 = ((t4308 == t4300));
        a14374 = ((a14370) && (a14373));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14375 = ((a14374) && (b805));
        i608 = ((a14372) || (a14375));
        a14376 = (2*a14353);
        /* MPCondD 64 */
        a14377 = (2*a14376);
        P1[a14377] = ((i608) ? (t4322) : (t4316));
        a14378 = (a14377 + 1);
        P1[a14378] = ((i608) ? (t4321) : (d1017));
        a14379 = (a14376 + 1);
        /* MPCondD 64 */
        a14380 = (2*a14379);
        P1[a14380] = ((i608) ? (t4318) : (d1013));
        a14381 = (a14380 + 1);
        P1[a14381] = ((i608) ? (t4317) : (d1011));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code7(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14382, a14383, a14384, a14385, a14386, a14387, a14388, a14389, 
            a14390, a14391, a14392, a14393, a14394, a14395, a14396, a14397, 
            a14398, a14408, a14409, a14410, a14415, a14416, a14417, a14421, 
            a14422, a14423, a14424, a14425, a14426, a14427, a14428, a14429, 
            a14430, a14431, a14432, a14433, a14434, a14435, a14436, a14437, 
            a14445, a14446, a14447, a14448, a14449, a14450, a14451, a14452, 
            a14453, a14454, a14455, a14456, a14457, a14459, a14460, a14461, 
            a14465, a14466, a14467, a14468, a14469, a14470, a14471, a14473, 
            a14474, a14475, a14479, a14487, a14488, a14489, a14490, a14491, 
            a14492, a14493, a14494, a14495, a14496, a14497, a14498, a14499, 
            b808, b809, b810, b811, b812, b813, b814, b815, 
            b816, b817, b818, b819, b820, b821, b822, b823, 
            b824, b825, b826, c320, c321, c322, c324, c325, 
            c326, i609, i610, i611;
    uint64_t a14399, a14400, a14401, a14402, a14403, a14404, a14405, a14406, 
            a14438, a14480, a8180, a8181, a8182, a8183, a8211, a8212, 
            a8213, a8214, d1018, d1019, d1020, d1021, d1022, d1023, 
            d1024, d1025, d1026, d1027, d1028, d1029, d1030, d1031, 
            d1032, d1033, d1034, d1035, d1036, d1037, d1038, d1039, 
            d1040, d1041, d1042, d1043, d1044, d1045, t2169, t2170, 
            t2171, t2172, t2173, t2174, t2175, t2176, t2177, t2178, 
            t2179, t2180, t2181, t2182, t2183, t2184, t2185, t2186, 
            t2187, t2188, t2189, t2190, t2191, t2192, t4325, t4326, 
            t4327, t4328, t4329, t4330, t4331, t4332, t4333, t4334, 
            t4335, t4336, t4337, t4338, t4339, t4340, t4341, t4342, 
            t4343, t4344, t4345, t4346, t4347, t4348, t4349, t4350, 
            t4351, t4352, t4353, t4354, t4355, t4356, t4357, t4358, 
            t4359, t4360, t4361, t4362, t4363, t4364, t4365, t4368, 
            t4369, t4370, t4371, t4372, t4373, t4374, t4375;
    uint128_t s819, s820, s821, s822, s823, s824, s825, s826, 
            s827, s828, s829, s830;
    for(int i27 = 0; i27 <= 1023; i27++) {
        a14382 = (512*i27);
        a14383 = (a14382 + threadIdx.x);
        b808 = (threadIdx.x + a14382);
        a14384 = (b808 + 524288);
        a14385 = (a14384 % 128);
        a14386 = (128 + a14385);
        /* Begin of MPModMul 128 */
        a14387 = (2*a14386);
        a14388 = (a14387 + 1);
        a14389 = (2*a14384);
        a14390 = (a14389 + 1);
        /* MPAssignDD 64 */
        a14391 = (2*a14387);
        t4325 = twiddles[a14391];
        a14392 = (a14391 + 1);
        t4326 = twiddles[a14392];
        /* MPAssignDD 64 */
        a14393 = (2*a14388);
        t4327 = twiddles[a14393];
        a14394 = (a14393 + 1);
        t4328 = twiddles[a14394];
        /* MPAssignDD 64 */
        a14395 = (2*a14389);
        t4329 = P1[a14395];
        a14396 = (a14395 + 1);
        t4330 = P1[a14396];
        /* MPAssignDD 64 */
        a14397 = (2*a14390);
        t4331 = P1[a14397];
        a14398 = (a14397 + 1);
        t4332 = P1[a14398];
        MPMulQDD_L2(t2175, t2176, t2173, t2174, t2171, t2172, t2169, t2170, 
    t4325, t4326, t4327, t4328, t4329, t4330, t4331, t4332);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4333 = (t2171 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b809 = ((int) 1);
        t4334 = (288230376151711744 - b809);
        /* MPBinAndD 64 */
        t4335 = (((t2175)&(t4334)));
        t4336 = (((t2176)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14399 = (t4335 << 6);
        a14400 = (t4336 >> 58);
        t4337 = (((a14399)|(a14400)));
        t4338 = (t4336 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4339 = (t2173 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4340 = (((t4338)|(t4339)));
        /* Begin of MPShiftLeft2D */
        a14401 = (t2173 << 6);
        a14402 = (t2174 >> 58);
        t4341 = (((a14401)|(a14402)));
        t4342 = (t2174 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4343 = (((t4342)|(t4333)));
        /* End of MPShiftRight3 */
        a8180 = mu[0];
        a8181 = mu[1];
        a8182 = mu[2];
        a8183 = mu[3];
        MPMulQDD_L2(t2191, t2192, t2189, t2190, t2187, t2188, t2185, t2186, 
    t4337, t4340, t4341, t4343, a8180, a8181, a8182, a8183);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4344 = (t2191 >> 1);
        a14403 = (t2191 << 63);
        a14404 = (t2192 >> 1);
        t4345 = (((a14403)|(a14404)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4346 = (t2192 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4347 = (t2189 >> 1);
        a14405 = (t2189 << 63);
        a14406 = (t2190 >> 1);
        t4348 = (((a14405)|(a14406)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4349 = (((t4346)|(t4347)));
        /* End of MPShiftRight2 */
        a8211 = modulus[0];
        a8212 = modulus[1];
        a8213 = modulus[2];
        a8214 = modulus[3];
        MPMulQDD_L2(t2183, t2184, t2181, t2182, t2179, t2180, t2177, t2178, 
    t4344, t4345, t4349, t4348, a8211, a8212, a8213, a8214);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1018 = (t2170 - t2178);
        b810 = ((t2170 < t2178));
        d1019 = (t2169 - t2177);
        d1020 = (d1019 - b810);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14408 = ((t2169 < t2177));
        a14409 = ((t2169 == t2177));
        a14410 = ((a14409) && (b810));
        b811 = ((a14408) || (a14410));
        /* Begin of MPSubDDD 64 */
        d1021 = (t2172 - t2180);
        b812 = ((t2172 < t2180));
        d1022 = (t2171 - t2179);
        d1023 = (d1022 - b812);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1024 = (d1021 - b811);
        b813 = ((d1021 < b811));
        t4350 = (d1023 - b813);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1025 = (d1018 - a8214);
        b814 = ((d1018 < a8214));
        d1026 = (d1020 - a8213);
        d1027 = (d1026 - b814);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14415 = ((d1020 < a8213));
        a14416 = ((d1020 == a8213));
        a14417 = ((a14416) && (b814));
        b815 = ((a14415) || (a14417));
        /* Begin of MPSubDDD 64 */
        d1028 = (d1024 - a8212);
        b816 = ((d1024 < a8212));
        d1029 = (t4350 - a8211);
        d1030 = (d1029 - b816);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1031 = (d1028 - b815);
        b817 = ((d1028 < b815));
        t4351 = (d1030 - b817);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14421 = ((t4350 < a8211));
        a14422 = ((t4350 == a8211));
        a14423 = ((a14422) && (b816));
        a14424 = ((a14421) || (a14423));
        /* MPEqual 64 */
        a14425 = ((d1024 == a8212));
        a14426 = ((a14422) && (a14425));
        /* MPLessThan 64 */
        a14427 = ((a14426) && (b815));
        i609 = ((a14424) || (a14427));
        /* MPCondD 64 */
        t4352 = ((i609) ? (t4350) : (t4351));
        t4353 = ((i609) ? (d1024) : (d1031));
        /* MPCondD 64 */
        t4354 = ((i609) ? (d1020) : (d1027));
        t4355 = ((i609) ? (d1018) : (d1025));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14428 = (1024*i27);
        a14429 = (2*threadIdx.x);
        a14430 = (a14428 + a14429);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14431 = (2*a14383);
        a14432 = (a14431 + 1);
        /* MPAssignDD 64 */
        a14433 = (2*a14432);
        t4356 = P1[a14433];
        a14434 = (a14433 + 1);
        t4357 = P1[a14434];
        /* MPAddQDD 64 */
        s819 = (((uint128_t ) t4357) + ((uint128_t ) t4355));
        t4358 = ((uint64_t ) s819);
        c320 = (s819 >> 64);
        s820 = (((uint128_t ) t4356) + ((uint128_t ) t4354));
        s821 = (((uint128_t ) s820) + ((uint128_t ) c320));
        t4359 = ((uint64_t ) s821);
        c321 = (s821 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14435 = (2*a14431);
        t4360 = P1[a14435];
        a14436 = (a14435 + 1);
        t4361 = P1[a14436];
        /* MPAddQDD 64 */
        s822 = (((uint128_t ) t4361) + ((uint128_t ) t4353));
        t4362 = ((uint64_t ) s822);
        c322 = (s822 >> 64);
        s823 = (((uint128_t ) t4360) + ((uint128_t ) t4352));
        s824 = (((uint128_t ) s823) + ((uint128_t ) c322));
        t4363 = ((uint64_t ) s824);
        /* MPPropagateCarry 64 */
        t4364 = (t4362 + c321);
        a14437 = ((t4364 == 0));
        a14438 = (t4363 + c321);
        t4365 = ((a14437) ? (a14438) : (t4363));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14445 = ((a8211 < t4365));
        a14446 = ((a8211 == t4365));
        a14447 = ((a8212 < t4364));
        a14448 = ((a14446) && (a14447));
        a14449 = ((a14445) || (a14448));
        /* MPEqual 64 */
        a14450 = ((a8212 == t4364));
        a14451 = ((a14446) && (a14450));
        /* MPLessThan 64 */
        a14452 = ((a8213 < t4359));
        a14453 = ((a8213 == t4359));
        a14454 = ((a8214 < t4358));
        a14455 = ((a14453) && (a14454));
        a14456 = ((a14452) || (a14455));
        a14457 = ((a14451) && (a14456));
        i610 = ((a14449) || (a14457));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1032 = (t4358 - a8214);
        b818 = ((t4358 < a8214));
        d1033 = (t4359 - a8213);
        d1034 = (d1033 - b818);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14459 = ((t4359 < a8213));
        a14460 = ((t4359 == a8213));
        a14461 = ((a14460) && (b818));
        b819 = ((a14459) || (a14461));
        /* Begin of MPSubDDD 64 */
        d1035 = (t4364 - a8212);
        b820 = ((t4364 < a8212));
        d1036 = (t4365 - a8211);
        d1037 = (d1036 - b820);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1038 = (d1035 - b819);
        b821 = ((d1035 < b819));
        t4368 = (d1037 - b821);
        /* End of MPSubDDD 128 */
        a14465 = (2*a14430);
        /* MPCondD 64 */
        a14466 = (2*a14465);
        P2[a14466] = ((i610) ? (t4368) : (t4365));
        a14467 = (a14466 + 1);
        P2[a14467] = ((i610) ? (d1038) : (t4364));
        a14468 = (a14465 + 1);
        /* MPCondD 64 */
        a14469 = (2*a14468);
        P2[a14469] = ((i610) ? (d1034) : (t4359));
        a14470 = (a14469 + 1);
        P2[a14470] = ((i610) ? (d1032) : (t4358));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b822 = (a14429 + a14428);
        a14471 = (b822 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1039 = (t4357 - t4355);
        b823 = ((t4357 < t4355));
        d1040 = (t4356 - t4354);
        d1041 = (d1040 - b823);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14473 = ((t4356 < t4354));
        a14474 = ((t4356 == t4354));
        a14475 = ((a14474) && (b823));
        b824 = ((a14473) || (a14475));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1042 = (t4361 - t4353);
        b825 = ((t4361 < t4353));
        d1043 = (t4360 - t4352);
        d1044 = (d1043 - b825);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1045 = (d1042 - b824);
        b826 = ((d1042 < b824));
        t4369 = (d1044 - b826);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s825 = (((uint128_t ) d1039) + ((uint128_t ) a8214));
        t4370 = ((uint64_t ) s825);
        c324 = (s825 >> 64);
        s826 = (((uint128_t ) d1041) + ((uint128_t ) a8213));
        s827 = (((uint128_t ) s826) + ((uint128_t ) c324));
        t4371 = ((uint64_t ) s827);
        c325 = (s827 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s828 = (((uint128_t ) d1045) + ((uint128_t ) a8212));
        t4372 = ((uint64_t ) s828);
        c326 = (s828 >> 64);
        s829 = (((uint128_t ) t4369) + ((uint128_t ) a8211));
        s830 = (((uint128_t ) s829) + ((uint128_t ) c326));
        t4373 = ((uint64_t ) s830);
        /* MPPropagateCarry 64 */
        t4374 = (t4372 + c325);
        a14479 = ((t4374 == 0));
        a14480 = (t4373 + c325);
        t4375 = ((a14479) ? (a14480) : (t4373));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14487 = ((t4360 < t4352));
        a14488 = ((t4360 == t4352));
        a14489 = ((a14488) && (b825));
        a14490 = ((a14487) || (a14489));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14491 = ((t4361 == t4353));
        a14492 = ((a14488) && (a14491));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14493 = ((a14492) && (b824));
        i611 = ((a14490) || (a14493));
        a14494 = (2*a14471);
        /* MPCondD 64 */
        a14495 = (2*a14494);
        P2[a14495] = ((i611) ? (t4375) : (t4369));
        a14496 = (a14495 + 1);
        P2[a14496] = ((i611) ? (t4374) : (d1045));
        a14497 = (a14494 + 1);
        /* MPCondD 64 */
        a14498 = (2*a14497);
        P2[a14498] = ((i611) ? (t4371) : (d1041));
        a14499 = (a14498 + 1);
        P2[a14499] = ((i611) ? (t4370) : (d1039));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code8(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14500, a14501, a14502, a14503, a14504, a14505, a14506, a14507, 
            a14508, a14509, a14510, a14511, a14512, a14513, a14514, a14515, 
            a14516, a14526, a14527, a14528, a14533, a14534, a14535, a14539, 
            a14540, a14541, a14542, a14543, a14544, a14545, a14546, a14547, 
            a14548, a14549, a14550, a14551, a14552, a14553, a14554, a14555, 
            a14563, a14564, a14565, a14566, a14567, a14568, a14569, a14570, 
            a14571, a14572, a14573, a14574, a14575, a14577, a14578, a14579, 
            a14583, a14584, a14585, a14586, a14587, a14588, a14589, a14591, 
            a14592, a14593, a14597, a14605, a14606, a14607, a14608, a14609, 
            a14610, a14611, a14612, a14613, a14614, a14615, a14616, a14617, 
            b827, b828, b829, b830, b831, b832, b833, b834, 
            b835, b836, b837, b838, b839, b840, b841, b842, 
            b843, b844, b845, c328, c329, c330, c332, c333, 
            c334, i612, i613, i614;
    uint64_t a14517, a14518, a14519, a14520, a14521, a14522, a14523, a14524, 
            a14556, a14598, a8596, a8597, a8598, a8599, a8627, a8628, 
            a8629, a8630, d1046, d1047, d1048, d1049, d1050, d1051, 
            d1052, d1053, d1054, d1055, d1056, d1057, d1058, d1059, 
            d1060, d1061, d1062, d1063, d1064, d1065, d1066, d1067, 
            d1068, d1069, d1070, d1071, d1072, d1073, t2205, t2206, 
            t2207, t2208, t2209, t2210, t2211, t2212, t2217, t2218, 
            t2219, t2220, t2221, t2222, t2223, t2224, t2225, t2226, 
            t2227, t2228, t2229, t2230, t2231, t2232, t4378, t4379, 
            t4380, t4381, t4382, t4383, t4384, t4385, t4386, t4387, 
            t4388, t4389, t4390, t4391, t4392, t4393, t4394, t4395, 
            t4396, t4397, t4398, t4399, t4400, t4401, t4402, t4403, 
            t4404, t4405, t4406, t4407, t4408, t4409, t4410, t4411, 
            t4412, t4413, t4414, t4415, t4416, t4417, t4418, t4421, 
            t4422, t4423, t4424, t4425, t4426, t4427, t4428;
    uint128_t s831, s832, s833, s834, s835, s836, s837, s838, 
            s839, s840, s841, s842;
    for(int i25 = 0; i25 <= 1023; i25++) {
        a14500 = (512*i25);
        a14501 = (a14500 + threadIdx.x);
        b827 = (threadIdx.x + a14500);
        a14502 = (b827 + 524288);
        a14503 = (a14502 % 256);
        a14504 = (256 + a14503);
        /* Begin of MPModMul 128 */
        a14505 = (2*a14504);
        a14506 = (a14505 + 1);
        a14507 = (2*a14502);
        a14508 = (a14507 + 1);
        /* MPAssignDD 64 */
        a14509 = (2*a14505);
        t4378 = twiddles[a14509];
        a14510 = (a14509 + 1);
        t4379 = twiddles[a14510];
        /* MPAssignDD 64 */
        a14511 = (2*a14506);
        t4380 = twiddles[a14511];
        a14512 = (a14511 + 1);
        t4381 = twiddles[a14512];
        /* MPAssignDD 64 */
        a14513 = (2*a14507);
        t4382 = P2[a14513];
        a14514 = (a14513 + 1);
        t4383 = P2[a14514];
        /* MPAssignDD 64 */
        a14515 = (2*a14508);
        t4384 = P2[a14515];
        a14516 = (a14515 + 1);
        t4385 = P2[a14516];
        MPMulQDD_L2(t2211, t2212, t2209, t2210, t2207, t2208, t2205, t2206, 
    t4378, t4379, t4380, t4381, t4382, t4383, t4384, t4385);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4386 = (t2207 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b828 = ((int) 1);
        t4387 = (288230376151711744 - b828);
        /* MPBinAndD 64 */
        t4388 = (((t2211)&(t4387)));
        t4389 = (((t2212)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14517 = (t4388 << 6);
        a14518 = (t4389 >> 58);
        t4390 = (((a14517)|(a14518)));
        t4391 = (t4389 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4392 = (t2209 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4393 = (((t4391)|(t4392)));
        /* Begin of MPShiftLeft2D */
        a14519 = (t2209 << 6);
        a14520 = (t2210 >> 58);
        t4394 = (((a14519)|(a14520)));
        t4395 = (t2210 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4396 = (((t4395)|(t4386)));
        /* End of MPShiftRight3 */
        a8596 = mu[0];
        a8597 = mu[1];
        a8598 = mu[2];
        a8599 = mu[3];
        MPMulQDD_L2(t2231, t2232, t2229, t2230, t2227, t2228, t2225, t2226, 
    t4390, t4393, t4394, t4396, a8596, a8597, a8598, a8599);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4397 = (t2231 >> 1);
        a14521 = (t2231 << 63);
        a14522 = (t2232 >> 1);
        t4398 = (((a14521)|(a14522)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4399 = (t2232 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4400 = (t2229 >> 1);
        a14523 = (t2229 << 63);
        a14524 = (t2230 >> 1);
        t4401 = (((a14523)|(a14524)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4402 = (((t4399)|(t4400)));
        /* End of MPShiftRight2 */
        a8627 = modulus[0];
        a8628 = modulus[1];
        a8629 = modulus[2];
        a8630 = modulus[3];
        MPMulQDD_L2(t2223, t2224, t2221, t2222, t2219, t2220, t2217, t2218, 
    t4397, t4398, t4402, t4401, a8627, a8628, a8629, a8630);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1046 = (t2206 - t2218);
        b829 = ((t2206 < t2218));
        d1047 = (t2205 - t2217);
        d1048 = (d1047 - b829);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14526 = ((t2205 < t2217));
        a14527 = ((t2205 == t2217));
        a14528 = ((a14527) && (b829));
        b830 = ((a14526) || (a14528));
        /* Begin of MPSubDDD 64 */
        d1049 = (t2208 - t2220);
        b831 = ((t2208 < t2220));
        d1050 = (t2207 - t2219);
        d1051 = (d1050 - b831);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1052 = (d1049 - b830);
        b832 = ((d1049 < b830));
        t4403 = (d1051 - b832);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1053 = (d1046 - a8630);
        b833 = ((d1046 < a8630));
        d1054 = (d1048 - a8629);
        d1055 = (d1054 - b833);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14533 = ((d1048 < a8629));
        a14534 = ((d1048 == a8629));
        a14535 = ((a14534) && (b833));
        b834 = ((a14533) || (a14535));
        /* Begin of MPSubDDD 64 */
        d1056 = (d1052 - a8628);
        b835 = ((d1052 < a8628));
        d1057 = (t4403 - a8627);
        d1058 = (d1057 - b835);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1059 = (d1056 - b834);
        b836 = ((d1056 < b834));
        t4404 = (d1058 - b836);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14539 = ((t4403 < a8627));
        a14540 = ((t4403 == a8627));
        a14541 = ((a14540) && (b835));
        a14542 = ((a14539) || (a14541));
        /* MPEqual 64 */
        a14543 = ((d1052 == a8628));
        a14544 = ((a14540) && (a14543));
        /* MPLessThan 64 */
        a14545 = ((a14544) && (b834));
        i612 = ((a14542) || (a14545));
        /* MPCondD 64 */
        t4405 = ((i612) ? (t4403) : (t4404));
        t4406 = ((i612) ? (d1052) : (d1059));
        /* MPCondD 64 */
        t4407 = ((i612) ? (d1048) : (d1055));
        t4408 = ((i612) ? (d1046) : (d1053));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14546 = (1024*i25);
        a14547 = (2*threadIdx.x);
        a14548 = (a14546 + a14547);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14549 = (2*a14501);
        a14550 = (a14549 + 1);
        /* MPAssignDD 64 */
        a14551 = (2*a14550);
        t4409 = P2[a14551];
        a14552 = (a14551 + 1);
        t4410 = P2[a14552];
        /* MPAddQDD 64 */
        s831 = (((uint128_t ) t4410) + ((uint128_t ) t4408));
        t4411 = ((uint64_t ) s831);
        c328 = (s831 >> 64);
        s832 = (((uint128_t ) t4409) + ((uint128_t ) t4407));
        s833 = (((uint128_t ) s832) + ((uint128_t ) c328));
        t4412 = ((uint64_t ) s833);
        c329 = (s833 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14553 = (2*a14549);
        t4413 = P2[a14553];
        a14554 = (a14553 + 1);
        t4414 = P2[a14554];
        /* MPAddQDD 64 */
        s834 = (((uint128_t ) t4414) + ((uint128_t ) t4406));
        t4415 = ((uint64_t ) s834);
        c330 = (s834 >> 64);
        s835 = (((uint128_t ) t4413) + ((uint128_t ) t4405));
        s836 = (((uint128_t ) s835) + ((uint128_t ) c330));
        t4416 = ((uint64_t ) s836);
        /* MPPropagateCarry 64 */
        t4417 = (t4415 + c329);
        a14555 = ((t4417 == 0));
        a14556 = (t4416 + c329);
        t4418 = ((a14555) ? (a14556) : (t4416));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14563 = ((a8627 < t4418));
        a14564 = ((a8627 == t4418));
        a14565 = ((a8628 < t4417));
        a14566 = ((a14564) && (a14565));
        a14567 = ((a14563) || (a14566));
        /* MPEqual 64 */
        a14568 = ((a8628 == t4417));
        a14569 = ((a14564) && (a14568));
        /* MPLessThan 64 */
        a14570 = ((a8629 < t4412));
        a14571 = ((a8629 == t4412));
        a14572 = ((a8630 < t4411));
        a14573 = ((a14571) && (a14572));
        a14574 = ((a14570) || (a14573));
        a14575 = ((a14569) && (a14574));
        i613 = ((a14567) || (a14575));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1060 = (t4411 - a8630);
        b837 = ((t4411 < a8630));
        d1061 = (t4412 - a8629);
        d1062 = (d1061 - b837);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14577 = ((t4412 < a8629));
        a14578 = ((t4412 == a8629));
        a14579 = ((a14578) && (b837));
        b838 = ((a14577) || (a14579));
        /* Begin of MPSubDDD 64 */
        d1063 = (t4417 - a8628);
        b839 = ((t4417 < a8628));
        d1064 = (t4418 - a8627);
        d1065 = (d1064 - b839);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1066 = (d1063 - b838);
        b840 = ((d1063 < b838));
        t4421 = (d1065 - b840);
        /* End of MPSubDDD 128 */
        a14583 = (2*a14548);
        /* MPCondD 64 */
        a14584 = (2*a14583);
        P1[a14584] = ((i613) ? (t4421) : (t4418));
        a14585 = (a14584 + 1);
        P1[a14585] = ((i613) ? (d1066) : (t4417));
        a14586 = (a14583 + 1);
        /* MPCondD 64 */
        a14587 = (2*a14586);
        P1[a14587] = ((i613) ? (d1062) : (t4412));
        a14588 = (a14587 + 1);
        P1[a14588] = ((i613) ? (d1060) : (t4411));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b841 = (a14547 + a14546);
        a14589 = (b841 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1067 = (t4410 - t4408);
        b842 = ((t4410 < t4408));
        d1068 = (t4409 - t4407);
        d1069 = (d1068 - b842);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14591 = ((t4409 < t4407));
        a14592 = ((t4409 == t4407));
        a14593 = ((a14592) && (b842));
        b843 = ((a14591) || (a14593));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1070 = (t4414 - t4406);
        b844 = ((t4414 < t4406));
        d1071 = (t4413 - t4405);
        d1072 = (d1071 - b844);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1073 = (d1070 - b843);
        b845 = ((d1070 < b843));
        t4422 = (d1072 - b845);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s837 = (((uint128_t ) d1067) + ((uint128_t ) a8630));
        t4423 = ((uint64_t ) s837);
        c332 = (s837 >> 64);
        s838 = (((uint128_t ) d1069) + ((uint128_t ) a8629));
        s839 = (((uint128_t ) s838) + ((uint128_t ) c332));
        t4424 = ((uint64_t ) s839);
        c333 = (s839 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s840 = (((uint128_t ) d1073) + ((uint128_t ) a8628));
        t4425 = ((uint64_t ) s840);
        c334 = (s840 >> 64);
        s841 = (((uint128_t ) t4422) + ((uint128_t ) a8627));
        s842 = (((uint128_t ) s841) + ((uint128_t ) c334));
        t4426 = ((uint64_t ) s842);
        /* MPPropagateCarry 64 */
        t4427 = (t4425 + c333);
        a14597 = ((t4427 == 0));
        a14598 = (t4426 + c333);
        t4428 = ((a14597) ? (a14598) : (t4426));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14605 = ((t4413 < t4405));
        a14606 = ((t4413 == t4405));
        a14607 = ((a14606) && (b844));
        a14608 = ((a14605) || (a14607));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14609 = ((t4414 == t4406));
        a14610 = ((a14606) && (a14609));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14611 = ((a14610) && (b843));
        i614 = ((a14608) || (a14611));
        a14612 = (2*a14589);
        /* MPCondD 64 */
        a14613 = (2*a14612);
        P1[a14613] = ((i614) ? (t4428) : (t4422));
        a14614 = (a14613 + 1);
        P1[a14614] = ((i614) ? (t4427) : (d1073));
        a14615 = (a14612 + 1);
        /* MPCondD 64 */
        a14616 = (2*a14615);
        P1[a14616] = ((i614) ? (t4424) : (d1069));
        a14617 = (a14616 + 1);
        P1[a14617] = ((i614) ? (t4423) : (d1067));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code9(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14618, a14619, a14620, a14621, a14622, a14623, a14624, a14625, 
            a14626, a14627, a14628, a14629, a14630, a14631, a14632, a14633, 
            a14634, a14644, a14645, a14646, a14651, a14652, a14653, a14657, 
            a14658, a14659, a14660, a14661, a14662, a14663, a14664, a14665, 
            a14666, a14667, a14668, a14669, a14670, a14671, a14672, a14673, 
            a14681, a14682, a14683, a14684, a14685, a14686, a14687, a14688, 
            a14689, a14690, a14691, a14692, a14693, a14695, a14696, a14697, 
            a14701, a14702, a14703, a14704, a14705, a14706, a14707, a14709, 
            a14710, a14711, a14715, a14723, a14724, a14725, a14726, a14727, 
            a14728, a14729, a14730, a14731, a14732, a14733, a14734, a14735, 
            b846, b847, b848, b849, b850, b851, b852, b853, 
            b854, b855, b856, b857, b858, b859, b860, b861, 
            b862, b863, b864, c336, c337, c338, c340, c341, 
            c342, i615, i616, i617;
    uint64_t a14635, a14636, a14637, a14638, a14639, a14640, a14641, a14642, 
            a14674, a14716, a9012, a9013, a9014, a9015, a9043, a9044, 
            a9045, a9046, d1074, d1075, d1076, d1077, d1078, d1079, 
            d1080, d1081, d1082, d1083, d1084, d1085, d1086, d1087, 
            d1088, d1089, d1090, d1091, d1092, d1093, d1094, d1095, 
            d1096, d1097, d1098, d1099, d1100, d1101, t2241, t2242, 
            t2243, t2244, t2245, t2246, t2247, t2248, t2249, t2250, 
            t2251, t2252, t2253, t2254, t2255, t2256, t2261, t2262, 
            t2263, t2264, t2265, t2266, t2267, t2268, t4431, t4432, 
            t4433, t4434, t4435, t4436, t4437, t4438, t4439, t4440, 
            t4441, t4442, t4443, t4444, t4445, t4446, t4447, t4448, 
            t4449, t4450, t4451, t4452, t4453, t4454, t4455, t4456, 
            t4457, t4458, t4459, t4460, t4461, t4462, t4463, t4464, 
            t4465, t4466, t4467, t4468, t4469, t4470, t4471, t4474, 
            t4475, t4476, t4477, t4478, t4479, t4480, t4481;
    uint128_t s843, s844, s845, s846, s847, s848, s849, s850, 
            s851, s852, s853, s854;
    for(int i23 = 0; i23 <= 1023; i23++) {
        a14618 = (512*i23);
        a14619 = (a14618 + threadIdx.x);
        b846 = (threadIdx.x + a14618);
        a14620 = (b846 + 524288);
        a14621 = (a14620 % 512);
        a14622 = (512 + a14621);
        /* Begin of MPModMul 128 */
        a14623 = (2*a14622);
        a14624 = (a14623 + 1);
        a14625 = (2*a14620);
        a14626 = (a14625 + 1);
        /* MPAssignDD 64 */
        a14627 = (2*a14623);
        t4431 = twiddles[a14627];
        a14628 = (a14627 + 1);
        t4432 = twiddles[a14628];
        /* MPAssignDD 64 */
        a14629 = (2*a14624);
        t4433 = twiddles[a14629];
        a14630 = (a14629 + 1);
        t4434 = twiddles[a14630];
        /* MPAssignDD 64 */
        a14631 = (2*a14625);
        t4435 = P1[a14631];
        a14632 = (a14631 + 1);
        t4436 = P1[a14632];
        /* MPAssignDD 64 */
        a14633 = (2*a14626);
        t4437 = P1[a14633];
        a14634 = (a14633 + 1);
        t4438 = P1[a14634];
        MPMulQDD_L2(t2247, t2248, t2245, t2246, t2243, t2244, t2241, t2242, 
    t4431, t4432, t4433, t4434, t4435, t4436, t4437, t4438);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4439 = (t2243 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b847 = ((int) 1);
        t4440 = (288230376151711744 - b847);
        /* MPBinAndD 64 */
        t4441 = (((t2247)&(t4440)));
        t4442 = (((t2248)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14635 = (t4441 << 6);
        a14636 = (t4442 >> 58);
        t4443 = (((a14635)|(a14636)));
        t4444 = (t4442 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4445 = (t2245 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4446 = (((t4444)|(t4445)));
        /* Begin of MPShiftLeft2D */
        a14637 = (t2245 << 6);
        a14638 = (t2246 >> 58);
        t4447 = (((a14637)|(a14638)));
        t4448 = (t2246 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4449 = (((t4448)|(t4439)));
        /* End of MPShiftRight3 */
        a9012 = mu[0];
        a9013 = mu[1];
        a9014 = mu[2];
        a9015 = mu[3];
        MPMulQDD_L2(t2267, t2268, t2265, t2266, t2263, t2264, t2261, t2262, 
    t4443, t4446, t4447, t4449, a9012, a9013, a9014, a9015);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4450 = (t2267 >> 1);
        a14639 = (t2267 << 63);
        a14640 = (t2268 >> 1);
        t4451 = (((a14639)|(a14640)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4452 = (t2268 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4453 = (t2265 >> 1);
        a14641 = (t2265 << 63);
        a14642 = (t2266 >> 1);
        t4454 = (((a14641)|(a14642)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4455 = (((t4452)|(t4453)));
        /* End of MPShiftRight2 */
        a9043 = modulus[0];
        a9044 = modulus[1];
        a9045 = modulus[2];
        a9046 = modulus[3];
        MPMulQDD_L2(t2255, t2256, t2253, t2254, t2251, t2252, t2249, t2250, 
    t4450, t4451, t4455, t4454, a9043, a9044, a9045, a9046);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1074 = (t2242 - t2250);
        b848 = ((t2242 < t2250));
        d1075 = (t2241 - t2249);
        d1076 = (d1075 - b848);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14644 = ((t2241 < t2249));
        a14645 = ((t2241 == t2249));
        a14646 = ((a14645) && (b848));
        b849 = ((a14644) || (a14646));
        /* Begin of MPSubDDD 64 */
        d1077 = (t2244 - t2252);
        b850 = ((t2244 < t2252));
        d1078 = (t2243 - t2251);
        d1079 = (d1078 - b850);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1080 = (d1077 - b849);
        b851 = ((d1077 < b849));
        t4456 = (d1079 - b851);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1081 = (d1074 - a9046);
        b852 = ((d1074 < a9046));
        d1082 = (d1076 - a9045);
        d1083 = (d1082 - b852);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14651 = ((d1076 < a9045));
        a14652 = ((d1076 == a9045));
        a14653 = ((a14652) && (b852));
        b853 = ((a14651) || (a14653));
        /* Begin of MPSubDDD 64 */
        d1084 = (d1080 - a9044);
        b854 = ((d1080 < a9044));
        d1085 = (t4456 - a9043);
        d1086 = (d1085 - b854);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1087 = (d1084 - b853);
        b855 = ((d1084 < b853));
        t4457 = (d1086 - b855);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14657 = ((t4456 < a9043));
        a14658 = ((t4456 == a9043));
        a14659 = ((a14658) && (b854));
        a14660 = ((a14657) || (a14659));
        /* MPEqual 64 */
        a14661 = ((d1080 == a9044));
        a14662 = ((a14658) && (a14661));
        /* MPLessThan 64 */
        a14663 = ((a14662) && (b853));
        i615 = ((a14660) || (a14663));
        /* MPCondD 64 */
        t4458 = ((i615) ? (t4456) : (t4457));
        t4459 = ((i615) ? (d1080) : (d1087));
        /* MPCondD 64 */
        t4460 = ((i615) ? (d1076) : (d1083));
        t4461 = ((i615) ? (d1074) : (d1081));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14664 = (1024*i23);
        a14665 = (2*threadIdx.x);
        a14666 = (a14664 + a14665);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14667 = (2*a14619);
        a14668 = (a14667 + 1);
        /* MPAssignDD 64 */
        a14669 = (2*a14668);
        t4462 = P1[a14669];
        a14670 = (a14669 + 1);
        t4463 = P1[a14670];
        /* MPAddQDD 64 */
        s843 = (((uint128_t ) t4463) + ((uint128_t ) t4461));
        t4464 = ((uint64_t ) s843);
        c336 = (s843 >> 64);
        s844 = (((uint128_t ) t4462) + ((uint128_t ) t4460));
        s845 = (((uint128_t ) s844) + ((uint128_t ) c336));
        t4465 = ((uint64_t ) s845);
        c337 = (s845 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14671 = (2*a14667);
        t4466 = P1[a14671];
        a14672 = (a14671 + 1);
        t4467 = P1[a14672];
        /* MPAddQDD 64 */
        s846 = (((uint128_t ) t4467) + ((uint128_t ) t4459));
        t4468 = ((uint64_t ) s846);
        c338 = (s846 >> 64);
        s847 = (((uint128_t ) t4466) + ((uint128_t ) t4458));
        s848 = (((uint128_t ) s847) + ((uint128_t ) c338));
        t4469 = ((uint64_t ) s848);
        /* MPPropagateCarry 64 */
        t4470 = (t4468 + c337);
        a14673 = ((t4470 == 0));
        a14674 = (t4469 + c337);
        t4471 = ((a14673) ? (a14674) : (t4469));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14681 = ((a9043 < t4471));
        a14682 = ((a9043 == t4471));
        a14683 = ((a9044 < t4470));
        a14684 = ((a14682) && (a14683));
        a14685 = ((a14681) || (a14684));
        /* MPEqual 64 */
        a14686 = ((a9044 == t4470));
        a14687 = ((a14682) && (a14686));
        /* MPLessThan 64 */
        a14688 = ((a9045 < t4465));
        a14689 = ((a9045 == t4465));
        a14690 = ((a9046 < t4464));
        a14691 = ((a14689) && (a14690));
        a14692 = ((a14688) || (a14691));
        a14693 = ((a14687) && (a14692));
        i616 = ((a14685) || (a14693));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1088 = (t4464 - a9046);
        b856 = ((t4464 < a9046));
        d1089 = (t4465 - a9045);
        d1090 = (d1089 - b856);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14695 = ((t4465 < a9045));
        a14696 = ((t4465 == a9045));
        a14697 = ((a14696) && (b856));
        b857 = ((a14695) || (a14697));
        /* Begin of MPSubDDD 64 */
        d1091 = (t4470 - a9044);
        b858 = ((t4470 < a9044));
        d1092 = (t4471 - a9043);
        d1093 = (d1092 - b858);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1094 = (d1091 - b857);
        b859 = ((d1091 < b857));
        t4474 = (d1093 - b859);
        /* End of MPSubDDD 128 */
        a14701 = (2*a14666);
        /* MPCondD 64 */
        a14702 = (2*a14701);
        P2[a14702] = ((i616) ? (t4474) : (t4471));
        a14703 = (a14702 + 1);
        P2[a14703] = ((i616) ? (d1094) : (t4470));
        a14704 = (a14701 + 1);
        /* MPCondD 64 */
        a14705 = (2*a14704);
        P2[a14705] = ((i616) ? (d1090) : (t4465));
        a14706 = (a14705 + 1);
        P2[a14706] = ((i616) ? (d1088) : (t4464));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b860 = (a14665 + a14664);
        a14707 = (b860 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1095 = (t4463 - t4461);
        b861 = ((t4463 < t4461));
        d1096 = (t4462 - t4460);
        d1097 = (d1096 - b861);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14709 = ((t4462 < t4460));
        a14710 = ((t4462 == t4460));
        a14711 = ((a14710) && (b861));
        b862 = ((a14709) || (a14711));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1098 = (t4467 - t4459);
        b863 = ((t4467 < t4459));
        d1099 = (t4466 - t4458);
        d1100 = (d1099 - b863);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1101 = (d1098 - b862);
        b864 = ((d1098 < b862));
        t4475 = (d1100 - b864);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s849 = (((uint128_t ) d1095) + ((uint128_t ) a9046));
        t4476 = ((uint64_t ) s849);
        c340 = (s849 >> 64);
        s850 = (((uint128_t ) d1097) + ((uint128_t ) a9045));
        s851 = (((uint128_t ) s850) + ((uint128_t ) c340));
        t4477 = ((uint64_t ) s851);
        c341 = (s851 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s852 = (((uint128_t ) d1101) + ((uint128_t ) a9044));
        t4478 = ((uint64_t ) s852);
        c342 = (s852 >> 64);
        s853 = (((uint128_t ) t4475) + ((uint128_t ) a9043));
        s854 = (((uint128_t ) s853) + ((uint128_t ) c342));
        t4479 = ((uint64_t ) s854);
        /* MPPropagateCarry 64 */
        t4480 = (t4478 + c341);
        a14715 = ((t4480 == 0));
        a14716 = (t4479 + c341);
        t4481 = ((a14715) ? (a14716) : (t4479));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14723 = ((t4466 < t4458));
        a14724 = ((t4466 == t4458));
        a14725 = ((a14724) && (b863));
        a14726 = ((a14723) || (a14725));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14727 = ((t4467 == t4459));
        a14728 = ((a14724) && (a14727));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14729 = ((a14728) && (b862));
        i617 = ((a14726) || (a14729));
        a14730 = (2*a14707);
        /* MPCondD 64 */
        a14731 = (2*a14730);
        P2[a14731] = ((i617) ? (t4481) : (t4475));
        a14732 = (a14731 + 1);
        P2[a14732] = ((i617) ? (t4480) : (d1101));
        a14733 = (a14730 + 1);
        /* MPCondD 64 */
        a14734 = (2*a14733);
        P2[a14734] = ((i617) ? (t4477) : (d1097));
        a14735 = (a14734 + 1);
        P2[a14735] = ((i617) ? (t4476) : (d1095));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code10(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14736, a14737, a14738, a14739, a14740, a14741, a14742, a14743, 
            a14744, a14745, a14746, a14747, a14748, a14749, a14750, a14751, 
            a14752, a14762, a14763, a14764, a14769, a14770, a14771, a14775, 
            a14776, a14777, a14778, a14779, a14780, a14781, a14782, a14783, 
            a14784, a14785, a14786, a14787, a14788, a14789, a14790, a14791, 
            a14799, a14800, a14801, a14802, a14803, a14804, a14805, a14806, 
            a14807, a14808, a14809, a14810, a14811, a14813, a14814, a14815, 
            a14819, a14820, a14821, a14822, a14823, a14824, a14825, a14827, 
            a14828, a14829, a14833, a14841, a14842, a14843, a14844, a14845, 
            a14846, a14847, a14848, a14849, a14850, a14851, a14852, a14853, 
            b865, b866, b867, b868, b869, b870, b871, b872, 
            b873, b874, b875, b876, b877, b878, b879, b880, 
            b881, b882, b883, c344, c345, c346, c348, c349, 
            c350, i618, i619, i620;
    uint64_t a14753, a14754, a14755, a14756, a14757, a14758, a14759, a14760, 
            a14792, a14834, a9428, a9429, a9430, a9431, a9459, a9460, 
            a9461, a9462, d1102, d1103, d1104, d1105, d1106, d1107, 
            d1108, d1109, d1110, d1111, d1112, d1113, d1114, d1115, 
            d1116, d1117, d1118, d1119, d1120, d1121, d1122, d1123, 
            d1124, d1125, d1126, d1127, d1128, d1129, t2277, t2278, 
            t2279, t2280, t2281, t2282, t2283, t2284, t2285, t2286, 
            t2287, t2288, t2289, t2290, t2291, t2292, t2293, t2294, 
            t2295, t2296, t2297, t2298, t2299, t2300, t4484, t4485, 
            t4486, t4487, t4488, t4489, t4490, t4491, t4492, t4493, 
            t4494, t4495, t4496, t4497, t4498, t4499, t4500, t4501, 
            t4502, t4503, t4504, t4505, t4506, t4507, t4508, t4509, 
            t4510, t4511, t4512, t4513, t4514, t4515, t4516, t4517, 
            t4518, t4519, t4520, t4521, t4522, t4523, t4524, t4527, 
            t4528, t4529, t4530, t4531, t4532, t4533, t4534;
    uint128_t s855, s856, s857, s858, s859, s860, s861, s862, 
            s863, s864, s865, s866;
    for(int i21 = 0; i21 <= 1023; i21++) {
        a14736 = (512*i21);
        a14737 = (a14736 + threadIdx.x);
        b865 = (threadIdx.x + a14736);
        a14738 = (b865 + 524288);
        a14739 = (a14738 % 1024);
        a14740 = (1024 + a14739);
        /* Begin of MPModMul 128 */
        a14741 = (2*a14740);
        a14742 = (a14741 + 1);
        a14743 = (2*a14738);
        a14744 = (a14743 + 1);
        /* MPAssignDD 64 */
        a14745 = (2*a14741);
        t4484 = twiddles[a14745];
        a14746 = (a14745 + 1);
        t4485 = twiddles[a14746];
        /* MPAssignDD 64 */
        a14747 = (2*a14742);
        t4486 = twiddles[a14747];
        a14748 = (a14747 + 1);
        t4487 = twiddles[a14748];
        /* MPAssignDD 64 */
        a14749 = (2*a14743);
        t4488 = P2[a14749];
        a14750 = (a14749 + 1);
        t4489 = P2[a14750];
        /* MPAssignDD 64 */
        a14751 = (2*a14744);
        t4490 = P2[a14751];
        a14752 = (a14751 + 1);
        t4491 = P2[a14752];
        MPMulQDD_L2(t2283, t2284, t2281, t2282, t2279, t2280, t2277, t2278, 
    t4484, t4485, t4486, t4487, t4488, t4489, t4490, t4491);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4492 = (t2279 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b866 = ((int) 1);
        t4493 = (288230376151711744 - b866);
        /* MPBinAndD 64 */
        t4494 = (((t2283)&(t4493)));
        t4495 = (((t2284)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14753 = (t4494 << 6);
        a14754 = (t4495 >> 58);
        t4496 = (((a14753)|(a14754)));
        t4497 = (t4495 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4498 = (t2281 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4499 = (((t4497)|(t4498)));
        /* Begin of MPShiftLeft2D */
        a14755 = (t2281 << 6);
        a14756 = (t2282 >> 58);
        t4500 = (((a14755)|(a14756)));
        t4501 = (t2282 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4502 = (((t4501)|(t4492)));
        /* End of MPShiftRight3 */
        a9428 = mu[0];
        a9429 = mu[1];
        a9430 = mu[2];
        a9431 = mu[3];
        MPMulQDD_L2(t2299, t2300, t2297, t2298, t2295, t2296, t2293, t2294, 
    t4496, t4499, t4500, t4502, a9428, a9429, a9430, a9431);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4503 = (t2299 >> 1);
        a14757 = (t2299 << 63);
        a14758 = (t2300 >> 1);
        t4504 = (((a14757)|(a14758)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4505 = (t2300 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4506 = (t2297 >> 1);
        a14759 = (t2297 << 63);
        a14760 = (t2298 >> 1);
        t4507 = (((a14759)|(a14760)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4508 = (((t4505)|(t4506)));
        /* End of MPShiftRight2 */
        a9459 = modulus[0];
        a9460 = modulus[1];
        a9461 = modulus[2];
        a9462 = modulus[3];
        MPMulQDD_L2(t2291, t2292, t2289, t2290, t2287, t2288, t2285, t2286, 
    t4503, t4504, t4508, t4507, a9459, a9460, a9461, a9462);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1102 = (t2278 - t2286);
        b867 = ((t2278 < t2286));
        d1103 = (t2277 - t2285);
        d1104 = (d1103 - b867);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14762 = ((t2277 < t2285));
        a14763 = ((t2277 == t2285));
        a14764 = ((a14763) && (b867));
        b868 = ((a14762) || (a14764));
        /* Begin of MPSubDDD 64 */
        d1105 = (t2280 - t2288);
        b869 = ((t2280 < t2288));
        d1106 = (t2279 - t2287);
        d1107 = (d1106 - b869);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1108 = (d1105 - b868);
        b870 = ((d1105 < b868));
        t4509 = (d1107 - b870);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1109 = (d1102 - a9462);
        b871 = ((d1102 < a9462));
        d1110 = (d1104 - a9461);
        d1111 = (d1110 - b871);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14769 = ((d1104 < a9461));
        a14770 = ((d1104 == a9461));
        a14771 = ((a14770) && (b871));
        b872 = ((a14769) || (a14771));
        /* Begin of MPSubDDD 64 */
        d1112 = (d1108 - a9460);
        b873 = ((d1108 < a9460));
        d1113 = (t4509 - a9459);
        d1114 = (d1113 - b873);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1115 = (d1112 - b872);
        b874 = ((d1112 < b872));
        t4510 = (d1114 - b874);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14775 = ((t4509 < a9459));
        a14776 = ((t4509 == a9459));
        a14777 = ((a14776) && (b873));
        a14778 = ((a14775) || (a14777));
        /* MPEqual 64 */
        a14779 = ((d1108 == a9460));
        a14780 = ((a14776) && (a14779));
        /* MPLessThan 64 */
        a14781 = ((a14780) && (b872));
        i618 = ((a14778) || (a14781));
        /* MPCondD 64 */
        t4511 = ((i618) ? (t4509) : (t4510));
        t4512 = ((i618) ? (d1108) : (d1115));
        /* MPCondD 64 */
        t4513 = ((i618) ? (d1104) : (d1111));
        t4514 = ((i618) ? (d1102) : (d1109));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14782 = (1024*i21);
        a14783 = (2*threadIdx.x);
        a14784 = (a14782 + a14783);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14785 = (2*a14737);
        a14786 = (a14785 + 1);
        /* MPAssignDD 64 */
        a14787 = (2*a14786);
        t4515 = P2[a14787];
        a14788 = (a14787 + 1);
        t4516 = P2[a14788];
        /* MPAddQDD 64 */
        s855 = (((uint128_t ) t4516) + ((uint128_t ) t4514));
        t4517 = ((uint64_t ) s855);
        c344 = (s855 >> 64);
        s856 = (((uint128_t ) t4515) + ((uint128_t ) t4513));
        s857 = (((uint128_t ) s856) + ((uint128_t ) c344));
        t4518 = ((uint64_t ) s857);
        c345 = (s857 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14789 = (2*a14785);
        t4519 = P2[a14789];
        a14790 = (a14789 + 1);
        t4520 = P2[a14790];
        /* MPAddQDD 64 */
        s858 = (((uint128_t ) t4520) + ((uint128_t ) t4512));
        t4521 = ((uint64_t ) s858);
        c346 = (s858 >> 64);
        s859 = (((uint128_t ) t4519) + ((uint128_t ) t4511));
        s860 = (((uint128_t ) s859) + ((uint128_t ) c346));
        t4522 = ((uint64_t ) s860);
        /* MPPropagateCarry 64 */
        t4523 = (t4521 + c345);
        a14791 = ((t4523 == 0));
        a14792 = (t4522 + c345);
        t4524 = ((a14791) ? (a14792) : (t4522));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14799 = ((a9459 < t4524));
        a14800 = ((a9459 == t4524));
        a14801 = ((a9460 < t4523));
        a14802 = ((a14800) && (a14801));
        a14803 = ((a14799) || (a14802));
        /* MPEqual 64 */
        a14804 = ((a9460 == t4523));
        a14805 = ((a14800) && (a14804));
        /* MPLessThan 64 */
        a14806 = ((a9461 < t4518));
        a14807 = ((a9461 == t4518));
        a14808 = ((a9462 < t4517));
        a14809 = ((a14807) && (a14808));
        a14810 = ((a14806) || (a14809));
        a14811 = ((a14805) && (a14810));
        i619 = ((a14803) || (a14811));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1116 = (t4517 - a9462);
        b875 = ((t4517 < a9462));
        d1117 = (t4518 - a9461);
        d1118 = (d1117 - b875);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14813 = ((t4518 < a9461));
        a14814 = ((t4518 == a9461));
        a14815 = ((a14814) && (b875));
        b876 = ((a14813) || (a14815));
        /* Begin of MPSubDDD 64 */
        d1119 = (t4523 - a9460);
        b877 = ((t4523 < a9460));
        d1120 = (t4524 - a9459);
        d1121 = (d1120 - b877);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1122 = (d1119 - b876);
        b878 = ((d1119 < b876));
        t4527 = (d1121 - b878);
        /* End of MPSubDDD 128 */
        a14819 = (2*a14784);
        /* MPCondD 64 */
        a14820 = (2*a14819);
        P1[a14820] = ((i619) ? (t4527) : (t4524));
        a14821 = (a14820 + 1);
        P1[a14821] = ((i619) ? (d1122) : (t4523));
        a14822 = (a14819 + 1);
        /* MPCondD 64 */
        a14823 = (2*a14822);
        P1[a14823] = ((i619) ? (d1118) : (t4518));
        a14824 = (a14823 + 1);
        P1[a14824] = ((i619) ? (d1116) : (t4517));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b879 = (a14783 + a14782);
        a14825 = (b879 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1123 = (t4516 - t4514);
        b880 = ((t4516 < t4514));
        d1124 = (t4515 - t4513);
        d1125 = (d1124 - b880);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14827 = ((t4515 < t4513));
        a14828 = ((t4515 == t4513));
        a14829 = ((a14828) && (b880));
        b881 = ((a14827) || (a14829));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1126 = (t4520 - t4512);
        b882 = ((t4520 < t4512));
        d1127 = (t4519 - t4511);
        d1128 = (d1127 - b882);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1129 = (d1126 - b881);
        b883 = ((d1126 < b881));
        t4528 = (d1128 - b883);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s861 = (((uint128_t ) d1123) + ((uint128_t ) a9462));
        t4529 = ((uint64_t ) s861);
        c348 = (s861 >> 64);
        s862 = (((uint128_t ) d1125) + ((uint128_t ) a9461));
        s863 = (((uint128_t ) s862) + ((uint128_t ) c348));
        t4530 = ((uint64_t ) s863);
        c349 = (s863 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s864 = (((uint128_t ) d1129) + ((uint128_t ) a9460));
        t4531 = ((uint64_t ) s864);
        c350 = (s864 >> 64);
        s865 = (((uint128_t ) t4528) + ((uint128_t ) a9459));
        s866 = (((uint128_t ) s865) + ((uint128_t ) c350));
        t4532 = ((uint64_t ) s866);
        /* MPPropagateCarry 64 */
        t4533 = (t4531 + c349);
        a14833 = ((t4533 == 0));
        a14834 = (t4532 + c349);
        t4534 = ((a14833) ? (a14834) : (t4532));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14841 = ((t4519 < t4511));
        a14842 = ((t4519 == t4511));
        a14843 = ((a14842) && (b882));
        a14844 = ((a14841) || (a14843));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14845 = ((t4520 == t4512));
        a14846 = ((a14842) && (a14845));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14847 = ((a14846) && (b881));
        i620 = ((a14844) || (a14847));
        a14848 = (2*a14825);
        /* MPCondD 64 */
        a14849 = (2*a14848);
        P1[a14849] = ((i620) ? (t4534) : (t4528));
        a14850 = (a14849 + 1);
        P1[a14850] = ((i620) ? (t4533) : (d1129));
        a14851 = (a14848 + 1);
        /* MPCondD 64 */
        a14852 = (2*a14851);
        P1[a14852] = ((i620) ? (t4530) : (d1125));
        a14853 = (a14852 + 1);
        P1[a14853] = ((i620) ? (t4529) : (d1123));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code11(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14854, a14855, a14856, a14857, a14858, a14859, a14860, a14861, 
            a14862, a14863, a14864, a14865, a14866, a14867, a14868, a14869, 
            a14870, a14880, a14881, a14882, a14887, a14888, a14889, a14893, 
            a14894, a14895, a14896, a14897, a14898, a14899, a14900, a14901, 
            a14902, a14903, a14904, a14905, a14906, a14907, a14908, a14909, 
            a14917, a14918, a14919, a14920, a14921, a14922, a14923, a14924, 
            a14925, a14926, a14927, a14928, a14929, a14931, a14932, a14933, 
            a14937, a14938, a14939, a14940, a14941, a14942, a14943, a14945, 
            a14946, a14947, a14951, a14959, a14960, a14961, a14962, a14963, 
            a14964, a14965, a14966, a14967, a14968, a14969, a14970, a14971, 
            b884, b885, b886, b887, b888, b889, b890, b891, 
            b892, b893, b894, b895, b896, b897, b898, b899, 
            b900, b901, b902, c352, c353, c354, c356, c357, 
            c358, i621, i622, i623;
    uint64_t a14871, a14872, a14873, a14874, a14875, a14876, a14877, a14878, 
            a14910, a14952, a9844, a9845, a9846, a9847, a9875, a9876, 
            a9877, a9878, d1130, d1131, d1132, d1133, d1134, d1135, 
            d1136, d1137, d1138, d1139, d1140, d1141, d1142, d1143, 
            d1144, d1145, d1146, d1147, d1148, d1149, d1150, d1151, 
            d1152, d1153, d1154, d1155, d1156, d1157, t2313, t2314, 
            t2315, t2316, t2317, t2318, t2319, t2320, t2321, t2322, 
            t2323, t2324, t2325, t2326, t2327, t2328, t2329, t2330, 
            t2331, t2332, t2333, t2334, t2335, t2336, t4537, t4538, 
            t4539, t4540, t4541, t4542, t4543, t4544, t4545, t4546, 
            t4547, t4548, t4549, t4550, t4551, t4552, t4553, t4554, 
            t4555, t4556, t4557, t4558, t4559, t4560, t4561, t4562, 
            t4563, t4564, t4565, t4566, t4567, t4568, t4569, t4570, 
            t4571, t4572, t4573, t4574, t4575, t4576, t4577, t4580, 
            t4581, t4582, t4583, t4584, t4585, t4586, t4587;
    uint128_t s867, s868, s869, s870, s871, s872, s873, s874, 
            s875, s876, s877, s878;
    for(int i19 = 0; i19 <= 1023; i19++) {
        a14854 = (512*i19);
        a14855 = (a14854 + threadIdx.x);
        b884 = (threadIdx.x + a14854);
        a14856 = (b884 + 524288);
        a14857 = (a14856 % 2048);
        a14858 = (2048 + a14857);
        /* Begin of MPModMul 128 */
        a14859 = (2*a14858);
        a14860 = (a14859 + 1);
        a14861 = (2*a14856);
        a14862 = (a14861 + 1);
        /* MPAssignDD 64 */
        a14863 = (2*a14859);
        t4537 = twiddles[a14863];
        a14864 = (a14863 + 1);
        t4538 = twiddles[a14864];
        /* MPAssignDD 64 */
        a14865 = (2*a14860);
        t4539 = twiddles[a14865];
        a14866 = (a14865 + 1);
        t4540 = twiddles[a14866];
        /* MPAssignDD 64 */
        a14867 = (2*a14861);
        t4541 = P1[a14867];
        a14868 = (a14867 + 1);
        t4542 = P1[a14868];
        /* MPAssignDD 64 */
        a14869 = (2*a14862);
        t4543 = P1[a14869];
        a14870 = (a14869 + 1);
        t4544 = P1[a14870];
        MPMulQDD_L2(t2319, t2320, t2317, t2318, t2315, t2316, t2313, t2314, 
    t4537, t4538, t4539, t4540, t4541, t4542, t4543, t4544);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4545 = (t2315 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b885 = ((int) 1);
        t4546 = (288230376151711744 - b885);
        /* MPBinAndD 64 */
        t4547 = (((t2319)&(t4546)));
        t4548 = (((t2320)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14871 = (t4547 << 6);
        a14872 = (t4548 >> 58);
        t4549 = (((a14871)|(a14872)));
        t4550 = (t4548 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4551 = (t2317 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4552 = (((t4550)|(t4551)));
        /* Begin of MPShiftLeft2D */
        a14873 = (t2317 << 6);
        a14874 = (t2318 >> 58);
        t4553 = (((a14873)|(a14874)));
        t4554 = (t2318 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4555 = (((t4554)|(t4545)));
        /* End of MPShiftRight3 */
        a9844 = mu[0];
        a9845 = mu[1];
        a9846 = mu[2];
        a9847 = mu[3];
        MPMulQDD_L2(t2335, t2336, t2333, t2334, t2331, t2332, t2329, t2330, 
    t4549, t4552, t4553, t4555, a9844, a9845, a9846, a9847);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4556 = (t2335 >> 1);
        a14875 = (t2335 << 63);
        a14876 = (t2336 >> 1);
        t4557 = (((a14875)|(a14876)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4558 = (t2336 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4559 = (t2333 >> 1);
        a14877 = (t2333 << 63);
        a14878 = (t2334 >> 1);
        t4560 = (((a14877)|(a14878)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4561 = (((t4558)|(t4559)));
        /* End of MPShiftRight2 */
        a9875 = modulus[0];
        a9876 = modulus[1];
        a9877 = modulus[2];
        a9878 = modulus[3];
        MPMulQDD_L2(t2327, t2328, t2325, t2326, t2323, t2324, t2321, t2322, 
    t4556, t4557, t4561, t4560, a9875, a9876, a9877, a9878);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1130 = (t2314 - t2322);
        b886 = ((t2314 < t2322));
        d1131 = (t2313 - t2321);
        d1132 = (d1131 - b886);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14880 = ((t2313 < t2321));
        a14881 = ((t2313 == t2321));
        a14882 = ((a14881) && (b886));
        b887 = ((a14880) || (a14882));
        /* Begin of MPSubDDD 64 */
        d1133 = (t2316 - t2324);
        b888 = ((t2316 < t2324));
        d1134 = (t2315 - t2323);
        d1135 = (d1134 - b888);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1136 = (d1133 - b887);
        b889 = ((d1133 < b887));
        t4562 = (d1135 - b889);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1137 = (d1130 - a9878);
        b890 = ((d1130 < a9878));
        d1138 = (d1132 - a9877);
        d1139 = (d1138 - b890);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14887 = ((d1132 < a9877));
        a14888 = ((d1132 == a9877));
        a14889 = ((a14888) && (b890));
        b891 = ((a14887) || (a14889));
        /* Begin of MPSubDDD 64 */
        d1140 = (d1136 - a9876);
        b892 = ((d1136 < a9876));
        d1141 = (t4562 - a9875);
        d1142 = (d1141 - b892);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1143 = (d1140 - b891);
        b893 = ((d1140 < b891));
        t4563 = (d1142 - b893);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14893 = ((t4562 < a9875));
        a14894 = ((t4562 == a9875));
        a14895 = ((a14894) && (b892));
        a14896 = ((a14893) || (a14895));
        /* MPEqual 64 */
        a14897 = ((d1136 == a9876));
        a14898 = ((a14894) && (a14897));
        /* MPLessThan 64 */
        a14899 = ((a14898) && (b891));
        i621 = ((a14896) || (a14899));
        /* MPCondD 64 */
        t4564 = ((i621) ? (t4562) : (t4563));
        t4565 = ((i621) ? (d1136) : (d1143));
        /* MPCondD 64 */
        t4566 = ((i621) ? (d1132) : (d1139));
        t4567 = ((i621) ? (d1130) : (d1137));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a14900 = (1024*i19);
        a14901 = (2*threadIdx.x);
        a14902 = (a14900 + a14901);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a14903 = (2*a14855);
        a14904 = (a14903 + 1);
        /* MPAssignDD 64 */
        a14905 = (2*a14904);
        t4568 = P1[a14905];
        a14906 = (a14905 + 1);
        t4569 = P1[a14906];
        /* MPAddQDD 64 */
        s867 = (((uint128_t ) t4569) + ((uint128_t ) t4567));
        t4570 = ((uint64_t ) s867);
        c352 = (s867 >> 64);
        s868 = (((uint128_t ) t4568) + ((uint128_t ) t4566));
        s869 = (((uint128_t ) s868) + ((uint128_t ) c352));
        t4571 = ((uint64_t ) s869);
        c353 = (s869 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a14907 = (2*a14903);
        t4572 = P1[a14907];
        a14908 = (a14907 + 1);
        t4573 = P1[a14908];
        /* MPAddQDD 64 */
        s870 = (((uint128_t ) t4573) + ((uint128_t ) t4565));
        t4574 = ((uint64_t ) s870);
        c354 = (s870 >> 64);
        s871 = (((uint128_t ) t4572) + ((uint128_t ) t4564));
        s872 = (((uint128_t ) s871) + ((uint128_t ) c354));
        t4575 = ((uint64_t ) s872);
        /* MPPropagateCarry 64 */
        t4576 = (t4574 + c353);
        a14909 = ((t4576 == 0));
        a14910 = (t4575 + c353);
        t4577 = ((a14909) ? (a14910) : (t4575));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a14917 = ((a9875 < t4577));
        a14918 = ((a9875 == t4577));
        a14919 = ((a9876 < t4576));
        a14920 = ((a14918) && (a14919));
        a14921 = ((a14917) || (a14920));
        /* MPEqual 64 */
        a14922 = ((a9876 == t4576));
        a14923 = ((a14918) && (a14922));
        /* MPLessThan 64 */
        a14924 = ((a9877 < t4571));
        a14925 = ((a9877 == t4571));
        a14926 = ((a9878 < t4570));
        a14927 = ((a14925) && (a14926));
        a14928 = ((a14924) || (a14927));
        a14929 = ((a14923) && (a14928));
        i622 = ((a14921) || (a14929));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1144 = (t4570 - a9878);
        b894 = ((t4570 < a9878));
        d1145 = (t4571 - a9877);
        d1146 = (d1145 - b894);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14931 = ((t4571 < a9877));
        a14932 = ((t4571 == a9877));
        a14933 = ((a14932) && (b894));
        b895 = ((a14931) || (a14933));
        /* Begin of MPSubDDD 64 */
        d1147 = (t4576 - a9876);
        b896 = ((t4576 < a9876));
        d1148 = (t4577 - a9875);
        d1149 = (d1148 - b896);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1150 = (d1147 - b895);
        b897 = ((d1147 < b895));
        t4580 = (d1149 - b897);
        /* End of MPSubDDD 128 */
        a14937 = (2*a14902);
        /* MPCondD 64 */
        a14938 = (2*a14937);
        P2[a14938] = ((i622) ? (t4580) : (t4577));
        a14939 = (a14938 + 1);
        P2[a14939] = ((i622) ? (d1150) : (t4576));
        a14940 = (a14937 + 1);
        /* MPCondD 64 */
        a14941 = (2*a14940);
        P2[a14941] = ((i622) ? (d1146) : (t4571));
        a14942 = (a14941 + 1);
        P2[a14942] = ((i622) ? (d1144) : (t4570));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b898 = (a14901 + a14900);
        a14943 = (b898 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1151 = (t4569 - t4567);
        b899 = ((t4569 < t4567));
        d1152 = (t4568 - t4566);
        d1153 = (d1152 - b899);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14945 = ((t4568 < t4566));
        a14946 = ((t4568 == t4566));
        a14947 = ((a14946) && (b899));
        b900 = ((a14945) || (a14947));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1154 = (t4573 - t4565);
        b901 = ((t4573 < t4565));
        d1155 = (t4572 - t4564);
        d1156 = (d1155 - b901);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1157 = (d1154 - b900);
        b902 = ((d1154 < b900));
        t4581 = (d1156 - b902);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s873 = (((uint128_t ) d1151) + ((uint128_t ) a9878));
        t4582 = ((uint64_t ) s873);
        c356 = (s873 >> 64);
        s874 = (((uint128_t ) d1153) + ((uint128_t ) a9877));
        s875 = (((uint128_t ) s874) + ((uint128_t ) c356));
        t4583 = ((uint64_t ) s875);
        c357 = (s875 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s876 = (((uint128_t ) d1157) + ((uint128_t ) a9876));
        t4584 = ((uint64_t ) s876);
        c358 = (s876 >> 64);
        s877 = (((uint128_t ) t4581) + ((uint128_t ) a9875));
        s878 = (((uint128_t ) s877) + ((uint128_t ) c358));
        t4585 = ((uint64_t ) s878);
        /* MPPropagateCarry 64 */
        t4586 = (t4584 + c357);
        a14951 = ((t4586 == 0));
        a14952 = (t4585 + c357);
        t4587 = ((a14951) ? (a14952) : (t4585));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14959 = ((t4572 < t4564));
        a14960 = ((t4572 == t4564));
        a14961 = ((a14960) && (b901));
        a14962 = ((a14959) || (a14961));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a14963 = ((t4573 == t4565));
        a14964 = ((a14960) && (a14963));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a14965 = ((a14964) && (b900));
        i623 = ((a14962) || (a14965));
        a14966 = (2*a14943);
        /* MPCondD 64 */
        a14967 = (2*a14966);
        P2[a14967] = ((i623) ? (t4587) : (t4581));
        a14968 = (a14967 + 1);
        P2[a14968] = ((i623) ? (t4586) : (d1157));
        a14969 = (a14966 + 1);
        /* MPCondD 64 */
        a14970 = (2*a14969);
        P2[a14970] = ((i623) ? (t4583) : (d1153));
        a14971 = (a14970 + 1);
        P2[a14971] = ((i623) ? (t4582) : (d1151));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code12(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a14972, a14973, a14974, a14975, a14976, a14977, a14978, a14979, 
            a14980, a14981, a14982, a14983, a14984, a14985, a14986, a14987, 
            a14988, a14998, a14999, a15000, a15005, a15006, a15007, a15011, 
            a15012, a15013, a15014, a15015, a15016, a15017, a15018, a15019, 
            a15020, a15021, a15022, a15023, a15024, a15025, a15026, a15027, 
            a15035, a15036, a15037, a15038, a15039, a15040, a15041, a15042, 
            a15043, a15044, a15045, a15046, a15047, a15049, a15050, a15051, 
            a15055, a15056, a15057, a15058, a15059, a15060, a15061, a15063, 
            a15064, a15065, a15069, a15077, a15078, a15079, a15080, a15081, 
            a15082, a15083, a15084, a15085, a15086, a15087, a15088, a15089, 
            b903, b904, b905, b906, b907, b908, b909, b910, 
            b911, b912, b913, b914, b915, b916, b917, b918, 
            b919, b920, b921, c360, c361, c362, c364, c365, 
            c366, i624, i625, i626;
    uint64_t a10260, a10261, a10262, a10263, a10291, a10292, a10293, a10294, 
            a14989, a14990, a14991, a14992, a14993, a14994, a14995, a14996, 
            a15028, a15070, d1158, d1159, d1160, d1161, d1162, d1163, 
            d1164, d1165, d1166, d1167, d1168, d1169, d1170, d1171, 
            d1172, d1173, d1174, d1175, d1176, d1177, d1178, d1179, 
            d1180, d1181, d1182, d1183, d1184, d1185, t2349, t2350, 
            t2351, t2352, t2353, t2354, t2355, t2356, t2357, t2358, 
            t2359, t2360, t2361, t2362, t2363, t2364, t2365, t2366, 
            t2367, t2368, t2369, t2370, t2371, t2372, t4590, t4591, 
            t4592, t4593, t4594, t4595, t4596, t4597, t4598, t4599, 
            t4600, t4601, t4602, t4603, t4604, t4605, t4606, t4607, 
            t4608, t4609, t4610, t4611, t4612, t4613, t4614, t4615, 
            t4616, t4617, t4618, t4619, t4620, t4621, t4622, t4623, 
            t4624, t4625, t4626, t4627, t4628, t4629, t4630, t4633, 
            t4634, t4635, t4636, t4637, t4638, t4639, t4640;
    uint128_t s879, s880, s881, s882, s883, s884, s885, s886, 
            s887, s888, s889, s890;
    for(int i17 = 0; i17 <= 1023; i17++) {
        a14972 = (512*i17);
        a14973 = (a14972 + threadIdx.x);
        b903 = (threadIdx.x + a14972);
        a14974 = (b903 + 524288);
        a14975 = (a14974 % 4096);
        a14976 = (4096 + a14975);
        /* Begin of MPModMul 128 */
        a14977 = (2*a14976);
        a14978 = (a14977 + 1);
        a14979 = (2*a14974);
        a14980 = (a14979 + 1);
        /* MPAssignDD 64 */
        a14981 = (2*a14977);
        t4590 = twiddles[a14981];
        a14982 = (a14981 + 1);
        t4591 = twiddles[a14982];
        /* MPAssignDD 64 */
        a14983 = (2*a14978);
        t4592 = twiddles[a14983];
        a14984 = (a14983 + 1);
        t4593 = twiddles[a14984];
        /* MPAssignDD 64 */
        a14985 = (2*a14979);
        t4594 = P2[a14985];
        a14986 = (a14985 + 1);
        t4595 = P2[a14986];
        /* MPAssignDD 64 */
        a14987 = (2*a14980);
        t4596 = P2[a14987];
        a14988 = (a14987 + 1);
        t4597 = P2[a14988];
        MPMulQDD_L2(t2355, t2356, t2353, t2354, t2351, t2352, t2349, t2350, 
    t4590, t4591, t4592, t4593, t4594, t4595, t4596, t4597);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4598 = (t2351 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b904 = ((int) 1);
        t4599 = (288230376151711744 - b904);
        /* MPBinAndD 64 */
        t4600 = (((t2355)&(t4599)));
        t4601 = (((t2356)&((-1))));
        /* Begin of MPShiftLeft2D */
        a14989 = (t4600 << 6);
        a14990 = (t4601 >> 58);
        t4602 = (((a14989)|(a14990)));
        t4603 = (t4601 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4604 = (t2353 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4605 = (((t4603)|(t4604)));
        /* Begin of MPShiftLeft2D */
        a14991 = (t2353 << 6);
        a14992 = (t2354 >> 58);
        t4606 = (((a14991)|(a14992)));
        t4607 = (t2354 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4608 = (((t4607)|(t4598)));
        /* End of MPShiftRight3 */
        a10260 = mu[0];
        a10261 = mu[1];
        a10262 = mu[2];
        a10263 = mu[3];
        MPMulQDD_L2(t2371, t2372, t2369, t2370, t2367, t2368, t2365, t2366, 
    t4602, t4605, t4606, t4608, a10260, a10261, a10262, a10263);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4609 = (t2371 >> 1);
        a14993 = (t2371 << 63);
        a14994 = (t2372 >> 1);
        t4610 = (((a14993)|(a14994)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4611 = (t2372 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4612 = (t2369 >> 1);
        a14995 = (t2369 << 63);
        a14996 = (t2370 >> 1);
        t4613 = (((a14995)|(a14996)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4614 = (((t4611)|(t4612)));
        /* End of MPShiftRight2 */
        a10291 = modulus[0];
        a10292 = modulus[1];
        a10293 = modulus[2];
        a10294 = modulus[3];
        MPMulQDD_L2(t2363, t2364, t2361, t2362, t2359, t2360, t2357, t2358, 
    t4609, t4610, t4614, t4613, a10291, a10292, a10293, a10294);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1158 = (t2350 - t2358);
        b905 = ((t2350 < t2358));
        d1159 = (t2349 - t2357);
        d1160 = (d1159 - b905);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a14998 = ((t2349 < t2357));
        a14999 = ((t2349 == t2357));
        a15000 = ((a14999) && (b905));
        b906 = ((a14998) || (a15000));
        /* Begin of MPSubDDD 64 */
        d1161 = (t2352 - t2360);
        b907 = ((t2352 < t2360));
        d1162 = (t2351 - t2359);
        d1163 = (d1162 - b907);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1164 = (d1161 - b906);
        b908 = ((d1161 < b906));
        t4615 = (d1163 - b908);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1165 = (d1158 - a10294);
        b909 = ((d1158 < a10294));
        d1166 = (d1160 - a10293);
        d1167 = (d1166 - b909);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15005 = ((d1160 < a10293));
        a15006 = ((d1160 == a10293));
        a15007 = ((a15006) && (b909));
        b910 = ((a15005) || (a15007));
        /* Begin of MPSubDDD 64 */
        d1168 = (d1164 - a10292);
        b911 = ((d1164 < a10292));
        d1169 = (t4615 - a10291);
        d1170 = (d1169 - b911);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1171 = (d1168 - b910);
        b912 = ((d1168 < b910));
        t4616 = (d1170 - b912);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15011 = ((t4615 < a10291));
        a15012 = ((t4615 == a10291));
        a15013 = ((a15012) && (b911));
        a15014 = ((a15011) || (a15013));
        /* MPEqual 64 */
        a15015 = ((d1164 == a10292));
        a15016 = ((a15012) && (a15015));
        /* MPLessThan 64 */
        a15017 = ((a15016) && (b910));
        i624 = ((a15014) || (a15017));
        /* MPCondD 64 */
        t4617 = ((i624) ? (t4615) : (t4616));
        t4618 = ((i624) ? (d1164) : (d1171));
        /* MPCondD 64 */
        t4619 = ((i624) ? (d1160) : (d1167));
        t4620 = ((i624) ? (d1158) : (d1165));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15018 = (1024*i17);
        a15019 = (2*threadIdx.x);
        a15020 = (a15018 + a15019);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15021 = (2*a14973);
        a15022 = (a15021 + 1);
        /* MPAssignDD 64 */
        a15023 = (2*a15022);
        t4621 = P2[a15023];
        a15024 = (a15023 + 1);
        t4622 = P2[a15024];
        /* MPAddQDD 64 */
        s879 = (((uint128_t ) t4622) + ((uint128_t ) t4620));
        t4623 = ((uint64_t ) s879);
        c360 = (s879 >> 64);
        s880 = (((uint128_t ) t4621) + ((uint128_t ) t4619));
        s881 = (((uint128_t ) s880) + ((uint128_t ) c360));
        t4624 = ((uint64_t ) s881);
        c361 = (s881 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15025 = (2*a15021);
        t4625 = P2[a15025];
        a15026 = (a15025 + 1);
        t4626 = P2[a15026];
        /* MPAddQDD 64 */
        s882 = (((uint128_t ) t4626) + ((uint128_t ) t4618));
        t4627 = ((uint64_t ) s882);
        c362 = (s882 >> 64);
        s883 = (((uint128_t ) t4625) + ((uint128_t ) t4617));
        s884 = (((uint128_t ) s883) + ((uint128_t ) c362));
        t4628 = ((uint64_t ) s884);
        /* MPPropagateCarry 64 */
        t4629 = (t4627 + c361);
        a15027 = ((t4629 == 0));
        a15028 = (t4628 + c361);
        t4630 = ((a15027) ? (a15028) : (t4628));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15035 = ((a10291 < t4630));
        a15036 = ((a10291 == t4630));
        a15037 = ((a10292 < t4629));
        a15038 = ((a15036) && (a15037));
        a15039 = ((a15035) || (a15038));
        /* MPEqual 64 */
        a15040 = ((a10292 == t4629));
        a15041 = ((a15036) && (a15040));
        /* MPLessThan 64 */
        a15042 = ((a10293 < t4624));
        a15043 = ((a10293 == t4624));
        a15044 = ((a10294 < t4623));
        a15045 = ((a15043) && (a15044));
        a15046 = ((a15042) || (a15045));
        a15047 = ((a15041) && (a15046));
        i625 = ((a15039) || (a15047));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1172 = (t4623 - a10294);
        b913 = ((t4623 < a10294));
        d1173 = (t4624 - a10293);
        d1174 = (d1173 - b913);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15049 = ((t4624 < a10293));
        a15050 = ((t4624 == a10293));
        a15051 = ((a15050) && (b913));
        b914 = ((a15049) || (a15051));
        /* Begin of MPSubDDD 64 */
        d1175 = (t4629 - a10292);
        b915 = ((t4629 < a10292));
        d1176 = (t4630 - a10291);
        d1177 = (d1176 - b915);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1178 = (d1175 - b914);
        b916 = ((d1175 < b914));
        t4633 = (d1177 - b916);
        /* End of MPSubDDD 128 */
        a15055 = (2*a15020);
        /* MPCondD 64 */
        a15056 = (2*a15055);
        P1[a15056] = ((i625) ? (t4633) : (t4630));
        a15057 = (a15056 + 1);
        P1[a15057] = ((i625) ? (d1178) : (t4629));
        a15058 = (a15055 + 1);
        /* MPCondD 64 */
        a15059 = (2*a15058);
        P1[a15059] = ((i625) ? (d1174) : (t4624));
        a15060 = (a15059 + 1);
        P1[a15060] = ((i625) ? (d1172) : (t4623));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b917 = (a15019 + a15018);
        a15061 = (b917 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1179 = (t4622 - t4620);
        b918 = ((t4622 < t4620));
        d1180 = (t4621 - t4619);
        d1181 = (d1180 - b918);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15063 = ((t4621 < t4619));
        a15064 = ((t4621 == t4619));
        a15065 = ((a15064) && (b918));
        b919 = ((a15063) || (a15065));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1182 = (t4626 - t4618);
        b920 = ((t4626 < t4618));
        d1183 = (t4625 - t4617);
        d1184 = (d1183 - b920);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1185 = (d1182 - b919);
        b921 = ((d1182 < b919));
        t4634 = (d1184 - b921);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s885 = (((uint128_t ) d1179) + ((uint128_t ) a10294));
        t4635 = ((uint64_t ) s885);
        c364 = (s885 >> 64);
        s886 = (((uint128_t ) d1181) + ((uint128_t ) a10293));
        s887 = (((uint128_t ) s886) + ((uint128_t ) c364));
        t4636 = ((uint64_t ) s887);
        c365 = (s887 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s888 = (((uint128_t ) d1185) + ((uint128_t ) a10292));
        t4637 = ((uint64_t ) s888);
        c366 = (s888 >> 64);
        s889 = (((uint128_t ) t4634) + ((uint128_t ) a10291));
        s890 = (((uint128_t ) s889) + ((uint128_t ) c366));
        t4638 = ((uint64_t ) s890);
        /* MPPropagateCarry 64 */
        t4639 = (t4637 + c365);
        a15069 = ((t4639 == 0));
        a15070 = (t4638 + c365);
        t4640 = ((a15069) ? (a15070) : (t4638));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15077 = ((t4625 < t4617));
        a15078 = ((t4625 == t4617));
        a15079 = ((a15078) && (b920));
        a15080 = ((a15077) || (a15079));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15081 = ((t4626 == t4618));
        a15082 = ((a15078) && (a15081));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15083 = ((a15082) && (b919));
        i626 = ((a15080) || (a15083));
        a15084 = (2*a15061);
        /* MPCondD 64 */
        a15085 = (2*a15084);
        P1[a15085] = ((i626) ? (t4640) : (t4634));
        a15086 = (a15085 + 1);
        P1[a15086] = ((i626) ? (t4639) : (d1185));
        a15087 = (a15084 + 1);
        /* MPCondD 64 */
        a15088 = (2*a15087);
        P1[a15088] = ((i626) ? (t4636) : (d1181));
        a15089 = (a15088 + 1);
        P1[a15089] = ((i626) ? (t4635) : (d1179));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code13(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15090, a15091, a15092, a15093, a15094, a15095, a15096, a15097, 
            a15098, a15099, a15100, a15101, a15102, a15103, a15104, a15105, 
            a15106, a15116, a15117, a15118, a15123, a15124, a15125, a15129, 
            a15130, a15131, a15132, a15133, a15134, a15135, a15136, a15137, 
            a15138, a15139, a15140, a15141, a15142, a15143, a15144, a15145, 
            a15153, a15154, a15155, a15156, a15157, a15158, a15159, a15160, 
            a15161, a15162, a15163, a15164, a15165, a15167, a15168, a15169, 
            a15173, a15174, a15175, a15176, a15177, a15178, a15179, a15181, 
            a15182, a15183, a15187, a15195, a15196, a15197, a15198, a15199, 
            a15200, a15201, a15202, a15203, a15204, a15205, a15206, a15207, 
            b922, b923, b924, b925, b926, b927, b928, b929, 
            b930, b931, b932, b933, b934, b935, b936, b937, 
            b938, b939, b940, c368, c369, c370, c372, c373, 
            c374, i627, i628, i629;
    uint64_t a10676, a10677, a10678, a10679, a10707, a10708, a10709, a10710, 
            a15107, a15108, a15109, a15110, a15111, a15112, a15113, a15114, 
            a15146, a15188, d1186, d1187, d1188, d1189, d1190, d1191, 
            d1192, d1193, d1194, d1195, d1196, d1197, d1198, d1199, 
            d1200, d1201, d1202, d1203, d1204, d1205, d1206, d1207, 
            d1208, d1209, d1210, d1211, d1212, d1213, t2385, t2386, 
            t2387, t2388, t2389, t2390, t2391, t2392, t2393, t2394, 
            t2395, t2396, t2397, t2398, t2399, t2400, t2401, t2402, 
            t2403, t2404, t2405, t2406, t2407, t2408, t4643, t4644, 
            t4645, t4646, t4647, t4648, t4649, t4650, t4651, t4652, 
            t4653, t4654, t4655, t4656, t4657, t4658, t4659, t4660, 
            t4661, t4662, t4663, t4664, t4665, t4666, t4667, t4668, 
            t4669, t4670, t4671, t4672, t4673, t4674, t4675, t4676, 
            t4677, t4678, t4679, t4680, t4681, t4682, t4683, t4686, 
            t4687, t4688, t4689, t4690, t4691, t4692, t4693;
    uint128_t s891, s892, s893, s894, s895, s896, s897, s898, 
            s899, s900, s901, s902;
    for(int i15 = 0; i15 <= 1023; i15++) {
        a15090 = (512*i15);
        a15091 = (a15090 + threadIdx.x);
        b922 = (threadIdx.x + a15090);
        a15092 = (b922 + 524288);
        a15093 = (a15092 % 8192);
        a15094 = (8192 + a15093);
        /* Begin of MPModMul 128 */
        a15095 = (2*a15094);
        a15096 = (a15095 + 1);
        a15097 = (2*a15092);
        a15098 = (a15097 + 1);
        /* MPAssignDD 64 */
        a15099 = (2*a15095);
        t4643 = twiddles[a15099];
        a15100 = (a15099 + 1);
        t4644 = twiddles[a15100];
        /* MPAssignDD 64 */
        a15101 = (2*a15096);
        t4645 = twiddles[a15101];
        a15102 = (a15101 + 1);
        t4646 = twiddles[a15102];
        /* MPAssignDD 64 */
        a15103 = (2*a15097);
        t4647 = P1[a15103];
        a15104 = (a15103 + 1);
        t4648 = P1[a15104];
        /* MPAssignDD 64 */
        a15105 = (2*a15098);
        t4649 = P1[a15105];
        a15106 = (a15105 + 1);
        t4650 = P1[a15106];
        MPMulQDD_L2(t2391, t2392, t2389, t2390, t2387, t2388, t2385, t2386, 
    t4643, t4644, t4645, t4646, t4647, t4648, t4649, t4650);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4651 = (t2387 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b923 = ((int) 1);
        t4652 = (288230376151711744 - b923);
        /* MPBinAndD 64 */
        t4653 = (((t2391)&(t4652)));
        t4654 = (((t2392)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15107 = (t4653 << 6);
        a15108 = (t4654 >> 58);
        t4655 = (((a15107)|(a15108)));
        t4656 = (t4654 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4657 = (t2389 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4658 = (((t4656)|(t4657)));
        /* Begin of MPShiftLeft2D */
        a15109 = (t2389 << 6);
        a15110 = (t2390 >> 58);
        t4659 = (((a15109)|(a15110)));
        t4660 = (t2390 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4661 = (((t4660)|(t4651)));
        /* End of MPShiftRight3 */
        a10676 = mu[0];
        a10677 = mu[1];
        a10678 = mu[2];
        a10679 = mu[3];
        MPMulQDD_L2(t2407, t2408, t2405, t2406, t2403, t2404, t2401, t2402, 
    t4655, t4658, t4659, t4661, a10676, a10677, a10678, a10679);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4662 = (t2407 >> 1);
        a15111 = (t2407 << 63);
        a15112 = (t2408 >> 1);
        t4663 = (((a15111)|(a15112)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4664 = (t2408 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4665 = (t2405 >> 1);
        a15113 = (t2405 << 63);
        a15114 = (t2406 >> 1);
        t4666 = (((a15113)|(a15114)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4667 = (((t4664)|(t4665)));
        /* End of MPShiftRight2 */
        a10707 = modulus[0];
        a10708 = modulus[1];
        a10709 = modulus[2];
        a10710 = modulus[3];
        MPMulQDD_L2(t2399, t2400, t2397, t2398, t2395, t2396, t2393, t2394, 
    t4662, t4663, t4667, t4666, a10707, a10708, a10709, a10710);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1186 = (t2386 - t2394);
        b924 = ((t2386 < t2394));
        d1187 = (t2385 - t2393);
        d1188 = (d1187 - b924);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15116 = ((t2385 < t2393));
        a15117 = ((t2385 == t2393));
        a15118 = ((a15117) && (b924));
        b925 = ((a15116) || (a15118));
        /* Begin of MPSubDDD 64 */
        d1189 = (t2388 - t2396);
        b926 = ((t2388 < t2396));
        d1190 = (t2387 - t2395);
        d1191 = (d1190 - b926);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1192 = (d1189 - b925);
        b927 = ((d1189 < b925));
        t4668 = (d1191 - b927);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1193 = (d1186 - a10710);
        b928 = ((d1186 < a10710));
        d1194 = (d1188 - a10709);
        d1195 = (d1194 - b928);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15123 = ((d1188 < a10709));
        a15124 = ((d1188 == a10709));
        a15125 = ((a15124) && (b928));
        b929 = ((a15123) || (a15125));
        /* Begin of MPSubDDD 64 */
        d1196 = (d1192 - a10708);
        b930 = ((d1192 < a10708));
        d1197 = (t4668 - a10707);
        d1198 = (d1197 - b930);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1199 = (d1196 - b929);
        b931 = ((d1196 < b929));
        t4669 = (d1198 - b931);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15129 = ((t4668 < a10707));
        a15130 = ((t4668 == a10707));
        a15131 = ((a15130) && (b930));
        a15132 = ((a15129) || (a15131));
        /* MPEqual 64 */
        a15133 = ((d1192 == a10708));
        a15134 = ((a15130) && (a15133));
        /* MPLessThan 64 */
        a15135 = ((a15134) && (b929));
        i627 = ((a15132) || (a15135));
        /* MPCondD 64 */
        t4670 = ((i627) ? (t4668) : (t4669));
        t4671 = ((i627) ? (d1192) : (d1199));
        /* MPCondD 64 */
        t4672 = ((i627) ? (d1188) : (d1195));
        t4673 = ((i627) ? (d1186) : (d1193));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15136 = (1024*i15);
        a15137 = (2*threadIdx.x);
        a15138 = (a15136 + a15137);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15139 = (2*a15091);
        a15140 = (a15139 + 1);
        /* MPAssignDD 64 */
        a15141 = (2*a15140);
        t4674 = P1[a15141];
        a15142 = (a15141 + 1);
        t4675 = P1[a15142];
        /* MPAddQDD 64 */
        s891 = (((uint128_t ) t4675) + ((uint128_t ) t4673));
        t4676 = ((uint64_t ) s891);
        c368 = (s891 >> 64);
        s892 = (((uint128_t ) t4674) + ((uint128_t ) t4672));
        s893 = (((uint128_t ) s892) + ((uint128_t ) c368));
        t4677 = ((uint64_t ) s893);
        c369 = (s893 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15143 = (2*a15139);
        t4678 = P1[a15143];
        a15144 = (a15143 + 1);
        t4679 = P1[a15144];
        /* MPAddQDD 64 */
        s894 = (((uint128_t ) t4679) + ((uint128_t ) t4671));
        t4680 = ((uint64_t ) s894);
        c370 = (s894 >> 64);
        s895 = (((uint128_t ) t4678) + ((uint128_t ) t4670));
        s896 = (((uint128_t ) s895) + ((uint128_t ) c370));
        t4681 = ((uint64_t ) s896);
        /* MPPropagateCarry 64 */
        t4682 = (t4680 + c369);
        a15145 = ((t4682 == 0));
        a15146 = (t4681 + c369);
        t4683 = ((a15145) ? (a15146) : (t4681));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15153 = ((a10707 < t4683));
        a15154 = ((a10707 == t4683));
        a15155 = ((a10708 < t4682));
        a15156 = ((a15154) && (a15155));
        a15157 = ((a15153) || (a15156));
        /* MPEqual 64 */
        a15158 = ((a10708 == t4682));
        a15159 = ((a15154) && (a15158));
        /* MPLessThan 64 */
        a15160 = ((a10709 < t4677));
        a15161 = ((a10709 == t4677));
        a15162 = ((a10710 < t4676));
        a15163 = ((a15161) && (a15162));
        a15164 = ((a15160) || (a15163));
        a15165 = ((a15159) && (a15164));
        i628 = ((a15157) || (a15165));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1200 = (t4676 - a10710);
        b932 = ((t4676 < a10710));
        d1201 = (t4677 - a10709);
        d1202 = (d1201 - b932);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15167 = ((t4677 < a10709));
        a15168 = ((t4677 == a10709));
        a15169 = ((a15168) && (b932));
        b933 = ((a15167) || (a15169));
        /* Begin of MPSubDDD 64 */
        d1203 = (t4682 - a10708);
        b934 = ((t4682 < a10708));
        d1204 = (t4683 - a10707);
        d1205 = (d1204 - b934);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1206 = (d1203 - b933);
        b935 = ((d1203 < b933));
        t4686 = (d1205 - b935);
        /* End of MPSubDDD 128 */
        a15173 = (2*a15138);
        /* MPCondD 64 */
        a15174 = (2*a15173);
        P2[a15174] = ((i628) ? (t4686) : (t4683));
        a15175 = (a15174 + 1);
        P2[a15175] = ((i628) ? (d1206) : (t4682));
        a15176 = (a15173 + 1);
        /* MPCondD 64 */
        a15177 = (2*a15176);
        P2[a15177] = ((i628) ? (d1202) : (t4677));
        a15178 = (a15177 + 1);
        P2[a15178] = ((i628) ? (d1200) : (t4676));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b936 = (a15137 + a15136);
        a15179 = (b936 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1207 = (t4675 - t4673);
        b937 = ((t4675 < t4673));
        d1208 = (t4674 - t4672);
        d1209 = (d1208 - b937);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15181 = ((t4674 < t4672));
        a15182 = ((t4674 == t4672));
        a15183 = ((a15182) && (b937));
        b938 = ((a15181) || (a15183));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1210 = (t4679 - t4671);
        b939 = ((t4679 < t4671));
        d1211 = (t4678 - t4670);
        d1212 = (d1211 - b939);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1213 = (d1210 - b938);
        b940 = ((d1210 < b938));
        t4687 = (d1212 - b940);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s897 = (((uint128_t ) d1207) + ((uint128_t ) a10710));
        t4688 = ((uint64_t ) s897);
        c372 = (s897 >> 64);
        s898 = (((uint128_t ) d1209) + ((uint128_t ) a10709));
        s899 = (((uint128_t ) s898) + ((uint128_t ) c372));
        t4689 = ((uint64_t ) s899);
        c373 = (s899 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s900 = (((uint128_t ) d1213) + ((uint128_t ) a10708));
        t4690 = ((uint64_t ) s900);
        c374 = (s900 >> 64);
        s901 = (((uint128_t ) t4687) + ((uint128_t ) a10707));
        s902 = (((uint128_t ) s901) + ((uint128_t ) c374));
        t4691 = ((uint64_t ) s902);
        /* MPPropagateCarry 64 */
        t4692 = (t4690 + c373);
        a15187 = ((t4692 == 0));
        a15188 = (t4691 + c373);
        t4693 = ((a15187) ? (a15188) : (t4691));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15195 = ((t4678 < t4670));
        a15196 = ((t4678 == t4670));
        a15197 = ((a15196) && (b939));
        a15198 = ((a15195) || (a15197));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15199 = ((t4679 == t4671));
        a15200 = ((a15196) && (a15199));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15201 = ((a15200) && (b938));
        i629 = ((a15198) || (a15201));
        a15202 = (2*a15179);
        /* MPCondD 64 */
        a15203 = (2*a15202);
        P2[a15203] = ((i629) ? (t4693) : (t4687));
        a15204 = (a15203 + 1);
        P2[a15204] = ((i629) ? (t4692) : (d1213));
        a15205 = (a15202 + 1);
        /* MPCondD 64 */
        a15206 = (2*a15205);
        P2[a15206] = ((i629) ? (t4689) : (d1209));
        a15207 = (a15206 + 1);
        P2[a15207] = ((i629) ? (t4688) : (d1207));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code14(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15208, a15209, a15210, a15211, a15212, a15213, a15214, a15215, 
            a15216, a15217, a15218, a15219, a15220, a15221, a15222, a15223, 
            a15224, a15234, a15235, a15236, a15241, a15242, a15243, a15247, 
            a15248, a15249, a15250, a15251, a15252, a15253, a15254, a15255, 
            a15256, a15257, a15258, a15259, a15260, a15261, a15262, a15263, 
            a15271, a15272, a15273, a15274, a15275, a15276, a15277, a15278, 
            a15279, a15280, a15281, a15282, a15283, a15285, a15286, a15287, 
            a15291, a15292, a15293, a15294, a15295, a15296, a15297, a15299, 
            a15300, a15301, a15305, a15313, a15314, a15315, a15316, a15317, 
            a15318, a15319, a15320, a15321, a15322, a15323, a15324, a15325, 
            b941, b942, b943, b944, b945, b946, b947, b948, 
            b949, b950, b951, b952, b953, b954, b955, b956, 
            b957, b958, b959, c376, c377, c378, c380, c381, 
            c382, i630, i631, i632;
    uint64_t a11092, a11093, a11094, a11095, a11123, a11124, a11125, a11126, 
            a15225, a15226, a15227, a15228, a15229, a15230, a15231, a15232, 
            a15264, a15306, d1214, d1215, d1216, d1217, d1218, d1219, 
            d1220, d1221, d1222, d1223, d1224, d1225, d1226, d1227, 
            d1228, d1229, d1230, d1231, d1232, d1233, d1234, d1235, 
            d1236, d1237, d1238, d1239, d1240, d1241, t2421, t2422, 
            t2423, t2424, t2425, t2426, t2427, t2428, t2429, t2430, 
            t2431, t2432, t2433, t2434, t2435, t2436, t2437, t2438, 
            t2439, t2440, t2441, t2442, t2443, t2444, t4696, t4697, 
            t4698, t4699, t4700, t4701, t4702, t4703, t4704, t4705, 
            t4706, t4707, t4708, t4709, t4710, t4711, t4712, t4713, 
            t4714, t4715, t4716, t4717, t4718, t4719, t4720, t4721, 
            t4722, t4723, t4724, t4725, t4726, t4727, t4728, t4729, 
            t4730, t4731, t4732, t4733, t4734, t4735, t4736, t4739, 
            t4740, t4741, t4742, t4743, t4744, t4745, t4746;
    uint128_t s903, s904, s905, s906, s907, s908, s909, s910, 
            s911, s912, s913, s914;
    for(int i13 = 0; i13 <= 1023; i13++) {
        a15208 = (512*i13);
        a15209 = (a15208 + threadIdx.x);
        b941 = (threadIdx.x + a15208);
        a15210 = (b941 + 524288);
        a15211 = (a15210 % 16384);
        a15212 = (16384 + a15211);
        /* Begin of MPModMul 128 */
        a15213 = (2*a15212);
        a15214 = (a15213 + 1);
        a15215 = (2*a15210);
        a15216 = (a15215 + 1);
        /* MPAssignDD 64 */
        a15217 = (2*a15213);
        t4696 = twiddles[a15217];
        a15218 = (a15217 + 1);
        t4697 = twiddles[a15218];
        /* MPAssignDD 64 */
        a15219 = (2*a15214);
        t4698 = twiddles[a15219];
        a15220 = (a15219 + 1);
        t4699 = twiddles[a15220];
        /* MPAssignDD 64 */
        a15221 = (2*a15215);
        t4700 = P2[a15221];
        a15222 = (a15221 + 1);
        t4701 = P2[a15222];
        /* MPAssignDD 64 */
        a15223 = (2*a15216);
        t4702 = P2[a15223];
        a15224 = (a15223 + 1);
        t4703 = P2[a15224];
        MPMulQDD_L2(t2427, t2428, t2425, t2426, t2423, t2424, t2421, t2422, 
    t4696, t4697, t4698, t4699, t4700, t4701, t4702, t4703);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4704 = (t2423 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b942 = ((int) 1);
        t4705 = (288230376151711744 - b942);
        /* MPBinAndD 64 */
        t4706 = (((t2427)&(t4705)));
        t4707 = (((t2428)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15225 = (t4706 << 6);
        a15226 = (t4707 >> 58);
        t4708 = (((a15225)|(a15226)));
        t4709 = (t4707 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4710 = (t2425 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4711 = (((t4709)|(t4710)));
        /* Begin of MPShiftLeft2D */
        a15227 = (t2425 << 6);
        a15228 = (t2426 >> 58);
        t4712 = (((a15227)|(a15228)));
        t4713 = (t2426 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4714 = (((t4713)|(t4704)));
        /* End of MPShiftRight3 */
        a11092 = mu[0];
        a11093 = mu[1];
        a11094 = mu[2];
        a11095 = mu[3];
        MPMulQDD_L2(t2443, t2444, t2441, t2442, t2439, t2440, t2437, t2438, 
    t4708, t4711, t4712, t4714, a11092, a11093, a11094, a11095);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4715 = (t2443 >> 1);
        a15229 = (t2443 << 63);
        a15230 = (t2444 >> 1);
        t4716 = (((a15229)|(a15230)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4717 = (t2444 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4718 = (t2441 >> 1);
        a15231 = (t2441 << 63);
        a15232 = (t2442 >> 1);
        t4719 = (((a15231)|(a15232)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4720 = (((t4717)|(t4718)));
        /* End of MPShiftRight2 */
        a11123 = modulus[0];
        a11124 = modulus[1];
        a11125 = modulus[2];
        a11126 = modulus[3];
        MPMulQDD_L2(t2435, t2436, t2433, t2434, t2431, t2432, t2429, t2430, 
    t4715, t4716, t4720, t4719, a11123, a11124, a11125, a11126);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1214 = (t2422 - t2430);
        b943 = ((t2422 < t2430));
        d1215 = (t2421 - t2429);
        d1216 = (d1215 - b943);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15234 = ((t2421 < t2429));
        a15235 = ((t2421 == t2429));
        a15236 = ((a15235) && (b943));
        b944 = ((a15234) || (a15236));
        /* Begin of MPSubDDD 64 */
        d1217 = (t2424 - t2432);
        b945 = ((t2424 < t2432));
        d1218 = (t2423 - t2431);
        d1219 = (d1218 - b945);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1220 = (d1217 - b944);
        b946 = ((d1217 < b944));
        t4721 = (d1219 - b946);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1221 = (d1214 - a11126);
        b947 = ((d1214 < a11126));
        d1222 = (d1216 - a11125);
        d1223 = (d1222 - b947);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15241 = ((d1216 < a11125));
        a15242 = ((d1216 == a11125));
        a15243 = ((a15242) && (b947));
        b948 = ((a15241) || (a15243));
        /* Begin of MPSubDDD 64 */
        d1224 = (d1220 - a11124);
        b949 = ((d1220 < a11124));
        d1225 = (t4721 - a11123);
        d1226 = (d1225 - b949);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1227 = (d1224 - b948);
        b950 = ((d1224 < b948));
        t4722 = (d1226 - b950);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15247 = ((t4721 < a11123));
        a15248 = ((t4721 == a11123));
        a15249 = ((a15248) && (b949));
        a15250 = ((a15247) || (a15249));
        /* MPEqual 64 */
        a15251 = ((d1220 == a11124));
        a15252 = ((a15248) && (a15251));
        /* MPLessThan 64 */
        a15253 = ((a15252) && (b948));
        i630 = ((a15250) || (a15253));
        /* MPCondD 64 */
        t4723 = ((i630) ? (t4721) : (t4722));
        t4724 = ((i630) ? (d1220) : (d1227));
        /* MPCondD 64 */
        t4725 = ((i630) ? (d1216) : (d1223));
        t4726 = ((i630) ? (d1214) : (d1221));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15254 = (1024*i13);
        a15255 = (2*threadIdx.x);
        a15256 = (a15254 + a15255);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15257 = (2*a15209);
        a15258 = (a15257 + 1);
        /* MPAssignDD 64 */
        a15259 = (2*a15258);
        t4727 = P2[a15259];
        a15260 = (a15259 + 1);
        t4728 = P2[a15260];
        /* MPAddQDD 64 */
        s903 = (((uint128_t ) t4728) + ((uint128_t ) t4726));
        t4729 = ((uint64_t ) s903);
        c376 = (s903 >> 64);
        s904 = (((uint128_t ) t4727) + ((uint128_t ) t4725));
        s905 = (((uint128_t ) s904) + ((uint128_t ) c376));
        t4730 = ((uint64_t ) s905);
        c377 = (s905 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15261 = (2*a15257);
        t4731 = P2[a15261];
        a15262 = (a15261 + 1);
        t4732 = P2[a15262];
        /* MPAddQDD 64 */
        s906 = (((uint128_t ) t4732) + ((uint128_t ) t4724));
        t4733 = ((uint64_t ) s906);
        c378 = (s906 >> 64);
        s907 = (((uint128_t ) t4731) + ((uint128_t ) t4723));
        s908 = (((uint128_t ) s907) + ((uint128_t ) c378));
        t4734 = ((uint64_t ) s908);
        /* MPPropagateCarry 64 */
        t4735 = (t4733 + c377);
        a15263 = ((t4735 == 0));
        a15264 = (t4734 + c377);
        t4736 = ((a15263) ? (a15264) : (t4734));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15271 = ((a11123 < t4736));
        a15272 = ((a11123 == t4736));
        a15273 = ((a11124 < t4735));
        a15274 = ((a15272) && (a15273));
        a15275 = ((a15271) || (a15274));
        /* MPEqual 64 */
        a15276 = ((a11124 == t4735));
        a15277 = ((a15272) && (a15276));
        /* MPLessThan 64 */
        a15278 = ((a11125 < t4730));
        a15279 = ((a11125 == t4730));
        a15280 = ((a11126 < t4729));
        a15281 = ((a15279) && (a15280));
        a15282 = ((a15278) || (a15281));
        a15283 = ((a15277) && (a15282));
        i631 = ((a15275) || (a15283));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1228 = (t4729 - a11126);
        b951 = ((t4729 < a11126));
        d1229 = (t4730 - a11125);
        d1230 = (d1229 - b951);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15285 = ((t4730 < a11125));
        a15286 = ((t4730 == a11125));
        a15287 = ((a15286) && (b951));
        b952 = ((a15285) || (a15287));
        /* Begin of MPSubDDD 64 */
        d1231 = (t4735 - a11124);
        b953 = ((t4735 < a11124));
        d1232 = (t4736 - a11123);
        d1233 = (d1232 - b953);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1234 = (d1231 - b952);
        b954 = ((d1231 < b952));
        t4739 = (d1233 - b954);
        /* End of MPSubDDD 128 */
        a15291 = (2*a15256);
        /* MPCondD 64 */
        a15292 = (2*a15291);
        P1[a15292] = ((i631) ? (t4739) : (t4736));
        a15293 = (a15292 + 1);
        P1[a15293] = ((i631) ? (d1234) : (t4735));
        a15294 = (a15291 + 1);
        /* MPCondD 64 */
        a15295 = (2*a15294);
        P1[a15295] = ((i631) ? (d1230) : (t4730));
        a15296 = (a15295 + 1);
        P1[a15296] = ((i631) ? (d1228) : (t4729));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b955 = (a15255 + a15254);
        a15297 = (b955 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1235 = (t4728 - t4726);
        b956 = ((t4728 < t4726));
        d1236 = (t4727 - t4725);
        d1237 = (d1236 - b956);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15299 = ((t4727 < t4725));
        a15300 = ((t4727 == t4725));
        a15301 = ((a15300) && (b956));
        b957 = ((a15299) || (a15301));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1238 = (t4732 - t4724);
        b958 = ((t4732 < t4724));
        d1239 = (t4731 - t4723);
        d1240 = (d1239 - b958);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1241 = (d1238 - b957);
        b959 = ((d1238 < b957));
        t4740 = (d1240 - b959);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s909 = (((uint128_t ) d1235) + ((uint128_t ) a11126));
        t4741 = ((uint64_t ) s909);
        c380 = (s909 >> 64);
        s910 = (((uint128_t ) d1237) + ((uint128_t ) a11125));
        s911 = (((uint128_t ) s910) + ((uint128_t ) c380));
        t4742 = ((uint64_t ) s911);
        c381 = (s911 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s912 = (((uint128_t ) d1241) + ((uint128_t ) a11124));
        t4743 = ((uint64_t ) s912);
        c382 = (s912 >> 64);
        s913 = (((uint128_t ) t4740) + ((uint128_t ) a11123));
        s914 = (((uint128_t ) s913) + ((uint128_t ) c382));
        t4744 = ((uint64_t ) s914);
        /* MPPropagateCarry 64 */
        t4745 = (t4743 + c381);
        a15305 = ((t4745 == 0));
        a15306 = (t4744 + c381);
        t4746 = ((a15305) ? (a15306) : (t4744));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15313 = ((t4731 < t4723));
        a15314 = ((t4731 == t4723));
        a15315 = ((a15314) && (b958));
        a15316 = ((a15313) || (a15315));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15317 = ((t4732 == t4724));
        a15318 = ((a15314) && (a15317));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15319 = ((a15318) && (b957));
        i632 = ((a15316) || (a15319));
        a15320 = (2*a15297);
        /* MPCondD 64 */
        a15321 = (2*a15320);
        P1[a15321] = ((i632) ? (t4746) : (t4740));
        a15322 = (a15321 + 1);
        P1[a15322] = ((i632) ? (t4745) : (d1241));
        a15323 = (a15320 + 1);
        /* MPCondD 64 */
        a15324 = (2*a15323);
        P1[a15324] = ((i632) ? (t4742) : (d1237));
        a15325 = (a15324 + 1);
        P1[a15325] = ((i632) ? (t4741) : (d1235));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code15(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15326, a15327, a15328, a15329, a15330, a15331, a15332, a15333, 
            a15334, a15335, a15336, a15337, a15338, a15339, a15340, a15341, 
            a15342, a15352, a15353, a15354, a15359, a15360, a15361, a15365, 
            a15366, a15367, a15368, a15369, a15370, a15371, a15372, a15373, 
            a15374, a15375, a15376, a15377, a15378, a15379, a15380, a15381, 
            a15389, a15390, a15391, a15392, a15393, a15394, a15395, a15396, 
            a15397, a15398, a15399, a15400, a15401, a15403, a15404, a15405, 
            a15409, a15410, a15411, a15412, a15413, a15414, a15415, a15417, 
            a15418, a15419, a15423, a15431, a15432, a15433, a15434, a15435, 
            a15436, a15437, a15438, a15439, a15440, a15441, a15442, a15443, 
            b960, b961, b962, b963, b964, b965, b966, b967, 
            b968, b969, b970, b971, b972, b973, b974, b975, 
            b976, b977, b978, c384, c385, c387, c389, c390, 
            c391, i633, i634, i635;
    uint64_t a11508, a11509, a11510, a11511, a11539, a11540, a11541, a11542, 
            a15343, a15344, a15345, a15346, a15347, a15348, a15349, a15350, 
            a15382, a15424, d1242, d1243, d1244, d1245, d1246, d1247, 
            d1248, d1249, d1250, d1251, d1252, d1253, d1254, d1255, 
            d1256, d1257, d1258, d1259, d1260, d1261, d1262, d1263, 
            d1264, d1265, d1266, d1267, d1268, d1269, t2457, t2458, 
            t2459, t2460, t2461, t2462, t2463, t2464, t2465, t2466, 
            t2467, t2468, t2469, t2470, t2471, t2472, t2473, t2474, 
            t2475, t2476, t2477, t2478, t2479, t2480, t4749, t4750, 
            t4751, t4752, t4753, t4754, t4755, t4756, t4757, t4758, 
            t4759, t4760, t4761, t4762, t4763, t4764, t4765, t4766, 
            t4767, t4768, t4769, t4770, t4771, t4772, t4773, t4774, 
            t4775, t4776, t4777, t4778, t4779, t4780, t4781, t4782, 
            t4783, t4784, t4785, t4786, t4787, t4788, t4789, t4792, 
            t4793, t4794, t4795, t4796, t4797, t4798, t4799;
    uint128_t s915, s916, s917, s918, s919, s920, s921, s922, 
            s923, s924, s925, s926;
    for(int i11 = 0; i11 <= 1023; i11++) {
        a15326 = (512*i11);
        a15327 = (a15326 + threadIdx.x);
        b960 = (threadIdx.x + a15326);
        a15328 = (b960 + 524288);
        a15329 = (a15328 % 32768);
        a15330 = (32768 + a15329);
        /* Begin of MPModMul 128 */
        a15331 = (2*a15330);
        a15332 = (a15331 + 1);
        a15333 = (2*a15328);
        a15334 = (a15333 + 1);
        /* MPAssignDD 64 */
        a15335 = (2*a15331);
        t4749 = twiddles[a15335];
        a15336 = (a15335 + 1);
        t4750 = twiddles[a15336];
        /* MPAssignDD 64 */
        a15337 = (2*a15332);
        t4751 = twiddles[a15337];
        a15338 = (a15337 + 1);
        t4752 = twiddles[a15338];
        /* MPAssignDD 64 */
        a15339 = (2*a15333);
        t4753 = P1[a15339];
        a15340 = (a15339 + 1);
        t4754 = P1[a15340];
        /* MPAssignDD 64 */
        a15341 = (2*a15334);
        t4755 = P1[a15341];
        a15342 = (a15341 + 1);
        t4756 = P1[a15342];
        MPMulQDD_L2(t2463, t2464, t2461, t2462, t2459, t2460, t2457, t2458, 
    t4749, t4750, t4751, t4752, t4753, t4754, t4755, t4756);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4757 = (t2459 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b961 = ((int) 1);
        t4758 = (288230376151711744 - b961);
        /* MPBinAndD 64 */
        t4759 = (((t2463)&(t4758)));
        t4760 = (((t2464)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15343 = (t4759 << 6);
        a15344 = (t4760 >> 58);
        t4761 = (((a15343)|(a15344)));
        t4762 = (t4760 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4763 = (t2461 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4764 = (((t4762)|(t4763)));
        /* Begin of MPShiftLeft2D */
        a15345 = (t2461 << 6);
        a15346 = (t2462 >> 58);
        t4765 = (((a15345)|(a15346)));
        t4766 = (t2462 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4767 = (((t4766)|(t4757)));
        /* End of MPShiftRight3 */
        a11508 = mu[0];
        a11509 = mu[1];
        a11510 = mu[2];
        a11511 = mu[3];
        MPMulQDD_L2(t2479, t2480, t2477, t2478, t2475, t2476, t2473, t2474, 
    t4761, t4764, t4765, t4767, a11508, a11509, a11510, a11511);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4768 = (t2479 >> 1);
        a15347 = (t2479 << 63);
        a15348 = (t2480 >> 1);
        t4769 = (((a15347)|(a15348)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4770 = (t2480 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4771 = (t2477 >> 1);
        a15349 = (t2477 << 63);
        a15350 = (t2478 >> 1);
        t4772 = (((a15349)|(a15350)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4773 = (((t4770)|(t4771)));
        /* End of MPShiftRight2 */
        a11539 = modulus[0];
        a11540 = modulus[1];
        a11541 = modulus[2];
        a11542 = modulus[3];
        MPMulQDD_L2(t2471, t2472, t2469, t2470, t2467, t2468, t2465, t2466, 
    t4768, t4769, t4773, t4772, a11539, a11540, a11541, a11542);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1242 = (t2458 - t2466);
        b962 = ((t2458 < t2466));
        d1243 = (t2457 - t2465);
        d1244 = (d1243 - b962);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15352 = ((t2457 < t2465));
        a15353 = ((t2457 == t2465));
        a15354 = ((a15353) && (b962));
        b963 = ((a15352) || (a15354));
        /* Begin of MPSubDDD 64 */
        d1245 = (t2460 - t2468);
        b964 = ((t2460 < t2468));
        d1246 = (t2459 - t2467);
        d1247 = (d1246 - b964);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1248 = (d1245 - b963);
        b965 = ((d1245 < b963));
        t4774 = (d1247 - b965);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1249 = (d1242 - a11542);
        b966 = ((d1242 < a11542));
        d1250 = (d1244 - a11541);
        d1251 = (d1250 - b966);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15359 = ((d1244 < a11541));
        a15360 = ((d1244 == a11541));
        a15361 = ((a15360) && (b966));
        b967 = ((a15359) || (a15361));
        /* Begin of MPSubDDD 64 */
        d1252 = (d1248 - a11540);
        b968 = ((d1248 < a11540));
        d1253 = (t4774 - a11539);
        d1254 = (d1253 - b968);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1255 = (d1252 - b967);
        b969 = ((d1252 < b967));
        t4775 = (d1254 - b969);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15365 = ((t4774 < a11539));
        a15366 = ((t4774 == a11539));
        a15367 = ((a15366) && (b968));
        a15368 = ((a15365) || (a15367));
        /* MPEqual 64 */
        a15369 = ((d1248 == a11540));
        a15370 = ((a15366) && (a15369));
        /* MPLessThan 64 */
        a15371 = ((a15370) && (b967));
        i633 = ((a15368) || (a15371));
        /* MPCondD 64 */
        t4776 = ((i633) ? (t4774) : (t4775));
        t4777 = ((i633) ? (d1248) : (d1255));
        /* MPCondD 64 */
        t4778 = ((i633) ? (d1244) : (d1251));
        t4779 = ((i633) ? (d1242) : (d1249));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15372 = (1024*i11);
        a15373 = (2*threadIdx.x);
        a15374 = (a15372 + a15373);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15375 = (2*a15327);
        a15376 = (a15375 + 1);
        /* MPAssignDD 64 */
        a15377 = (2*a15376);
        t4780 = P1[a15377];
        a15378 = (a15377 + 1);
        t4781 = P1[a15378];
        /* MPAddQDD 64 */
        s915 = (((uint128_t ) t4781) + ((uint128_t ) t4779));
        t4782 = ((uint64_t ) s915);
        c384 = (s915 >> 64);
        s916 = (((uint128_t ) t4780) + ((uint128_t ) t4778));
        s917 = (((uint128_t ) s916) + ((uint128_t ) c384));
        t4783 = ((uint64_t ) s917);
        c385 = (s917 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15379 = (2*a15375);
        t4784 = P1[a15379];
        a15380 = (a15379 + 1);
        t4785 = P1[a15380];
        /* MPAddQDD 64 */
        s918 = (((uint128_t ) t4785) + ((uint128_t ) t4777));
        t4786 = ((uint64_t ) s918);
        c387 = (s918 >> 64);
        s919 = (((uint128_t ) t4784) + ((uint128_t ) t4776));
        s920 = (((uint128_t ) s919) + ((uint128_t ) c387));
        t4787 = ((uint64_t ) s920);
        /* MPPropagateCarry 64 */
        t4788 = (t4786 + c385);
        a15381 = ((t4788 == 0));
        a15382 = (t4787 + c385);
        t4789 = ((a15381) ? (a15382) : (t4787));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15389 = ((a11539 < t4789));
        a15390 = ((a11539 == t4789));
        a15391 = ((a11540 < t4788));
        a15392 = ((a15390) && (a15391));
        a15393 = ((a15389) || (a15392));
        /* MPEqual 64 */
        a15394 = ((a11540 == t4788));
        a15395 = ((a15390) && (a15394));
        /* MPLessThan 64 */
        a15396 = ((a11541 < t4783));
        a15397 = ((a11541 == t4783));
        a15398 = ((a11542 < t4782));
        a15399 = ((a15397) && (a15398));
        a15400 = ((a15396) || (a15399));
        a15401 = ((a15395) && (a15400));
        i634 = ((a15393) || (a15401));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1256 = (t4782 - a11542);
        b970 = ((t4782 < a11542));
        d1257 = (t4783 - a11541);
        d1258 = (d1257 - b970);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15403 = ((t4783 < a11541));
        a15404 = ((t4783 == a11541));
        a15405 = ((a15404) && (b970));
        b971 = ((a15403) || (a15405));
        /* Begin of MPSubDDD 64 */
        d1259 = (t4788 - a11540);
        b972 = ((t4788 < a11540));
        d1260 = (t4789 - a11539);
        d1261 = (d1260 - b972);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1262 = (d1259 - b971);
        b973 = ((d1259 < b971));
        t4792 = (d1261 - b973);
        /* End of MPSubDDD 128 */
        a15409 = (2*a15374);
        /* MPCondD 64 */
        a15410 = (2*a15409);
        P2[a15410] = ((i634) ? (t4792) : (t4789));
        a15411 = (a15410 + 1);
        P2[a15411] = ((i634) ? (d1262) : (t4788));
        a15412 = (a15409 + 1);
        /* MPCondD 64 */
        a15413 = (2*a15412);
        P2[a15413] = ((i634) ? (d1258) : (t4783));
        a15414 = (a15413 + 1);
        P2[a15414] = ((i634) ? (d1256) : (t4782));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b974 = (a15373 + a15372);
        a15415 = (b974 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1263 = (t4781 - t4779);
        b975 = ((t4781 < t4779));
        d1264 = (t4780 - t4778);
        d1265 = (d1264 - b975);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15417 = ((t4780 < t4778));
        a15418 = ((t4780 == t4778));
        a15419 = ((a15418) && (b975));
        b976 = ((a15417) || (a15419));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1266 = (t4785 - t4777);
        b977 = ((t4785 < t4777));
        d1267 = (t4784 - t4776);
        d1268 = (d1267 - b977);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1269 = (d1266 - b976);
        b978 = ((d1266 < b976));
        t4793 = (d1268 - b978);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s921 = (((uint128_t ) d1263) + ((uint128_t ) a11542));
        t4794 = ((uint64_t ) s921);
        c389 = (s921 >> 64);
        s922 = (((uint128_t ) d1265) + ((uint128_t ) a11541));
        s923 = (((uint128_t ) s922) + ((uint128_t ) c389));
        t4795 = ((uint64_t ) s923);
        c390 = (s923 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s924 = (((uint128_t ) d1269) + ((uint128_t ) a11540));
        t4796 = ((uint64_t ) s924);
        c391 = (s924 >> 64);
        s925 = (((uint128_t ) t4793) + ((uint128_t ) a11539));
        s926 = (((uint128_t ) s925) + ((uint128_t ) c391));
        t4797 = ((uint64_t ) s926);
        /* MPPropagateCarry 64 */
        t4798 = (t4796 + c390);
        a15423 = ((t4798 == 0));
        a15424 = (t4797 + c390);
        t4799 = ((a15423) ? (a15424) : (t4797));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15431 = ((t4784 < t4776));
        a15432 = ((t4784 == t4776));
        a15433 = ((a15432) && (b977));
        a15434 = ((a15431) || (a15433));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15435 = ((t4785 == t4777));
        a15436 = ((a15432) && (a15435));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15437 = ((a15436) && (b976));
        i635 = ((a15434) || (a15437));
        a15438 = (2*a15415);
        /* MPCondD 64 */
        a15439 = (2*a15438);
        P2[a15439] = ((i635) ? (t4799) : (t4793));
        a15440 = (a15439 + 1);
        P2[a15440] = ((i635) ? (t4798) : (d1269));
        a15441 = (a15438 + 1);
        /* MPCondD 64 */
        a15442 = (2*a15441);
        P2[a15442] = ((i635) ? (t4795) : (d1265));
        a15443 = (a15442 + 1);
        P2[a15443] = ((i635) ? (t4794) : (d1263));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code16(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15444, a15445, a15446, a15447, a15448, a15449, a15450, a15451, 
            a15452, a15453, a15454, a15455, a15456, a15457, a15458, a15459, 
            a15460, a15470, a15471, a15472, a15477, a15478, a15479, a15483, 
            a15484, a15485, a15486, a15487, a15488, a15489, a15490, a15491, 
            a15492, a15493, a15494, a15495, a15496, a15497, a15498, a15499, 
            a15507, a15508, a15509, a15510, a15511, a15512, a15513, a15514, 
            a15515, a15516, a15517, a15518, a15519, a15521, a15522, a15523, 
            a15527, a15528, a15529, a15530, a15531, a15532, a15533, a15535, 
            a15536, a15537, a15541, a15549, a15550, a15551, a15552, a15553, 
            a15554, a15555, a15556, a15557, a15558, a15559, a15560, a15561, 
            b979, b980, b981, b982, b983, b984, b985, b986, 
            b987, b988, b989, b990, b991, b992, b993, b994, 
            b995, c393, c394, c395, c397, c398, c399, i636, 
            i637, i638;
    uint64_t a11924, a11925, a11926, a11927, a11955, a11956, a11957, a11958, 
            a15461, a15462, a15463, a15464, a15465, a15466, a15467, a15468, 
            a15500, a15542, d1270, d1271, d1272, d1273, d1274, d1275, 
            d1276, d1277, d1278, d1279, d1280, d1281, d1282, d1283, 
            d1284, d1285, d1286, d1287, d1288, d1289, d1290, d1291, 
            d1292, d1293, d1294, d1295, d1296, d1297, t2493, t2494, 
            t2495, t2496, t2497, t2498, t2499, t2500, t2501, t2502, 
            t2503, t2504, t2505, t2506, t2507, t2508, t2509, t2510, 
            t2511, t2512, t2513, t2514, t2515, t2516, t4802, t4803, 
            t4804, t4805, t4806, t4807, t4808, t4809, t4810, t4811, 
            t4812, t4813, t4814, t4815, t4816, t4817, t4818, t4819, 
            t4820, t4821, t4822, t4823, t4824, t4825, t4826, t4827, 
            t4828, t4829, t4830, t4831, t4832, t4833, t4834, t4835, 
            t4836, t4837, t4838, t4839, t4840, t4841, t4842, t4845, 
            t4846, t4847, t4848, t4849, t4850, t4851, t4852;
    uint128_t s927, s928, s929, s930, s931, s932, s933, s934, 
            s935, s936, s937, s938;
    for(int i9 = 0; i9 <= 1023; i9++) {
        a15444 = (512*i9);
        a15445 = (threadIdx.x + a15444);
        a15446 = (a15445 + 524288);
        a15447 = (a15446 % 65536);
        a15448 = (65536 + a15447);
        /* Begin of MPModMul 128 */
        a15449 = (2*a15448);
        a15450 = (a15449 + 1);
        a15451 = (2*a15446);
        a15452 = (a15451 + 1);
        /* MPAssignDD 64 */
        a15453 = (2*a15449);
        t4802 = twiddles[a15453];
        a15454 = (a15453 + 1);
        t4803 = twiddles[a15454];
        /* MPAssignDD 64 */
        a15455 = (2*a15450);
        t4804 = twiddles[a15455];
        a15456 = (a15455 + 1);
        t4805 = twiddles[a15456];
        /* MPAssignDD 64 */
        a15457 = (2*a15451);
        t4806 = P2[a15457];
        a15458 = (a15457 + 1);
        t4807 = P2[a15458];
        /* MPAssignDD 64 */
        a15459 = (2*a15452);
        t4808 = P2[a15459];
        a15460 = (a15459 + 1);
        t4809 = P2[a15460];
        MPMulQDD_L2(t2499, t2500, t2497, t2498, t2495, t2496, t2493, t2494, 
    t4802, t4803, t4804, t4805, t4806, t4807, t4808, t4809);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4810 = (t2495 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b979 = ((int) 1);
        t4811 = (288230376151711744 - b979);
        /* MPBinAndD 64 */
        t4812 = (((t2499)&(t4811)));
        t4813 = (((t2500)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15461 = (t4812 << 6);
        a15462 = (t4813 >> 58);
        t4814 = (((a15461)|(a15462)));
        t4815 = (t4813 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4816 = (t2497 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4817 = (((t4815)|(t4816)));
        /* Begin of MPShiftLeft2D */
        a15463 = (t2497 << 6);
        a15464 = (t2498 >> 58);
        t4818 = (((a15463)|(a15464)));
        t4819 = (t2498 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4820 = (((t4819)|(t4810)));
        /* End of MPShiftRight3 */
        a11924 = mu[0];
        a11925 = mu[1];
        a11926 = mu[2];
        a11927 = mu[3];
        MPMulQDD_L2(t2515, t2516, t2513, t2514, t2511, t2512, t2509, t2510, 
    t4814, t4817, t4818, t4820, a11924, a11925, a11926, a11927);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4821 = (t2515 >> 1);
        a15465 = (t2515 << 63);
        a15466 = (t2516 >> 1);
        t4822 = (((a15465)|(a15466)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4823 = (t2516 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4824 = (t2513 >> 1);
        a15467 = (t2513 << 63);
        a15468 = (t2514 >> 1);
        t4825 = (((a15467)|(a15468)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4826 = (((t4823)|(t4824)));
        /* End of MPShiftRight2 */
        a11955 = modulus[0];
        a11956 = modulus[1];
        a11957 = modulus[2];
        a11958 = modulus[3];
        MPMulQDD_L2(t2507, t2508, t2505, t2506, t2503, t2504, t2501, t2502, 
    t4821, t4822, t4826, t4825, a11955, a11956, a11957, a11958);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1270 = (t2494 - t2502);
        b980 = ((t2494 < t2502));
        d1271 = (t2493 - t2501);
        d1272 = (d1271 - b980);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15470 = ((t2493 < t2501));
        a15471 = ((t2493 == t2501));
        a15472 = ((a15471) && (b980));
        b981 = ((a15470) || (a15472));
        /* Begin of MPSubDDD 64 */
        d1273 = (t2496 - t2504);
        b982 = ((t2496 < t2504));
        d1274 = (t2495 - t2503);
        d1275 = (d1274 - b982);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1276 = (d1273 - b981);
        b983 = ((d1273 < b981));
        t4827 = (d1275 - b983);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1277 = (d1270 - a11958);
        b984 = ((d1270 < a11958));
        d1278 = (d1272 - a11957);
        d1279 = (d1278 - b984);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15477 = ((d1272 < a11957));
        a15478 = ((d1272 == a11957));
        a15479 = ((a15478) && (b984));
        b985 = ((a15477) || (a15479));
        /* Begin of MPSubDDD 64 */
        d1280 = (d1276 - a11956);
        b986 = ((d1276 < a11956));
        d1281 = (t4827 - a11955);
        d1282 = (d1281 - b986);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1283 = (d1280 - b985);
        b987 = ((d1280 < b985));
        t4828 = (d1282 - b987);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15483 = ((t4827 < a11955));
        a15484 = ((t4827 == a11955));
        a15485 = ((a15484) && (b986));
        a15486 = ((a15483) || (a15485));
        /* MPEqual 64 */
        a15487 = ((d1276 == a11956));
        a15488 = ((a15484) && (a15487));
        /* MPLessThan 64 */
        a15489 = ((a15488) && (b985));
        i636 = ((a15486) || (a15489));
        /* MPCondD 64 */
        t4829 = ((i636) ? (t4827) : (t4828));
        t4830 = ((i636) ? (d1276) : (d1283));
        /* MPCondD 64 */
        t4831 = ((i636) ? (d1272) : (d1279));
        t4832 = ((i636) ? (d1270) : (d1277));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15490 = (2*threadIdx.x);
        a15491 = (1024*i9);
        a15492 = (a15490 + a15491);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15493 = (2*a15445);
        a15494 = (a15493 + 1);
        /* MPAssignDD 64 */
        a15495 = (2*a15494);
        t4833 = P2[a15495];
        a15496 = (a15495 + 1);
        t4834 = P2[a15496];
        /* MPAddQDD 64 */
        s927 = (((uint128_t ) t4834) + ((uint128_t ) t4832));
        t4835 = ((uint64_t ) s927);
        c393 = (s927 >> 64);
        s928 = (((uint128_t ) t4833) + ((uint128_t ) t4831));
        s929 = (((uint128_t ) s928) + ((uint128_t ) c393));
        t4836 = ((uint64_t ) s929);
        c394 = (s929 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15497 = (2*a15493);
        t4837 = P2[a15497];
        a15498 = (a15497 + 1);
        t4838 = P2[a15498];
        /* MPAddQDD 64 */
        s930 = (((uint128_t ) t4838) + ((uint128_t ) t4830));
        t4839 = ((uint64_t ) s930);
        c395 = (s930 >> 64);
        s931 = (((uint128_t ) t4837) + ((uint128_t ) t4829));
        s932 = (((uint128_t ) s931) + ((uint128_t ) c395));
        t4840 = ((uint64_t ) s932);
        /* MPPropagateCarry 64 */
        t4841 = (t4839 + c394);
        a15499 = ((t4841 == 0));
        a15500 = (t4840 + c394);
        t4842 = ((a15499) ? (a15500) : (t4840));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15507 = ((a11955 < t4842));
        a15508 = ((a11955 == t4842));
        a15509 = ((a11956 < t4841));
        a15510 = ((a15508) && (a15509));
        a15511 = ((a15507) || (a15510));
        /* MPEqual 64 */
        a15512 = ((a11956 == t4841));
        a15513 = ((a15508) && (a15512));
        /* MPLessThan 64 */
        a15514 = ((a11957 < t4836));
        a15515 = ((a11957 == t4836));
        a15516 = ((a11958 < t4835));
        a15517 = ((a15515) && (a15516));
        a15518 = ((a15514) || (a15517));
        a15519 = ((a15513) && (a15518));
        i637 = ((a15511) || (a15519));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1284 = (t4835 - a11958);
        b988 = ((t4835 < a11958));
        d1285 = (t4836 - a11957);
        d1286 = (d1285 - b988);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15521 = ((t4836 < a11957));
        a15522 = ((t4836 == a11957));
        a15523 = ((a15522) && (b988));
        b989 = ((a15521) || (a15523));
        /* Begin of MPSubDDD 64 */
        d1287 = (t4841 - a11956);
        b990 = ((t4841 < a11956));
        d1288 = (t4842 - a11955);
        d1289 = (d1288 - b990);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1290 = (d1287 - b989);
        b991 = ((d1287 < b989));
        t4845 = (d1289 - b991);
        /* End of MPSubDDD 128 */
        a15527 = (2*a15492);
        /* MPCondD 64 */
        a15528 = (2*a15527);
        P1[a15528] = ((i637) ? (t4845) : (t4842));
        a15529 = (a15528 + 1);
        P1[a15529] = ((i637) ? (d1290) : (t4841));
        a15530 = (a15527 + 1);
        /* MPCondD 64 */
        a15531 = (2*a15530);
        P1[a15531] = ((i637) ? (d1286) : (t4836));
        a15532 = (a15531 + 1);
        P1[a15532] = ((i637) ? (d1284) : (t4835));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a15533 = (a15492 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1291 = (t4834 - t4832);
        b992 = ((t4834 < t4832));
        d1292 = (t4833 - t4831);
        d1293 = (d1292 - b992);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15535 = ((t4833 < t4831));
        a15536 = ((t4833 == t4831));
        a15537 = ((a15536) && (b992));
        b993 = ((a15535) || (a15537));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1294 = (t4838 - t4830);
        b994 = ((t4838 < t4830));
        d1295 = (t4837 - t4829);
        d1296 = (d1295 - b994);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1297 = (d1294 - b993);
        b995 = ((d1294 < b993));
        t4846 = (d1296 - b995);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s933 = (((uint128_t ) d1291) + ((uint128_t ) a11958));
        t4847 = ((uint64_t ) s933);
        c397 = (s933 >> 64);
        s934 = (((uint128_t ) d1293) + ((uint128_t ) a11957));
        s935 = (((uint128_t ) s934) + ((uint128_t ) c397));
        t4848 = ((uint64_t ) s935);
        c398 = (s935 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s936 = (((uint128_t ) d1297) + ((uint128_t ) a11956));
        t4849 = ((uint64_t ) s936);
        c399 = (s936 >> 64);
        s937 = (((uint128_t ) t4846) + ((uint128_t ) a11955));
        s938 = (((uint128_t ) s937) + ((uint128_t ) c399));
        t4850 = ((uint64_t ) s938);
        /* MPPropagateCarry 64 */
        t4851 = (t4849 + c398);
        a15541 = ((t4851 == 0));
        a15542 = (t4850 + c398);
        t4852 = ((a15541) ? (a15542) : (t4850));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15549 = ((t4837 < t4829));
        a15550 = ((t4837 == t4829));
        a15551 = ((a15550) && (b994));
        a15552 = ((a15549) || (a15551));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15553 = ((t4838 == t4830));
        a15554 = ((a15550) && (a15553));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15555 = ((a15554) && (b993));
        i638 = ((a15552) || (a15555));
        a15556 = (2*a15533);
        /* MPCondD 64 */
        a15557 = (2*a15556);
        P1[a15557] = ((i638) ? (t4852) : (t4846));
        a15558 = (a15557 + 1);
        P1[a15558] = ((i638) ? (t4851) : (d1297));
        a15559 = (a15556 + 1);
        /* MPCondD 64 */
        a15560 = (2*a15559);
        P1[a15560] = ((i638) ? (t4848) : (d1293));
        a15561 = (a15560 + 1);
        P1[a15561] = ((i638) ? (t4847) : (d1291));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code17(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15562, a15563, a15564, a15565, a15566, a15567, a15568, a15569, 
            a15570, a15571, a15572, a15573, a15574, a15575, a15576, a15577, 
            a15578, a15588, a15589, a15590, a15595, a15596, a15597, a15601, 
            a15602, a15603, a15604, a15605, a15606, a15607, a15608, a15609, 
            a15610, a15611, a15612, a15613, a15614, a15615, a15616, a15617, 
            a15625, a15626, a15627, a15628, a15629, a15630, a15631, a15632, 
            a15633, a15634, a15635, a15636, a15637, a15639, a15640, a15641, 
            a15645, a15646, a15647, a15648, a15649, a15650, a15651, a15653, 
            a15654, a15655, a15659, a15667, a15668, a15669, a15670, a15671, 
            a15672, a15673, a15674, a15675, a15676, a15677, a15678, a15679, 
            b1000, b1001, b1002, b1003, b1004, b1005, b1006, b1007, 
            b1008, b1009, b1010, b1011, b1012, b996, b997, b998, 
            b999, c401, c402, c403, c405, c406, c407, i639, 
            i640, i641;
    uint64_t a12340, a12341, a12342, a12343, a12371, a12372, a12373, a12374, 
            a15579, a15580, a15581, a15582, a15583, a15584, a15585, a15586, 
            a15618, a15660, d1298, d1299, d1300, d1301, d1302, d1303, 
            d1304, d1305, d1306, d1307, d1308, d1309, d1310, d1311, 
            d1312, d1313, d1314, d1315, d1316, d1317, d1318, d1319, 
            d1320, d1321, d1322, d1323, d1324, d1325, t2529, t2530, 
            t2531, t2532, t2533, t2534, t2535, t2536, t2537, t2538, 
            t2539, t2540, t2541, t2542, t2543, t2544, t2545, t2546, 
            t2547, t2548, t2549, t2550, t2551, t2552, t4855, t4856, 
            t4857, t4858, t4859, t4860, t4861, t4862, t4863, t4864, 
            t4865, t4866, t4867, t4868, t4869, t4870, t4871, t4872, 
            t4873, t4874, t4875, t4876, t4877, t4878, t4879, t4880, 
            t4881, t4882, t4883, t4884, t4885, t4886, t4887, t4888, 
            t4889, t4890, t4891, t4892, t4893, t4894, t4895, t4898, 
            t4899, t4900, t4901, t4902, t4903, t4904, t4905;
    uint128_t s939, s940, s941, s942, s943, s944, s945, s946, 
            s947, s948, s949, s950;
    for(int i7 = 0; i7 <= 1023; i7++) {
        a15562 = (512*i7);
        a15563 = (threadIdx.x + a15562);
        a15564 = (a15563 + 524288);
        a15565 = (a15564 % 131072);
        a15566 = (131072 + a15565);
        /* Begin of MPModMul 128 */
        a15567 = (2*a15566);
        a15568 = (a15567 + 1);
        a15569 = (2*a15564);
        a15570 = (a15569 + 1);
        /* MPAssignDD 64 */
        a15571 = (2*a15567);
        t4855 = twiddles[a15571];
        a15572 = (a15571 + 1);
        t4856 = twiddles[a15572];
        /* MPAssignDD 64 */
        a15573 = (2*a15568);
        t4857 = twiddles[a15573];
        a15574 = (a15573 + 1);
        t4858 = twiddles[a15574];
        /* MPAssignDD 64 */
        a15575 = (2*a15569);
        t4859 = P1[a15575];
        a15576 = (a15575 + 1);
        t4860 = P1[a15576];
        /* MPAssignDD 64 */
        a15577 = (2*a15570);
        t4861 = P1[a15577];
        a15578 = (a15577 + 1);
        t4862 = P1[a15578];
        MPMulQDD_L2(t2535, t2536, t2533, t2534, t2531, t2532, t2529, t2530, 
    t4855, t4856, t4857, t4858, t4859, t4860, t4861, t4862);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4863 = (t2531 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b996 = ((int) 1);
        t4864 = (288230376151711744 - b996);
        /* MPBinAndD 64 */
        t4865 = (((t2535)&(t4864)));
        t4866 = (((t2536)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15579 = (t4865 << 6);
        a15580 = (t4866 >> 58);
        t4867 = (((a15579)|(a15580)));
        t4868 = (t4866 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4869 = (t2533 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4870 = (((t4868)|(t4869)));
        /* Begin of MPShiftLeft2D */
        a15581 = (t2533 << 6);
        a15582 = (t2534 >> 58);
        t4871 = (((a15581)|(a15582)));
        t4872 = (t2534 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4873 = (((t4872)|(t4863)));
        /* End of MPShiftRight3 */
        a12340 = mu[0];
        a12341 = mu[1];
        a12342 = mu[2];
        a12343 = mu[3];
        MPMulQDD_L2(t2551, t2552, t2549, t2550, t2547, t2548, t2545, t2546, 
    t4867, t4870, t4871, t4873, a12340, a12341, a12342, a12343);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4874 = (t2551 >> 1);
        a15583 = (t2551 << 63);
        a15584 = (t2552 >> 1);
        t4875 = (((a15583)|(a15584)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4876 = (t2552 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4877 = (t2549 >> 1);
        a15585 = (t2549 << 63);
        a15586 = (t2550 >> 1);
        t4878 = (((a15585)|(a15586)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4879 = (((t4876)|(t4877)));
        /* End of MPShiftRight2 */
        a12371 = modulus[0];
        a12372 = modulus[1];
        a12373 = modulus[2];
        a12374 = modulus[3];
        MPMulQDD_L2(t2543, t2544, t2541, t2542, t2539, t2540, t2537, t2538, 
    t4874, t4875, t4879, t4878, a12371, a12372, a12373, a12374);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1298 = (t2530 - t2538);
        b997 = ((t2530 < t2538));
        d1299 = (t2529 - t2537);
        d1300 = (d1299 - b997);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15588 = ((t2529 < t2537));
        a15589 = ((t2529 == t2537));
        a15590 = ((a15589) && (b997));
        b998 = ((a15588) || (a15590));
        /* Begin of MPSubDDD 64 */
        d1301 = (t2532 - t2540);
        b999 = ((t2532 < t2540));
        d1302 = (t2531 - t2539);
        d1303 = (d1302 - b999);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1304 = (d1301 - b998);
        b1000 = ((d1301 < b998));
        t4880 = (d1303 - b1000);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1305 = (d1298 - a12374);
        b1001 = ((d1298 < a12374));
        d1306 = (d1300 - a12373);
        d1307 = (d1306 - b1001);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15595 = ((d1300 < a12373));
        a15596 = ((d1300 == a12373));
        a15597 = ((a15596) && (b1001));
        b1002 = ((a15595) || (a15597));
        /* Begin of MPSubDDD 64 */
        d1308 = (d1304 - a12372);
        b1003 = ((d1304 < a12372));
        d1309 = (t4880 - a12371);
        d1310 = (d1309 - b1003);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1311 = (d1308 - b1002);
        b1004 = ((d1308 < b1002));
        t4881 = (d1310 - b1004);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15601 = ((t4880 < a12371));
        a15602 = ((t4880 == a12371));
        a15603 = ((a15602) && (b1003));
        a15604 = ((a15601) || (a15603));
        /* MPEqual 64 */
        a15605 = ((d1304 == a12372));
        a15606 = ((a15602) && (a15605));
        /* MPLessThan 64 */
        a15607 = ((a15606) && (b1002));
        i639 = ((a15604) || (a15607));
        /* MPCondD 64 */
        t4882 = ((i639) ? (t4880) : (t4881));
        t4883 = ((i639) ? (d1304) : (d1311));
        /* MPCondD 64 */
        t4884 = ((i639) ? (d1300) : (d1307));
        t4885 = ((i639) ? (d1298) : (d1305));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15608 = (2*threadIdx.x);
        a15609 = (1024*i7);
        a15610 = (a15608 + a15609);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15611 = (2*a15563);
        a15612 = (a15611 + 1);
        /* MPAssignDD 64 */
        a15613 = (2*a15612);
        t4886 = P1[a15613];
        a15614 = (a15613 + 1);
        t4887 = P1[a15614];
        /* MPAddQDD 64 */
        s939 = (((uint128_t ) t4887) + ((uint128_t ) t4885));
        t4888 = ((uint64_t ) s939);
        c401 = (s939 >> 64);
        s940 = (((uint128_t ) t4886) + ((uint128_t ) t4884));
        s941 = (((uint128_t ) s940) + ((uint128_t ) c401));
        t4889 = ((uint64_t ) s941);
        c402 = (s941 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15615 = (2*a15611);
        t4890 = P1[a15615];
        a15616 = (a15615 + 1);
        t4891 = P1[a15616];
        /* MPAddQDD 64 */
        s942 = (((uint128_t ) t4891) + ((uint128_t ) t4883));
        t4892 = ((uint64_t ) s942);
        c403 = (s942 >> 64);
        s943 = (((uint128_t ) t4890) + ((uint128_t ) t4882));
        s944 = (((uint128_t ) s943) + ((uint128_t ) c403));
        t4893 = ((uint64_t ) s944);
        /* MPPropagateCarry 64 */
        t4894 = (t4892 + c402);
        a15617 = ((t4894 == 0));
        a15618 = (t4893 + c402);
        t4895 = ((a15617) ? (a15618) : (t4893));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15625 = ((a12371 < t4895));
        a15626 = ((a12371 == t4895));
        a15627 = ((a12372 < t4894));
        a15628 = ((a15626) && (a15627));
        a15629 = ((a15625) || (a15628));
        /* MPEqual 64 */
        a15630 = ((a12372 == t4894));
        a15631 = ((a15626) && (a15630));
        /* MPLessThan 64 */
        a15632 = ((a12373 < t4889));
        a15633 = ((a12373 == t4889));
        a15634 = ((a12374 < t4888));
        a15635 = ((a15633) && (a15634));
        a15636 = ((a15632) || (a15635));
        a15637 = ((a15631) && (a15636));
        i640 = ((a15629) || (a15637));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1312 = (t4888 - a12374);
        b1005 = ((t4888 < a12374));
        d1313 = (t4889 - a12373);
        d1314 = (d1313 - b1005);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15639 = ((t4889 < a12373));
        a15640 = ((t4889 == a12373));
        a15641 = ((a15640) && (b1005));
        b1006 = ((a15639) || (a15641));
        /* Begin of MPSubDDD 64 */
        d1315 = (t4894 - a12372);
        b1007 = ((t4894 < a12372));
        d1316 = (t4895 - a12371);
        d1317 = (d1316 - b1007);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1318 = (d1315 - b1006);
        b1008 = ((d1315 < b1006));
        t4898 = (d1317 - b1008);
        /* End of MPSubDDD 128 */
        a15645 = (2*a15610);
        /* MPCondD 64 */
        a15646 = (2*a15645);
        P2[a15646] = ((i640) ? (t4898) : (t4895));
        a15647 = (a15646 + 1);
        P2[a15647] = ((i640) ? (d1318) : (t4894));
        a15648 = (a15645 + 1);
        /* MPCondD 64 */
        a15649 = (2*a15648);
        P2[a15649] = ((i640) ? (d1314) : (t4889));
        a15650 = (a15649 + 1);
        P2[a15650] = ((i640) ? (d1312) : (t4888));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a15651 = (a15610 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1319 = (t4887 - t4885);
        b1009 = ((t4887 < t4885));
        d1320 = (t4886 - t4884);
        d1321 = (d1320 - b1009);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15653 = ((t4886 < t4884));
        a15654 = ((t4886 == t4884));
        a15655 = ((a15654) && (b1009));
        b1010 = ((a15653) || (a15655));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1322 = (t4891 - t4883);
        b1011 = ((t4891 < t4883));
        d1323 = (t4890 - t4882);
        d1324 = (d1323 - b1011);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1325 = (d1322 - b1010);
        b1012 = ((d1322 < b1010));
        t4899 = (d1324 - b1012);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s945 = (((uint128_t ) d1319) + ((uint128_t ) a12374));
        t4900 = ((uint64_t ) s945);
        c405 = (s945 >> 64);
        s946 = (((uint128_t ) d1321) + ((uint128_t ) a12373));
        s947 = (((uint128_t ) s946) + ((uint128_t ) c405));
        t4901 = ((uint64_t ) s947);
        c406 = (s947 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s948 = (((uint128_t ) d1325) + ((uint128_t ) a12372));
        t4902 = ((uint64_t ) s948);
        c407 = (s948 >> 64);
        s949 = (((uint128_t ) t4899) + ((uint128_t ) a12371));
        s950 = (((uint128_t ) s949) + ((uint128_t ) c407));
        t4903 = ((uint64_t ) s950);
        /* MPPropagateCarry 64 */
        t4904 = (t4902 + c406);
        a15659 = ((t4904 == 0));
        a15660 = (t4903 + c406);
        t4905 = ((a15659) ? (a15660) : (t4903));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15667 = ((t4890 < t4882));
        a15668 = ((t4890 == t4882));
        a15669 = ((a15668) && (b1011));
        a15670 = ((a15667) || (a15669));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15671 = ((t4891 == t4883));
        a15672 = ((a15668) && (a15671));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15673 = ((a15672) && (b1010));
        i641 = ((a15670) || (a15673));
        a15674 = (2*a15651);
        /* MPCondD 64 */
        a15675 = (2*a15674);
        P2[a15675] = ((i641) ? (t4905) : (t4899));
        a15676 = (a15675 + 1);
        P2[a15676] = ((i641) ? (t4904) : (d1325));
        a15677 = (a15674 + 1);
        /* MPCondD 64 */
        a15678 = (2*a15677);
        P2[a15678] = ((i641) ? (t4901) : (d1321));
        a15679 = (a15678 + 1);
        P2[a15679] = ((i641) ? (t4900) : (d1319));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code18(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15680, a15681, a15682, a15683, a15684, a15685, a15686, a15687, 
            a15688, a15689, a15690, a15691, a15692, a15693, a15694, a15695, 
            a15696, a15706, a15707, a15708, a15713, a15714, a15715, a15719, 
            a15720, a15721, a15722, a15723, a15724, a15725, a15726, a15727, 
            a15728, a15729, a15730, a15731, a15732, a15733, a15734, a15735, 
            a15743, a15744, a15745, a15746, a15747, a15748, a15749, a15750, 
            a15751, a15752, a15753, a15754, a15755, a15757, a15758, a15759, 
            a15763, a15764, a15765, a15766, a15767, a15768, a15769, a15771, 
            a15772, a15773, a15777, a15785, a15786, a15787, a15788, a15789, 
            a15790, a15791, a15792, a15793, a15794, a15795, a15796, a15797, 
            b1013, b1014, b1015, b1016, b1017, b1018, b1019, b1020, 
            b1021, b1022, b1023, b1024, b1025, b1026, b1027, b1028, 
            b1029, c409, c410, c411, c413, c414, c415, i642, 
            i643, i644;
    uint64_t a12756, a12757, a12758, a12759, a12787, a12788, a12789, a12790, 
            a15697, a15698, a15699, a15700, a15701, a15702, a15703, a15704, 
            a15736, a15778, d1326, d1327, d1328, d1329, d1330, d1331, 
            d1332, d1333, d1334, d1335, d1336, d1337, d1338, d1339, 
            d1340, d1341, d1342, d1343, d1344, d1345, d1346, d1347, 
            d1348, d1349, d1350, d1351, d1352, d1353, t2565, t2566, 
            t2567, t2568, t2569, t2570, t2571, t2572, t2573, t2574, 
            t2575, t2576, t2577, t2578, t2579, t2580, t2581, t2582, 
            t2583, t2584, t2585, t2586, t2587, t2588, t4908, t4909, 
            t4910, t4911, t4912, t4913, t4914, t4915, t4916, t4917, 
            t4918, t4919, t4920, t4921, t4922, t4923, t4924, t4925, 
            t4926, t4927, t4928, t4929, t4930, t4931, t4932, t4933, 
            t4934, t4935, t4936, t4937, t4938, t4939, t4940, t4941, 
            t4942, t4943, t4944, t4945, t4946, t4947, t4948, t4951, 
            t4952, t4953, t4954, t4955, t4956, t4957, t4958;
    uint128_t s951, s952, s953, s954, s955, s956, s957, s958, 
            s959, s960, s961, s962;
    for(int i5 = 0; i5 <= 1023; i5++) {
        a15680 = (512*i5);
        a15681 = (threadIdx.x + a15680);
        a15682 = (a15681 + 524288);
        a15683 = (a15682 % 262144);
        a15684 = (262144 + a15683);
        /* Begin of MPModMul 128 */
        a15685 = (2*a15684);
        a15686 = (a15685 + 1);
        a15687 = (2*a15682);
        a15688 = (a15687 + 1);
        /* MPAssignDD 64 */
        a15689 = (2*a15685);
        t4908 = twiddles[a15689];
        a15690 = (a15689 + 1);
        t4909 = twiddles[a15690];
        /* MPAssignDD 64 */
        a15691 = (2*a15686);
        t4910 = twiddles[a15691];
        a15692 = (a15691 + 1);
        t4911 = twiddles[a15692];
        /* MPAssignDD 64 */
        a15693 = (2*a15687);
        t4912 = P2[a15693];
        a15694 = (a15693 + 1);
        t4913 = P2[a15694];
        /* MPAssignDD 64 */
        a15695 = (2*a15688);
        t4914 = P2[a15695];
        a15696 = (a15695 + 1);
        t4915 = P2[a15696];
        MPMulQDD_L2(t2569, t2570, t2567, t2568, t2565, t2566, t2571, t2572, 
    t4908, t4909, t4910, t4911, t4912, t4913, t4914, t4915);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4916 = (t2565 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b1013 = ((int) 1);
        t4917 = (288230376151711744 - b1013);
        /* MPBinAndD 64 */
        t4918 = (((t2569)&(t4917)));
        t4919 = (((t2570)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15697 = (t4918 << 6);
        a15698 = (t4919 >> 58);
        t4920 = (((a15697)|(a15698)));
        t4921 = (t4919 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4922 = (t2567 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4923 = (((t4921)|(t4922)));
        /* Begin of MPShiftLeft2D */
        a15699 = (t2567 << 6);
        a15700 = (t2568 >> 58);
        t4924 = (((a15699)|(a15700)));
        t4925 = (t2568 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4926 = (((t4925)|(t4916)));
        /* End of MPShiftRight3 */
        a12756 = mu[0];
        a12757 = mu[1];
        a12758 = mu[2];
        a12759 = mu[3];
        MPMulQDD_L2(t2587, t2588, t2585, t2586, t2583, t2584, t2581, t2582, 
    t4920, t4923, t4924, t4926, a12756, a12757, a12758, a12759);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4927 = (t2587 >> 1);
        a15701 = (t2587 << 63);
        a15702 = (t2588 >> 1);
        t4928 = (((a15701)|(a15702)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4929 = (t2588 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4930 = (t2585 >> 1);
        a15703 = (t2585 << 63);
        a15704 = (t2586 >> 1);
        t4931 = (((a15703)|(a15704)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4932 = (((t4929)|(t4930)));
        /* End of MPShiftRight2 */
        a12787 = modulus[0];
        a12788 = modulus[1];
        a12789 = modulus[2];
        a12790 = modulus[3];
        MPMulQDD_L2(t2579, t2580, t2577, t2578, t2575, t2576, t2573, t2574, 
    t4927, t4928, t4932, t4931, a12787, a12788, a12789, a12790);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1326 = (t2572 - t2574);
        b1014 = ((t2572 < t2574));
        d1327 = (t2571 - t2573);
        d1328 = (d1327 - b1014);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15706 = ((t2571 < t2573));
        a15707 = ((t2571 == t2573));
        a15708 = ((a15707) && (b1014));
        b1015 = ((a15706) || (a15708));
        /* Begin of MPSubDDD 64 */
        d1329 = (t2566 - t2576);
        b1016 = ((t2566 < t2576));
        d1330 = (t2565 - t2575);
        d1331 = (d1330 - b1016);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1332 = (d1329 - b1015);
        b1017 = ((d1329 < b1015));
        t4933 = (d1331 - b1017);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1333 = (d1326 - a12790);
        b1018 = ((d1326 < a12790));
        d1334 = (d1328 - a12789);
        d1335 = (d1334 - b1018);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15713 = ((d1328 < a12789));
        a15714 = ((d1328 == a12789));
        a15715 = ((a15714) && (b1018));
        b1019 = ((a15713) || (a15715));
        /* Begin of MPSubDDD 64 */
        d1336 = (d1332 - a12788);
        b1020 = ((d1332 < a12788));
        d1337 = (t4933 - a12787);
        d1338 = (d1337 - b1020);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1339 = (d1336 - b1019);
        b1021 = ((d1336 < b1019));
        t4934 = (d1338 - b1021);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15719 = ((t4933 < a12787));
        a15720 = ((t4933 == a12787));
        a15721 = ((a15720) && (b1020));
        a15722 = ((a15719) || (a15721));
        /* MPEqual 64 */
        a15723 = ((d1332 == a12788));
        a15724 = ((a15720) && (a15723));
        /* MPLessThan 64 */
        a15725 = ((a15724) && (b1019));
        i642 = ((a15722) || (a15725));
        /* MPCondD 64 */
        t4935 = ((i642) ? (t4933) : (t4934));
        t4936 = ((i642) ? (d1332) : (d1339));
        /* MPCondD 64 */
        t4937 = ((i642) ? (d1328) : (d1335));
        t4938 = ((i642) ? (d1326) : (d1333));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15726 = (2*threadIdx.x);
        a15727 = (1024*i5);
        a15728 = (a15726 + a15727);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15729 = (2*a15681);
        a15730 = (a15729 + 1);
        /* MPAssignDD 64 */
        a15731 = (2*a15730);
        t4939 = P2[a15731];
        a15732 = (a15731 + 1);
        t4940 = P2[a15732];
        /* MPAddQDD 64 */
        s951 = (((uint128_t ) t4940) + ((uint128_t ) t4938));
        t4941 = ((uint64_t ) s951);
        c409 = (s951 >> 64);
        s952 = (((uint128_t ) t4939) + ((uint128_t ) t4937));
        s953 = (((uint128_t ) s952) + ((uint128_t ) c409));
        t4942 = ((uint64_t ) s953);
        c410 = (s953 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15733 = (2*a15729);
        t4943 = P2[a15733];
        a15734 = (a15733 + 1);
        t4944 = P2[a15734];
        /* MPAddQDD 64 */
        s954 = (((uint128_t ) t4944) + ((uint128_t ) t4936));
        t4945 = ((uint64_t ) s954);
        c411 = (s954 >> 64);
        s955 = (((uint128_t ) t4943) + ((uint128_t ) t4935));
        s956 = (((uint128_t ) s955) + ((uint128_t ) c411));
        t4946 = ((uint64_t ) s956);
        /* MPPropagateCarry 64 */
        t4947 = (t4945 + c410);
        a15735 = ((t4947 == 0));
        a15736 = (t4946 + c410);
        t4948 = ((a15735) ? (a15736) : (t4946));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15743 = ((a12787 < t4948));
        a15744 = ((a12787 == t4948));
        a15745 = ((a12788 < t4947));
        a15746 = ((a15744) && (a15745));
        a15747 = ((a15743) || (a15746));
        /* MPEqual 64 */
        a15748 = ((a12788 == t4947));
        a15749 = ((a15744) && (a15748));
        /* MPLessThan 64 */
        a15750 = ((a12789 < t4942));
        a15751 = ((a12789 == t4942));
        a15752 = ((a12790 < t4941));
        a15753 = ((a15751) && (a15752));
        a15754 = ((a15750) || (a15753));
        a15755 = ((a15749) && (a15754));
        i643 = ((a15747) || (a15755));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1340 = (t4941 - a12790);
        b1022 = ((t4941 < a12790));
        d1341 = (t4942 - a12789);
        d1342 = (d1341 - b1022);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15757 = ((t4942 < a12789));
        a15758 = ((t4942 == a12789));
        a15759 = ((a15758) && (b1022));
        b1023 = ((a15757) || (a15759));
        /* Begin of MPSubDDD 64 */
        d1343 = (t4947 - a12788);
        b1024 = ((t4947 < a12788));
        d1344 = (t4948 - a12787);
        d1345 = (d1344 - b1024);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1346 = (d1343 - b1023);
        b1025 = ((d1343 < b1023));
        t4951 = (d1345 - b1025);
        /* End of MPSubDDD 128 */
        a15763 = (2*a15728);
        /* MPCondD 64 */
        a15764 = (2*a15763);
        P1[a15764] = ((i643) ? (t4951) : (t4948));
        a15765 = (a15764 + 1);
        P1[a15765] = ((i643) ? (d1346) : (t4947));
        a15766 = (a15763 + 1);
        /* MPCondD 64 */
        a15767 = (2*a15766);
        P1[a15767] = ((i643) ? (d1342) : (t4942));
        a15768 = (a15767 + 1);
        P1[a15768] = ((i643) ? (d1340) : (t4941));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a15769 = (a15728 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1347 = (t4940 - t4938);
        b1026 = ((t4940 < t4938));
        d1348 = (t4939 - t4937);
        d1349 = (d1348 - b1026);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15771 = ((t4939 < t4937));
        a15772 = ((t4939 == t4937));
        a15773 = ((a15772) && (b1026));
        b1027 = ((a15771) || (a15773));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1350 = (t4944 - t4936);
        b1028 = ((t4944 < t4936));
        d1351 = (t4943 - t4935);
        d1352 = (d1351 - b1028);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1353 = (d1350 - b1027);
        b1029 = ((d1350 < b1027));
        t4952 = (d1352 - b1029);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s957 = (((uint128_t ) d1347) + ((uint128_t ) a12790));
        t4953 = ((uint64_t ) s957);
        c413 = (s957 >> 64);
        s958 = (((uint128_t ) d1349) + ((uint128_t ) a12789));
        s959 = (((uint128_t ) s958) + ((uint128_t ) c413));
        t4954 = ((uint64_t ) s959);
        c414 = (s959 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s960 = (((uint128_t ) d1353) + ((uint128_t ) a12788));
        t4955 = ((uint64_t ) s960);
        c415 = (s960 >> 64);
        s961 = (((uint128_t ) t4952) + ((uint128_t ) a12787));
        s962 = (((uint128_t ) s961) + ((uint128_t ) c415));
        t4956 = ((uint64_t ) s962);
        /* MPPropagateCarry 64 */
        t4957 = (t4955 + c414);
        a15777 = ((t4957 == 0));
        a15778 = (t4956 + c414);
        t4958 = ((a15777) ? (a15778) : (t4956));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15785 = ((t4943 < t4935));
        a15786 = ((t4943 == t4935));
        a15787 = ((a15786) && (b1028));
        a15788 = ((a15785) || (a15787));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15789 = ((t4944 == t4936));
        a15790 = ((a15786) && (a15789));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15791 = ((a15790) && (b1027));
        i644 = ((a15788) || (a15791));
        a15792 = (2*a15769);
        /* MPCondD 64 */
        a15793 = (2*a15792);
        P1[a15793] = ((i644) ? (t4958) : (t4952));
        a15794 = (a15793 + 1);
        P1[a15794] = ((i644) ? (t4957) : (d1353));
        a15795 = (a15792 + 1);
        /* MPCondD 64 */
        a15796 = (2*a15795);
        P1[a15796] = ((i644) ? (t4954) : (d1349));
        a15797 = (a15796 + 1);
        P1[a15797] = ((i644) ? (t4953) : (d1347));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code19(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a15798, a15799, a15800, a15801, a15802, a15803, a15804, a15805, 
            a15806, a15807, a15808, a15809, a15810, a15811, a15812, a15813, 
            a15814, a15824, a15825, a15826, a15831, a15832, a15833, a15837, 
            a15838, a15839, a15840, a15841, a15842, a15843, a15844, a15845, 
            a15846, a15847, a15848, a15849, a15850, a15851, a15852, a15853, 
            a15854, a15862, a15863, a15864, a15865, a15866, a15867, a15868, 
            a15869, a15870, a15871, a15872, a15873, a15874, a15876, a15877, 
            a15878, a15882, a15883, a15884, a15885, a15886, a15887, a15888, 
            a15890, a15891, a15892, a15896, a15904, a15905, a15906, a15907, 
            a15908, a15909, a15910, a15911, a15912, a15913, a15914, a15915, 
            a15916, b1030, b1031, b1032, b1033, b1034, b1035, b1036, 
            b1037, b1038, b1039, b1040, b1041, b1042, b1043, b1044, 
            b1045, b1046, b1047, b1048, c417, c418, c419, c421, 
            c422, c423, i645, i646, i647;
    uint64_t a13172, a13173, a13174, a13175, a13203, a13204, a13205, a13206, 
            a15815, a15816, a15817, a15818, a15819, a15820, a15821, a15822, 
            a15855, a15897, d1354, d1355, d1356, d1357, d1358, d1359, 
            d1360, d1361, d1362, d1363, d1364, d1365, d1366, d1367, 
            d1368, d1369, d1370, d1371, d1372, d1373, d1374, d1375, 
            d1376, d1377, d1378, d1379, d1380, d1381, t2601, t2602, 
            t2603, t2604, t2605, t2606, t2607, t2608, t2609, t2610, 
            t2611, t2612, t2613, t2614, t2615, t2616, t2617, t2618, 
            t2619, t2620, t2621, t2622, t2623, t2624, t4961, t4962, 
            t4963, t4964, t4965, t4966, t4967, t4968, t4969, t4970, 
            t4971, t4972, t4973, t4974, t4975, t4976, t4977, t4978, 
            t4979, t4980, t4981, t4982, t4983, t4984, t4985, t4986, 
            t4987, t4988, t4989, t4990, t4991, t4992, t4993, t4994, 
            t4995, t4996, t4997, t4998, t4999, t5000, t5001, t5004, 
            t5005, t5006, t5007, t5008, t5009, t5010, t5011;
    uint128_t s963, s964, s965, s966, s967, s968, s969, s970, 
            s971, s972, s973, s974;
    for(int i3 = 0; i3 <= 1023; i3++) {
        a15798 = (512*i3);
        a15799 = (a15798 + threadIdx.x);
        b1030 = (threadIdx.x + a15798);
        a15800 = (b1030 + 524288);
        a15801 = (a15800 % 524288);
        a15802 = (524288 + a15801);
        /* Begin of MPModMul 128 */
        a15803 = (2*a15802);
        a15804 = (a15803 + 1);
        a15805 = (2*a15800);
        a15806 = (a15805 + 1);
        /* MPAssignDD 64 */
        a15807 = (2*a15803);
        t4961 = twiddles[a15807];
        a15808 = (a15807 + 1);
        t4962 = twiddles[a15808];
        /* MPAssignDD 64 */
        a15809 = (2*a15804);
        t4963 = twiddles[a15809];
        a15810 = (a15809 + 1);
        t4964 = twiddles[a15810];
        /* MPAssignDD 64 */
        a15811 = (2*a15805);
        t4965 = P1[a15811];
        a15812 = (a15811 + 1);
        t4966 = P1[a15812];
        /* MPAssignDD 64 */
        a15813 = (2*a15806);
        t4967 = P1[a15813];
        a15814 = (a15813 + 1);
        t4968 = P1[a15814];
        MPMulQDD_L2(t2607, t2608, t2605, t2606, t2603, t2604, t2601, t2602, 
    t4961, t4962, t4963, t4964, t4965, t4966, t4967, t4968);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t4969 = (t2603 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b1031 = ((int) 1);
        t4970 = (288230376151711744 - b1031);
        /* MPBinAndD 64 */
        t4971 = (((t2607)&(t4970)));
        t4972 = (((t2608)&((-1))));
        /* Begin of MPShiftLeft2D */
        a15815 = (t4971 << 6);
        a15816 = (t4972 >> 58);
        t4973 = (((a15815)|(a15816)));
        t4974 = (t4972 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t4975 = (t2605 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t4976 = (((t4974)|(t4975)));
        /* Begin of MPShiftLeft2D */
        a15817 = (t2605 << 6);
        a15818 = (t2606 >> 58);
        t4977 = (((a15817)|(a15818)));
        t4978 = (t2606 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t4979 = (((t4978)|(t4969)));
        /* End of MPShiftRight3 */
        a13172 = mu[0];
        a13173 = mu[1];
        a13174 = mu[2];
        a13175 = mu[3];
        MPMulQDD_L2(t2623, t2624, t2621, t2622, t2619, t2620, t2617, t2618, 
    t4973, t4976, t4977, t4979, a13172, a13173, a13174, a13175);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t4980 = (t2623 >> 1);
        a15819 = (t2623 << 63);
        a15820 = (t2624 >> 1);
        t4981 = (((a15819)|(a15820)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t4982 = (t2624 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t4983 = (t2621 >> 1);
        a15821 = (t2621 << 63);
        a15822 = (t2622 >> 1);
        t4984 = (((a15821)|(a15822)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t4985 = (((t4982)|(t4983)));
        /* End of MPShiftRight2 */
        a13203 = modulus[0];
        a13204 = modulus[1];
        a13205 = modulus[2];
        a13206 = modulus[3];
        MPMulQDD_L2(t2615, t2616, t2613, t2614, t2611, t2612, t2609, t2610, 
    t4980, t4981, t4985, t4984, a13203, a13204, a13205, a13206);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1354 = (t2602 - t2610);
        b1032 = ((t2602 < t2610));
        d1355 = (t2601 - t2609);
        d1356 = (d1355 - b1032);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15824 = ((t2601 < t2609));
        a15825 = ((t2601 == t2609));
        a15826 = ((a15825) && (b1032));
        b1033 = ((a15824) || (a15826));
        /* Begin of MPSubDDD 64 */
        d1357 = (t2604 - t2612);
        b1034 = ((t2604 < t2612));
        d1358 = (t2603 - t2611);
        d1359 = (d1358 - b1034);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1360 = (d1357 - b1033);
        b1035 = ((d1357 < b1033));
        t4986 = (d1359 - b1035);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1361 = (d1354 - a13206);
        b1036 = ((d1354 < a13206));
        d1362 = (d1356 - a13205);
        d1363 = (d1362 - b1036);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15831 = ((d1356 < a13205));
        a15832 = ((d1356 == a13205));
        a15833 = ((a15832) && (b1036));
        b1037 = ((a15831) || (a15833));
        /* Begin of MPSubDDD 64 */
        d1364 = (d1360 - a13204);
        b1038 = ((d1360 < a13204));
        d1365 = (t4986 - a13203);
        d1366 = (d1365 - b1038);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1367 = (d1364 - b1037);
        b1039 = ((d1364 < b1037));
        t4987 = (d1366 - b1039);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15837 = ((t4986 < a13203));
        a15838 = ((t4986 == a13203));
        a15839 = ((a15838) && (b1038));
        a15840 = ((a15837) || (a15839));
        /* MPEqual 64 */
        a15841 = ((d1360 == a13204));
        a15842 = ((a15838) && (a15841));
        /* MPLessThan 64 */
        a15843 = ((a15842) && (b1037));
        i645 = ((a15840) || (a15843));
        /* MPCondD 64 */
        t4988 = ((i645) ? (t4986) : (t4987));
        t4989 = ((i645) ? (d1360) : (d1367));
        /* MPCondD 64 */
        t4990 = ((i645) ? (d1356) : (d1363));
        t4991 = ((i645) ? (d1354) : (d1361));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a15844 = (1048576*blockIdx.x);
        a15845 = (2*threadIdx.x);
        a15846 = (1024*i3);
        b1040 = (a15844 + a15845);
        a15847 = (b1040 + a15846);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a15848 = (2*a15799);
        a15849 = (a15848 + 1);
        /* MPAssignDD 64 */
        a15850 = (2*a15849);
        t4992 = P1[a15850];
        a15851 = (a15850 + 1);
        t4993 = P1[a15851];
        /* MPAddQDD 64 */
        s963 = (((uint128_t ) t4993) + ((uint128_t ) t4991));
        t4994 = ((uint64_t ) s963);
        c417 = (s963 >> 64);
        s964 = (((uint128_t ) t4992) + ((uint128_t ) t4990));
        s965 = (((uint128_t ) s964) + ((uint128_t ) c417));
        t4995 = ((uint64_t ) s965);
        c418 = (s965 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a15852 = (2*a15848);
        t4996 = P1[a15852];
        a15853 = (a15852 + 1);
        t4997 = P1[a15853];
        /* MPAddQDD 64 */
        s966 = (((uint128_t ) t4997) + ((uint128_t ) t4989));
        t4998 = ((uint64_t ) s966);
        c419 = (s966 >> 64);
        s967 = (((uint128_t ) t4996) + ((uint128_t ) t4988));
        s968 = (((uint128_t ) s967) + ((uint128_t ) c419));
        t4999 = ((uint64_t ) s968);
        /* MPPropagateCarry 64 */
        t5000 = (t4998 + c418);
        a15854 = ((t5000 == 0));
        a15855 = (t4999 + c418);
        t5001 = ((a15854) ? (a15855) : (t4999));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a15862 = ((a13203 < t5001));
        a15863 = ((a13203 == t5001));
        a15864 = ((a13204 < t5000));
        a15865 = ((a15863) && (a15864));
        a15866 = ((a15862) || (a15865));
        /* MPEqual 64 */
        a15867 = ((a13204 == t5000));
        a15868 = ((a15863) && (a15867));
        /* MPLessThan 64 */
        a15869 = ((a13205 < t4995));
        a15870 = ((a13205 == t4995));
        a15871 = ((a13206 < t4994));
        a15872 = ((a15870) && (a15871));
        a15873 = ((a15869) || (a15872));
        a15874 = ((a15868) && (a15873));
        i646 = ((a15866) || (a15874));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1368 = (t4994 - a13206);
        b1041 = ((t4994 < a13206));
        d1369 = (t4995 - a13205);
        d1370 = (d1369 - b1041);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a15876 = ((t4995 < a13205));
        a15877 = ((t4995 == a13205));
        a15878 = ((a15877) && (b1041));
        b1042 = ((a15876) || (a15878));
        /* Begin of MPSubDDD 64 */
        d1371 = (t5000 - a13204);
        b1043 = ((t5000 < a13204));
        d1372 = (t5001 - a13203);
        d1373 = (d1372 - b1043);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1374 = (d1371 - b1042);
        b1044 = ((d1371 < b1042));
        t5004 = (d1373 - b1044);
        /* End of MPSubDDD 128 */
        a15882 = (2*a15847);
        /* MPCondD 64 */
        a15883 = (2*a15882);
        Y[a15883] = ((i646) ? (t5004) : (t5001));
        a15884 = (a15883 + 1);
        Y[a15884] = ((i646) ? (d1374) : (t5000));
        a15885 = (a15882 + 1);
        /* MPCondD 64 */
        a15886 = (2*a15885);
        Y[a15886] = ((i646) ? (d1370) : (t4995));
        a15887 = (a15886 + 1);
        Y[a15887] = ((i646) ? (d1368) : (t4994));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a15888 = (a15847 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1375 = (t4993 - t4991);
        b1045 = ((t4993 < t4991));
        d1376 = (t4992 - t4990);
        d1377 = (d1376 - b1045);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15890 = ((t4992 < t4990));
        a15891 = ((t4992 == t4990));
        a15892 = ((a15891) && (b1045));
        b1046 = ((a15890) || (a15892));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d1378 = (t4997 - t4989);
        b1047 = ((t4997 < t4989));
        d1379 = (t4996 - t4988);
        d1380 = (d1379 - b1047);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1381 = (d1378 - b1046);
        b1048 = ((d1378 < b1046));
        t5005 = (d1380 - b1048);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s969 = (((uint128_t ) d1375) + ((uint128_t ) a13206));
        t5006 = ((uint64_t ) s969);
        c421 = (s969 >> 64);
        s970 = (((uint128_t ) d1377) + ((uint128_t ) a13205));
        s971 = (((uint128_t ) s970) + ((uint128_t ) c421));
        t5007 = ((uint64_t ) s971);
        c422 = (s971 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s972 = (((uint128_t ) d1381) + ((uint128_t ) a13204));
        t5008 = ((uint64_t ) s972);
        c423 = (s972 >> 64);
        s973 = (((uint128_t ) t5005) + ((uint128_t ) a13203));
        s974 = (((uint128_t ) s973) + ((uint128_t ) c423));
        t5009 = ((uint64_t ) s974);
        /* MPPropagateCarry 64 */
        t5010 = (t5008 + c422);
        a15896 = ((t5010 == 0));
        a15897 = (t5009 + c422);
        t5011 = ((a15896) ? (a15897) : (t5009));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15904 = ((t4996 < t4988));
        a15905 = ((t4996 == t4988));
        a15906 = ((a15905) && (b1047));
        a15907 = ((a15904) || (a15906));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a15908 = ((t4997 == t4989));
        a15909 = ((a15905) && (a15908));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a15910 = ((a15909) && (b1046));
        i647 = ((a15907) || (a15910));
        a15911 = (2*a15888);
        /* MPCondD 64 */
        a15912 = (2*a15911);
        Y[a15912] = ((i647) ? (t5011) : (t5005));
        a15913 = (a15912 + 1);
        Y[a15913] = ((i647) ? (t5010) : (d1381));
        a15914 = (a15911 + 1);
        /* MPCondD 64 */
        a15915 = (2*a15914);
        Y[a15915] = ((i647) ? (t5007) : (d1377));
        a15916 = (a15915 + 1);
        Y[a15916] = ((i647) ? (t5006) : (d1375));
        /* End of MPModSub 128 */
    }
}

void nttmpcuda(uint64_t  *Y, uint64_t  *X, uint64_t modulus[2], uint64_t  *twiddles, uint64_t mu[2]) {
    dim3 b100(512, 1, 1), b101(512, 1, 1), b102(512, 1, 1), b103(512, 1, 1), b104(512, 1, 1), b105(512, 1, 1), b106(512, 1, 1), b107(512, 1, 1), 
    b108(512, 1, 1), b109(512, 1, 1), b110(512, 1, 1), b111(512, 1, 1), b112(512, 1, 1), b113(512, 1, 1), b114(512, 1, 1), b115(512, 1, 1), 
    b116(512, 1, 1), b117(512, 1, 1), b98(512, 1, 1), b99(512, 1, 1), g1(2, 1, 1), g10(2, 1, 1), g11(2, 1, 1), g12(2, 1, 1), 
    g13(2, 1, 1), g14(2, 1, 1), g15(2, 1, 1), g16(2, 1, 1), g17(2, 1, 1), g18(2, 1, 1), g19(2, 1, 1), g2(2, 1, 1), 
    g20(2, 1, 1), g3(2, 1, 1), g4(2, 1, 1), g5(2, 1, 1), g6(2, 1, 1), g7(2, 1, 1), g8(2, 1, 1), g9(2, 1, 1);
    ker_code0<<<g1, b98>>>(X, Y, modulus, twiddles, mu);
    ker_code1<<<g2, b99>>>(X, Y, modulus, twiddles, mu);
    ker_code2<<<g3, b100>>>(X, Y, modulus, twiddles, mu);
    ker_code3<<<g4, b101>>>(X, Y, modulus, twiddles, mu);
    ker_code4<<<g5, b102>>>(X, Y, modulus, twiddles, mu);
    ker_code5<<<g6, b103>>>(X, Y, modulus, twiddles, mu);
    ker_code6<<<g7, b104>>>(X, Y, modulus, twiddles, mu);
    ker_code7<<<g8, b105>>>(X, Y, modulus, twiddles, mu);
    ker_code8<<<g9, b106>>>(X, Y, modulus, twiddles, mu);
    ker_code9<<<g10, b107>>>(X, Y, modulus, twiddles, mu);
    ker_code10<<<g11, b108>>>(X, Y, modulus, twiddles, mu);
    ker_code11<<<g12, b109>>>(X, Y, modulus, twiddles, mu);
    ker_code12<<<g13, b110>>>(X, Y, modulus, twiddles, mu);
    ker_code13<<<g14, b111>>>(X, Y, modulus, twiddles, mu);
    ker_code14<<<g15, b112>>>(X, Y, modulus, twiddles, mu);
    ker_code15<<<g16, b113>>>(X, Y, modulus, twiddles, mu);
    ker_code16<<<g17, b114>>>(X, Y, modulus, twiddles, mu);
    ker_code17<<<g18, b115>>>(X, Y, modulus, twiddles, mu);
    ker_code18<<<g19, b116>>>(X, Y, modulus, twiddles, mu);
    ker_code19<<<g20, b117>>>(X, Y, modulus, twiddles, mu);
}

void destroy_nttmpcuda() {
    /* skip */
}
