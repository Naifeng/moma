
/*
 * This code was generated by Spiral 8.5.1, www.spiral.net
 */

#include <stdint.h>
__device__ uint64_t P2[131072];
__device__ uint64_t P1[131072];

__device__ void MPMulQDD_L2(uint64_t &t1083, uint64_t &t1084, uint64_t &t1091, uint64_t &t1092, uint64_t &t1099, uint64_t &t1104, uint64_t &t1107, uint64_t &t1108, uint64_t t1809, uint64_t t1810, uint64_t t1807, uint64_t t1808, uint64_t t1813, uint64_t t1814, uint64_t t1811, uint64_t t1812) {
    int a9551, a9553, a9554, a9564, a9566, a9567, a9572, c178, 
            c179, c180, c181, c182, c183, c184, c185, c186, 
            c187, c188, c189, c190, c191, c192, c193, c194, 
            c195, c196, c197, c198, c199, c200, c201, c202;
    uint64_t a9552, a9555, a9565, a9568, a9573, t2781, t2782, t2783, 
            t2784, t2785, t2786, t2787, t2788, t2789, t2790, t2791, 
            t2792, t2793, t2794, t2795, t2796, t2797, t2798, t2799, 
            t2800, t2801, t2802, t2803, t2804, t2805, t2806, t2807, 
            t2808, t2809, t2810, t2811, t2812, t2813, t2814, t2815, 
            t2816, t2817, t2818, t2819, t2820, t2821, t2822, t2823, 
            t2824, t2825, t2826, t2827, t2828, t2829, t2830, t2831, 
            t2832, t2833, t2834, t2835, t2836, t2837, t2838, t2839, 
            t2840, t2841, t2842, t2843, t2845, t2846, t2847, t2848, 
            t2850, t2851;
    uint128_t a9535, a9536, a9537, a9538, a9539, a9540, a9541, a9542, 
            a9543, a9544, a9545, a9546, a9547, a9548, a9549, a9550, 
            s503, s504, s505, s506, s507, s508, s509, s510, 
            s511, s512, s513, s514, s515, s516, s517, s518, 
            s519, s520, s521, s522, s523, s524, s525, s526, 
            s527, s528, s529, s530, s531, s532, s533, s534, 
            s535, s536, s537, s538, s539, s540, s541, s542, 
            s543, s544, s545, s546, s547, s548;
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a9535 = (((uint128_t ) t1808)*((uint128_t ) t1812));
    t2781 = (a9535 >> 64);
    t2782 = ((uint64_t ) a9535);
    a9536 = (((uint128_t ) t1807)*((uint128_t ) t1811));
    t2783 = (a9536 >> 64);
    t2784 = ((uint64_t ) a9536);
    a9537 = (((uint128_t ) t1807)*((uint128_t ) t1812));
    t2785 = (a9537 >> 64);
    t2786 = ((uint64_t ) a9537);
    a9538 = (((uint128_t ) t1808)*((uint128_t ) t1811));
    t2787 = (a9538 >> 64);
    t2788 = ((uint64_t ) a9538);
    /* MPAddQDD 64 */
    s503 = (((uint128_t ) t2786) + ((uint128_t ) t2788));
    t2789 = ((uint64_t ) s503);
    c178 = (s503 >> 64);
    s504 = (((uint128_t ) t2785) + ((uint128_t ) t2787));
    s505 = (((uint128_t ) s504) + ((uint128_t ) c178));
    t2790 = ((uint64_t ) s505);
    c179 = (s505 >> 64);
    /* Begin of MPAddQQQ 64 */
    t2791 = ((uint64_t ) t2782);
    s506 = (((uint128_t ) t2781) + ((uint128_t ) t2789));
    t2792 = ((uint64_t ) s506);
    c180 = (s506 >> 64);
    s507 = (((uint128_t ) t2784) + ((uint128_t ) t2790));
    s508 = (((uint128_t ) s507) + ((uint128_t ) c180));
    t2793 = ((uint64_t ) s508);
    c181 = (s508 >> 64);
    s509 = (((uint128_t ) t2783) + ((uint128_t ) c179));
    s510 = (((uint128_t ) s509) + ((uint128_t ) c181));
    t2794 = ((uint64_t ) s510);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a9539 = (((uint128_t ) t1810)*((uint128_t ) t1814));
    t2795 = (a9539 >> 64);
    t2796 = ((uint64_t ) a9539);
    a9540 = (((uint128_t ) t1809)*((uint128_t ) t1813));
    t2797 = (a9540 >> 64);
    t2798 = ((uint64_t ) a9540);
    a9541 = (((uint128_t ) t1809)*((uint128_t ) t1814));
    t2799 = (a9541 >> 64);
    t2800 = ((uint64_t ) a9541);
    a9542 = (((uint128_t ) t1810)*((uint128_t ) t1813));
    t2801 = (a9542 >> 64);
    t2802 = ((uint64_t ) a9542);
    /* MPAddQDD 64 */
    s511 = (((uint128_t ) t2800) + ((uint128_t ) t2802));
    t2803 = ((uint64_t ) s511);
    c182 = (s511 >> 64);
    s512 = (((uint128_t ) t2799) + ((uint128_t ) t2801));
    s513 = (((uint128_t ) s512) + ((uint128_t ) c182));
    t2804 = ((uint64_t ) s513);
    c183 = (s513 >> 64);
    /* Begin of MPAddQQQ 64 */
    t2805 = ((uint64_t ) t2796);
    s514 = (((uint128_t ) t2795) + ((uint128_t ) t2803));
    t2806 = ((uint64_t ) s514);
    c184 = (s514 >> 64);
    s515 = (((uint128_t ) t2798) + ((uint128_t ) t2804));
    s516 = (((uint128_t ) s515) + ((uint128_t ) c184));
    t2807 = ((uint64_t ) s516);
    c185 = (s516 >> 64);
    s517 = (((uint128_t ) t2797) + ((uint128_t ) c183));
    s518 = (((uint128_t ) s517) + ((uint128_t ) c185));
    t2808 = ((uint64_t ) s518);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a9543 = (((uint128_t ) t1810)*((uint128_t ) t1812));
    t2809 = (a9543 >> 64);
    t2810 = ((uint64_t ) a9543);
    a9544 = (((uint128_t ) t1809)*((uint128_t ) t1811));
    t2811 = (a9544 >> 64);
    t2812 = ((uint64_t ) a9544);
    a9545 = (((uint128_t ) t1809)*((uint128_t ) t1812));
    t2813 = (a9545 >> 64);
    t2814 = ((uint64_t ) a9545);
    a9546 = (((uint128_t ) t1810)*((uint128_t ) t1811));
    t2815 = (a9546 >> 64);
    t2816 = ((uint64_t ) a9546);
    /* MPAddQDD 64 */
    s519 = (((uint128_t ) t2814) + ((uint128_t ) t2816));
    t2817 = ((uint64_t ) s519);
    c186 = (s519 >> 64);
    s520 = (((uint128_t ) t2813) + ((uint128_t ) t2815));
    s521 = (((uint128_t ) s520) + ((uint128_t ) c186));
    t2818 = ((uint64_t ) s521);
    c187 = (s521 >> 64);
    /* Begin of MPAddQQQ 64 */
    t2819 = ((uint64_t ) t2810);
    s522 = (((uint128_t ) t2809) + ((uint128_t ) t2817));
    t2820 = ((uint64_t ) s522);
    c188 = (s522 >> 64);
    s523 = (((uint128_t ) t2812) + ((uint128_t ) t2818));
    s524 = (((uint128_t ) s523) + ((uint128_t ) c188));
    t2821 = ((uint64_t ) s524);
    c189 = (s524 >> 64);
    s525 = (((uint128_t ) t2811) + ((uint128_t ) c187));
    s526 = (((uint128_t ) s525) + ((uint128_t ) c189));
    t2822 = ((uint64_t ) s526);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a9547 = (((uint128_t ) t1808)*((uint128_t ) t1814));
    t2823 = (a9547 >> 64);
    t2824 = ((uint64_t ) a9547);
    a9548 = (((uint128_t ) t1807)*((uint128_t ) t1813));
    t2825 = (a9548 >> 64);
    t2826 = ((uint64_t ) a9548);
    a9549 = (((uint128_t ) t1807)*((uint128_t ) t1814));
    t2827 = (a9549 >> 64);
    t2828 = ((uint64_t ) a9549);
    a9550 = (((uint128_t ) t1808)*((uint128_t ) t1813));
    t2829 = (a9550 >> 64);
    t2830 = ((uint64_t ) a9550);
    /* MPAddQDD 64 */
    s527 = (((uint128_t ) t2828) + ((uint128_t ) t2830));
    t2831 = ((uint64_t ) s527);
    c190 = (s527 >> 64);
    s528 = (((uint128_t ) t2827) + ((uint128_t ) t2829));
    s529 = (((uint128_t ) s528) + ((uint128_t ) c190));
    t2832 = ((uint64_t ) s529);
    c191 = (s529 >> 64);
    /* Begin of MPAddQQQ 64 */
    t2833 = ((uint64_t ) t2824);
    s530 = (((uint128_t ) t2823) + ((uint128_t ) t2831));
    t2834 = ((uint64_t ) s530);
    c192 = (s530 >> 64);
    s531 = (((uint128_t ) t2826) + ((uint128_t ) t2832));
    s532 = (((uint128_t ) s531) + ((uint128_t ) c192));
    t2835 = ((uint64_t ) s532);
    c193 = (s532 >> 64);
    s533 = (((uint128_t ) t2825) + ((uint128_t ) c191));
    s534 = (((uint128_t ) s533) + ((uint128_t ) c193));
    t2836 = ((uint64_t ) s534);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s535 = (((uint128_t ) t2819) + ((uint128_t ) t2833));
    t2837 = ((uint64_t ) s535);
    c194 = (s535 >> 64);
    s536 = (((uint128_t ) t2820) + ((uint128_t ) t2834));
    s537 = (((uint128_t ) s536) + ((uint128_t ) c194));
    t2838 = ((uint64_t ) s537);
    c195 = (s537 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s538 = (((uint128_t ) t2821) + ((uint128_t ) t2835));
    t2839 = ((uint64_t ) s538);
    c196 = (s538 >> 64);
    s539 = (((uint128_t ) t2822) + ((uint128_t ) t2836));
    s540 = (((uint128_t ) s539) + ((uint128_t ) c196));
    t2840 = ((uint64_t ) s540);
    c197 = (s540 >> 64);
    /* MPPropagateCarry 64 */
    t2841 = (t2839 + c195);
    a9551 = ((t2841 == 0));
    a9552 = (t2840 + c195);
    t2842 = ((a9551) ? (a9552) : (t2840));
    a9553 = ((t2842 == 0));
    a9554 = ((a9553) && (a9551));
    a9555 = (c197 + c195);
    t2843 = ((a9554) ? (a9555) : (c197));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t1108 = ((uint64_t ) t2791);
    t1107 = ((uint64_t ) t2792);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s541 = (((uint128_t ) t2793) + ((uint128_t ) t2837));
    t1104 = ((uint64_t ) s541);
    c198 = (s541 >> 64);
    s542 = (((uint128_t ) t2794) + ((uint128_t ) t2838));
    s543 = (((uint128_t ) s542) + ((uint128_t ) c198));
    t2845 = ((uint64_t ) s543);
    c199 = (s543 >> 64);
    /* MPPropagateCarry 64 */
    t1099 = t2845;
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s544 = (((uint128_t ) t2805) + ((uint128_t ) t2841));
    t2846 = ((uint64_t ) s544);
    c200 = (s544 >> 64);
    s545 = (((uint128_t ) t2806) + ((uint128_t ) t2842));
    s546 = (((uint128_t ) s545) + ((uint128_t ) c200));
    t2847 = ((uint64_t ) s546);
    c201 = (s546 >> 64);
    /* MPPropagateCarry 64 */
    t1092 = (t2846 + c199);
    a9564 = ((t1092 == 0));
    a9565 = (t2847 + c199);
    t1091 = ((a9564) ? (a9565) : (t2847));
    a9566 = ((t1091 == 0));
    a9567 = ((a9566) && (a9564));
    a9568 = (c201 + c199);
    t2848 = ((a9567) ? (a9568) : (c201));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s547 = (((uint128_t ) t2807) + ((uint128_t ) t2843));
    t2850 = ((uint64_t ) s547);
    c202 = (s547 >> 64);
    s548 = (((uint128_t ) t2808) + ((uint128_t ) c202));
    t2851 = ((uint64_t ) s548);
    /* MPPropagateCarry 64 */
    t1084 = (t2850 + t2848);
    a9572 = ((t1084 == 0));
    a9573 = (t2851 + t2848);
    t1083 = ((a9572) ? (a9573) : (t2851));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
}

void init_nttmpcuda() {
    /* skip */
}

__global__ void ker_code0(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a9579, a9580, a9581, a9582, a9583, a9584, a9585, a9586, 
            a9587, a9588, a9598, a9599, a9600, a9605, a9606, a9607, 
            a9611, a9612, a9613, a9614, a9615, a9616, a9617, a9618, 
            a9619, a9620, a9621, a9622, a9623, a9624, a9625, a9626, 
            a9627, a9635, a9636, a9637, a9638, a9639, a9640, a9641, 
            a9642, a9643, a9644, a9645, a9646, a9647, a9649, a9650, 
            a9651, a9655, a9656, a9657, a9658, a9659, a9660, a9661, 
            a9663, a9664, a9665, a9669, a9677, a9678, a9679, a9680, 
            a9681, a9682, a9683, a9684, a9685, a9686, a9687, a9688, 
            a9689, b465, b466, b467, b468, b469, b470, b471, 
            b472, b473, b474, b475, b476, b477, b478, b479, 
            b480, b481, b482, b483, c204, c205, c206, c208, 
            c209, c210, i414, i415, i416;
    uint64_t a3780, a3781, a3782, a3783, a3811, a3812, a3813, a3814, 
            a9589, a9590, a9591, a9592, a9593, a9594, a9595, a9596, 
            a9628, a9670, d576, d577, d578, d579, d580, d581, 
            d582, d583, d584, d585, d586, d587, d588, d589, 
            d590, d591, d592, d593, d594, d595, d596, d597, 
            d598, d599, d600, d601, d602, d603, t1247, t1248, 
            t1249, t1250, t1251, t1252, t1253, t1254, t1255, t1256, 
            t1257, t1258, t1259, t1260, t1261, t1262, t1263, t1264, 
            t1265, t1266, t1267, t1268, t1269, t1270, t2854, t2855, 
            t2856, t2857, t2858, t2859, t2860, t2861, t2862, t2863, 
            t2864, t2865, t2866, t2867, t2868, t2869, t2870, t2871, 
            t2872, t2873, t2874, t2875, t2876, t2877, t2878, t2879, 
            t2880, t2881, t2882, t2883, t2884, t2885, t2886, t2887, 
            t2888, t2889, t2890, t2893, t2894, t2895, t2896, t2897, 
            t2898, t2899, t2900;
    uint128_t s549, s550, s551, s552, s553, s554, s555, s556, 
            s557, s558, s559, s560;
    for(int i29 = 0; i29 <= 15; i29++) {
        a9579 = (16384*blockIdx.x);
        a9580 = (512*i29);
        b465 = (a9579 + threadIdx.x);
        a9581 = (b465 + a9580);
        a9582 = (a9581 + 8192);
        /* Begin of MPModMul 128 */
        a9583 = (2*a9582);
        a9584 = (a9583 + 1);
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        a9585 = (2*a9583);
        t2854 = X[a9585];
        a9586 = (a9585 + 1);
        t2855 = X[a9586];
        /* MPAssignDD 64 */
        a9587 = (2*a9584);
        t2856 = X[a9587];
        a9588 = (a9587 + 1);
        t2857 = X[a9588];
        MPMulQDD_L2(t1253, t1254, t1251, t1252, t1249, t1250, t1247, t1248, 
    twiddles[4], twiddles[5], twiddles[6], twiddles[7], t2854, t2855, t2856, t2857);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2858 = (t1249 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b466 = ((int) 1);
        t2859 = (288230376151711744 - b466);
        /* MPBinAndD 64 */
        t2860 = (((t1253)&(t2859)));
        t2861 = (((t1254)&((-1))));
        /* Begin of MPShiftLeft2D */
        a9589 = (t2860 << 6);
        a9590 = (t2861 >> 58);
        t2862 = (((a9589)|(a9590)));
        t2863 = (t2861 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2864 = (t1251 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2865 = (((t2863)|(t2864)));
        /* Begin of MPShiftLeft2D */
        a9591 = (t1251 << 6);
        a9592 = (t1252 >> 58);
        t2866 = (((a9591)|(a9592)));
        t2867 = (t1252 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2868 = (((t2867)|(t2858)));
        /* End of MPShiftRight3 */
        a3780 = mu[0];
        a3781 = mu[1];
        a3782 = mu[2];
        a3783 = mu[3];
        MPMulQDD_L2(t1269, t1270, t1267, t1268, t1265, t1266, t1263, t1264, 
    t2862, t2865, t2866, t2868, a3780, a3781, a3782, a3783);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2869 = (t1269 >> 1);
        a9593 = (t1269 << 63);
        a9594 = (t1270 >> 1);
        t2870 = (((a9593)|(a9594)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2871 = (t1270 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2872 = (t1267 >> 1);
        a9595 = (t1267 << 63);
        a9596 = (t1268 >> 1);
        t2873 = (((a9595)|(a9596)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2874 = (((t2871)|(t2872)));
        /* End of MPShiftRight2 */
        a3811 = modulus[0];
        a3812 = modulus[1];
        a3813 = modulus[2];
        a3814 = modulus[3];
        MPMulQDD_L2(t1261, t1262, t1259, t1260, t1257, t1258, t1255, t1256, 
    t2869, t2870, t2874, t2873, a3811, a3812, a3813, a3814);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d576 = (t1248 - t1256);
        b467 = ((t1248 < t1256));
        d577 = (t1247 - t1255);
        d578 = (d577 - b467);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9598 = ((t1247 < t1255));
        a9599 = ((t1247 == t1255));
        a9600 = ((a9599) && (b467));
        b468 = ((a9598) || (a9600));
        /* Begin of MPSubDDD 64 */
        d579 = (t1250 - t1258);
        b469 = ((t1250 < t1258));
        d580 = (t1249 - t1257);
        d581 = (d580 - b469);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d582 = (d579 - b468);
        b470 = ((d579 < b468));
        t2875 = (d581 - b470);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d583 = (d576 - a3814);
        b471 = ((d576 < a3814));
        d584 = (d578 - a3813);
        d585 = (d584 - b471);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9605 = ((d578 < a3813));
        a9606 = ((d578 == a3813));
        a9607 = ((a9606) && (b471));
        b472 = ((a9605) || (a9607));
        /* Begin of MPSubDDD 64 */
        d586 = (d582 - a3812);
        b473 = ((d582 < a3812));
        d587 = (t2875 - a3811);
        d588 = (d587 - b473);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d589 = (d586 - b472);
        b474 = ((d586 < b472));
        t2876 = (d588 - b474);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9611 = ((t2875 < a3811));
        a9612 = ((t2875 == a3811));
        a9613 = ((a9612) && (b473));
        a9614 = ((a9611) || (a9613));
        /* MPEqual 64 */
        a9615 = ((d582 == a3812));
        a9616 = ((a9612) && (a9615));
        /* MPLessThan 64 */
        a9617 = ((a9616) && (b472));
        i414 = ((a9614) || (a9617));
        /* MPCondD 64 */
        t2877 = ((i414) ? (t2875) : (t2876));
        t2878 = ((i414) ? (d582) : (d589));
        /* MPCondD 64 */
        t2879 = ((i414) ? (d578) : (d585));
        t2880 = ((i414) ? (d576) : (d583));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a9618 = (1024*i29);
        a9619 = (2*threadIdx.x);
        a9620 = (a9618 + a9619);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a9621 = (2*a9581);
        a9622 = (a9621 + 1);
        /* MPAssignDD 64 */
        a9623 = (2*a9622);
        t2881 = X[a9623];
        a9624 = (a9623 + 1);
        t2882 = X[a9624];
        /* MPAddQDD 64 */
        s549 = (((uint128_t ) t2882) + ((uint128_t ) t2880));
        t2883 = ((uint64_t ) s549);
        c204 = (s549 >> 64);
        s550 = (((uint128_t ) t2881) + ((uint128_t ) t2879));
        s551 = (((uint128_t ) s550) + ((uint128_t ) c204));
        t2884 = ((uint64_t ) s551);
        c205 = (s551 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a9625 = (2*a9621);
        t2885 = X[a9625];
        a9626 = (a9625 + 1);
        t2886 = X[a9626];
        /* MPAddQDD 64 */
        s552 = (((uint128_t ) t2886) + ((uint128_t ) t2878));
        t2887 = ((uint64_t ) s552);
        c206 = (s552 >> 64);
        s553 = (((uint128_t ) t2885) + ((uint128_t ) t2877));
        s554 = (((uint128_t ) s553) + ((uint128_t ) c206));
        t2888 = ((uint64_t ) s554);
        /* MPPropagateCarry 64 */
        t2889 = (t2887 + c205);
        a9627 = ((t2889 == 0));
        a9628 = (t2888 + c205);
        t2890 = ((a9627) ? (a9628) : (t2888));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9635 = ((a3811 < t2890));
        a9636 = ((a3811 == t2890));
        a9637 = ((a3812 < t2889));
        a9638 = ((a9636) && (a9637));
        a9639 = ((a9635) || (a9638));
        /* MPEqual 64 */
        a9640 = ((a3812 == t2889));
        a9641 = ((a9636) && (a9640));
        /* MPLessThan 64 */
        a9642 = ((a3813 < t2884));
        a9643 = ((a3813 == t2884));
        a9644 = ((a3814 < t2883));
        a9645 = ((a9643) && (a9644));
        a9646 = ((a9642) || (a9645));
        a9647 = ((a9641) && (a9646));
        i415 = ((a9639) || (a9647));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d590 = (t2883 - a3814);
        b475 = ((t2883 < a3814));
        d591 = (t2884 - a3813);
        d592 = (d591 - b475);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9649 = ((t2884 < a3813));
        a9650 = ((t2884 == a3813));
        a9651 = ((a9650) && (b475));
        b476 = ((a9649) || (a9651));
        /* Begin of MPSubDDD 64 */
        d593 = (t2889 - a3812);
        b477 = ((t2889 < a3812));
        d594 = (t2890 - a3811);
        d595 = (d594 - b477);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d596 = (d593 - b476);
        b478 = ((d593 < b476));
        t2893 = (d595 - b478);
        /* End of MPSubDDD 128 */
        a9655 = (2*a9620);
        /* MPCondD 64 */
        a9656 = (2*a9655);
        P1[a9656] = ((i415) ? (t2893) : (t2890));
        a9657 = (a9656 + 1);
        P1[a9657] = ((i415) ? (d596) : (t2889));
        a9658 = (a9655 + 1);
        /* MPCondD 64 */
        a9659 = (2*a9658);
        P1[a9659] = ((i415) ? (d592) : (t2884));
        a9660 = (a9659 + 1);
        P1[a9660] = ((i415) ? (d590) : (t2883));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b479 = (a9619 + a9618);
        a9661 = (b479 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d597 = (t2882 - t2880);
        b480 = ((t2882 < t2880));
        d598 = (t2881 - t2879);
        d599 = (d598 - b480);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9663 = ((t2881 < t2879));
        a9664 = ((t2881 == t2879));
        a9665 = ((a9664) && (b480));
        b481 = ((a9663) || (a9665));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d600 = (t2886 - t2878);
        b482 = ((t2886 < t2878));
        d601 = (t2885 - t2877);
        d602 = (d601 - b482);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d603 = (d600 - b481);
        b483 = ((d600 < b481));
        t2894 = (d602 - b483);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s555 = (((uint128_t ) d597) + ((uint128_t ) a3814));
        t2895 = ((uint64_t ) s555);
        c208 = (s555 >> 64);
        s556 = (((uint128_t ) d599) + ((uint128_t ) a3813));
        s557 = (((uint128_t ) s556) + ((uint128_t ) c208));
        t2896 = ((uint64_t ) s557);
        c209 = (s557 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s558 = (((uint128_t ) d603) + ((uint128_t ) a3812));
        t2897 = ((uint64_t ) s558);
        c210 = (s558 >> 64);
        s559 = (((uint128_t ) t2894) + ((uint128_t ) a3811));
        s560 = (((uint128_t ) s559) + ((uint128_t ) c210));
        t2898 = ((uint64_t ) s560);
        /* MPPropagateCarry 64 */
        t2899 = (t2897 + c209);
        a9669 = ((t2899 == 0));
        a9670 = (t2898 + c209);
        t2900 = ((a9669) ? (a9670) : (t2898));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9677 = ((t2885 < t2877));
        a9678 = ((t2885 == t2877));
        a9679 = ((a9678) && (b482));
        a9680 = ((a9677) || (a9679));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a9681 = ((t2886 == t2878));
        a9682 = ((a9678) && (a9681));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9683 = ((a9682) && (b481));
        i416 = ((a9680) || (a9683));
        a9684 = (2*a9661);
        /* MPCondD 64 */
        a9685 = (2*a9684);
        P1[a9685] = ((i416) ? (t2900) : (t2894));
        a9686 = (a9685 + 1);
        P1[a9686] = ((i416) ? (t2899) : (d603));
        a9687 = (a9684 + 1);
        /* MPCondD 64 */
        a9688 = (2*a9687);
        P1[a9688] = ((i416) ? (t2896) : (d599));
        a9689 = (a9688 + 1);
        P1[a9689] = ((i416) ? (t2895) : (d597));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code1(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a9690, a9691, a9692, a9693, a9694, a9695, a9696, a9697, 
            a9698, a9699, a9700, a9701, a9702, a9703, a9704, a9705, 
            a9706, a9716, a9717, a9718, a9723, a9724, a9725, a9729, 
            a9730, a9731, a9732, a9733, a9734, a9735, a9736, a9737, 
            a9738, a9739, a9740, a9741, a9742, a9743, a9744, a9745, 
            a9753, a9754, a9755, a9756, a9757, a9758, a9759, a9760, 
            a9761, a9762, a9763, a9764, a9765, a9767, a9768, a9769, 
            a9773, a9774, a9775, a9776, a9777, a9778, a9779, a9781, 
            a9782, a9783, a9787, a9795, a9796, a9797, a9798, a9799, 
            a9800, a9801, a9802, a9803, a9804, a9805, a9806, a9807, 
            b484, b485, b486, b487, b488, b489, b490, b491, 
            b492, b493, b494, b495, b496, b497, b498, b499, 
            b500, b501, b502, c212, c213, c214, c216, c217, 
            c218, i417, i418, i419;
    uint64_t a4196, a4197, a4198, a4199, a4227, a4228, a4229, a4230, 
            a9707, a9708, a9709, a9710, a9711, a9712, a9713, a9714, 
            a9746, a9788, d604, d605, d606, d607, d608, d609, 
            d610, d611, d612, d613, d614, d615, d616, d617, 
            d618, d619, d620, d621, d622, d623, d624, d625, 
            d626, d627, d628, d629, d630, d631, t1279, t1280, 
            t1281, t1282, t1283, t1284, t1285, t1286, t1287, t1288, 
            t1289, t1290, t1291, t1292, t1293, t1294, t1295, t1296, 
            t1297, t1298, t1299, t1300, t1301, t1302, t2903, t2904, 
            t2905, t2906, t2907, t2908, t2909, t2910, t2911, t2912, 
            t2913, t2914, t2915, t2916, t2917, t2918, t2919, t2920, 
            t2921, t2922, t2923, t2924, t2925, t2926, t2927, t2928, 
            t2929, t2930, t2931, t2932, t2933, t2934, t2935, t2936, 
            t2937, t2938, t2939, t2940, t2941, t2942, t2943, t2946, 
            t2947, t2948, t2949, t2950, t2951, t2952, t2953;
    uint128_t s561, s562, s563, s564, s565, s566, s567, s568, 
            s569, s570, s571, s572;
    for(int i27 = 0; i27 <= 15; i27++) {
        a9690 = (512*i27);
        a9691 = (a9690 + threadIdx.x);
        b484 = (threadIdx.x + a9690);
        a9692 = (b484 + 8192);
        a9693 = (a9692 % 2);
        a9694 = (2 + a9693);
        /* Begin of MPModMul 128 */
        a9695 = (2*a9694);
        a9696 = (a9695 + 1);
        a9697 = (2*a9692);
        a9698 = (a9697 + 1);
        /* MPAssignDD 64 */
        a9699 = (2*a9695);
        t2903 = twiddles[a9699];
        a9700 = (a9699 + 1);
        t2904 = twiddles[a9700];
        /* MPAssignDD 64 */
        a9701 = (2*a9696);
        t2905 = twiddles[a9701];
        a9702 = (a9701 + 1);
        t2906 = twiddles[a9702];
        /* MPAssignDD 64 */
        a9703 = (2*a9697);
        t2907 = P1[a9703];
        a9704 = (a9703 + 1);
        t2908 = P1[a9704];
        /* MPAssignDD 64 */
        a9705 = (2*a9698);
        t2909 = P1[a9705];
        a9706 = (a9705 + 1);
        t2910 = P1[a9706];
        MPMulQDD_L2(t1285, t1286, t1283, t1284, t1281, t1282, t1279, t1280, 
    t2903, t2904, t2905, t2906, t2907, t2908, t2909, t2910);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2911 = (t1281 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b485 = ((int) 1);
        t2912 = (288230376151711744 - b485);
        /* MPBinAndD 64 */
        t2913 = (((t1285)&(t2912)));
        t2914 = (((t1286)&((-1))));
        /* Begin of MPShiftLeft2D */
        a9707 = (t2913 << 6);
        a9708 = (t2914 >> 58);
        t2915 = (((a9707)|(a9708)));
        t2916 = (t2914 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2917 = (t1283 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2918 = (((t2916)|(t2917)));
        /* Begin of MPShiftLeft2D */
        a9709 = (t1283 << 6);
        a9710 = (t1284 >> 58);
        t2919 = (((a9709)|(a9710)));
        t2920 = (t1284 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2921 = (((t2920)|(t2911)));
        /* End of MPShiftRight3 */
        a4196 = mu[0];
        a4197 = mu[1];
        a4198 = mu[2];
        a4199 = mu[3];
        MPMulQDD_L2(t1301, t1302, t1299, t1300, t1297, t1298, t1295, t1296, 
    t2915, t2918, t2919, t2921, a4196, a4197, a4198, a4199);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2922 = (t1301 >> 1);
        a9711 = (t1301 << 63);
        a9712 = (t1302 >> 1);
        t2923 = (((a9711)|(a9712)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2924 = (t1302 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2925 = (t1299 >> 1);
        a9713 = (t1299 << 63);
        a9714 = (t1300 >> 1);
        t2926 = (((a9713)|(a9714)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2927 = (((t2924)|(t2925)));
        /* End of MPShiftRight2 */
        a4227 = modulus[0];
        a4228 = modulus[1];
        a4229 = modulus[2];
        a4230 = modulus[3];
        MPMulQDD_L2(t1293, t1294, t1291, t1292, t1289, t1290, t1287, t1288, 
    t2922, t2923, t2927, t2926, a4227, a4228, a4229, a4230);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d604 = (t1280 - t1288);
        b486 = ((t1280 < t1288));
        d605 = (t1279 - t1287);
        d606 = (d605 - b486);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9716 = ((t1279 < t1287));
        a9717 = ((t1279 == t1287));
        a9718 = ((a9717) && (b486));
        b487 = ((a9716) || (a9718));
        /* Begin of MPSubDDD 64 */
        d607 = (t1282 - t1290);
        b488 = ((t1282 < t1290));
        d608 = (t1281 - t1289);
        d609 = (d608 - b488);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d610 = (d607 - b487);
        b489 = ((d607 < b487));
        t2928 = (d609 - b489);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d611 = (d604 - a4230);
        b490 = ((d604 < a4230));
        d612 = (d606 - a4229);
        d613 = (d612 - b490);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9723 = ((d606 < a4229));
        a9724 = ((d606 == a4229));
        a9725 = ((a9724) && (b490));
        b491 = ((a9723) || (a9725));
        /* Begin of MPSubDDD 64 */
        d614 = (d610 - a4228);
        b492 = ((d610 < a4228));
        d615 = (t2928 - a4227);
        d616 = (d615 - b492);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d617 = (d614 - b491);
        b493 = ((d614 < b491));
        t2929 = (d616 - b493);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9729 = ((t2928 < a4227));
        a9730 = ((t2928 == a4227));
        a9731 = ((a9730) && (b492));
        a9732 = ((a9729) || (a9731));
        /* MPEqual 64 */
        a9733 = ((d610 == a4228));
        a9734 = ((a9730) && (a9733));
        /* MPLessThan 64 */
        a9735 = ((a9734) && (b491));
        i417 = ((a9732) || (a9735));
        /* MPCondD 64 */
        t2930 = ((i417) ? (t2928) : (t2929));
        t2931 = ((i417) ? (d610) : (d617));
        /* MPCondD 64 */
        t2932 = ((i417) ? (d606) : (d613));
        t2933 = ((i417) ? (d604) : (d611));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a9736 = (1024*i27);
        a9737 = (2*threadIdx.x);
        a9738 = (a9736 + a9737);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a9739 = (2*a9691);
        a9740 = (a9739 + 1);
        /* MPAssignDD 64 */
        a9741 = (2*a9740);
        t2934 = P1[a9741];
        a9742 = (a9741 + 1);
        t2935 = P1[a9742];
        /* MPAddQDD 64 */
        s561 = (((uint128_t ) t2935) + ((uint128_t ) t2933));
        t2936 = ((uint64_t ) s561);
        c212 = (s561 >> 64);
        s562 = (((uint128_t ) t2934) + ((uint128_t ) t2932));
        s563 = (((uint128_t ) s562) + ((uint128_t ) c212));
        t2937 = ((uint64_t ) s563);
        c213 = (s563 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a9743 = (2*a9739);
        t2938 = P1[a9743];
        a9744 = (a9743 + 1);
        t2939 = P1[a9744];
        /* MPAddQDD 64 */
        s564 = (((uint128_t ) t2939) + ((uint128_t ) t2931));
        t2940 = ((uint64_t ) s564);
        c214 = (s564 >> 64);
        s565 = (((uint128_t ) t2938) + ((uint128_t ) t2930));
        s566 = (((uint128_t ) s565) + ((uint128_t ) c214));
        t2941 = ((uint64_t ) s566);
        /* MPPropagateCarry 64 */
        t2942 = (t2940 + c213);
        a9745 = ((t2942 == 0));
        a9746 = (t2941 + c213);
        t2943 = ((a9745) ? (a9746) : (t2941));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9753 = ((a4227 < t2943));
        a9754 = ((a4227 == t2943));
        a9755 = ((a4228 < t2942));
        a9756 = ((a9754) && (a9755));
        a9757 = ((a9753) || (a9756));
        /* MPEqual 64 */
        a9758 = ((a4228 == t2942));
        a9759 = ((a9754) && (a9758));
        /* MPLessThan 64 */
        a9760 = ((a4229 < t2937));
        a9761 = ((a4229 == t2937));
        a9762 = ((a4230 < t2936));
        a9763 = ((a9761) && (a9762));
        a9764 = ((a9760) || (a9763));
        a9765 = ((a9759) && (a9764));
        i418 = ((a9757) || (a9765));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d618 = (t2936 - a4230);
        b494 = ((t2936 < a4230));
        d619 = (t2937 - a4229);
        d620 = (d619 - b494);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9767 = ((t2937 < a4229));
        a9768 = ((t2937 == a4229));
        a9769 = ((a9768) && (b494));
        b495 = ((a9767) || (a9769));
        /* Begin of MPSubDDD 64 */
        d621 = (t2942 - a4228);
        b496 = ((t2942 < a4228));
        d622 = (t2943 - a4227);
        d623 = (d622 - b496);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d624 = (d621 - b495);
        b497 = ((d621 < b495));
        t2946 = (d623 - b497);
        /* End of MPSubDDD 128 */
        a9773 = (2*a9738);
        /* MPCondD 64 */
        a9774 = (2*a9773);
        P2[a9774] = ((i418) ? (t2946) : (t2943));
        a9775 = (a9774 + 1);
        P2[a9775] = ((i418) ? (d624) : (t2942));
        a9776 = (a9773 + 1);
        /* MPCondD 64 */
        a9777 = (2*a9776);
        P2[a9777] = ((i418) ? (d620) : (t2937));
        a9778 = (a9777 + 1);
        P2[a9778] = ((i418) ? (d618) : (t2936));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b498 = (a9737 + a9736);
        a9779 = (b498 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d625 = (t2935 - t2933);
        b499 = ((t2935 < t2933));
        d626 = (t2934 - t2932);
        d627 = (d626 - b499);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9781 = ((t2934 < t2932));
        a9782 = ((t2934 == t2932));
        a9783 = ((a9782) && (b499));
        b500 = ((a9781) || (a9783));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d628 = (t2939 - t2931);
        b501 = ((t2939 < t2931));
        d629 = (t2938 - t2930);
        d630 = (d629 - b501);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d631 = (d628 - b500);
        b502 = ((d628 < b500));
        t2947 = (d630 - b502);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s567 = (((uint128_t ) d625) + ((uint128_t ) a4230));
        t2948 = ((uint64_t ) s567);
        c216 = (s567 >> 64);
        s568 = (((uint128_t ) d627) + ((uint128_t ) a4229));
        s569 = (((uint128_t ) s568) + ((uint128_t ) c216));
        t2949 = ((uint64_t ) s569);
        c217 = (s569 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s570 = (((uint128_t ) d631) + ((uint128_t ) a4228));
        t2950 = ((uint64_t ) s570);
        c218 = (s570 >> 64);
        s571 = (((uint128_t ) t2947) + ((uint128_t ) a4227));
        s572 = (((uint128_t ) s571) + ((uint128_t ) c218));
        t2951 = ((uint64_t ) s572);
        /* MPPropagateCarry 64 */
        t2952 = (t2950 + c217);
        a9787 = ((t2952 == 0));
        a9788 = (t2951 + c217);
        t2953 = ((a9787) ? (a9788) : (t2951));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9795 = ((t2938 < t2930));
        a9796 = ((t2938 == t2930));
        a9797 = ((a9796) && (b501));
        a9798 = ((a9795) || (a9797));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a9799 = ((t2939 == t2931));
        a9800 = ((a9796) && (a9799));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9801 = ((a9800) && (b500));
        i419 = ((a9798) || (a9801));
        a9802 = (2*a9779);
        /* MPCondD 64 */
        a9803 = (2*a9802);
        P2[a9803] = ((i419) ? (t2953) : (t2947));
        a9804 = (a9803 + 1);
        P2[a9804] = ((i419) ? (t2952) : (d631));
        a9805 = (a9802 + 1);
        /* MPCondD 64 */
        a9806 = (2*a9805);
        P2[a9806] = ((i419) ? (t2949) : (d627));
        a9807 = (a9806 + 1);
        P2[a9807] = ((i419) ? (t2948) : (d625));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code2(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a9808, a9809, a9810, a9811, a9812, a9813, a9814, a9815, 
            a9816, a9817, a9818, a9819, a9820, a9821, a9822, a9823, 
            a9824, a9834, a9835, a9836, a9841, a9842, a9843, a9847, 
            a9848, a9849, a9850, a9851, a9852, a9853, a9854, a9855, 
            a9856, a9857, a9858, a9859, a9860, a9861, a9862, a9863, 
            a9871, a9872, a9873, a9874, a9875, a9876, a9877, a9878, 
            a9879, a9880, a9881, a9882, a9883, a9885, a9886, a9887, 
            a9891, a9892, a9893, a9894, a9895, a9896, a9897, a9899, 
            a9900, a9901, a9905, a9913, a9914, a9915, a9916, a9917, 
            a9918, a9919, a9920, a9921, a9922, a9923, a9924, a9925, 
            b503, b504, b505, b506, b507, b508, b509, b510, 
            b511, b512, b513, b514, b515, b516, b517, b518, 
            b519, b520, b521, c220, c221, c222, c224, c225, 
            c226, i420, i421, i422;
    uint64_t a4612, a4613, a4614, a4615, a4643, a4644, a4645, a4646, 
            a9825, a9826, a9827, a9828, a9829, a9830, a9831, a9832, 
            a9864, a9906, d632, d633, d634, d635, d636, d637, 
            d638, d639, d640, d641, d642, d643, d644, d645, 
            d646, d647, d648, d649, d650, d651, d652, d653, 
            d654, d655, d656, d657, d658, d659, t1311, t1312, 
            t1313, t1314, t1315, t1316, t1317, t1318, t1319, t1320, 
            t1321, t1322, t1323, t1324, t1325, t1326, t1327, t1328, 
            t1329, t1330, t1331, t1332, t1333, t1334, t2956, t2957, 
            t2958, t2959, t2960, t2961, t2962, t2963, t2964, t2965, 
            t2966, t2967, t2968, t2969, t2970, t2971, t2972, t2973, 
            t2974, t2975, t2976, t2977, t2978, t2979, t2980, t2981, 
            t2982, t2983, t2984, t2985, t2986, t2987, t2988, t2989, 
            t2990, t2991, t2992, t2993, t2994, t2995, t2996, t2999, 
            t3000, t3001, t3002, t3003, t3004, t3005, t3006;
    uint128_t s573, s574, s575, s576, s577, s578, s579, s580, 
            s581, s582, s583, s584;
    for(int i25 = 0; i25 <= 15; i25++) {
        a9808 = (512*i25);
        a9809 = (a9808 + threadIdx.x);
        b503 = (threadIdx.x + a9808);
        a9810 = (b503 + 8192);
        a9811 = (a9810 % 4);
        a9812 = (4 + a9811);
        /* Begin of MPModMul 128 */
        a9813 = (2*a9812);
        a9814 = (a9813 + 1);
        a9815 = (2*a9810);
        a9816 = (a9815 + 1);
        /* MPAssignDD 64 */
        a9817 = (2*a9813);
        t2956 = twiddles[a9817];
        a9818 = (a9817 + 1);
        t2957 = twiddles[a9818];
        /* MPAssignDD 64 */
        a9819 = (2*a9814);
        t2958 = twiddles[a9819];
        a9820 = (a9819 + 1);
        t2959 = twiddles[a9820];
        /* MPAssignDD 64 */
        a9821 = (2*a9815);
        t2960 = P2[a9821];
        a9822 = (a9821 + 1);
        t2961 = P2[a9822];
        /* MPAssignDD 64 */
        a9823 = (2*a9816);
        t2962 = P2[a9823];
        a9824 = (a9823 + 1);
        t2963 = P2[a9824];
        MPMulQDD_L2(t1317, t1318, t1315, t1316, t1313, t1314, t1311, t1312, 
    t2956, t2957, t2958, t2959, t2960, t2961, t2962, t2963);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2964 = (t1313 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b504 = ((int) 1);
        t2965 = (288230376151711744 - b504);
        /* MPBinAndD 64 */
        t2966 = (((t1317)&(t2965)));
        t2967 = (((t1318)&((-1))));
        /* Begin of MPShiftLeft2D */
        a9825 = (t2966 << 6);
        a9826 = (t2967 >> 58);
        t2968 = (((a9825)|(a9826)));
        t2969 = (t2967 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2970 = (t1315 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2971 = (((t2969)|(t2970)));
        /* Begin of MPShiftLeft2D */
        a9827 = (t1315 << 6);
        a9828 = (t1316 >> 58);
        t2972 = (((a9827)|(a9828)));
        t2973 = (t1316 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2974 = (((t2973)|(t2964)));
        /* End of MPShiftRight3 */
        a4612 = mu[0];
        a4613 = mu[1];
        a4614 = mu[2];
        a4615 = mu[3];
        MPMulQDD_L2(t1333, t1334, t1331, t1332, t1329, t1330, t1327, t1328, 
    t2968, t2971, t2972, t2974, a4612, a4613, a4614, a4615);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2975 = (t1333 >> 1);
        a9829 = (t1333 << 63);
        a9830 = (t1334 >> 1);
        t2976 = (((a9829)|(a9830)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2977 = (t1334 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2978 = (t1331 >> 1);
        a9831 = (t1331 << 63);
        a9832 = (t1332 >> 1);
        t2979 = (((a9831)|(a9832)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2980 = (((t2977)|(t2978)));
        /* End of MPShiftRight2 */
        a4643 = modulus[0];
        a4644 = modulus[1];
        a4645 = modulus[2];
        a4646 = modulus[3];
        MPMulQDD_L2(t1325, t1326, t1323, t1324, t1321, t1322, t1319, t1320, 
    t2975, t2976, t2980, t2979, a4643, a4644, a4645, a4646);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d632 = (t1312 - t1320);
        b505 = ((t1312 < t1320));
        d633 = (t1311 - t1319);
        d634 = (d633 - b505);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9834 = ((t1311 < t1319));
        a9835 = ((t1311 == t1319));
        a9836 = ((a9835) && (b505));
        b506 = ((a9834) || (a9836));
        /* Begin of MPSubDDD 64 */
        d635 = (t1314 - t1322);
        b507 = ((t1314 < t1322));
        d636 = (t1313 - t1321);
        d637 = (d636 - b507);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d638 = (d635 - b506);
        b508 = ((d635 < b506));
        t2981 = (d637 - b508);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d639 = (d632 - a4646);
        b509 = ((d632 < a4646));
        d640 = (d634 - a4645);
        d641 = (d640 - b509);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9841 = ((d634 < a4645));
        a9842 = ((d634 == a4645));
        a9843 = ((a9842) && (b509));
        b510 = ((a9841) || (a9843));
        /* Begin of MPSubDDD 64 */
        d642 = (d638 - a4644);
        b511 = ((d638 < a4644));
        d643 = (t2981 - a4643);
        d644 = (d643 - b511);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d645 = (d642 - b510);
        b512 = ((d642 < b510));
        t2982 = (d644 - b512);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9847 = ((t2981 < a4643));
        a9848 = ((t2981 == a4643));
        a9849 = ((a9848) && (b511));
        a9850 = ((a9847) || (a9849));
        /* MPEqual 64 */
        a9851 = ((d638 == a4644));
        a9852 = ((a9848) && (a9851));
        /* MPLessThan 64 */
        a9853 = ((a9852) && (b510));
        i420 = ((a9850) || (a9853));
        /* MPCondD 64 */
        t2983 = ((i420) ? (t2981) : (t2982));
        t2984 = ((i420) ? (d638) : (d645));
        /* MPCondD 64 */
        t2985 = ((i420) ? (d634) : (d641));
        t2986 = ((i420) ? (d632) : (d639));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a9854 = (1024*i25);
        a9855 = (2*threadIdx.x);
        a9856 = (a9854 + a9855);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a9857 = (2*a9809);
        a9858 = (a9857 + 1);
        /* MPAssignDD 64 */
        a9859 = (2*a9858);
        t2987 = P2[a9859];
        a9860 = (a9859 + 1);
        t2988 = P2[a9860];
        /* MPAddQDD 64 */
        s573 = (((uint128_t ) t2988) + ((uint128_t ) t2986));
        t2989 = ((uint64_t ) s573);
        c220 = (s573 >> 64);
        s574 = (((uint128_t ) t2987) + ((uint128_t ) t2985));
        s575 = (((uint128_t ) s574) + ((uint128_t ) c220));
        t2990 = ((uint64_t ) s575);
        c221 = (s575 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a9861 = (2*a9857);
        t2991 = P2[a9861];
        a9862 = (a9861 + 1);
        t2992 = P2[a9862];
        /* MPAddQDD 64 */
        s576 = (((uint128_t ) t2992) + ((uint128_t ) t2984));
        t2993 = ((uint64_t ) s576);
        c222 = (s576 >> 64);
        s577 = (((uint128_t ) t2991) + ((uint128_t ) t2983));
        s578 = (((uint128_t ) s577) + ((uint128_t ) c222));
        t2994 = ((uint64_t ) s578);
        /* MPPropagateCarry 64 */
        t2995 = (t2993 + c221);
        a9863 = ((t2995 == 0));
        a9864 = (t2994 + c221);
        t2996 = ((a9863) ? (a9864) : (t2994));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9871 = ((a4643 < t2996));
        a9872 = ((a4643 == t2996));
        a9873 = ((a4644 < t2995));
        a9874 = ((a9872) && (a9873));
        a9875 = ((a9871) || (a9874));
        /* MPEqual 64 */
        a9876 = ((a4644 == t2995));
        a9877 = ((a9872) && (a9876));
        /* MPLessThan 64 */
        a9878 = ((a4645 < t2990));
        a9879 = ((a4645 == t2990));
        a9880 = ((a4646 < t2989));
        a9881 = ((a9879) && (a9880));
        a9882 = ((a9878) || (a9881));
        a9883 = ((a9877) && (a9882));
        i421 = ((a9875) || (a9883));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d646 = (t2989 - a4646);
        b513 = ((t2989 < a4646));
        d647 = (t2990 - a4645);
        d648 = (d647 - b513);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9885 = ((t2990 < a4645));
        a9886 = ((t2990 == a4645));
        a9887 = ((a9886) && (b513));
        b514 = ((a9885) || (a9887));
        /* Begin of MPSubDDD 64 */
        d649 = (t2995 - a4644);
        b515 = ((t2995 < a4644));
        d650 = (t2996 - a4643);
        d651 = (d650 - b515);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d652 = (d649 - b514);
        b516 = ((d649 < b514));
        t2999 = (d651 - b516);
        /* End of MPSubDDD 128 */
        a9891 = (2*a9856);
        /* MPCondD 64 */
        a9892 = (2*a9891);
        P1[a9892] = ((i421) ? (t2999) : (t2996));
        a9893 = (a9892 + 1);
        P1[a9893] = ((i421) ? (d652) : (t2995));
        a9894 = (a9891 + 1);
        /* MPCondD 64 */
        a9895 = (2*a9894);
        P1[a9895] = ((i421) ? (d648) : (t2990));
        a9896 = (a9895 + 1);
        P1[a9896] = ((i421) ? (d646) : (t2989));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b517 = (a9855 + a9854);
        a9897 = (b517 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d653 = (t2988 - t2986);
        b518 = ((t2988 < t2986));
        d654 = (t2987 - t2985);
        d655 = (d654 - b518);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9899 = ((t2987 < t2985));
        a9900 = ((t2987 == t2985));
        a9901 = ((a9900) && (b518));
        b519 = ((a9899) || (a9901));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d656 = (t2992 - t2984);
        b520 = ((t2992 < t2984));
        d657 = (t2991 - t2983);
        d658 = (d657 - b520);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d659 = (d656 - b519);
        b521 = ((d656 < b519));
        t3000 = (d658 - b521);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s579 = (((uint128_t ) d653) + ((uint128_t ) a4646));
        t3001 = ((uint64_t ) s579);
        c224 = (s579 >> 64);
        s580 = (((uint128_t ) d655) + ((uint128_t ) a4645));
        s581 = (((uint128_t ) s580) + ((uint128_t ) c224));
        t3002 = ((uint64_t ) s581);
        c225 = (s581 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s582 = (((uint128_t ) d659) + ((uint128_t ) a4644));
        t3003 = ((uint64_t ) s582);
        c226 = (s582 >> 64);
        s583 = (((uint128_t ) t3000) + ((uint128_t ) a4643));
        s584 = (((uint128_t ) s583) + ((uint128_t ) c226));
        t3004 = ((uint64_t ) s584);
        /* MPPropagateCarry 64 */
        t3005 = (t3003 + c225);
        a9905 = ((t3005 == 0));
        a9906 = (t3004 + c225);
        t3006 = ((a9905) ? (a9906) : (t3004));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9913 = ((t2991 < t2983));
        a9914 = ((t2991 == t2983));
        a9915 = ((a9914) && (b520));
        a9916 = ((a9913) || (a9915));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a9917 = ((t2992 == t2984));
        a9918 = ((a9914) && (a9917));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a9919 = ((a9918) && (b519));
        i422 = ((a9916) || (a9919));
        a9920 = (2*a9897);
        /* MPCondD 64 */
        a9921 = (2*a9920);
        P1[a9921] = ((i422) ? (t3006) : (t3000));
        a9922 = (a9921 + 1);
        P1[a9922] = ((i422) ? (t3005) : (d659));
        a9923 = (a9920 + 1);
        /* MPCondD 64 */
        a9924 = (2*a9923);
        P1[a9924] = ((i422) ? (t3002) : (d655));
        a9925 = (a9924 + 1);
        P1[a9925] = ((i422) ? (t3001) : (d653));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code3(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10000, a10001, a10003, a10004, a10005, a10009, a10010, a10011, 
            a10012, a10013, a10014, a10015, a10017, a10018, a10019, a10023, 
            a10031, a10032, a10033, a10034, a10035, a10036, a10037, a10038, 
            a10039, a10040, a10041, a10042, a10043, a9926, a9927, a9928, 
            a9929, a9930, a9931, a9932, a9933, a9934, a9935, a9936, 
            a9937, a9938, a9939, a9940, a9941, a9942, a9952, a9953, 
            a9954, a9959, a9960, a9961, a9965, a9966, a9967, a9968, 
            a9969, a9970, a9971, a9972, a9973, a9974, a9975, a9976, 
            a9977, a9978, a9979, a9980, a9981, a9989, a9990, a9991, 
            a9992, a9993, a9994, a9995, a9996, a9997, a9998, a9999, 
            b522, b523, b524, b525, b526, b527, b528, b529, 
            b530, b531, b532, b533, b534, b535, b536, b537, 
            b538, b539, b540, c228, c229, c230, c232, c233, 
            c234, i423, i424, i425;
    uint64_t a10024, a5028, a5029, a5030, a5031, a5059, a5060, a5061, 
            a5062, a9943, a9944, a9945, a9946, a9947, a9948, a9949, 
            a9950, a9982, d660, d661, d662, d663, d664, d665, 
            d666, d667, d668, d669, d670, d671, d672, d673, 
            d674, d675, d676, d677, d678, d679, d680, d681, 
            d682, d683, d684, d685, d686, d687, t1343, t1344, 
            t1345, t1346, t1347, t1348, t1349, t1350, t1351, t1352, 
            t1353, t1354, t1355, t1356, t1357, t1358, t1359, t1360, 
            t1361, t1362, t1363, t1364, t1365, t1366, t3009, t3010, 
            t3011, t3012, t3013, t3014, t3015, t3016, t3017, t3018, 
            t3019, t3020, t3021, t3022, t3023, t3024, t3025, t3026, 
            t3027, t3028, t3029, t3030, t3031, t3032, t3033, t3034, 
            t3035, t3036, t3037, t3038, t3039, t3040, t3041, t3042, 
            t3043, t3044, t3045, t3046, t3047, t3048, t3049, t3052, 
            t3053, t3054, t3055, t3056, t3057, t3058, t3059;
    uint128_t s585, s586, s587, s588, s589, s590, s591, s592, 
            s593, s594, s595, s596;
    for(int i23 = 0; i23 <= 15; i23++) {
        a9926 = (512*i23);
        a9927 = (a9926 + threadIdx.x);
        b522 = (threadIdx.x + a9926);
        a9928 = (b522 + 8192);
        a9929 = (a9928 % 8);
        a9930 = (8 + a9929);
        /* Begin of MPModMul 128 */
        a9931 = (2*a9930);
        a9932 = (a9931 + 1);
        a9933 = (2*a9928);
        a9934 = (a9933 + 1);
        /* MPAssignDD 64 */
        a9935 = (2*a9931);
        t3009 = twiddles[a9935];
        a9936 = (a9935 + 1);
        t3010 = twiddles[a9936];
        /* MPAssignDD 64 */
        a9937 = (2*a9932);
        t3011 = twiddles[a9937];
        a9938 = (a9937 + 1);
        t3012 = twiddles[a9938];
        /* MPAssignDD 64 */
        a9939 = (2*a9933);
        t3013 = P1[a9939];
        a9940 = (a9939 + 1);
        t3014 = P1[a9940];
        /* MPAssignDD 64 */
        a9941 = (2*a9934);
        t3015 = P1[a9941];
        a9942 = (a9941 + 1);
        t3016 = P1[a9942];
        MPMulQDD_L2(t1349, t1350, t1347, t1348, t1345, t1346, t1343, t1344, 
    t3009, t3010, t3011, t3012, t3013, t3014, t3015, t3016);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3017 = (t1345 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b523 = ((int) 1);
        t3018 = (288230376151711744 - b523);
        /* MPBinAndD 64 */
        t3019 = (((t1349)&(t3018)));
        t3020 = (((t1350)&((-1))));
        /* Begin of MPShiftLeft2D */
        a9943 = (t3019 << 6);
        a9944 = (t3020 >> 58);
        t3021 = (((a9943)|(a9944)));
        t3022 = (t3020 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3023 = (t1347 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3024 = (((t3022)|(t3023)));
        /* Begin of MPShiftLeft2D */
        a9945 = (t1347 << 6);
        a9946 = (t1348 >> 58);
        t3025 = (((a9945)|(a9946)));
        t3026 = (t1348 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3027 = (((t3026)|(t3017)));
        /* End of MPShiftRight3 */
        a5028 = mu[0];
        a5029 = mu[1];
        a5030 = mu[2];
        a5031 = mu[3];
        MPMulQDD_L2(t1365, t1366, t1363, t1364, t1361, t1362, t1359, t1360, 
    t3021, t3024, t3025, t3027, a5028, a5029, a5030, a5031);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3028 = (t1365 >> 1);
        a9947 = (t1365 << 63);
        a9948 = (t1366 >> 1);
        t3029 = (((a9947)|(a9948)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3030 = (t1366 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3031 = (t1363 >> 1);
        a9949 = (t1363 << 63);
        a9950 = (t1364 >> 1);
        t3032 = (((a9949)|(a9950)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3033 = (((t3030)|(t3031)));
        /* End of MPShiftRight2 */
        a5059 = modulus[0];
        a5060 = modulus[1];
        a5061 = modulus[2];
        a5062 = modulus[3];
        MPMulQDD_L2(t1357, t1358, t1355, t1356, t1353, t1354, t1351, t1352, 
    t3028, t3029, t3033, t3032, a5059, a5060, a5061, a5062);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d660 = (t1344 - t1352);
        b524 = ((t1344 < t1352));
        d661 = (t1343 - t1351);
        d662 = (d661 - b524);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9952 = ((t1343 < t1351));
        a9953 = ((t1343 == t1351));
        a9954 = ((a9953) && (b524));
        b525 = ((a9952) || (a9954));
        /* Begin of MPSubDDD 64 */
        d663 = (t1346 - t1354);
        b526 = ((t1346 < t1354));
        d664 = (t1345 - t1353);
        d665 = (d664 - b526);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d666 = (d663 - b525);
        b527 = ((d663 < b525));
        t3034 = (d665 - b527);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d667 = (d660 - a5062);
        b528 = ((d660 < a5062));
        d668 = (d662 - a5061);
        d669 = (d668 - b528);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a9959 = ((d662 < a5061));
        a9960 = ((d662 == a5061));
        a9961 = ((a9960) && (b528));
        b529 = ((a9959) || (a9961));
        /* Begin of MPSubDDD 64 */
        d670 = (d666 - a5060);
        b530 = ((d666 < a5060));
        d671 = (t3034 - a5059);
        d672 = (d671 - b530);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d673 = (d670 - b529);
        b531 = ((d670 < b529));
        t3035 = (d672 - b531);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9965 = ((t3034 < a5059));
        a9966 = ((t3034 == a5059));
        a9967 = ((a9966) && (b530));
        a9968 = ((a9965) || (a9967));
        /* MPEqual 64 */
        a9969 = ((d666 == a5060));
        a9970 = ((a9966) && (a9969));
        /* MPLessThan 64 */
        a9971 = ((a9970) && (b529));
        i423 = ((a9968) || (a9971));
        /* MPCondD 64 */
        t3036 = ((i423) ? (t3034) : (t3035));
        t3037 = ((i423) ? (d666) : (d673));
        /* MPCondD 64 */
        t3038 = ((i423) ? (d662) : (d669));
        t3039 = ((i423) ? (d660) : (d667));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a9972 = (1024*i23);
        a9973 = (2*threadIdx.x);
        a9974 = (a9972 + a9973);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a9975 = (2*a9927);
        a9976 = (a9975 + 1);
        /* MPAssignDD 64 */
        a9977 = (2*a9976);
        t3040 = P1[a9977];
        a9978 = (a9977 + 1);
        t3041 = P1[a9978];
        /* MPAddQDD 64 */
        s585 = (((uint128_t ) t3041) + ((uint128_t ) t3039));
        t3042 = ((uint64_t ) s585);
        c228 = (s585 >> 64);
        s586 = (((uint128_t ) t3040) + ((uint128_t ) t3038));
        s587 = (((uint128_t ) s586) + ((uint128_t ) c228));
        t3043 = ((uint64_t ) s587);
        c229 = (s587 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a9979 = (2*a9975);
        t3044 = P1[a9979];
        a9980 = (a9979 + 1);
        t3045 = P1[a9980];
        /* MPAddQDD 64 */
        s588 = (((uint128_t ) t3045) + ((uint128_t ) t3037));
        t3046 = ((uint64_t ) s588);
        c230 = (s588 >> 64);
        s589 = (((uint128_t ) t3044) + ((uint128_t ) t3036));
        s590 = (((uint128_t ) s589) + ((uint128_t ) c230));
        t3047 = ((uint64_t ) s590);
        /* MPPropagateCarry 64 */
        t3048 = (t3046 + c229);
        a9981 = ((t3048 == 0));
        a9982 = (t3047 + c229);
        t3049 = ((a9981) ? (a9982) : (t3047));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a9989 = ((a5059 < t3049));
        a9990 = ((a5059 == t3049));
        a9991 = ((a5060 < t3048));
        a9992 = ((a9990) && (a9991));
        a9993 = ((a9989) || (a9992));
        /* MPEqual 64 */
        a9994 = ((a5060 == t3048));
        a9995 = ((a9990) && (a9994));
        /* MPLessThan 64 */
        a9996 = ((a5061 < t3043));
        a9997 = ((a5061 == t3043));
        a9998 = ((a5062 < t3042));
        a9999 = ((a9997) && (a9998));
        a10000 = ((a9996) || (a9999));
        a10001 = ((a9995) && (a10000));
        i424 = ((a9993) || (a10001));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d674 = (t3042 - a5062);
        b532 = ((t3042 < a5062));
        d675 = (t3043 - a5061);
        d676 = (d675 - b532);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10003 = ((t3043 < a5061));
        a10004 = ((t3043 == a5061));
        a10005 = ((a10004) && (b532));
        b533 = ((a10003) || (a10005));
        /* Begin of MPSubDDD 64 */
        d677 = (t3048 - a5060);
        b534 = ((t3048 < a5060));
        d678 = (t3049 - a5059);
        d679 = (d678 - b534);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d680 = (d677 - b533);
        b535 = ((d677 < b533));
        t3052 = (d679 - b535);
        /* End of MPSubDDD 128 */
        a10009 = (2*a9974);
        /* MPCondD 64 */
        a10010 = (2*a10009);
        P2[a10010] = ((i424) ? (t3052) : (t3049));
        a10011 = (a10010 + 1);
        P2[a10011] = ((i424) ? (d680) : (t3048));
        a10012 = (a10009 + 1);
        /* MPCondD 64 */
        a10013 = (2*a10012);
        P2[a10013] = ((i424) ? (d676) : (t3043));
        a10014 = (a10013 + 1);
        P2[a10014] = ((i424) ? (d674) : (t3042));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b536 = (a9973 + a9972);
        a10015 = (b536 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d681 = (t3041 - t3039);
        b537 = ((t3041 < t3039));
        d682 = (t3040 - t3038);
        d683 = (d682 - b537);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10017 = ((t3040 < t3038));
        a10018 = ((t3040 == t3038));
        a10019 = ((a10018) && (b537));
        b538 = ((a10017) || (a10019));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d684 = (t3045 - t3037);
        b539 = ((t3045 < t3037));
        d685 = (t3044 - t3036);
        d686 = (d685 - b539);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d687 = (d684 - b538);
        b540 = ((d684 < b538));
        t3053 = (d686 - b540);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s591 = (((uint128_t ) d681) + ((uint128_t ) a5062));
        t3054 = ((uint64_t ) s591);
        c232 = (s591 >> 64);
        s592 = (((uint128_t ) d683) + ((uint128_t ) a5061));
        s593 = (((uint128_t ) s592) + ((uint128_t ) c232));
        t3055 = ((uint64_t ) s593);
        c233 = (s593 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s594 = (((uint128_t ) d687) + ((uint128_t ) a5060));
        t3056 = ((uint64_t ) s594);
        c234 = (s594 >> 64);
        s595 = (((uint128_t ) t3053) + ((uint128_t ) a5059));
        s596 = (((uint128_t ) s595) + ((uint128_t ) c234));
        t3057 = ((uint64_t ) s596);
        /* MPPropagateCarry 64 */
        t3058 = (t3056 + c233);
        a10023 = ((t3058 == 0));
        a10024 = (t3057 + c233);
        t3059 = ((a10023) ? (a10024) : (t3057));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10031 = ((t3044 < t3036));
        a10032 = ((t3044 == t3036));
        a10033 = ((a10032) && (b539));
        a10034 = ((a10031) || (a10033));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10035 = ((t3045 == t3037));
        a10036 = ((a10032) && (a10035));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10037 = ((a10036) && (b538));
        i425 = ((a10034) || (a10037));
        a10038 = (2*a10015);
        /* MPCondD 64 */
        a10039 = (2*a10038);
        P2[a10039] = ((i425) ? (t3059) : (t3053));
        a10040 = (a10039 + 1);
        P2[a10040] = ((i425) ? (t3058) : (d687));
        a10041 = (a10038 + 1);
        /* MPCondD 64 */
        a10042 = (2*a10041);
        P2[a10042] = ((i425) ? (t3055) : (d683));
        a10043 = (a10042 + 1);
        P2[a10043] = ((i425) ? (t3054) : (d681));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code4(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10044, a10045, a10046, a10047, a10048, a10049, a10050, a10051, 
            a10052, a10053, a10054, a10055, a10056, a10057, a10058, a10059, 
            a10060, a10070, a10071, a10072, a10077, a10078, a10079, a10083, 
            a10084, a10085, a10086, a10087, a10088, a10089, a10090, a10091, 
            a10092, a10093, a10094, a10095, a10096, a10097, a10098, a10099, 
            a10107, a10108, a10109, a10110, a10111, a10112, a10113, a10114, 
            a10115, a10116, a10117, a10118, a10119, a10121, a10122, a10123, 
            a10127, a10128, a10129, a10130, a10131, a10132, a10133, a10135, 
            a10136, a10137, a10141, a10149, a10150, a10151, a10152, a10153, 
            a10154, a10155, a10156, a10157, a10158, a10159, a10160, a10161, 
            b541, b542, b543, b544, b545, b546, b547, b548, 
            b549, b550, b551, b552, b553, b554, b555, b556, 
            b557, b558, b559, c236, c237, c238, c240, c241, 
            c242, i426, i427, i428;
    uint64_t a10061, a10062, a10063, a10064, a10065, a10066, a10067, a10068, 
            a10100, a10142, a5444, a5445, a5446, a5447, a5475, a5476, 
            a5477, a5478, d688, d689, d690, d691, d692, d693, 
            d694, d695, d696, d697, d698, d699, d700, d701, 
            d702, d703, d704, d705, d706, d707, d708, d709, 
            d710, d711, d712, d713, d714, d715, t1375, t1376, 
            t1377, t1378, t1379, t1380, t1381, t1382, t1383, t1384, 
            t1385, t1386, t1387, t1388, t1389, t1390, t1391, t1392, 
            t1393, t1394, t1395, t1396, t1397, t1398, t3062, t3063, 
            t3064, t3065, t3066, t3067, t3068, t3069, t3070, t3071, 
            t3072, t3073, t3074, t3075, t3076, t3077, t3078, t3079, 
            t3080, t3081, t3082, t3083, t3084, t3085, t3086, t3087, 
            t3088, t3089, t3090, t3091, t3092, t3093, t3094, t3095, 
            t3096, t3097, t3098, t3099, t3100, t3101, t3102, t3105, 
            t3106, t3107, t3108, t3109, t3110, t3111, t3112;
    uint128_t s597, s598, s599, s600, s601, s602, s603, s604, 
            s605, s606, s607, s608;
    for(int i21 = 0; i21 <= 15; i21++) {
        a10044 = (512*i21);
        a10045 = (a10044 + threadIdx.x);
        b541 = (threadIdx.x + a10044);
        a10046 = (b541 + 8192);
        a10047 = (a10046 % 16);
        a10048 = (16 + a10047);
        /* Begin of MPModMul 128 */
        a10049 = (2*a10048);
        a10050 = (a10049 + 1);
        a10051 = (2*a10046);
        a10052 = (a10051 + 1);
        /* MPAssignDD 64 */
        a10053 = (2*a10049);
        t3062 = twiddles[a10053];
        a10054 = (a10053 + 1);
        t3063 = twiddles[a10054];
        /* MPAssignDD 64 */
        a10055 = (2*a10050);
        t3064 = twiddles[a10055];
        a10056 = (a10055 + 1);
        t3065 = twiddles[a10056];
        /* MPAssignDD 64 */
        a10057 = (2*a10051);
        t3066 = P2[a10057];
        a10058 = (a10057 + 1);
        t3067 = P2[a10058];
        /* MPAssignDD 64 */
        a10059 = (2*a10052);
        t3068 = P2[a10059];
        a10060 = (a10059 + 1);
        t3069 = P2[a10060];
        MPMulQDD_L2(t1381, t1382, t1379, t1380, t1377, t1378, t1375, t1376, 
    t3062, t3063, t3064, t3065, t3066, t3067, t3068, t3069);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3070 = (t1377 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b542 = ((int) 1);
        t3071 = (288230376151711744 - b542);
        /* MPBinAndD 64 */
        t3072 = (((t1381)&(t3071)));
        t3073 = (((t1382)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10061 = (t3072 << 6);
        a10062 = (t3073 >> 58);
        t3074 = (((a10061)|(a10062)));
        t3075 = (t3073 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3076 = (t1379 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3077 = (((t3075)|(t3076)));
        /* Begin of MPShiftLeft2D */
        a10063 = (t1379 << 6);
        a10064 = (t1380 >> 58);
        t3078 = (((a10063)|(a10064)));
        t3079 = (t1380 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3080 = (((t3079)|(t3070)));
        /* End of MPShiftRight3 */
        a5444 = mu[0];
        a5445 = mu[1];
        a5446 = mu[2];
        a5447 = mu[3];
        MPMulQDD_L2(t1397, t1398, t1395, t1396, t1393, t1394, t1391, t1392, 
    t3074, t3077, t3078, t3080, a5444, a5445, a5446, a5447);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3081 = (t1397 >> 1);
        a10065 = (t1397 << 63);
        a10066 = (t1398 >> 1);
        t3082 = (((a10065)|(a10066)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3083 = (t1398 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3084 = (t1395 >> 1);
        a10067 = (t1395 << 63);
        a10068 = (t1396 >> 1);
        t3085 = (((a10067)|(a10068)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3086 = (((t3083)|(t3084)));
        /* End of MPShiftRight2 */
        a5475 = modulus[0];
        a5476 = modulus[1];
        a5477 = modulus[2];
        a5478 = modulus[3];
        MPMulQDD_L2(t1389, t1390, t1387, t1388, t1385, t1386, t1383, t1384, 
    t3081, t3082, t3086, t3085, a5475, a5476, a5477, a5478);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d688 = (t1376 - t1384);
        b543 = ((t1376 < t1384));
        d689 = (t1375 - t1383);
        d690 = (d689 - b543);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10070 = ((t1375 < t1383));
        a10071 = ((t1375 == t1383));
        a10072 = ((a10071) && (b543));
        b544 = ((a10070) || (a10072));
        /* Begin of MPSubDDD 64 */
        d691 = (t1378 - t1386);
        b545 = ((t1378 < t1386));
        d692 = (t1377 - t1385);
        d693 = (d692 - b545);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d694 = (d691 - b544);
        b546 = ((d691 < b544));
        t3087 = (d693 - b546);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d695 = (d688 - a5478);
        b547 = ((d688 < a5478));
        d696 = (d690 - a5477);
        d697 = (d696 - b547);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10077 = ((d690 < a5477));
        a10078 = ((d690 == a5477));
        a10079 = ((a10078) && (b547));
        b548 = ((a10077) || (a10079));
        /* Begin of MPSubDDD 64 */
        d698 = (d694 - a5476);
        b549 = ((d694 < a5476));
        d699 = (t3087 - a5475);
        d700 = (d699 - b549);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d701 = (d698 - b548);
        b550 = ((d698 < b548));
        t3088 = (d700 - b550);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10083 = ((t3087 < a5475));
        a10084 = ((t3087 == a5475));
        a10085 = ((a10084) && (b549));
        a10086 = ((a10083) || (a10085));
        /* MPEqual 64 */
        a10087 = ((d694 == a5476));
        a10088 = ((a10084) && (a10087));
        /* MPLessThan 64 */
        a10089 = ((a10088) && (b548));
        i426 = ((a10086) || (a10089));
        /* MPCondD 64 */
        t3089 = ((i426) ? (t3087) : (t3088));
        t3090 = ((i426) ? (d694) : (d701));
        /* MPCondD 64 */
        t3091 = ((i426) ? (d690) : (d697));
        t3092 = ((i426) ? (d688) : (d695));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10090 = (1024*i21);
        a10091 = (2*threadIdx.x);
        a10092 = (a10090 + a10091);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10093 = (2*a10045);
        a10094 = (a10093 + 1);
        /* MPAssignDD 64 */
        a10095 = (2*a10094);
        t3093 = P2[a10095];
        a10096 = (a10095 + 1);
        t3094 = P2[a10096];
        /* MPAddQDD 64 */
        s597 = (((uint128_t ) t3094) + ((uint128_t ) t3092));
        t3095 = ((uint64_t ) s597);
        c236 = (s597 >> 64);
        s598 = (((uint128_t ) t3093) + ((uint128_t ) t3091));
        s599 = (((uint128_t ) s598) + ((uint128_t ) c236));
        t3096 = ((uint64_t ) s599);
        c237 = (s599 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10097 = (2*a10093);
        t3097 = P2[a10097];
        a10098 = (a10097 + 1);
        t3098 = P2[a10098];
        /* MPAddQDD 64 */
        s600 = (((uint128_t ) t3098) + ((uint128_t ) t3090));
        t3099 = ((uint64_t ) s600);
        c238 = (s600 >> 64);
        s601 = (((uint128_t ) t3097) + ((uint128_t ) t3089));
        s602 = (((uint128_t ) s601) + ((uint128_t ) c238));
        t3100 = ((uint64_t ) s602);
        /* MPPropagateCarry 64 */
        t3101 = (t3099 + c237);
        a10099 = ((t3101 == 0));
        a10100 = (t3100 + c237);
        t3102 = ((a10099) ? (a10100) : (t3100));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10107 = ((a5475 < t3102));
        a10108 = ((a5475 == t3102));
        a10109 = ((a5476 < t3101));
        a10110 = ((a10108) && (a10109));
        a10111 = ((a10107) || (a10110));
        /* MPEqual 64 */
        a10112 = ((a5476 == t3101));
        a10113 = ((a10108) && (a10112));
        /* MPLessThan 64 */
        a10114 = ((a5477 < t3096));
        a10115 = ((a5477 == t3096));
        a10116 = ((a5478 < t3095));
        a10117 = ((a10115) && (a10116));
        a10118 = ((a10114) || (a10117));
        a10119 = ((a10113) && (a10118));
        i427 = ((a10111) || (a10119));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d702 = (t3095 - a5478);
        b551 = ((t3095 < a5478));
        d703 = (t3096 - a5477);
        d704 = (d703 - b551);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10121 = ((t3096 < a5477));
        a10122 = ((t3096 == a5477));
        a10123 = ((a10122) && (b551));
        b552 = ((a10121) || (a10123));
        /* Begin of MPSubDDD 64 */
        d705 = (t3101 - a5476);
        b553 = ((t3101 < a5476));
        d706 = (t3102 - a5475);
        d707 = (d706 - b553);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d708 = (d705 - b552);
        b554 = ((d705 < b552));
        t3105 = (d707 - b554);
        /* End of MPSubDDD 128 */
        a10127 = (2*a10092);
        /* MPCondD 64 */
        a10128 = (2*a10127);
        P1[a10128] = ((i427) ? (t3105) : (t3102));
        a10129 = (a10128 + 1);
        P1[a10129] = ((i427) ? (d708) : (t3101));
        a10130 = (a10127 + 1);
        /* MPCondD 64 */
        a10131 = (2*a10130);
        P1[a10131] = ((i427) ? (d704) : (t3096));
        a10132 = (a10131 + 1);
        P1[a10132] = ((i427) ? (d702) : (t3095));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b555 = (a10091 + a10090);
        a10133 = (b555 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d709 = (t3094 - t3092);
        b556 = ((t3094 < t3092));
        d710 = (t3093 - t3091);
        d711 = (d710 - b556);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10135 = ((t3093 < t3091));
        a10136 = ((t3093 == t3091));
        a10137 = ((a10136) && (b556));
        b557 = ((a10135) || (a10137));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d712 = (t3098 - t3090);
        b558 = ((t3098 < t3090));
        d713 = (t3097 - t3089);
        d714 = (d713 - b558);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d715 = (d712 - b557);
        b559 = ((d712 < b557));
        t3106 = (d714 - b559);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s603 = (((uint128_t ) d709) + ((uint128_t ) a5478));
        t3107 = ((uint64_t ) s603);
        c240 = (s603 >> 64);
        s604 = (((uint128_t ) d711) + ((uint128_t ) a5477));
        s605 = (((uint128_t ) s604) + ((uint128_t ) c240));
        t3108 = ((uint64_t ) s605);
        c241 = (s605 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s606 = (((uint128_t ) d715) + ((uint128_t ) a5476));
        t3109 = ((uint64_t ) s606);
        c242 = (s606 >> 64);
        s607 = (((uint128_t ) t3106) + ((uint128_t ) a5475));
        s608 = (((uint128_t ) s607) + ((uint128_t ) c242));
        t3110 = ((uint64_t ) s608);
        /* MPPropagateCarry 64 */
        t3111 = (t3109 + c241);
        a10141 = ((t3111 == 0));
        a10142 = (t3110 + c241);
        t3112 = ((a10141) ? (a10142) : (t3110));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10149 = ((t3097 < t3089));
        a10150 = ((t3097 == t3089));
        a10151 = ((a10150) && (b558));
        a10152 = ((a10149) || (a10151));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10153 = ((t3098 == t3090));
        a10154 = ((a10150) && (a10153));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10155 = ((a10154) && (b557));
        i428 = ((a10152) || (a10155));
        a10156 = (2*a10133);
        /* MPCondD 64 */
        a10157 = (2*a10156);
        P1[a10157] = ((i428) ? (t3112) : (t3106));
        a10158 = (a10157 + 1);
        P1[a10158] = ((i428) ? (t3111) : (d715));
        a10159 = (a10156 + 1);
        /* MPCondD 64 */
        a10160 = (2*a10159);
        P1[a10160] = ((i428) ? (t3108) : (d711));
        a10161 = (a10160 + 1);
        P1[a10161] = ((i428) ? (t3107) : (d709));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code5(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10162, a10163, a10164, a10165, a10166, a10167, a10168, a10169, 
            a10170, a10171, a10172, a10173, a10174, a10175, a10176, a10177, 
            a10178, a10188, a10189, a10190, a10195, a10196, a10197, a10201, 
            a10202, a10203, a10204, a10205, a10206, a10207, a10208, a10209, 
            a10210, a10211, a10212, a10213, a10214, a10215, a10216, a10217, 
            a10225, a10226, a10227, a10228, a10229, a10230, a10231, a10232, 
            a10233, a10234, a10235, a10236, a10237, a10239, a10240, a10241, 
            a10245, a10246, a10247, a10248, a10249, a10250, a10251, a10253, 
            a10254, a10255, a10259, a10267, a10268, a10269, a10270, a10271, 
            a10272, a10273, a10274, a10275, a10276, a10277, a10278, a10279, 
            b560, b561, b562, b563, b564, b565, b566, b567, 
            b568, b569, b570, b571, b572, b573, b574, b575, 
            b576, b577, b578, c244, c245, c246, c248, c249, 
            c250, i429, i430, i431;
    uint64_t a10179, a10180, a10181, a10182, a10183, a10184, a10185, a10186, 
            a10218, a10260, a5860, a5861, a5862, a5863, a5891, a5892, 
            a5893, a5894, d716, d717, d718, d719, d720, d721, 
            d722, d723, d724, d725, d726, d727, d728, d729, 
            d730, d731, d732, d733, d734, d735, d736, d737, 
            d738, d739, d740, d741, d742, d743, t1407, t1408, 
            t1409, t1410, t1411, t1412, t1413, t1414, t1415, t1416, 
            t1417, t1418, t1419, t1420, t1421, t1422, t1423, t1424, 
            t1425, t1426, t1427, t1428, t1429, t1430, t3115, t3116, 
            t3117, t3118, t3119, t3120, t3121, t3122, t3123, t3124, 
            t3125, t3126, t3127, t3128, t3129, t3130, t3131, t3132, 
            t3133, t3134, t3135, t3136, t3137, t3138, t3139, t3140, 
            t3141, t3142, t3143, t3144, t3145, t3146, t3147, t3148, 
            t3149, t3150, t3151, t3152, t3153, t3154, t3155, t3158, 
            t3159, t3160, t3161, t3162, t3163, t3164, t3165;
    uint128_t s609, s610, s611, s612, s613, s614, s615, s616, 
            s617, s618, s619, s620;
    for(int i19 = 0; i19 <= 15; i19++) {
        a10162 = (512*i19);
        a10163 = (a10162 + threadIdx.x);
        b560 = (threadIdx.x + a10162);
        a10164 = (b560 + 8192);
        a10165 = (a10164 % 32);
        a10166 = (32 + a10165);
        /* Begin of MPModMul 128 */
        a10167 = (2*a10166);
        a10168 = (a10167 + 1);
        a10169 = (2*a10164);
        a10170 = (a10169 + 1);
        /* MPAssignDD 64 */
        a10171 = (2*a10167);
        t3115 = twiddles[a10171];
        a10172 = (a10171 + 1);
        t3116 = twiddles[a10172];
        /* MPAssignDD 64 */
        a10173 = (2*a10168);
        t3117 = twiddles[a10173];
        a10174 = (a10173 + 1);
        t3118 = twiddles[a10174];
        /* MPAssignDD 64 */
        a10175 = (2*a10169);
        t3119 = P1[a10175];
        a10176 = (a10175 + 1);
        t3120 = P1[a10176];
        /* MPAssignDD 64 */
        a10177 = (2*a10170);
        t3121 = P1[a10177];
        a10178 = (a10177 + 1);
        t3122 = P1[a10178];
        MPMulQDD_L2(t1413, t1414, t1411, t1412, t1409, t1410, t1407, t1408, 
    t3115, t3116, t3117, t3118, t3119, t3120, t3121, t3122);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3123 = (t1409 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b561 = ((int) 1);
        t3124 = (288230376151711744 - b561);
        /* MPBinAndD 64 */
        t3125 = (((t1413)&(t3124)));
        t3126 = (((t1414)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10179 = (t3125 << 6);
        a10180 = (t3126 >> 58);
        t3127 = (((a10179)|(a10180)));
        t3128 = (t3126 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3129 = (t1411 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3130 = (((t3128)|(t3129)));
        /* Begin of MPShiftLeft2D */
        a10181 = (t1411 << 6);
        a10182 = (t1412 >> 58);
        t3131 = (((a10181)|(a10182)));
        t3132 = (t1412 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3133 = (((t3132)|(t3123)));
        /* End of MPShiftRight3 */
        a5860 = mu[0];
        a5861 = mu[1];
        a5862 = mu[2];
        a5863 = mu[3];
        MPMulQDD_L2(t1429, t1430, t1427, t1428, t1425, t1426, t1423, t1424, 
    t3127, t3130, t3131, t3133, a5860, a5861, a5862, a5863);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3134 = (t1429 >> 1);
        a10183 = (t1429 << 63);
        a10184 = (t1430 >> 1);
        t3135 = (((a10183)|(a10184)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3136 = (t1430 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3137 = (t1427 >> 1);
        a10185 = (t1427 << 63);
        a10186 = (t1428 >> 1);
        t3138 = (((a10185)|(a10186)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3139 = (((t3136)|(t3137)));
        /* End of MPShiftRight2 */
        a5891 = modulus[0];
        a5892 = modulus[1];
        a5893 = modulus[2];
        a5894 = modulus[3];
        MPMulQDD_L2(t1421, t1422, t1419, t1420, t1417, t1418, t1415, t1416, 
    t3134, t3135, t3139, t3138, a5891, a5892, a5893, a5894);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d716 = (t1408 - t1416);
        b562 = ((t1408 < t1416));
        d717 = (t1407 - t1415);
        d718 = (d717 - b562);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10188 = ((t1407 < t1415));
        a10189 = ((t1407 == t1415));
        a10190 = ((a10189) && (b562));
        b563 = ((a10188) || (a10190));
        /* Begin of MPSubDDD 64 */
        d719 = (t1410 - t1418);
        b564 = ((t1410 < t1418));
        d720 = (t1409 - t1417);
        d721 = (d720 - b564);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d722 = (d719 - b563);
        b565 = ((d719 < b563));
        t3140 = (d721 - b565);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d723 = (d716 - a5894);
        b566 = ((d716 < a5894));
        d724 = (d718 - a5893);
        d725 = (d724 - b566);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10195 = ((d718 < a5893));
        a10196 = ((d718 == a5893));
        a10197 = ((a10196) && (b566));
        b567 = ((a10195) || (a10197));
        /* Begin of MPSubDDD 64 */
        d726 = (d722 - a5892);
        b568 = ((d722 < a5892));
        d727 = (t3140 - a5891);
        d728 = (d727 - b568);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d729 = (d726 - b567);
        b569 = ((d726 < b567));
        t3141 = (d728 - b569);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10201 = ((t3140 < a5891));
        a10202 = ((t3140 == a5891));
        a10203 = ((a10202) && (b568));
        a10204 = ((a10201) || (a10203));
        /* MPEqual 64 */
        a10205 = ((d722 == a5892));
        a10206 = ((a10202) && (a10205));
        /* MPLessThan 64 */
        a10207 = ((a10206) && (b567));
        i429 = ((a10204) || (a10207));
        /* MPCondD 64 */
        t3142 = ((i429) ? (t3140) : (t3141));
        t3143 = ((i429) ? (d722) : (d729));
        /* MPCondD 64 */
        t3144 = ((i429) ? (d718) : (d725));
        t3145 = ((i429) ? (d716) : (d723));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10208 = (1024*i19);
        a10209 = (2*threadIdx.x);
        a10210 = (a10208 + a10209);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10211 = (2*a10163);
        a10212 = (a10211 + 1);
        /* MPAssignDD 64 */
        a10213 = (2*a10212);
        t3146 = P1[a10213];
        a10214 = (a10213 + 1);
        t3147 = P1[a10214];
        /* MPAddQDD 64 */
        s609 = (((uint128_t ) t3147) + ((uint128_t ) t3145));
        t3148 = ((uint64_t ) s609);
        c244 = (s609 >> 64);
        s610 = (((uint128_t ) t3146) + ((uint128_t ) t3144));
        s611 = (((uint128_t ) s610) + ((uint128_t ) c244));
        t3149 = ((uint64_t ) s611);
        c245 = (s611 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10215 = (2*a10211);
        t3150 = P1[a10215];
        a10216 = (a10215 + 1);
        t3151 = P1[a10216];
        /* MPAddQDD 64 */
        s612 = (((uint128_t ) t3151) + ((uint128_t ) t3143));
        t3152 = ((uint64_t ) s612);
        c246 = (s612 >> 64);
        s613 = (((uint128_t ) t3150) + ((uint128_t ) t3142));
        s614 = (((uint128_t ) s613) + ((uint128_t ) c246));
        t3153 = ((uint64_t ) s614);
        /* MPPropagateCarry 64 */
        t3154 = (t3152 + c245);
        a10217 = ((t3154 == 0));
        a10218 = (t3153 + c245);
        t3155 = ((a10217) ? (a10218) : (t3153));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10225 = ((a5891 < t3155));
        a10226 = ((a5891 == t3155));
        a10227 = ((a5892 < t3154));
        a10228 = ((a10226) && (a10227));
        a10229 = ((a10225) || (a10228));
        /* MPEqual 64 */
        a10230 = ((a5892 == t3154));
        a10231 = ((a10226) && (a10230));
        /* MPLessThan 64 */
        a10232 = ((a5893 < t3149));
        a10233 = ((a5893 == t3149));
        a10234 = ((a5894 < t3148));
        a10235 = ((a10233) && (a10234));
        a10236 = ((a10232) || (a10235));
        a10237 = ((a10231) && (a10236));
        i430 = ((a10229) || (a10237));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d730 = (t3148 - a5894);
        b570 = ((t3148 < a5894));
        d731 = (t3149 - a5893);
        d732 = (d731 - b570);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10239 = ((t3149 < a5893));
        a10240 = ((t3149 == a5893));
        a10241 = ((a10240) && (b570));
        b571 = ((a10239) || (a10241));
        /* Begin of MPSubDDD 64 */
        d733 = (t3154 - a5892);
        b572 = ((t3154 < a5892));
        d734 = (t3155 - a5891);
        d735 = (d734 - b572);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d736 = (d733 - b571);
        b573 = ((d733 < b571));
        t3158 = (d735 - b573);
        /* End of MPSubDDD 128 */
        a10245 = (2*a10210);
        /* MPCondD 64 */
        a10246 = (2*a10245);
        P2[a10246] = ((i430) ? (t3158) : (t3155));
        a10247 = (a10246 + 1);
        P2[a10247] = ((i430) ? (d736) : (t3154));
        a10248 = (a10245 + 1);
        /* MPCondD 64 */
        a10249 = (2*a10248);
        P2[a10249] = ((i430) ? (d732) : (t3149));
        a10250 = (a10249 + 1);
        P2[a10250] = ((i430) ? (d730) : (t3148));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b574 = (a10209 + a10208);
        a10251 = (b574 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d737 = (t3147 - t3145);
        b575 = ((t3147 < t3145));
        d738 = (t3146 - t3144);
        d739 = (d738 - b575);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10253 = ((t3146 < t3144));
        a10254 = ((t3146 == t3144));
        a10255 = ((a10254) && (b575));
        b576 = ((a10253) || (a10255));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d740 = (t3151 - t3143);
        b577 = ((t3151 < t3143));
        d741 = (t3150 - t3142);
        d742 = (d741 - b577);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d743 = (d740 - b576);
        b578 = ((d740 < b576));
        t3159 = (d742 - b578);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s615 = (((uint128_t ) d737) + ((uint128_t ) a5894));
        t3160 = ((uint64_t ) s615);
        c248 = (s615 >> 64);
        s616 = (((uint128_t ) d739) + ((uint128_t ) a5893));
        s617 = (((uint128_t ) s616) + ((uint128_t ) c248));
        t3161 = ((uint64_t ) s617);
        c249 = (s617 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s618 = (((uint128_t ) d743) + ((uint128_t ) a5892));
        t3162 = ((uint64_t ) s618);
        c250 = (s618 >> 64);
        s619 = (((uint128_t ) t3159) + ((uint128_t ) a5891));
        s620 = (((uint128_t ) s619) + ((uint128_t ) c250));
        t3163 = ((uint64_t ) s620);
        /* MPPropagateCarry 64 */
        t3164 = (t3162 + c249);
        a10259 = ((t3164 == 0));
        a10260 = (t3163 + c249);
        t3165 = ((a10259) ? (a10260) : (t3163));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10267 = ((t3150 < t3142));
        a10268 = ((t3150 == t3142));
        a10269 = ((a10268) && (b577));
        a10270 = ((a10267) || (a10269));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10271 = ((t3151 == t3143));
        a10272 = ((a10268) && (a10271));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10273 = ((a10272) && (b576));
        i431 = ((a10270) || (a10273));
        a10274 = (2*a10251);
        /* MPCondD 64 */
        a10275 = (2*a10274);
        P2[a10275] = ((i431) ? (t3165) : (t3159));
        a10276 = (a10275 + 1);
        P2[a10276] = ((i431) ? (t3164) : (d743));
        a10277 = (a10274 + 1);
        /* MPCondD 64 */
        a10278 = (2*a10277);
        P2[a10278] = ((i431) ? (t3161) : (d739));
        a10279 = (a10278 + 1);
        P2[a10279] = ((i431) ? (t3160) : (d737));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code6(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10280, a10281, a10282, a10283, a10284, a10285, a10286, a10287, 
            a10288, a10289, a10290, a10291, a10292, a10293, a10294, a10295, 
            a10296, a10306, a10307, a10308, a10313, a10314, a10315, a10319, 
            a10320, a10321, a10322, a10323, a10324, a10325, a10326, a10327, 
            a10328, a10329, a10330, a10331, a10332, a10333, a10334, a10335, 
            a10343, a10344, a10345, a10346, a10347, a10348, a10349, a10350, 
            a10351, a10352, a10353, a10354, a10355, a10357, a10358, a10359, 
            a10363, a10364, a10365, a10366, a10367, a10368, a10369, a10371, 
            a10372, a10373, a10377, a10385, a10386, a10387, a10388, a10389, 
            a10390, a10391, a10392, a10393, a10394, a10395, a10396, a10397, 
            b579, b580, b581, b582, b583, b584, b585, b586, 
            b587, b588, b589, b590, b591, b592, b593, b594, 
            b595, b596, b597, c252, c253, c254, c256, c257, 
            c258, i432, i433, i434;
    uint64_t a10297, a10298, a10299, a10300, a10301, a10302, a10303, a10304, 
            a10336, a10378, a6276, a6277, a6278, a6279, a6307, a6308, 
            a6309, a6310, d744, d745, d746, d747, d748, d749, 
            d750, d751, d752, d753, d754, d755, d756, d757, 
            d758, d759, d760, d761, d762, d763, d764, d765, 
            d766, d767, d768, d769, d770, d771, t1439, t1440, 
            t1441, t1442, t1443, t1444, t1445, t1446, t1447, t1448, 
            t1449, t1450, t1451, t1452, t1453, t1454, t1455, t1456, 
            t1457, t1458, t1459, t1460, t1461, t1462, t3168, t3169, 
            t3170, t3171, t3172, t3173, t3174, t3175, t3176, t3177, 
            t3178, t3179, t3180, t3181, t3182, t3183, t3184, t3185, 
            t3186, t3187, t3188, t3189, t3190, t3191, t3192, t3193, 
            t3194, t3195, t3196, t3197, t3198, t3199, t3200, t3201, 
            t3202, t3203, t3204, t3205, t3206, t3207, t3208, t3211, 
            t3212, t3213, t3214, t3215, t3216, t3217, t3218;
    uint128_t s621, s622, s623, s624, s625, s626, s627, s628, 
            s629, s630, s631, s632;
    for(int i17 = 0; i17 <= 15; i17++) {
        a10280 = (512*i17);
        a10281 = (a10280 + threadIdx.x);
        b579 = (threadIdx.x + a10280);
        a10282 = (b579 + 8192);
        a10283 = (a10282 % 64);
        a10284 = (64 + a10283);
        /* Begin of MPModMul 128 */
        a10285 = (2*a10284);
        a10286 = (a10285 + 1);
        a10287 = (2*a10282);
        a10288 = (a10287 + 1);
        /* MPAssignDD 64 */
        a10289 = (2*a10285);
        t3168 = twiddles[a10289];
        a10290 = (a10289 + 1);
        t3169 = twiddles[a10290];
        /* MPAssignDD 64 */
        a10291 = (2*a10286);
        t3170 = twiddles[a10291];
        a10292 = (a10291 + 1);
        t3171 = twiddles[a10292];
        /* MPAssignDD 64 */
        a10293 = (2*a10287);
        t3172 = P2[a10293];
        a10294 = (a10293 + 1);
        t3173 = P2[a10294];
        /* MPAssignDD 64 */
        a10295 = (2*a10288);
        t3174 = P2[a10295];
        a10296 = (a10295 + 1);
        t3175 = P2[a10296];
        MPMulQDD_L2(t1445, t1446, t1443, t1444, t1441, t1442, t1439, t1440, 
    t3168, t3169, t3170, t3171, t3172, t3173, t3174, t3175);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3176 = (t1441 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b580 = ((int) 1);
        t3177 = (288230376151711744 - b580);
        /* MPBinAndD 64 */
        t3178 = (((t1445)&(t3177)));
        t3179 = (((t1446)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10297 = (t3178 << 6);
        a10298 = (t3179 >> 58);
        t3180 = (((a10297)|(a10298)));
        t3181 = (t3179 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3182 = (t1443 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3183 = (((t3181)|(t3182)));
        /* Begin of MPShiftLeft2D */
        a10299 = (t1443 << 6);
        a10300 = (t1444 >> 58);
        t3184 = (((a10299)|(a10300)));
        t3185 = (t1444 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3186 = (((t3185)|(t3176)));
        /* End of MPShiftRight3 */
        a6276 = mu[0];
        a6277 = mu[1];
        a6278 = mu[2];
        a6279 = mu[3];
        MPMulQDD_L2(t1461, t1462, t1459, t1460, t1457, t1458, t1455, t1456, 
    t3180, t3183, t3184, t3186, a6276, a6277, a6278, a6279);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3187 = (t1461 >> 1);
        a10301 = (t1461 << 63);
        a10302 = (t1462 >> 1);
        t3188 = (((a10301)|(a10302)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3189 = (t1462 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3190 = (t1459 >> 1);
        a10303 = (t1459 << 63);
        a10304 = (t1460 >> 1);
        t3191 = (((a10303)|(a10304)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3192 = (((t3189)|(t3190)));
        /* End of MPShiftRight2 */
        a6307 = modulus[0];
        a6308 = modulus[1];
        a6309 = modulus[2];
        a6310 = modulus[3];
        MPMulQDD_L2(t1453, t1454, t1451, t1452, t1449, t1450, t1447, t1448, 
    t3187, t3188, t3192, t3191, a6307, a6308, a6309, a6310);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d744 = (t1440 - t1448);
        b581 = ((t1440 < t1448));
        d745 = (t1439 - t1447);
        d746 = (d745 - b581);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10306 = ((t1439 < t1447));
        a10307 = ((t1439 == t1447));
        a10308 = ((a10307) && (b581));
        b582 = ((a10306) || (a10308));
        /* Begin of MPSubDDD 64 */
        d747 = (t1442 - t1450);
        b583 = ((t1442 < t1450));
        d748 = (t1441 - t1449);
        d749 = (d748 - b583);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d750 = (d747 - b582);
        b584 = ((d747 < b582));
        t3193 = (d749 - b584);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d751 = (d744 - a6310);
        b585 = ((d744 < a6310));
        d752 = (d746 - a6309);
        d753 = (d752 - b585);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10313 = ((d746 < a6309));
        a10314 = ((d746 == a6309));
        a10315 = ((a10314) && (b585));
        b586 = ((a10313) || (a10315));
        /* Begin of MPSubDDD 64 */
        d754 = (d750 - a6308);
        b587 = ((d750 < a6308));
        d755 = (t3193 - a6307);
        d756 = (d755 - b587);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d757 = (d754 - b586);
        b588 = ((d754 < b586));
        t3194 = (d756 - b588);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10319 = ((t3193 < a6307));
        a10320 = ((t3193 == a6307));
        a10321 = ((a10320) && (b587));
        a10322 = ((a10319) || (a10321));
        /* MPEqual 64 */
        a10323 = ((d750 == a6308));
        a10324 = ((a10320) && (a10323));
        /* MPLessThan 64 */
        a10325 = ((a10324) && (b586));
        i432 = ((a10322) || (a10325));
        /* MPCondD 64 */
        t3195 = ((i432) ? (t3193) : (t3194));
        t3196 = ((i432) ? (d750) : (d757));
        /* MPCondD 64 */
        t3197 = ((i432) ? (d746) : (d753));
        t3198 = ((i432) ? (d744) : (d751));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10326 = (1024*i17);
        a10327 = (2*threadIdx.x);
        a10328 = (a10326 + a10327);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10329 = (2*a10281);
        a10330 = (a10329 + 1);
        /* MPAssignDD 64 */
        a10331 = (2*a10330);
        t3199 = P2[a10331];
        a10332 = (a10331 + 1);
        t3200 = P2[a10332];
        /* MPAddQDD 64 */
        s621 = (((uint128_t ) t3200) + ((uint128_t ) t3198));
        t3201 = ((uint64_t ) s621);
        c252 = (s621 >> 64);
        s622 = (((uint128_t ) t3199) + ((uint128_t ) t3197));
        s623 = (((uint128_t ) s622) + ((uint128_t ) c252));
        t3202 = ((uint64_t ) s623);
        c253 = (s623 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10333 = (2*a10329);
        t3203 = P2[a10333];
        a10334 = (a10333 + 1);
        t3204 = P2[a10334];
        /* MPAddQDD 64 */
        s624 = (((uint128_t ) t3204) + ((uint128_t ) t3196));
        t3205 = ((uint64_t ) s624);
        c254 = (s624 >> 64);
        s625 = (((uint128_t ) t3203) + ((uint128_t ) t3195));
        s626 = (((uint128_t ) s625) + ((uint128_t ) c254));
        t3206 = ((uint64_t ) s626);
        /* MPPropagateCarry 64 */
        t3207 = (t3205 + c253);
        a10335 = ((t3207 == 0));
        a10336 = (t3206 + c253);
        t3208 = ((a10335) ? (a10336) : (t3206));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10343 = ((a6307 < t3208));
        a10344 = ((a6307 == t3208));
        a10345 = ((a6308 < t3207));
        a10346 = ((a10344) && (a10345));
        a10347 = ((a10343) || (a10346));
        /* MPEqual 64 */
        a10348 = ((a6308 == t3207));
        a10349 = ((a10344) && (a10348));
        /* MPLessThan 64 */
        a10350 = ((a6309 < t3202));
        a10351 = ((a6309 == t3202));
        a10352 = ((a6310 < t3201));
        a10353 = ((a10351) && (a10352));
        a10354 = ((a10350) || (a10353));
        a10355 = ((a10349) && (a10354));
        i433 = ((a10347) || (a10355));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d758 = (t3201 - a6310);
        b589 = ((t3201 < a6310));
        d759 = (t3202 - a6309);
        d760 = (d759 - b589);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10357 = ((t3202 < a6309));
        a10358 = ((t3202 == a6309));
        a10359 = ((a10358) && (b589));
        b590 = ((a10357) || (a10359));
        /* Begin of MPSubDDD 64 */
        d761 = (t3207 - a6308);
        b591 = ((t3207 < a6308));
        d762 = (t3208 - a6307);
        d763 = (d762 - b591);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d764 = (d761 - b590);
        b592 = ((d761 < b590));
        t3211 = (d763 - b592);
        /* End of MPSubDDD 128 */
        a10363 = (2*a10328);
        /* MPCondD 64 */
        a10364 = (2*a10363);
        P1[a10364] = ((i433) ? (t3211) : (t3208));
        a10365 = (a10364 + 1);
        P1[a10365] = ((i433) ? (d764) : (t3207));
        a10366 = (a10363 + 1);
        /* MPCondD 64 */
        a10367 = (2*a10366);
        P1[a10367] = ((i433) ? (d760) : (t3202));
        a10368 = (a10367 + 1);
        P1[a10368] = ((i433) ? (d758) : (t3201));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b593 = (a10327 + a10326);
        a10369 = (b593 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d765 = (t3200 - t3198);
        b594 = ((t3200 < t3198));
        d766 = (t3199 - t3197);
        d767 = (d766 - b594);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10371 = ((t3199 < t3197));
        a10372 = ((t3199 == t3197));
        a10373 = ((a10372) && (b594));
        b595 = ((a10371) || (a10373));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d768 = (t3204 - t3196);
        b596 = ((t3204 < t3196));
        d769 = (t3203 - t3195);
        d770 = (d769 - b596);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d771 = (d768 - b595);
        b597 = ((d768 < b595));
        t3212 = (d770 - b597);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s627 = (((uint128_t ) d765) + ((uint128_t ) a6310));
        t3213 = ((uint64_t ) s627);
        c256 = (s627 >> 64);
        s628 = (((uint128_t ) d767) + ((uint128_t ) a6309));
        s629 = (((uint128_t ) s628) + ((uint128_t ) c256));
        t3214 = ((uint64_t ) s629);
        c257 = (s629 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s630 = (((uint128_t ) d771) + ((uint128_t ) a6308));
        t3215 = ((uint64_t ) s630);
        c258 = (s630 >> 64);
        s631 = (((uint128_t ) t3212) + ((uint128_t ) a6307));
        s632 = (((uint128_t ) s631) + ((uint128_t ) c258));
        t3216 = ((uint64_t ) s632);
        /* MPPropagateCarry 64 */
        t3217 = (t3215 + c257);
        a10377 = ((t3217 == 0));
        a10378 = (t3216 + c257);
        t3218 = ((a10377) ? (a10378) : (t3216));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10385 = ((t3203 < t3195));
        a10386 = ((t3203 == t3195));
        a10387 = ((a10386) && (b596));
        a10388 = ((a10385) || (a10387));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10389 = ((t3204 == t3196));
        a10390 = ((a10386) && (a10389));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10391 = ((a10390) && (b595));
        i434 = ((a10388) || (a10391));
        a10392 = (2*a10369);
        /* MPCondD 64 */
        a10393 = (2*a10392);
        P1[a10393] = ((i434) ? (t3218) : (t3212));
        a10394 = (a10393 + 1);
        P1[a10394] = ((i434) ? (t3217) : (d771));
        a10395 = (a10392 + 1);
        /* MPCondD 64 */
        a10396 = (2*a10395);
        P1[a10396] = ((i434) ? (t3214) : (d767));
        a10397 = (a10396 + 1);
        P1[a10397] = ((i434) ? (t3213) : (d765));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code7(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10398, a10399, a10400, a10401, a10402, a10403, a10404, a10405, 
            a10406, a10407, a10408, a10409, a10410, a10411, a10412, a10413, 
            a10414, a10424, a10425, a10426, a10431, a10432, a10433, a10437, 
            a10438, a10439, a10440, a10441, a10442, a10443, a10444, a10445, 
            a10446, a10447, a10448, a10449, a10450, a10451, a10452, a10453, 
            a10461, a10462, a10463, a10464, a10465, a10466, a10467, a10468, 
            a10469, a10470, a10471, a10472, a10473, a10475, a10476, a10477, 
            a10481, a10482, a10483, a10484, a10485, a10486, a10487, a10489, 
            a10490, a10491, a10495, a10503, a10504, a10505, a10506, a10507, 
            a10508, a10509, a10510, a10511, a10512, a10513, a10514, a10515, 
            b598, b599, b600, b601, b602, b603, b604, b605, 
            b606, b607, b608, b609, b610, b611, b612, b613, 
            b614, b615, b616, c260, c261, c262, c264, c265, 
            c266, i435, i436, i437;
    uint64_t a10415, a10416, a10417, a10418, a10419, a10420, a10421, a10422, 
            a10454, a10496, a6692, a6693, a6694, a6695, a6723, a6724, 
            a6725, a6726, d772, d773, d774, d775, d776, d777, 
            d778, d779, d780, d781, d782, d783, d784, d785, 
            d786, d787, d788, d789, d790, d791, d792, d793, 
            d794, d795, d796, d797, d798, d799, t1471, t1472, 
            t1473, t1474, t1475, t1476, t1477, t1478, t1479, t1480, 
            t1481, t1482, t1483, t1484, t1485, t1486, t1487, t1488, 
            t1489, t1490, t1491, t1492, t1493, t1494, t3221, t3222, 
            t3223, t3224, t3225, t3226, t3227, t3228, t3229, t3230, 
            t3231, t3232, t3233, t3234, t3235, t3236, t3237, t3238, 
            t3239, t3240, t3241, t3242, t3243, t3244, t3245, t3246, 
            t3247, t3248, t3249, t3250, t3251, t3252, t3253, t3254, 
            t3255, t3256, t3257, t3258, t3259, t3260, t3261, t3264, 
            t3265, t3266, t3267, t3268, t3269, t3270, t3271;
    uint128_t s633, s634, s635, s636, s637, s638, s639, s640, 
            s641, s642, s643, s644;
    for(int i15 = 0; i15 <= 15; i15++) {
        a10398 = (512*i15);
        a10399 = (a10398 + threadIdx.x);
        b598 = (threadIdx.x + a10398);
        a10400 = (b598 + 8192);
        a10401 = (a10400 % 128);
        a10402 = (128 + a10401);
        /* Begin of MPModMul 128 */
        a10403 = (2*a10402);
        a10404 = (a10403 + 1);
        a10405 = (2*a10400);
        a10406 = (a10405 + 1);
        /* MPAssignDD 64 */
        a10407 = (2*a10403);
        t3221 = twiddles[a10407];
        a10408 = (a10407 + 1);
        t3222 = twiddles[a10408];
        /* MPAssignDD 64 */
        a10409 = (2*a10404);
        t3223 = twiddles[a10409];
        a10410 = (a10409 + 1);
        t3224 = twiddles[a10410];
        /* MPAssignDD 64 */
        a10411 = (2*a10405);
        t3225 = P1[a10411];
        a10412 = (a10411 + 1);
        t3226 = P1[a10412];
        /* MPAssignDD 64 */
        a10413 = (2*a10406);
        t3227 = P1[a10413];
        a10414 = (a10413 + 1);
        t3228 = P1[a10414];
        MPMulQDD_L2(t1477, t1478, t1475, t1476, t1473, t1474, t1471, t1472, 
    t3221, t3222, t3223, t3224, t3225, t3226, t3227, t3228);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3229 = (t1473 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b599 = ((int) 1);
        t3230 = (288230376151711744 - b599);
        /* MPBinAndD 64 */
        t3231 = (((t1477)&(t3230)));
        t3232 = (((t1478)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10415 = (t3231 << 6);
        a10416 = (t3232 >> 58);
        t3233 = (((a10415)|(a10416)));
        t3234 = (t3232 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3235 = (t1475 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3236 = (((t3234)|(t3235)));
        /* Begin of MPShiftLeft2D */
        a10417 = (t1475 << 6);
        a10418 = (t1476 >> 58);
        t3237 = (((a10417)|(a10418)));
        t3238 = (t1476 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3239 = (((t3238)|(t3229)));
        /* End of MPShiftRight3 */
        a6692 = mu[0];
        a6693 = mu[1];
        a6694 = mu[2];
        a6695 = mu[3];
        MPMulQDD_L2(t1493, t1494, t1491, t1492, t1489, t1490, t1487, t1488, 
    t3233, t3236, t3237, t3239, a6692, a6693, a6694, a6695);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3240 = (t1493 >> 1);
        a10419 = (t1493 << 63);
        a10420 = (t1494 >> 1);
        t3241 = (((a10419)|(a10420)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3242 = (t1494 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3243 = (t1491 >> 1);
        a10421 = (t1491 << 63);
        a10422 = (t1492 >> 1);
        t3244 = (((a10421)|(a10422)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3245 = (((t3242)|(t3243)));
        /* End of MPShiftRight2 */
        a6723 = modulus[0];
        a6724 = modulus[1];
        a6725 = modulus[2];
        a6726 = modulus[3];
        MPMulQDD_L2(t1485, t1486, t1483, t1484, t1481, t1482, t1479, t1480, 
    t3240, t3241, t3245, t3244, a6723, a6724, a6725, a6726);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d772 = (t1472 - t1480);
        b600 = ((t1472 < t1480));
        d773 = (t1471 - t1479);
        d774 = (d773 - b600);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10424 = ((t1471 < t1479));
        a10425 = ((t1471 == t1479));
        a10426 = ((a10425) && (b600));
        b601 = ((a10424) || (a10426));
        /* Begin of MPSubDDD 64 */
        d775 = (t1474 - t1482);
        b602 = ((t1474 < t1482));
        d776 = (t1473 - t1481);
        d777 = (d776 - b602);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d778 = (d775 - b601);
        b603 = ((d775 < b601));
        t3246 = (d777 - b603);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d779 = (d772 - a6726);
        b604 = ((d772 < a6726));
        d780 = (d774 - a6725);
        d781 = (d780 - b604);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10431 = ((d774 < a6725));
        a10432 = ((d774 == a6725));
        a10433 = ((a10432) && (b604));
        b605 = ((a10431) || (a10433));
        /* Begin of MPSubDDD 64 */
        d782 = (d778 - a6724);
        b606 = ((d778 < a6724));
        d783 = (t3246 - a6723);
        d784 = (d783 - b606);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d785 = (d782 - b605);
        b607 = ((d782 < b605));
        t3247 = (d784 - b607);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10437 = ((t3246 < a6723));
        a10438 = ((t3246 == a6723));
        a10439 = ((a10438) && (b606));
        a10440 = ((a10437) || (a10439));
        /* MPEqual 64 */
        a10441 = ((d778 == a6724));
        a10442 = ((a10438) && (a10441));
        /* MPLessThan 64 */
        a10443 = ((a10442) && (b605));
        i435 = ((a10440) || (a10443));
        /* MPCondD 64 */
        t3248 = ((i435) ? (t3246) : (t3247));
        t3249 = ((i435) ? (d778) : (d785));
        /* MPCondD 64 */
        t3250 = ((i435) ? (d774) : (d781));
        t3251 = ((i435) ? (d772) : (d779));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10444 = (1024*i15);
        a10445 = (2*threadIdx.x);
        a10446 = (a10444 + a10445);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10447 = (2*a10399);
        a10448 = (a10447 + 1);
        /* MPAssignDD 64 */
        a10449 = (2*a10448);
        t3252 = P1[a10449];
        a10450 = (a10449 + 1);
        t3253 = P1[a10450];
        /* MPAddQDD 64 */
        s633 = (((uint128_t ) t3253) + ((uint128_t ) t3251));
        t3254 = ((uint64_t ) s633);
        c260 = (s633 >> 64);
        s634 = (((uint128_t ) t3252) + ((uint128_t ) t3250));
        s635 = (((uint128_t ) s634) + ((uint128_t ) c260));
        t3255 = ((uint64_t ) s635);
        c261 = (s635 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10451 = (2*a10447);
        t3256 = P1[a10451];
        a10452 = (a10451 + 1);
        t3257 = P1[a10452];
        /* MPAddQDD 64 */
        s636 = (((uint128_t ) t3257) + ((uint128_t ) t3249));
        t3258 = ((uint64_t ) s636);
        c262 = (s636 >> 64);
        s637 = (((uint128_t ) t3256) + ((uint128_t ) t3248));
        s638 = (((uint128_t ) s637) + ((uint128_t ) c262));
        t3259 = ((uint64_t ) s638);
        /* MPPropagateCarry 64 */
        t3260 = (t3258 + c261);
        a10453 = ((t3260 == 0));
        a10454 = (t3259 + c261);
        t3261 = ((a10453) ? (a10454) : (t3259));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10461 = ((a6723 < t3261));
        a10462 = ((a6723 == t3261));
        a10463 = ((a6724 < t3260));
        a10464 = ((a10462) && (a10463));
        a10465 = ((a10461) || (a10464));
        /* MPEqual 64 */
        a10466 = ((a6724 == t3260));
        a10467 = ((a10462) && (a10466));
        /* MPLessThan 64 */
        a10468 = ((a6725 < t3255));
        a10469 = ((a6725 == t3255));
        a10470 = ((a6726 < t3254));
        a10471 = ((a10469) && (a10470));
        a10472 = ((a10468) || (a10471));
        a10473 = ((a10467) && (a10472));
        i436 = ((a10465) || (a10473));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d786 = (t3254 - a6726);
        b608 = ((t3254 < a6726));
        d787 = (t3255 - a6725);
        d788 = (d787 - b608);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10475 = ((t3255 < a6725));
        a10476 = ((t3255 == a6725));
        a10477 = ((a10476) && (b608));
        b609 = ((a10475) || (a10477));
        /* Begin of MPSubDDD 64 */
        d789 = (t3260 - a6724);
        b610 = ((t3260 < a6724));
        d790 = (t3261 - a6723);
        d791 = (d790 - b610);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d792 = (d789 - b609);
        b611 = ((d789 < b609));
        t3264 = (d791 - b611);
        /* End of MPSubDDD 128 */
        a10481 = (2*a10446);
        /* MPCondD 64 */
        a10482 = (2*a10481);
        P2[a10482] = ((i436) ? (t3264) : (t3261));
        a10483 = (a10482 + 1);
        P2[a10483] = ((i436) ? (d792) : (t3260));
        a10484 = (a10481 + 1);
        /* MPCondD 64 */
        a10485 = (2*a10484);
        P2[a10485] = ((i436) ? (d788) : (t3255));
        a10486 = (a10485 + 1);
        P2[a10486] = ((i436) ? (d786) : (t3254));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b612 = (a10445 + a10444);
        a10487 = (b612 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d793 = (t3253 - t3251);
        b613 = ((t3253 < t3251));
        d794 = (t3252 - t3250);
        d795 = (d794 - b613);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10489 = ((t3252 < t3250));
        a10490 = ((t3252 == t3250));
        a10491 = ((a10490) && (b613));
        b614 = ((a10489) || (a10491));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d796 = (t3257 - t3249);
        b615 = ((t3257 < t3249));
        d797 = (t3256 - t3248);
        d798 = (d797 - b615);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d799 = (d796 - b614);
        b616 = ((d796 < b614));
        t3265 = (d798 - b616);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s639 = (((uint128_t ) d793) + ((uint128_t ) a6726));
        t3266 = ((uint64_t ) s639);
        c264 = (s639 >> 64);
        s640 = (((uint128_t ) d795) + ((uint128_t ) a6725));
        s641 = (((uint128_t ) s640) + ((uint128_t ) c264));
        t3267 = ((uint64_t ) s641);
        c265 = (s641 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s642 = (((uint128_t ) d799) + ((uint128_t ) a6724));
        t3268 = ((uint64_t ) s642);
        c266 = (s642 >> 64);
        s643 = (((uint128_t ) t3265) + ((uint128_t ) a6723));
        s644 = (((uint128_t ) s643) + ((uint128_t ) c266));
        t3269 = ((uint64_t ) s644);
        /* MPPropagateCarry 64 */
        t3270 = (t3268 + c265);
        a10495 = ((t3270 == 0));
        a10496 = (t3269 + c265);
        t3271 = ((a10495) ? (a10496) : (t3269));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10503 = ((t3256 < t3248));
        a10504 = ((t3256 == t3248));
        a10505 = ((a10504) && (b615));
        a10506 = ((a10503) || (a10505));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10507 = ((t3257 == t3249));
        a10508 = ((a10504) && (a10507));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10509 = ((a10508) && (b614));
        i437 = ((a10506) || (a10509));
        a10510 = (2*a10487);
        /* MPCondD 64 */
        a10511 = (2*a10510);
        P2[a10511] = ((i437) ? (t3271) : (t3265));
        a10512 = (a10511 + 1);
        P2[a10512] = ((i437) ? (t3270) : (d799));
        a10513 = (a10510 + 1);
        /* MPCondD 64 */
        a10514 = (2*a10513);
        P2[a10514] = ((i437) ? (t3267) : (d795));
        a10515 = (a10514 + 1);
        P2[a10515] = ((i437) ? (t3266) : (d793));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code8(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10516, a10517, a10518, a10519, a10520, a10521, a10522, a10523, 
            a10524, a10525, a10526, a10527, a10528, a10529, a10530, a10531, 
            a10532, a10542, a10543, a10544, a10549, a10550, a10551, a10555, 
            a10556, a10557, a10558, a10559, a10560, a10561, a10562, a10563, 
            a10564, a10565, a10566, a10567, a10568, a10569, a10570, a10571, 
            a10579, a10580, a10581, a10582, a10583, a10584, a10585, a10586, 
            a10587, a10588, a10589, a10590, a10591, a10593, a10594, a10595, 
            a10599, a10600, a10601, a10602, a10603, a10604, a10605, a10607, 
            a10608, a10609, a10613, a10621, a10622, a10623, a10624, a10625, 
            a10626, a10627, a10628, a10629, a10630, a10631, a10632, a10633, 
            b617, b618, b619, b620, b621, b622, b623, b624, 
            b625, b626, b627, b628, b629, b630, b631, b632, 
            b633, b634, b635, c268, c269, c270, c272, c273, 
            c274, i438, i439, i440;
    uint64_t a10533, a10534, a10535, a10536, a10537, a10538, a10539, a10540, 
            a10572, a10614, a7108, a7109, a7110, a7111, a7139, a7140, 
            a7141, a7142, d800, d801, d802, d803, d804, d805, 
            d806, d807, d808, d809, d810, d811, d812, d813, 
            d814, d815, d816, d817, d818, d819, d820, d821, 
            d822, d823, d824, d825, d826, d827, t1503, t1504, 
            t1505, t1506, t1507, t1508, t1509, t1510, t1511, t1512, 
            t1513, t1514, t1515, t1516, t1517, t1518, t1519, t1520, 
            t1521, t1522, t1523, t1524, t1525, t1526, t3274, t3275, 
            t3276, t3277, t3278, t3279, t3280, t3281, t3282, t3283, 
            t3284, t3285, t3286, t3287, t3288, t3289, t3290, t3291, 
            t3292, t3293, t3294, t3295, t3296, t3297, t3298, t3299, 
            t3300, t3301, t3302, t3303, t3304, t3305, t3306, t3307, 
            t3308, t3309, t3310, t3311, t3312, t3313, t3314, t3317, 
            t3318, t3319, t3320, t3321, t3322, t3323, t3324;
    uint128_t s645, s646, s647, s648, s649, s650, s651, s652, 
            s653, s654, s655, s656;
    for(int i13 = 0; i13 <= 15; i13++) {
        a10516 = (512*i13);
        a10517 = (a10516 + threadIdx.x);
        b617 = (threadIdx.x + a10516);
        a10518 = (b617 + 8192);
        a10519 = (a10518 % 256);
        a10520 = (256 + a10519);
        /* Begin of MPModMul 128 */
        a10521 = (2*a10520);
        a10522 = (a10521 + 1);
        a10523 = (2*a10518);
        a10524 = (a10523 + 1);
        /* MPAssignDD 64 */
        a10525 = (2*a10521);
        t3274 = twiddles[a10525];
        a10526 = (a10525 + 1);
        t3275 = twiddles[a10526];
        /* MPAssignDD 64 */
        a10527 = (2*a10522);
        t3276 = twiddles[a10527];
        a10528 = (a10527 + 1);
        t3277 = twiddles[a10528];
        /* MPAssignDD 64 */
        a10529 = (2*a10523);
        t3278 = P2[a10529];
        a10530 = (a10529 + 1);
        t3279 = P2[a10530];
        /* MPAssignDD 64 */
        a10531 = (2*a10524);
        t3280 = P2[a10531];
        a10532 = (a10531 + 1);
        t3281 = P2[a10532];
        MPMulQDD_L2(t1509, t1510, t1507, t1508, t1505, t1506, t1503, t1504, 
    t3274, t3275, t3276, t3277, t3278, t3279, t3280, t3281);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3282 = (t1505 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b618 = ((int) 1);
        t3283 = (288230376151711744 - b618);
        /* MPBinAndD 64 */
        t3284 = (((t1509)&(t3283)));
        t3285 = (((t1510)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10533 = (t3284 << 6);
        a10534 = (t3285 >> 58);
        t3286 = (((a10533)|(a10534)));
        t3287 = (t3285 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3288 = (t1507 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3289 = (((t3287)|(t3288)));
        /* Begin of MPShiftLeft2D */
        a10535 = (t1507 << 6);
        a10536 = (t1508 >> 58);
        t3290 = (((a10535)|(a10536)));
        t3291 = (t1508 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3292 = (((t3291)|(t3282)));
        /* End of MPShiftRight3 */
        a7108 = mu[0];
        a7109 = mu[1];
        a7110 = mu[2];
        a7111 = mu[3];
        MPMulQDD_L2(t1525, t1526, t1523, t1524, t1521, t1522, t1519, t1520, 
    t3286, t3289, t3290, t3292, a7108, a7109, a7110, a7111);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3293 = (t1525 >> 1);
        a10537 = (t1525 << 63);
        a10538 = (t1526 >> 1);
        t3294 = (((a10537)|(a10538)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3295 = (t1526 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3296 = (t1523 >> 1);
        a10539 = (t1523 << 63);
        a10540 = (t1524 >> 1);
        t3297 = (((a10539)|(a10540)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3298 = (((t3295)|(t3296)));
        /* End of MPShiftRight2 */
        a7139 = modulus[0];
        a7140 = modulus[1];
        a7141 = modulus[2];
        a7142 = modulus[3];
        MPMulQDD_L2(t1517, t1518, t1515, t1516, t1513, t1514, t1511, t1512, 
    t3293, t3294, t3298, t3297, a7139, a7140, a7141, a7142);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d800 = (t1504 - t1512);
        b619 = ((t1504 < t1512));
        d801 = (t1503 - t1511);
        d802 = (d801 - b619);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10542 = ((t1503 < t1511));
        a10543 = ((t1503 == t1511));
        a10544 = ((a10543) && (b619));
        b620 = ((a10542) || (a10544));
        /* Begin of MPSubDDD 64 */
        d803 = (t1506 - t1514);
        b621 = ((t1506 < t1514));
        d804 = (t1505 - t1513);
        d805 = (d804 - b621);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d806 = (d803 - b620);
        b622 = ((d803 < b620));
        t3299 = (d805 - b622);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d807 = (d800 - a7142);
        b623 = ((d800 < a7142));
        d808 = (d802 - a7141);
        d809 = (d808 - b623);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10549 = ((d802 < a7141));
        a10550 = ((d802 == a7141));
        a10551 = ((a10550) && (b623));
        b624 = ((a10549) || (a10551));
        /* Begin of MPSubDDD 64 */
        d810 = (d806 - a7140);
        b625 = ((d806 < a7140));
        d811 = (t3299 - a7139);
        d812 = (d811 - b625);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d813 = (d810 - b624);
        b626 = ((d810 < b624));
        t3300 = (d812 - b626);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10555 = ((t3299 < a7139));
        a10556 = ((t3299 == a7139));
        a10557 = ((a10556) && (b625));
        a10558 = ((a10555) || (a10557));
        /* MPEqual 64 */
        a10559 = ((d806 == a7140));
        a10560 = ((a10556) && (a10559));
        /* MPLessThan 64 */
        a10561 = ((a10560) && (b624));
        i438 = ((a10558) || (a10561));
        /* MPCondD 64 */
        t3301 = ((i438) ? (t3299) : (t3300));
        t3302 = ((i438) ? (d806) : (d813));
        /* MPCondD 64 */
        t3303 = ((i438) ? (d802) : (d809));
        t3304 = ((i438) ? (d800) : (d807));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10562 = (1024*i13);
        a10563 = (2*threadIdx.x);
        a10564 = (a10562 + a10563);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10565 = (2*a10517);
        a10566 = (a10565 + 1);
        /* MPAssignDD 64 */
        a10567 = (2*a10566);
        t3305 = P2[a10567];
        a10568 = (a10567 + 1);
        t3306 = P2[a10568];
        /* MPAddQDD 64 */
        s645 = (((uint128_t ) t3306) + ((uint128_t ) t3304));
        t3307 = ((uint64_t ) s645);
        c268 = (s645 >> 64);
        s646 = (((uint128_t ) t3305) + ((uint128_t ) t3303));
        s647 = (((uint128_t ) s646) + ((uint128_t ) c268));
        t3308 = ((uint64_t ) s647);
        c269 = (s647 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10569 = (2*a10565);
        t3309 = P2[a10569];
        a10570 = (a10569 + 1);
        t3310 = P2[a10570];
        /* MPAddQDD 64 */
        s648 = (((uint128_t ) t3310) + ((uint128_t ) t3302));
        t3311 = ((uint64_t ) s648);
        c270 = (s648 >> 64);
        s649 = (((uint128_t ) t3309) + ((uint128_t ) t3301));
        s650 = (((uint128_t ) s649) + ((uint128_t ) c270));
        t3312 = ((uint64_t ) s650);
        /* MPPropagateCarry 64 */
        t3313 = (t3311 + c269);
        a10571 = ((t3313 == 0));
        a10572 = (t3312 + c269);
        t3314 = ((a10571) ? (a10572) : (t3312));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10579 = ((a7139 < t3314));
        a10580 = ((a7139 == t3314));
        a10581 = ((a7140 < t3313));
        a10582 = ((a10580) && (a10581));
        a10583 = ((a10579) || (a10582));
        /* MPEqual 64 */
        a10584 = ((a7140 == t3313));
        a10585 = ((a10580) && (a10584));
        /* MPLessThan 64 */
        a10586 = ((a7141 < t3308));
        a10587 = ((a7141 == t3308));
        a10588 = ((a7142 < t3307));
        a10589 = ((a10587) && (a10588));
        a10590 = ((a10586) || (a10589));
        a10591 = ((a10585) && (a10590));
        i439 = ((a10583) || (a10591));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d814 = (t3307 - a7142);
        b627 = ((t3307 < a7142));
        d815 = (t3308 - a7141);
        d816 = (d815 - b627);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10593 = ((t3308 < a7141));
        a10594 = ((t3308 == a7141));
        a10595 = ((a10594) && (b627));
        b628 = ((a10593) || (a10595));
        /* Begin of MPSubDDD 64 */
        d817 = (t3313 - a7140);
        b629 = ((t3313 < a7140));
        d818 = (t3314 - a7139);
        d819 = (d818 - b629);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d820 = (d817 - b628);
        b630 = ((d817 < b628));
        t3317 = (d819 - b630);
        /* End of MPSubDDD 128 */
        a10599 = (2*a10564);
        /* MPCondD 64 */
        a10600 = (2*a10599);
        P1[a10600] = ((i439) ? (t3317) : (t3314));
        a10601 = (a10600 + 1);
        P1[a10601] = ((i439) ? (d820) : (t3313));
        a10602 = (a10599 + 1);
        /* MPCondD 64 */
        a10603 = (2*a10602);
        P1[a10603] = ((i439) ? (d816) : (t3308));
        a10604 = (a10603 + 1);
        P1[a10604] = ((i439) ? (d814) : (t3307));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b631 = (a10563 + a10562);
        a10605 = (b631 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d821 = (t3306 - t3304);
        b632 = ((t3306 < t3304));
        d822 = (t3305 - t3303);
        d823 = (d822 - b632);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10607 = ((t3305 < t3303));
        a10608 = ((t3305 == t3303));
        a10609 = ((a10608) && (b632));
        b633 = ((a10607) || (a10609));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d824 = (t3310 - t3302);
        b634 = ((t3310 < t3302));
        d825 = (t3309 - t3301);
        d826 = (d825 - b634);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d827 = (d824 - b633);
        b635 = ((d824 < b633));
        t3318 = (d826 - b635);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s651 = (((uint128_t ) d821) + ((uint128_t ) a7142));
        t3319 = ((uint64_t ) s651);
        c272 = (s651 >> 64);
        s652 = (((uint128_t ) d823) + ((uint128_t ) a7141));
        s653 = (((uint128_t ) s652) + ((uint128_t ) c272));
        t3320 = ((uint64_t ) s653);
        c273 = (s653 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s654 = (((uint128_t ) d827) + ((uint128_t ) a7140));
        t3321 = ((uint64_t ) s654);
        c274 = (s654 >> 64);
        s655 = (((uint128_t ) t3318) + ((uint128_t ) a7139));
        s656 = (((uint128_t ) s655) + ((uint128_t ) c274));
        t3322 = ((uint64_t ) s656);
        /* MPPropagateCarry 64 */
        t3323 = (t3321 + c273);
        a10613 = ((t3323 == 0));
        a10614 = (t3322 + c273);
        t3324 = ((a10613) ? (a10614) : (t3322));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10621 = ((t3309 < t3301));
        a10622 = ((t3309 == t3301));
        a10623 = ((a10622) && (b634));
        a10624 = ((a10621) || (a10623));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10625 = ((t3310 == t3302));
        a10626 = ((a10622) && (a10625));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10627 = ((a10626) && (b633));
        i440 = ((a10624) || (a10627));
        a10628 = (2*a10605);
        /* MPCondD 64 */
        a10629 = (2*a10628);
        P1[a10629] = ((i440) ? (t3324) : (t3318));
        a10630 = (a10629 + 1);
        P1[a10630] = ((i440) ? (t3323) : (d827));
        a10631 = (a10628 + 1);
        /* MPCondD 64 */
        a10632 = (2*a10631);
        P1[a10632] = ((i440) ? (t3320) : (d823));
        a10633 = (a10632 + 1);
        P1[a10633] = ((i440) ? (t3319) : (d821));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code9(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10634, a10635, a10636, a10637, a10638, a10639, a10640, a10641, 
            a10642, a10643, a10644, a10645, a10646, a10647, a10648, a10649, 
            a10650, a10660, a10661, a10662, a10667, a10668, a10669, a10673, 
            a10674, a10675, a10676, a10677, a10678, a10679, a10680, a10681, 
            a10682, a10683, a10684, a10685, a10686, a10687, a10688, a10689, 
            a10697, a10698, a10699, a10700, a10701, a10702, a10703, a10704, 
            a10705, a10706, a10707, a10708, a10709, a10711, a10712, a10713, 
            a10717, a10718, a10719, a10720, a10721, a10722, a10723, a10725, 
            a10726, a10727, a10731, a10739, a10740, a10741, a10742, a10743, 
            a10744, a10745, a10746, a10747, a10748, a10749, a10750, a10751, 
            b636, b637, b638, b639, b640, b641, b642, b643, 
            b644, b645, b646, b647, b648, b649, b650, b651, 
            b652, b653, b654, c276, c277, c278, c280, c281, 
            c282, i441, i442, i443;
    uint64_t a10651, a10652, a10653, a10654, a10655, a10656, a10657, a10658, 
            a10690, a10732, a7524, a7525, a7526, a7527, a7555, a7556, 
            a7557, a7558, d828, d829, d830, d831, d832, d833, 
            d834, d835, d836, d837, d838, d839, d840, d841, 
            d842, d843, d844, d845, d846, d847, d848, d849, 
            d850, d851, d852, d853, d854, d855, t1535, t1536, 
            t1537, t1538, t1539, t1540, t1541, t1542, t1543, t1544, 
            t1545, t1546, t1547, t1548, t1549, t1550, t1551, t1552, 
            t1553, t1554, t1555, t1556, t1557, t1558, t3327, t3328, 
            t3329, t3330, t3331, t3332, t3333, t3334, t3335, t3336, 
            t3337, t3338, t3339, t3340, t3341, t3342, t3343, t3344, 
            t3345, t3346, t3347, t3348, t3349, t3350, t3351, t3352, 
            t3353, t3354, t3355, t3356, t3357, t3358, t3359, t3360, 
            t3361, t3362, t3363, t3364, t3365, t3366, t3367, t3370, 
            t3371, t3372, t3373, t3374, t3375, t3376, t3377;
    uint128_t s657, s658, s659, s660, s661, s662, s663, s664, 
            s665, s666, s667, s668;
    for(int i11 = 0; i11 <= 15; i11++) {
        a10634 = (512*i11);
        a10635 = (a10634 + threadIdx.x);
        b636 = (threadIdx.x + a10634);
        a10636 = (b636 + 8192);
        a10637 = (a10636 % 512);
        a10638 = (512 + a10637);
        /* Begin of MPModMul 128 */
        a10639 = (2*a10638);
        a10640 = (a10639 + 1);
        a10641 = (2*a10636);
        a10642 = (a10641 + 1);
        /* MPAssignDD 64 */
        a10643 = (2*a10639);
        t3327 = twiddles[a10643];
        a10644 = (a10643 + 1);
        t3328 = twiddles[a10644];
        /* MPAssignDD 64 */
        a10645 = (2*a10640);
        t3329 = twiddles[a10645];
        a10646 = (a10645 + 1);
        t3330 = twiddles[a10646];
        /* MPAssignDD 64 */
        a10647 = (2*a10641);
        t3331 = P1[a10647];
        a10648 = (a10647 + 1);
        t3332 = P1[a10648];
        /* MPAssignDD 64 */
        a10649 = (2*a10642);
        t3333 = P1[a10649];
        a10650 = (a10649 + 1);
        t3334 = P1[a10650];
        MPMulQDD_L2(t1541, t1542, t1539, t1540, t1537, t1538, t1535, t1536, 
    t3327, t3328, t3329, t3330, t3331, t3332, t3333, t3334);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3335 = (t1537 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b637 = ((int) 1);
        t3336 = (288230376151711744 - b637);
        /* MPBinAndD 64 */
        t3337 = (((t1541)&(t3336)));
        t3338 = (((t1542)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10651 = (t3337 << 6);
        a10652 = (t3338 >> 58);
        t3339 = (((a10651)|(a10652)));
        t3340 = (t3338 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3341 = (t1539 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3342 = (((t3340)|(t3341)));
        /* Begin of MPShiftLeft2D */
        a10653 = (t1539 << 6);
        a10654 = (t1540 >> 58);
        t3343 = (((a10653)|(a10654)));
        t3344 = (t1540 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3345 = (((t3344)|(t3335)));
        /* End of MPShiftRight3 */
        a7524 = mu[0];
        a7525 = mu[1];
        a7526 = mu[2];
        a7527 = mu[3];
        MPMulQDD_L2(t1557, t1558, t1555, t1556, t1553, t1554, t1551, t1552, 
    t3339, t3342, t3343, t3345, a7524, a7525, a7526, a7527);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3346 = (t1557 >> 1);
        a10655 = (t1557 << 63);
        a10656 = (t1558 >> 1);
        t3347 = (((a10655)|(a10656)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3348 = (t1558 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3349 = (t1555 >> 1);
        a10657 = (t1555 << 63);
        a10658 = (t1556 >> 1);
        t3350 = (((a10657)|(a10658)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3351 = (((t3348)|(t3349)));
        /* End of MPShiftRight2 */
        a7555 = modulus[0];
        a7556 = modulus[1];
        a7557 = modulus[2];
        a7558 = modulus[3];
        MPMulQDD_L2(t1549, t1550, t1547, t1548, t1545, t1546, t1543, t1544, 
    t3346, t3347, t3351, t3350, a7555, a7556, a7557, a7558);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d828 = (t1536 - t1544);
        b638 = ((t1536 < t1544));
        d829 = (t1535 - t1543);
        d830 = (d829 - b638);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10660 = ((t1535 < t1543));
        a10661 = ((t1535 == t1543));
        a10662 = ((a10661) && (b638));
        b639 = ((a10660) || (a10662));
        /* Begin of MPSubDDD 64 */
        d831 = (t1538 - t1546);
        b640 = ((t1538 < t1546));
        d832 = (t1537 - t1545);
        d833 = (d832 - b640);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d834 = (d831 - b639);
        b641 = ((d831 < b639));
        t3352 = (d833 - b641);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d835 = (d828 - a7558);
        b642 = ((d828 < a7558));
        d836 = (d830 - a7557);
        d837 = (d836 - b642);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10667 = ((d830 < a7557));
        a10668 = ((d830 == a7557));
        a10669 = ((a10668) && (b642));
        b643 = ((a10667) || (a10669));
        /* Begin of MPSubDDD 64 */
        d838 = (d834 - a7556);
        b644 = ((d834 < a7556));
        d839 = (t3352 - a7555);
        d840 = (d839 - b644);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d841 = (d838 - b643);
        b645 = ((d838 < b643));
        t3353 = (d840 - b645);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10673 = ((t3352 < a7555));
        a10674 = ((t3352 == a7555));
        a10675 = ((a10674) && (b644));
        a10676 = ((a10673) || (a10675));
        /* MPEqual 64 */
        a10677 = ((d834 == a7556));
        a10678 = ((a10674) && (a10677));
        /* MPLessThan 64 */
        a10679 = ((a10678) && (b643));
        i441 = ((a10676) || (a10679));
        /* MPCondD 64 */
        t3354 = ((i441) ? (t3352) : (t3353));
        t3355 = ((i441) ? (d834) : (d841));
        /* MPCondD 64 */
        t3356 = ((i441) ? (d830) : (d837));
        t3357 = ((i441) ? (d828) : (d835));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10680 = (1024*i11);
        a10681 = (2*threadIdx.x);
        a10682 = (a10680 + a10681);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10683 = (2*a10635);
        a10684 = (a10683 + 1);
        /* MPAssignDD 64 */
        a10685 = (2*a10684);
        t3358 = P1[a10685];
        a10686 = (a10685 + 1);
        t3359 = P1[a10686];
        /* MPAddQDD 64 */
        s657 = (((uint128_t ) t3359) + ((uint128_t ) t3357));
        t3360 = ((uint64_t ) s657);
        c276 = (s657 >> 64);
        s658 = (((uint128_t ) t3358) + ((uint128_t ) t3356));
        s659 = (((uint128_t ) s658) + ((uint128_t ) c276));
        t3361 = ((uint64_t ) s659);
        c277 = (s659 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10687 = (2*a10683);
        t3362 = P1[a10687];
        a10688 = (a10687 + 1);
        t3363 = P1[a10688];
        /* MPAddQDD 64 */
        s660 = (((uint128_t ) t3363) + ((uint128_t ) t3355));
        t3364 = ((uint64_t ) s660);
        c278 = (s660 >> 64);
        s661 = (((uint128_t ) t3362) + ((uint128_t ) t3354));
        s662 = (((uint128_t ) s661) + ((uint128_t ) c278));
        t3365 = ((uint64_t ) s662);
        /* MPPropagateCarry 64 */
        t3366 = (t3364 + c277);
        a10689 = ((t3366 == 0));
        a10690 = (t3365 + c277);
        t3367 = ((a10689) ? (a10690) : (t3365));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10697 = ((a7555 < t3367));
        a10698 = ((a7555 == t3367));
        a10699 = ((a7556 < t3366));
        a10700 = ((a10698) && (a10699));
        a10701 = ((a10697) || (a10700));
        /* MPEqual 64 */
        a10702 = ((a7556 == t3366));
        a10703 = ((a10698) && (a10702));
        /* MPLessThan 64 */
        a10704 = ((a7557 < t3361));
        a10705 = ((a7557 == t3361));
        a10706 = ((a7558 < t3360));
        a10707 = ((a10705) && (a10706));
        a10708 = ((a10704) || (a10707));
        a10709 = ((a10703) && (a10708));
        i442 = ((a10701) || (a10709));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d842 = (t3360 - a7558);
        b646 = ((t3360 < a7558));
        d843 = (t3361 - a7557);
        d844 = (d843 - b646);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10711 = ((t3361 < a7557));
        a10712 = ((t3361 == a7557));
        a10713 = ((a10712) && (b646));
        b647 = ((a10711) || (a10713));
        /* Begin of MPSubDDD 64 */
        d845 = (t3366 - a7556);
        b648 = ((t3366 < a7556));
        d846 = (t3367 - a7555);
        d847 = (d846 - b648);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d848 = (d845 - b647);
        b649 = ((d845 < b647));
        t3370 = (d847 - b649);
        /* End of MPSubDDD 128 */
        a10717 = (2*a10682);
        /* MPCondD 64 */
        a10718 = (2*a10717);
        P2[a10718] = ((i442) ? (t3370) : (t3367));
        a10719 = (a10718 + 1);
        P2[a10719] = ((i442) ? (d848) : (t3366));
        a10720 = (a10717 + 1);
        /* MPCondD 64 */
        a10721 = (2*a10720);
        P2[a10721] = ((i442) ? (d844) : (t3361));
        a10722 = (a10721 + 1);
        P2[a10722] = ((i442) ? (d842) : (t3360));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b650 = (a10681 + a10680);
        a10723 = (b650 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d849 = (t3359 - t3357);
        b651 = ((t3359 < t3357));
        d850 = (t3358 - t3356);
        d851 = (d850 - b651);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10725 = ((t3358 < t3356));
        a10726 = ((t3358 == t3356));
        a10727 = ((a10726) && (b651));
        b652 = ((a10725) || (a10727));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d852 = (t3363 - t3355);
        b653 = ((t3363 < t3355));
        d853 = (t3362 - t3354);
        d854 = (d853 - b653);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d855 = (d852 - b652);
        b654 = ((d852 < b652));
        t3371 = (d854 - b654);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s663 = (((uint128_t ) d849) + ((uint128_t ) a7558));
        t3372 = ((uint64_t ) s663);
        c280 = (s663 >> 64);
        s664 = (((uint128_t ) d851) + ((uint128_t ) a7557));
        s665 = (((uint128_t ) s664) + ((uint128_t ) c280));
        t3373 = ((uint64_t ) s665);
        c281 = (s665 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s666 = (((uint128_t ) d855) + ((uint128_t ) a7556));
        t3374 = ((uint64_t ) s666);
        c282 = (s666 >> 64);
        s667 = (((uint128_t ) t3371) + ((uint128_t ) a7555));
        s668 = (((uint128_t ) s667) + ((uint128_t ) c282));
        t3375 = ((uint64_t ) s668);
        /* MPPropagateCarry 64 */
        t3376 = (t3374 + c281);
        a10731 = ((t3376 == 0));
        a10732 = (t3375 + c281);
        t3377 = ((a10731) ? (a10732) : (t3375));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10739 = ((t3362 < t3354));
        a10740 = ((t3362 == t3354));
        a10741 = ((a10740) && (b653));
        a10742 = ((a10739) || (a10741));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10743 = ((t3363 == t3355));
        a10744 = ((a10740) && (a10743));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10745 = ((a10744) && (b652));
        i443 = ((a10742) || (a10745));
        a10746 = (2*a10723);
        /* MPCondD 64 */
        a10747 = (2*a10746);
        P2[a10747] = ((i443) ? (t3377) : (t3371));
        a10748 = (a10747 + 1);
        P2[a10748] = ((i443) ? (t3376) : (d855));
        a10749 = (a10746 + 1);
        /* MPCondD 64 */
        a10750 = (2*a10749);
        P2[a10750] = ((i443) ? (t3373) : (d851));
        a10751 = (a10750 + 1);
        P2[a10751] = ((i443) ? (t3372) : (d849));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code10(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10752, a10753, a10754, a10755, a10756, a10757, a10758, a10759, 
            a10760, a10761, a10762, a10763, a10764, a10765, a10766, a10767, 
            a10768, a10778, a10779, a10780, a10785, a10786, a10787, a10791, 
            a10792, a10793, a10794, a10795, a10796, a10797, a10798, a10799, 
            a10800, a10801, a10802, a10803, a10804, a10805, a10806, a10807, 
            a10815, a10816, a10817, a10818, a10819, a10820, a10821, a10822, 
            a10823, a10824, a10825, a10826, a10827, a10829, a10830, a10831, 
            a10835, a10836, a10837, a10838, a10839, a10840, a10841, a10843, 
            a10844, a10845, a10849, a10857, a10858, a10859, a10860, a10861, 
            a10862, a10863, a10864, a10865, a10866, a10867, a10868, a10869, 
            b655, b656, b657, b658, b659, b660, b661, b662, 
            b663, b664, b665, b666, b667, b668, b669, b670, 
            b671, c284, c285, c286, c288, c289, c290, i444, 
            i445, i446;
    uint64_t a10769, a10770, a10771, a10772, a10773, a10774, a10775, a10776, 
            a10808, a10850, a7940, a7941, a7942, a7943, a7971, a7972, 
            a7973, a7974, d856, d857, d858, d859, d860, d861, 
            d862, d863, d864, d865, d866, d867, d868, d869, 
            d870, d871, d872, d873, d874, d875, d876, d877, 
            d878, d879, d880, d881, d882, d883, t1567, t1568, 
            t1569, t1570, t1571, t1572, t1573, t1574, t1575, t1576, 
            t1577, t1578, t1579, t1580, t1581, t1582, t1583, t1584, 
            t1585, t1586, t1587, t1588, t1589, t1590, t3380, t3381, 
            t3382, t3383, t3384, t3385, t3386, t3387, t3388, t3389, 
            t3390, t3391, t3392, t3393, t3394, t3395, t3396, t3397, 
            t3398, t3399, t3400, t3401, t3402, t3403, t3404, t3405, 
            t3406, t3407, t3408, t3409, t3410, t3411, t3412, t3413, 
            t3414, t3415, t3416, t3417, t3418, t3419, t3420, t3423, 
            t3424, t3425, t3426, t3427, t3428, t3429, t3430;
    uint128_t s669, s670, s671, s672, s673, s674, s675, s676, 
            s677, s678, s679, s680;
    for(int i9 = 0; i9 <= 15; i9++) {
        a10752 = (512*i9);
        a10753 = (threadIdx.x + a10752);
        a10754 = (a10753 + 8192);
        a10755 = (a10754 % 1024);
        a10756 = (1024 + a10755);
        /* Begin of MPModMul 128 */
        a10757 = (2*a10756);
        a10758 = (a10757 + 1);
        a10759 = (2*a10754);
        a10760 = (a10759 + 1);
        /* MPAssignDD 64 */
        a10761 = (2*a10757);
        t3380 = twiddles[a10761];
        a10762 = (a10761 + 1);
        t3381 = twiddles[a10762];
        /* MPAssignDD 64 */
        a10763 = (2*a10758);
        t3382 = twiddles[a10763];
        a10764 = (a10763 + 1);
        t3383 = twiddles[a10764];
        /* MPAssignDD 64 */
        a10765 = (2*a10759);
        t3384 = P2[a10765];
        a10766 = (a10765 + 1);
        t3385 = P2[a10766];
        /* MPAssignDD 64 */
        a10767 = (2*a10760);
        t3386 = P2[a10767];
        a10768 = (a10767 + 1);
        t3387 = P2[a10768];
        MPMulQDD_L2(t1573, t1574, t1571, t1572, t1569, t1570, t1567, t1568, 
    t3380, t3381, t3382, t3383, t3384, t3385, t3386, t3387);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3388 = (t1569 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b655 = ((int) 1);
        t3389 = (288230376151711744 - b655);
        /* MPBinAndD 64 */
        t3390 = (((t1573)&(t3389)));
        t3391 = (((t1574)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10769 = (t3390 << 6);
        a10770 = (t3391 >> 58);
        t3392 = (((a10769)|(a10770)));
        t3393 = (t3391 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3394 = (t1571 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3395 = (((t3393)|(t3394)));
        /* Begin of MPShiftLeft2D */
        a10771 = (t1571 << 6);
        a10772 = (t1572 >> 58);
        t3396 = (((a10771)|(a10772)));
        t3397 = (t1572 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3398 = (((t3397)|(t3388)));
        /* End of MPShiftRight3 */
        a7940 = mu[0];
        a7941 = mu[1];
        a7942 = mu[2];
        a7943 = mu[3];
        MPMulQDD_L2(t1589, t1590, t1587, t1588, t1585, t1586, t1583, t1584, 
    t3392, t3395, t3396, t3398, a7940, a7941, a7942, a7943);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3399 = (t1589 >> 1);
        a10773 = (t1589 << 63);
        a10774 = (t1590 >> 1);
        t3400 = (((a10773)|(a10774)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3401 = (t1590 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3402 = (t1587 >> 1);
        a10775 = (t1587 << 63);
        a10776 = (t1588 >> 1);
        t3403 = (((a10775)|(a10776)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3404 = (((t3401)|(t3402)));
        /* End of MPShiftRight2 */
        a7971 = modulus[0];
        a7972 = modulus[1];
        a7973 = modulus[2];
        a7974 = modulus[3];
        MPMulQDD_L2(t1581, t1582, t1579, t1580, t1577, t1578, t1575, t1576, 
    t3399, t3400, t3404, t3403, a7971, a7972, a7973, a7974);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d856 = (t1568 - t1576);
        b656 = ((t1568 < t1576));
        d857 = (t1567 - t1575);
        d858 = (d857 - b656);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10778 = ((t1567 < t1575));
        a10779 = ((t1567 == t1575));
        a10780 = ((a10779) && (b656));
        b657 = ((a10778) || (a10780));
        /* Begin of MPSubDDD 64 */
        d859 = (t1570 - t1578);
        b658 = ((t1570 < t1578));
        d860 = (t1569 - t1577);
        d861 = (d860 - b658);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d862 = (d859 - b657);
        b659 = ((d859 < b657));
        t3405 = (d861 - b659);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d863 = (d856 - a7974);
        b660 = ((d856 < a7974));
        d864 = (d858 - a7973);
        d865 = (d864 - b660);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10785 = ((d858 < a7973));
        a10786 = ((d858 == a7973));
        a10787 = ((a10786) && (b660));
        b661 = ((a10785) || (a10787));
        /* Begin of MPSubDDD 64 */
        d866 = (d862 - a7972);
        b662 = ((d862 < a7972));
        d867 = (t3405 - a7971);
        d868 = (d867 - b662);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d869 = (d866 - b661);
        b663 = ((d866 < b661));
        t3406 = (d868 - b663);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10791 = ((t3405 < a7971));
        a10792 = ((t3405 == a7971));
        a10793 = ((a10792) && (b662));
        a10794 = ((a10791) || (a10793));
        /* MPEqual 64 */
        a10795 = ((d862 == a7972));
        a10796 = ((a10792) && (a10795));
        /* MPLessThan 64 */
        a10797 = ((a10796) && (b661));
        i444 = ((a10794) || (a10797));
        /* MPCondD 64 */
        t3407 = ((i444) ? (t3405) : (t3406));
        t3408 = ((i444) ? (d862) : (d869));
        /* MPCondD 64 */
        t3409 = ((i444) ? (d858) : (d865));
        t3410 = ((i444) ? (d856) : (d863));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10798 = (2*threadIdx.x);
        a10799 = (1024*i9);
        a10800 = (a10798 + a10799);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10801 = (2*a10753);
        a10802 = (a10801 + 1);
        /* MPAssignDD 64 */
        a10803 = (2*a10802);
        t3411 = P2[a10803];
        a10804 = (a10803 + 1);
        t3412 = P2[a10804];
        /* MPAddQDD 64 */
        s669 = (((uint128_t ) t3412) + ((uint128_t ) t3410));
        t3413 = ((uint64_t ) s669);
        c284 = (s669 >> 64);
        s670 = (((uint128_t ) t3411) + ((uint128_t ) t3409));
        s671 = (((uint128_t ) s670) + ((uint128_t ) c284));
        t3414 = ((uint64_t ) s671);
        c285 = (s671 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10805 = (2*a10801);
        t3415 = P2[a10805];
        a10806 = (a10805 + 1);
        t3416 = P2[a10806];
        /* MPAddQDD 64 */
        s672 = (((uint128_t ) t3416) + ((uint128_t ) t3408));
        t3417 = ((uint64_t ) s672);
        c286 = (s672 >> 64);
        s673 = (((uint128_t ) t3415) + ((uint128_t ) t3407));
        s674 = (((uint128_t ) s673) + ((uint128_t ) c286));
        t3418 = ((uint64_t ) s674);
        /* MPPropagateCarry 64 */
        t3419 = (t3417 + c285);
        a10807 = ((t3419 == 0));
        a10808 = (t3418 + c285);
        t3420 = ((a10807) ? (a10808) : (t3418));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10815 = ((a7971 < t3420));
        a10816 = ((a7971 == t3420));
        a10817 = ((a7972 < t3419));
        a10818 = ((a10816) && (a10817));
        a10819 = ((a10815) || (a10818));
        /* MPEqual 64 */
        a10820 = ((a7972 == t3419));
        a10821 = ((a10816) && (a10820));
        /* MPLessThan 64 */
        a10822 = ((a7973 < t3414));
        a10823 = ((a7973 == t3414));
        a10824 = ((a7974 < t3413));
        a10825 = ((a10823) && (a10824));
        a10826 = ((a10822) || (a10825));
        a10827 = ((a10821) && (a10826));
        i445 = ((a10819) || (a10827));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d870 = (t3413 - a7974);
        b664 = ((t3413 < a7974));
        d871 = (t3414 - a7973);
        d872 = (d871 - b664);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10829 = ((t3414 < a7973));
        a10830 = ((t3414 == a7973));
        a10831 = ((a10830) && (b664));
        b665 = ((a10829) || (a10831));
        /* Begin of MPSubDDD 64 */
        d873 = (t3419 - a7972);
        b666 = ((t3419 < a7972));
        d874 = (t3420 - a7971);
        d875 = (d874 - b666);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d876 = (d873 - b665);
        b667 = ((d873 < b665));
        t3423 = (d875 - b667);
        /* End of MPSubDDD 128 */
        a10835 = (2*a10800);
        /* MPCondD 64 */
        a10836 = (2*a10835);
        P1[a10836] = ((i445) ? (t3423) : (t3420));
        a10837 = (a10836 + 1);
        P1[a10837] = ((i445) ? (d876) : (t3419));
        a10838 = (a10835 + 1);
        /* MPCondD 64 */
        a10839 = (2*a10838);
        P1[a10839] = ((i445) ? (d872) : (t3414));
        a10840 = (a10839 + 1);
        P1[a10840] = ((i445) ? (d870) : (t3413));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a10841 = (a10800 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d877 = (t3412 - t3410);
        b668 = ((t3412 < t3410));
        d878 = (t3411 - t3409);
        d879 = (d878 - b668);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10843 = ((t3411 < t3409));
        a10844 = ((t3411 == t3409));
        a10845 = ((a10844) && (b668));
        b669 = ((a10843) || (a10845));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d880 = (t3416 - t3408);
        b670 = ((t3416 < t3408));
        d881 = (t3415 - t3407);
        d882 = (d881 - b670);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d883 = (d880 - b669);
        b671 = ((d880 < b669));
        t3424 = (d882 - b671);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s675 = (((uint128_t ) d877) + ((uint128_t ) a7974));
        t3425 = ((uint64_t ) s675);
        c288 = (s675 >> 64);
        s676 = (((uint128_t ) d879) + ((uint128_t ) a7973));
        s677 = (((uint128_t ) s676) + ((uint128_t ) c288));
        t3426 = ((uint64_t ) s677);
        c289 = (s677 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s678 = (((uint128_t ) d883) + ((uint128_t ) a7972));
        t3427 = ((uint64_t ) s678);
        c290 = (s678 >> 64);
        s679 = (((uint128_t ) t3424) + ((uint128_t ) a7971));
        s680 = (((uint128_t ) s679) + ((uint128_t ) c290));
        t3428 = ((uint64_t ) s680);
        /* MPPropagateCarry 64 */
        t3429 = (t3427 + c289);
        a10849 = ((t3429 == 0));
        a10850 = (t3428 + c289);
        t3430 = ((a10849) ? (a10850) : (t3428));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10857 = ((t3415 < t3407));
        a10858 = ((t3415 == t3407));
        a10859 = ((a10858) && (b670));
        a10860 = ((a10857) || (a10859));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10861 = ((t3416 == t3408));
        a10862 = ((a10858) && (a10861));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10863 = ((a10862) && (b669));
        i446 = ((a10860) || (a10863));
        a10864 = (2*a10841);
        /* MPCondD 64 */
        a10865 = (2*a10864);
        P1[a10865] = ((i446) ? (t3430) : (t3424));
        a10866 = (a10865 + 1);
        P1[a10866] = ((i446) ? (t3429) : (d883));
        a10867 = (a10864 + 1);
        /* MPCondD 64 */
        a10868 = (2*a10867);
        P1[a10868] = ((i446) ? (t3426) : (d879));
        a10869 = (a10868 + 1);
        P1[a10869] = ((i446) ? (t3425) : (d877));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code11(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10870, a10871, a10872, a10873, a10874, a10875, a10876, a10877, 
            a10878, a10879, a10880, a10881, a10882, a10883, a10884, a10885, 
            a10886, a10896, a10897, a10898, a10903, a10904, a10905, a10909, 
            a10910, a10911, a10912, a10913, a10914, a10915, a10916, a10917, 
            a10918, a10919, a10920, a10921, a10922, a10923, a10924, a10925, 
            a10933, a10934, a10935, a10936, a10937, a10938, a10939, a10940, 
            a10941, a10942, a10943, a10944, a10945, a10947, a10948, a10949, 
            a10953, a10954, a10955, a10956, a10957, a10958, a10959, a10961, 
            a10962, a10963, a10967, a10975, a10976, a10977, a10978, a10979, 
            a10980, a10981, a10982, a10983, a10984, a10985, a10986, a10987, 
            b672, b673, b674, b675, b676, b677, b678, b679, 
            b680, b681, b682, b683, b684, b685, b686, b687, 
            b688, c292, c293, c294, c296, c297, c298, i447, 
            i448, i449;
    uint64_t a10887, a10888, a10889, a10890, a10891, a10892, a10893, a10894, 
            a10926, a10968, a8356, a8357, a8358, a8359, a8387, a8388, 
            a8389, a8390, d884, d885, d886, d887, d888, d889, 
            d890, d891, d892, d893, d894, d895, d896, d897, 
            d898, d899, d900, d901, d902, d903, d904, d905, 
            d906, d907, d908, d909, d910, d911, t1599, t1600, 
            t1601, t1602, t1603, t1604, t1605, t1606, t1607, t1608, 
            t1609, t1610, t1611, t1612, t1613, t1614, t1615, t1616, 
            t1617, t1618, t1619, t1620, t1621, t1622, t3433, t3434, 
            t3435, t3436, t3437, t3438, t3439, t3440, t3441, t3442, 
            t3443, t3444, t3445, t3446, t3447, t3448, t3449, t3450, 
            t3451, t3452, t3453, t3454, t3455, t3456, t3457, t3458, 
            t3459, t3460, t3461, t3462, t3463, t3464, t3465, t3466, 
            t3467, t3468, t3469, t3470, t3471, t3472, t3473, t3476, 
            t3477, t3478, t3479, t3480, t3481, t3482, t3483;
    uint128_t s681, s682, s683, s684, s685, s686, s687, s688, 
            s689, s690, s691, s692;
    for(int i7 = 0; i7 <= 15; i7++) {
        a10870 = (512*i7);
        a10871 = (threadIdx.x + a10870);
        a10872 = (a10871 + 8192);
        a10873 = (a10872 % 2048);
        a10874 = (2048 + a10873);
        /* Begin of MPModMul 128 */
        a10875 = (2*a10874);
        a10876 = (a10875 + 1);
        a10877 = (2*a10872);
        a10878 = (a10877 + 1);
        /* MPAssignDD 64 */
        a10879 = (2*a10875);
        t3433 = twiddles[a10879];
        a10880 = (a10879 + 1);
        t3434 = twiddles[a10880];
        /* MPAssignDD 64 */
        a10881 = (2*a10876);
        t3435 = twiddles[a10881];
        a10882 = (a10881 + 1);
        t3436 = twiddles[a10882];
        /* MPAssignDD 64 */
        a10883 = (2*a10877);
        t3437 = P1[a10883];
        a10884 = (a10883 + 1);
        t3438 = P1[a10884];
        /* MPAssignDD 64 */
        a10885 = (2*a10878);
        t3439 = P1[a10885];
        a10886 = (a10885 + 1);
        t3440 = P1[a10886];
        MPMulQDD_L2(t1605, t1606, t1603, t1604, t1601, t1602, t1599, t1600, 
    t3433, t3434, t3435, t3436, t3437, t3438, t3439, t3440);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3441 = (t1601 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b672 = ((int) 1);
        t3442 = (288230376151711744 - b672);
        /* MPBinAndD 64 */
        t3443 = (((t1605)&(t3442)));
        t3444 = (((t1606)&((-1))));
        /* Begin of MPShiftLeft2D */
        a10887 = (t3443 << 6);
        a10888 = (t3444 >> 58);
        t3445 = (((a10887)|(a10888)));
        t3446 = (t3444 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3447 = (t1603 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3448 = (((t3446)|(t3447)));
        /* Begin of MPShiftLeft2D */
        a10889 = (t1603 << 6);
        a10890 = (t1604 >> 58);
        t3449 = (((a10889)|(a10890)));
        t3450 = (t1604 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3451 = (((t3450)|(t3441)));
        /* End of MPShiftRight3 */
        a8356 = mu[0];
        a8357 = mu[1];
        a8358 = mu[2];
        a8359 = mu[3];
        MPMulQDD_L2(t1621, t1622, t1619, t1620, t1617, t1618, t1615, t1616, 
    t3445, t3448, t3449, t3451, a8356, a8357, a8358, a8359);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3452 = (t1621 >> 1);
        a10891 = (t1621 << 63);
        a10892 = (t1622 >> 1);
        t3453 = (((a10891)|(a10892)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3454 = (t1622 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3455 = (t1619 >> 1);
        a10893 = (t1619 << 63);
        a10894 = (t1620 >> 1);
        t3456 = (((a10893)|(a10894)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3457 = (((t3454)|(t3455)));
        /* End of MPShiftRight2 */
        a8387 = modulus[0];
        a8388 = modulus[1];
        a8389 = modulus[2];
        a8390 = modulus[3];
        MPMulQDD_L2(t1613, t1614, t1611, t1612, t1609, t1610, t1607, t1608, 
    t3452, t3453, t3457, t3456, a8387, a8388, a8389, a8390);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d884 = (t1600 - t1608);
        b673 = ((t1600 < t1608));
        d885 = (t1599 - t1607);
        d886 = (d885 - b673);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10896 = ((t1599 < t1607));
        a10897 = ((t1599 == t1607));
        a10898 = ((a10897) && (b673));
        b674 = ((a10896) || (a10898));
        /* Begin of MPSubDDD 64 */
        d887 = (t1602 - t1610);
        b675 = ((t1602 < t1610));
        d888 = (t1601 - t1609);
        d889 = (d888 - b675);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d890 = (d887 - b674);
        b676 = ((d887 < b674));
        t3458 = (d889 - b676);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d891 = (d884 - a8390);
        b677 = ((d884 < a8390));
        d892 = (d886 - a8389);
        d893 = (d892 - b677);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10903 = ((d886 < a8389));
        a10904 = ((d886 == a8389));
        a10905 = ((a10904) && (b677));
        b678 = ((a10903) || (a10905));
        /* Begin of MPSubDDD 64 */
        d894 = (d890 - a8388);
        b679 = ((d890 < a8388));
        d895 = (t3458 - a8387);
        d896 = (d895 - b679);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d897 = (d894 - b678);
        b680 = ((d894 < b678));
        t3459 = (d896 - b680);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10909 = ((t3458 < a8387));
        a10910 = ((t3458 == a8387));
        a10911 = ((a10910) && (b679));
        a10912 = ((a10909) || (a10911));
        /* MPEqual 64 */
        a10913 = ((d890 == a8388));
        a10914 = ((a10910) && (a10913));
        /* MPLessThan 64 */
        a10915 = ((a10914) && (b678));
        i447 = ((a10912) || (a10915));
        /* MPCondD 64 */
        t3460 = ((i447) ? (t3458) : (t3459));
        t3461 = ((i447) ? (d890) : (d897));
        /* MPCondD 64 */
        t3462 = ((i447) ? (d886) : (d893));
        t3463 = ((i447) ? (d884) : (d891));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a10916 = (2*threadIdx.x);
        a10917 = (1024*i7);
        a10918 = (a10916 + a10917);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a10919 = (2*a10871);
        a10920 = (a10919 + 1);
        /* MPAssignDD 64 */
        a10921 = (2*a10920);
        t3464 = P1[a10921];
        a10922 = (a10921 + 1);
        t3465 = P1[a10922];
        /* MPAddQDD 64 */
        s681 = (((uint128_t ) t3465) + ((uint128_t ) t3463));
        t3466 = ((uint64_t ) s681);
        c292 = (s681 >> 64);
        s682 = (((uint128_t ) t3464) + ((uint128_t ) t3462));
        s683 = (((uint128_t ) s682) + ((uint128_t ) c292));
        t3467 = ((uint64_t ) s683);
        c293 = (s683 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a10923 = (2*a10919);
        t3468 = P1[a10923];
        a10924 = (a10923 + 1);
        t3469 = P1[a10924];
        /* MPAddQDD 64 */
        s684 = (((uint128_t ) t3469) + ((uint128_t ) t3461));
        t3470 = ((uint64_t ) s684);
        c294 = (s684 >> 64);
        s685 = (((uint128_t ) t3468) + ((uint128_t ) t3460));
        s686 = (((uint128_t ) s685) + ((uint128_t ) c294));
        t3471 = ((uint64_t ) s686);
        /* MPPropagateCarry 64 */
        t3472 = (t3470 + c293);
        a10925 = ((t3472 == 0));
        a10926 = (t3471 + c293);
        t3473 = ((a10925) ? (a10926) : (t3471));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a10933 = ((a8387 < t3473));
        a10934 = ((a8387 == t3473));
        a10935 = ((a8388 < t3472));
        a10936 = ((a10934) && (a10935));
        a10937 = ((a10933) || (a10936));
        /* MPEqual 64 */
        a10938 = ((a8388 == t3472));
        a10939 = ((a10934) && (a10938));
        /* MPLessThan 64 */
        a10940 = ((a8389 < t3467));
        a10941 = ((a8389 == t3467));
        a10942 = ((a8390 < t3466));
        a10943 = ((a10941) && (a10942));
        a10944 = ((a10940) || (a10943));
        a10945 = ((a10939) && (a10944));
        i448 = ((a10937) || (a10945));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d898 = (t3466 - a8390);
        b681 = ((t3466 < a8390));
        d899 = (t3467 - a8389);
        d900 = (d899 - b681);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a10947 = ((t3467 < a8389));
        a10948 = ((t3467 == a8389));
        a10949 = ((a10948) && (b681));
        b682 = ((a10947) || (a10949));
        /* Begin of MPSubDDD 64 */
        d901 = (t3472 - a8388);
        b683 = ((t3472 < a8388));
        d902 = (t3473 - a8387);
        d903 = (d902 - b683);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d904 = (d901 - b682);
        b684 = ((d901 < b682));
        t3476 = (d903 - b684);
        /* End of MPSubDDD 128 */
        a10953 = (2*a10918);
        /* MPCondD 64 */
        a10954 = (2*a10953);
        P2[a10954] = ((i448) ? (t3476) : (t3473));
        a10955 = (a10954 + 1);
        P2[a10955] = ((i448) ? (d904) : (t3472));
        a10956 = (a10953 + 1);
        /* MPCondD 64 */
        a10957 = (2*a10956);
        P2[a10957] = ((i448) ? (d900) : (t3467));
        a10958 = (a10957 + 1);
        P2[a10958] = ((i448) ? (d898) : (t3466));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a10959 = (a10918 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d905 = (t3465 - t3463);
        b685 = ((t3465 < t3463));
        d906 = (t3464 - t3462);
        d907 = (d906 - b685);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10961 = ((t3464 < t3462));
        a10962 = ((t3464 == t3462));
        a10963 = ((a10962) && (b685));
        b686 = ((a10961) || (a10963));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d908 = (t3469 - t3461);
        b687 = ((t3469 < t3461));
        d909 = (t3468 - t3460);
        d910 = (d909 - b687);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d911 = (d908 - b686);
        b688 = ((d908 < b686));
        t3477 = (d910 - b688);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s687 = (((uint128_t ) d905) + ((uint128_t ) a8390));
        t3478 = ((uint64_t ) s687);
        c296 = (s687 >> 64);
        s688 = (((uint128_t ) d907) + ((uint128_t ) a8389));
        s689 = (((uint128_t ) s688) + ((uint128_t ) c296));
        t3479 = ((uint64_t ) s689);
        c297 = (s689 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s690 = (((uint128_t ) d911) + ((uint128_t ) a8388));
        t3480 = ((uint64_t ) s690);
        c298 = (s690 >> 64);
        s691 = (((uint128_t ) t3477) + ((uint128_t ) a8387));
        s692 = (((uint128_t ) s691) + ((uint128_t ) c298));
        t3481 = ((uint64_t ) s692);
        /* MPPropagateCarry 64 */
        t3482 = (t3480 + c297);
        a10967 = ((t3482 == 0));
        a10968 = (t3481 + c297);
        t3483 = ((a10967) ? (a10968) : (t3481));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10975 = ((t3468 < t3460));
        a10976 = ((t3468 == t3460));
        a10977 = ((a10976) && (b687));
        a10978 = ((a10975) || (a10977));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a10979 = ((t3469 == t3461));
        a10980 = ((a10976) && (a10979));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a10981 = ((a10980) && (b686));
        i449 = ((a10978) || (a10981));
        a10982 = (2*a10959);
        /* MPCondD 64 */
        a10983 = (2*a10982);
        P2[a10983] = ((i449) ? (t3483) : (t3477));
        a10984 = (a10983 + 1);
        P2[a10984] = ((i449) ? (t3482) : (d911));
        a10985 = (a10982 + 1);
        /* MPCondD 64 */
        a10986 = (2*a10985);
        P2[a10986] = ((i449) ? (t3479) : (d907));
        a10987 = (a10986 + 1);
        P2[a10987] = ((i449) ? (t3478) : (d905));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code12(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a10988, a10989, a10990, a10991, a10992, a10993, a10994, a10995, 
            a10996, a10997, a10998, a10999, a11000, a11001, a11002, a11003, 
            a11004, a11014, a11015, a11016, a11021, a11022, a11023, a11027, 
            a11028, a11029, a11030, a11031, a11032, a11033, a11034, a11035, 
            a11036, a11037, a11038, a11039, a11040, a11041, a11042, a11043, 
            a11051, a11052, a11053, a11054, a11055, a11056, a11057, a11058, 
            a11059, a11060, a11061, a11062, a11063, a11065, a11066, a11067, 
            a11071, a11072, a11073, a11074, a11075, a11076, a11077, a11079, 
            a11080, a11081, a11085, a11093, a11094, a11095, a11096, a11097, 
            a11098, a11099, a11100, a11101, a11102, a11103, a11104, a11105, 
            b689, b690, b691, b692, b693, b694, b695, b696, 
            b697, b698, b699, b700, b701, b702, b703, b704, 
            b705, c300, c301, c302, c304, c305, c306, i450, 
            i451, i452;
    uint64_t a11005, a11006, a11007, a11008, a11009, a11010, a11011, a11012, 
            a11044, a11086, a8772, a8773, a8774, a8775, a8803, a8804, 
            a8805, a8806, d912, d913, d914, d915, d916, d917, 
            d918, d919, d920, d921, d922, d923, d924, d925, 
            d926, d927, d928, d929, d930, d931, d932, d933, 
            d934, d935, d936, d937, d938, d939, t1631, t1632, 
            t1633, t1634, t1635, t1636, t1637, t1638, t1639, t1640, 
            t1641, t1642, t1643, t1644, t1645, t1646, t1647, t1648, 
            t1649, t1650, t1651, t1652, t1653, t1654, t3486, t3487, 
            t3488, t3489, t3490, t3491, t3492, t3493, t3494, t3495, 
            t3496, t3497, t3498, t3499, t3500, t3501, t3502, t3503, 
            t3504, t3505, t3506, t3507, t3508, t3509, t3510, t3511, 
            t3512, t3513, t3514, t3515, t3516, t3517, t3518, t3519, 
            t3520, t3521, t3522, t3523, t3524, t3525, t3526, t3529, 
            t3530, t3531, t3532, t3533, t3534, t3535, t3536;
    uint128_t s693, s694, s695, s696, s697, s698, s699, s700, 
            s701, s702, s703, s704;
    for(int i5 = 0; i5 <= 15; i5++) {
        a10988 = (512*i5);
        a10989 = (threadIdx.x + a10988);
        a10990 = (a10989 + 8192);
        a10991 = (a10990 % 4096);
        a10992 = (4096 + a10991);
        /* Begin of MPModMul 128 */
        a10993 = (2*a10992);
        a10994 = (a10993 + 1);
        a10995 = (2*a10990);
        a10996 = (a10995 + 1);
        /* MPAssignDD 64 */
        a10997 = (2*a10993);
        t3486 = twiddles[a10997];
        a10998 = (a10997 + 1);
        t3487 = twiddles[a10998];
        /* MPAssignDD 64 */
        a10999 = (2*a10994);
        t3488 = twiddles[a10999];
        a11000 = (a10999 + 1);
        t3489 = twiddles[a11000];
        /* MPAssignDD 64 */
        a11001 = (2*a10995);
        t3490 = P2[a11001];
        a11002 = (a11001 + 1);
        t3491 = P2[a11002];
        /* MPAssignDD 64 */
        a11003 = (2*a10996);
        t3492 = P2[a11003];
        a11004 = (a11003 + 1);
        t3493 = P2[a11004];
        MPMulQDD_L2(t1637, t1638, t1635, t1636, t1633, t1634, t1631, t1632, 
    t3486, t3487, t3488, t3489, t3490, t3491, t3492, t3493);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3494 = (t1633 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b689 = ((int) 1);
        t3495 = (288230376151711744 - b689);
        /* MPBinAndD 64 */
        t3496 = (((t1637)&(t3495)));
        t3497 = (((t1638)&((-1))));
        /* Begin of MPShiftLeft2D */
        a11005 = (t3496 << 6);
        a11006 = (t3497 >> 58);
        t3498 = (((a11005)|(a11006)));
        t3499 = (t3497 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3500 = (t1635 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3501 = (((t3499)|(t3500)));
        /* Begin of MPShiftLeft2D */
        a11007 = (t1635 << 6);
        a11008 = (t1636 >> 58);
        t3502 = (((a11007)|(a11008)));
        t3503 = (t1636 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3504 = (((t3503)|(t3494)));
        /* End of MPShiftRight3 */
        a8772 = mu[0];
        a8773 = mu[1];
        a8774 = mu[2];
        a8775 = mu[3];
        MPMulQDD_L2(t1653, t1654, t1651, t1652, t1649, t1650, t1647, t1648, 
    t3498, t3501, t3502, t3504, a8772, a8773, a8774, a8775);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3505 = (t1653 >> 1);
        a11009 = (t1653 << 63);
        a11010 = (t1654 >> 1);
        t3506 = (((a11009)|(a11010)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3507 = (t1654 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3508 = (t1651 >> 1);
        a11011 = (t1651 << 63);
        a11012 = (t1652 >> 1);
        t3509 = (((a11011)|(a11012)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3510 = (((t3507)|(t3508)));
        /* End of MPShiftRight2 */
        a8803 = modulus[0];
        a8804 = modulus[1];
        a8805 = modulus[2];
        a8806 = modulus[3];
        MPMulQDD_L2(t1645, t1646, t1643, t1644, t1641, t1642, t1639, t1640, 
    t3505, t3506, t3510, t3509, a8803, a8804, a8805, a8806);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d912 = (t1632 - t1640);
        b690 = ((t1632 < t1640));
        d913 = (t1631 - t1639);
        d914 = (d913 - b690);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a11014 = ((t1631 < t1639));
        a11015 = ((t1631 == t1639));
        a11016 = ((a11015) && (b690));
        b691 = ((a11014) || (a11016));
        /* Begin of MPSubDDD 64 */
        d915 = (t1634 - t1642);
        b692 = ((t1634 < t1642));
        d916 = (t1633 - t1641);
        d917 = (d916 - b692);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d918 = (d915 - b691);
        b693 = ((d915 < b691));
        t3511 = (d917 - b693);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d919 = (d912 - a8806);
        b694 = ((d912 < a8806));
        d920 = (d914 - a8805);
        d921 = (d920 - b694);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a11021 = ((d914 < a8805));
        a11022 = ((d914 == a8805));
        a11023 = ((a11022) && (b694));
        b695 = ((a11021) || (a11023));
        /* Begin of MPSubDDD 64 */
        d922 = (d918 - a8804);
        b696 = ((d918 < a8804));
        d923 = (t3511 - a8803);
        d924 = (d923 - b696);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d925 = (d922 - b695);
        b697 = ((d922 < b695));
        t3512 = (d924 - b697);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a11027 = ((t3511 < a8803));
        a11028 = ((t3511 == a8803));
        a11029 = ((a11028) && (b696));
        a11030 = ((a11027) || (a11029));
        /* MPEqual 64 */
        a11031 = ((d918 == a8804));
        a11032 = ((a11028) && (a11031));
        /* MPLessThan 64 */
        a11033 = ((a11032) && (b695));
        i450 = ((a11030) || (a11033));
        /* MPCondD 64 */
        t3513 = ((i450) ? (t3511) : (t3512));
        t3514 = ((i450) ? (d918) : (d925));
        /* MPCondD 64 */
        t3515 = ((i450) ? (d914) : (d921));
        t3516 = ((i450) ? (d912) : (d919));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a11034 = (2*threadIdx.x);
        a11035 = (1024*i5);
        a11036 = (a11034 + a11035);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a11037 = (2*a10989);
        a11038 = (a11037 + 1);
        /* MPAssignDD 64 */
        a11039 = (2*a11038);
        t3517 = P2[a11039];
        a11040 = (a11039 + 1);
        t3518 = P2[a11040];
        /* MPAddQDD 64 */
        s693 = (((uint128_t ) t3518) + ((uint128_t ) t3516));
        t3519 = ((uint64_t ) s693);
        c300 = (s693 >> 64);
        s694 = (((uint128_t ) t3517) + ((uint128_t ) t3515));
        s695 = (((uint128_t ) s694) + ((uint128_t ) c300));
        t3520 = ((uint64_t ) s695);
        c301 = (s695 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a11041 = (2*a11037);
        t3521 = P2[a11041];
        a11042 = (a11041 + 1);
        t3522 = P2[a11042];
        /* MPAddQDD 64 */
        s696 = (((uint128_t ) t3522) + ((uint128_t ) t3514));
        t3523 = ((uint64_t ) s696);
        c302 = (s696 >> 64);
        s697 = (((uint128_t ) t3521) + ((uint128_t ) t3513));
        s698 = (((uint128_t ) s697) + ((uint128_t ) c302));
        t3524 = ((uint64_t ) s698);
        /* MPPropagateCarry 64 */
        t3525 = (t3523 + c301);
        a11043 = ((t3525 == 0));
        a11044 = (t3524 + c301);
        t3526 = ((a11043) ? (a11044) : (t3524));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a11051 = ((a8803 < t3526));
        a11052 = ((a8803 == t3526));
        a11053 = ((a8804 < t3525));
        a11054 = ((a11052) && (a11053));
        a11055 = ((a11051) || (a11054));
        /* MPEqual 64 */
        a11056 = ((a8804 == t3525));
        a11057 = ((a11052) && (a11056));
        /* MPLessThan 64 */
        a11058 = ((a8805 < t3520));
        a11059 = ((a8805 == t3520));
        a11060 = ((a8806 < t3519));
        a11061 = ((a11059) && (a11060));
        a11062 = ((a11058) || (a11061));
        a11063 = ((a11057) && (a11062));
        i451 = ((a11055) || (a11063));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d926 = (t3519 - a8806);
        b698 = ((t3519 < a8806));
        d927 = (t3520 - a8805);
        d928 = (d927 - b698);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a11065 = ((t3520 < a8805));
        a11066 = ((t3520 == a8805));
        a11067 = ((a11066) && (b698));
        b699 = ((a11065) || (a11067));
        /* Begin of MPSubDDD 64 */
        d929 = (t3525 - a8804);
        b700 = ((t3525 < a8804));
        d930 = (t3526 - a8803);
        d931 = (d930 - b700);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d932 = (d929 - b699);
        b701 = ((d929 < b699));
        t3529 = (d931 - b701);
        /* End of MPSubDDD 128 */
        a11071 = (2*a11036);
        /* MPCondD 64 */
        a11072 = (2*a11071);
        P1[a11072] = ((i451) ? (t3529) : (t3526));
        a11073 = (a11072 + 1);
        P1[a11073] = ((i451) ? (d932) : (t3525));
        a11074 = (a11071 + 1);
        /* MPCondD 64 */
        a11075 = (2*a11074);
        P1[a11075] = ((i451) ? (d928) : (t3520));
        a11076 = (a11075 + 1);
        P1[a11076] = ((i451) ? (d926) : (t3519));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a11077 = (a11036 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d933 = (t3518 - t3516);
        b702 = ((t3518 < t3516));
        d934 = (t3517 - t3515);
        d935 = (d934 - b702);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a11079 = ((t3517 < t3515));
        a11080 = ((t3517 == t3515));
        a11081 = ((a11080) && (b702));
        b703 = ((a11079) || (a11081));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d936 = (t3522 - t3514);
        b704 = ((t3522 < t3514));
        d937 = (t3521 - t3513);
        d938 = (d937 - b704);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d939 = (d936 - b703);
        b705 = ((d936 < b703));
        t3530 = (d938 - b705);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s699 = (((uint128_t ) d933) + ((uint128_t ) a8806));
        t3531 = ((uint64_t ) s699);
        c304 = (s699 >> 64);
        s700 = (((uint128_t ) d935) + ((uint128_t ) a8805));
        s701 = (((uint128_t ) s700) + ((uint128_t ) c304));
        t3532 = ((uint64_t ) s701);
        c305 = (s701 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s702 = (((uint128_t ) d939) + ((uint128_t ) a8804));
        t3533 = ((uint64_t ) s702);
        c306 = (s702 >> 64);
        s703 = (((uint128_t ) t3530) + ((uint128_t ) a8803));
        s704 = (((uint128_t ) s703) + ((uint128_t ) c306));
        t3534 = ((uint64_t ) s704);
        /* MPPropagateCarry 64 */
        t3535 = (t3533 + c305);
        a11085 = ((t3535 == 0));
        a11086 = (t3534 + c305);
        t3536 = ((a11085) ? (a11086) : (t3534));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a11093 = ((t3521 < t3513));
        a11094 = ((t3521 == t3513));
        a11095 = ((a11094) && (b704));
        a11096 = ((a11093) || (a11095));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a11097 = ((t3522 == t3514));
        a11098 = ((a11094) && (a11097));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a11099 = ((a11098) && (b703));
        i452 = ((a11096) || (a11099));
        a11100 = (2*a11077);
        /* MPCondD 64 */
        a11101 = (2*a11100);
        P1[a11101] = ((i452) ? (t3536) : (t3530));
        a11102 = (a11101 + 1);
        P1[a11102] = ((i452) ? (t3535) : (d939));
        a11103 = (a11100 + 1);
        /* MPCondD 64 */
        a11104 = (2*a11103);
        P1[a11104] = ((i452) ? (t3532) : (d935));
        a11105 = (a11104 + 1);
        P1[a11105] = ((i452) ? (t3531) : (d933));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code13(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a11106, a11107, a11108, a11109, a11110, a11111, a11112, a11113, 
            a11114, a11115, a11116, a11117, a11118, a11119, a11120, a11121, 
            a11122, a11132, a11133, a11134, a11139, a11140, a11141, a11145, 
            a11146, a11147, a11148, a11149, a11150, a11151, a11152, a11153, 
            a11154, a11155, a11156, a11157, a11158, a11159, a11160, a11161, 
            a11162, a11170, a11171, a11172, a11173, a11174, a11175, a11176, 
            a11177, a11178, a11179, a11180, a11181, a11182, a11184, a11185, 
            a11186, a11190, a11191, a11192, a11193, a11194, a11195, a11196, 
            a11198, a11199, a11200, a11204, a11212, a11213, a11214, a11215, 
            a11216, a11217, a11218, a11219, a11220, a11221, a11222, a11223, 
            a11224, b706, b707, b708, b709, b710, b711, b712, 
            b713, b714, b715, b716, b717, b718, b719, b720, 
            b721, b722, b723, b724, c308, c309, c310, c312, 
            c313, c314, i453, i454, i455;
    uint64_t a11123, a11124, a11125, a11126, a11127, a11128, a11129, a11130, 
            a11163, a11205, a9188, a9189, a9190, a9191, a9219, a9220, 
            a9221, a9222, d940, d941, d942, d943, d944, d945, 
            d946, d947, d948, d949, d950, d951, d952, d953, 
            d954, d955, d956, d957, d958, d959, d960, d961, 
            d962, d963, d964, d965, d966, d967, t1663, t1664, 
            t1665, t1666, t1667, t1668, t1669, t1670, t1671, t1672, 
            t1673, t1674, t1675, t1676, t1677, t1678, t1679, t1680, 
            t1681, t1682, t1683, t1684, t1685, t1686, t3539, t3540, 
            t3541, t3542, t3543, t3544, t3545, t3546, t3547, t3548, 
            t3549, t3550, t3551, t3552, t3553, t3554, t3555, t3556, 
            t3557, t3558, t3559, t3560, t3561, t3562, t3563, t3564, 
            t3565, t3566, t3567, t3568, t3569, t3570, t3571, t3572, 
            t3573, t3574, t3575, t3576, t3577, t3578, t3579, t3582, 
            t3583, t3584, t3585, t3586, t3587, t3588, t3589;
    uint128_t s705, s706, s707, s708, s709, s710, s711, s712, 
            s713, s714, s715, s716;
    for(int i3 = 0; i3 <= 15; i3++) {
        a11106 = (512*i3);
        a11107 = (a11106 + threadIdx.x);
        b706 = (threadIdx.x + a11106);
        a11108 = (b706 + 8192);
        a11109 = (a11108 % 8192);
        a11110 = (8192 + a11109);
        /* Begin of MPModMul 128 */
        a11111 = (2*a11110);
        a11112 = (a11111 + 1);
        a11113 = (2*a11108);
        a11114 = (a11113 + 1);
        /* MPAssignDD 64 */
        a11115 = (2*a11111);
        t3539 = twiddles[a11115];
        a11116 = (a11115 + 1);
        t3540 = twiddles[a11116];
        /* MPAssignDD 64 */
        a11117 = (2*a11112);
        t3541 = twiddles[a11117];
        a11118 = (a11117 + 1);
        t3542 = twiddles[a11118];
        /* MPAssignDD 64 */
        a11119 = (2*a11113);
        t3543 = P1[a11119];
        a11120 = (a11119 + 1);
        t3544 = P1[a11120];
        /* MPAssignDD 64 */
        a11121 = (2*a11114);
        t3545 = P1[a11121];
        a11122 = (a11121 + 1);
        t3546 = P1[a11122];
        MPMulQDD_L2(t1669, t1670, t1667, t1668, t1665, t1666, t1663, t1664, 
    t3539, t3540, t3541, t3542, t3543, t3544, t3545, t3546);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t3547 = (t1665 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b707 = ((int) 1);
        t3548 = (288230376151711744 - b707);
        /* MPBinAndD 64 */
        t3549 = (((t1669)&(t3548)));
        t3550 = (((t1670)&((-1))));
        /* Begin of MPShiftLeft2D */
        a11123 = (t3549 << 6);
        a11124 = (t3550 >> 58);
        t3551 = (((a11123)|(a11124)));
        t3552 = (t3550 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t3553 = (t1667 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t3554 = (((t3552)|(t3553)));
        /* Begin of MPShiftLeft2D */
        a11125 = (t1667 << 6);
        a11126 = (t1668 >> 58);
        t3555 = (((a11125)|(a11126)));
        t3556 = (t1668 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t3557 = (((t3556)|(t3547)));
        /* End of MPShiftRight3 */
        a9188 = mu[0];
        a9189 = mu[1];
        a9190 = mu[2];
        a9191 = mu[3];
        MPMulQDD_L2(t1685, t1686, t1683, t1684, t1681, t1682, t1679, t1680, 
    t3551, t3554, t3555, t3557, a9188, a9189, a9190, a9191);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t3558 = (t1685 >> 1);
        a11127 = (t1685 << 63);
        a11128 = (t1686 >> 1);
        t3559 = (((a11127)|(a11128)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t3560 = (t1686 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t3561 = (t1683 >> 1);
        a11129 = (t1683 << 63);
        a11130 = (t1684 >> 1);
        t3562 = (((a11129)|(a11130)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t3563 = (((t3560)|(t3561)));
        /* End of MPShiftRight2 */
        a9219 = modulus[0];
        a9220 = modulus[1];
        a9221 = modulus[2];
        a9222 = modulus[3];
        MPMulQDD_L2(t1677, t1678, t1675, t1676, t1673, t1674, t1671, t1672, 
    t3558, t3559, t3563, t3562, a9219, a9220, a9221, a9222);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d940 = (t1664 - t1672);
        b708 = ((t1664 < t1672));
        d941 = (t1663 - t1671);
        d942 = (d941 - b708);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a11132 = ((t1663 < t1671));
        a11133 = ((t1663 == t1671));
        a11134 = ((a11133) && (b708));
        b709 = ((a11132) || (a11134));
        /* Begin of MPSubDDD 64 */
        d943 = (t1666 - t1674);
        b710 = ((t1666 < t1674));
        d944 = (t1665 - t1673);
        d945 = (d944 - b710);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d946 = (d943 - b709);
        b711 = ((d943 < b709));
        t3564 = (d945 - b711);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d947 = (d940 - a9222);
        b712 = ((d940 < a9222));
        d948 = (d942 - a9221);
        d949 = (d948 - b712);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a11139 = ((d942 < a9221));
        a11140 = ((d942 == a9221));
        a11141 = ((a11140) && (b712));
        b713 = ((a11139) || (a11141));
        /* Begin of MPSubDDD 64 */
        d950 = (d946 - a9220);
        b714 = ((d946 < a9220));
        d951 = (t3564 - a9219);
        d952 = (d951 - b714);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d953 = (d950 - b713);
        b715 = ((d950 < b713));
        t3565 = (d952 - b715);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a11145 = ((t3564 < a9219));
        a11146 = ((t3564 == a9219));
        a11147 = ((a11146) && (b714));
        a11148 = ((a11145) || (a11147));
        /* MPEqual 64 */
        a11149 = ((d946 == a9220));
        a11150 = ((a11146) && (a11149));
        /* MPLessThan 64 */
        a11151 = ((a11150) && (b713));
        i453 = ((a11148) || (a11151));
        /* MPCondD 64 */
        t3566 = ((i453) ? (t3564) : (t3565));
        t3567 = ((i453) ? (d946) : (d953));
        /* MPCondD 64 */
        t3568 = ((i453) ? (d942) : (d949));
        t3569 = ((i453) ? (d940) : (d947));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a11152 = (16384*blockIdx.x);
        a11153 = (2*threadIdx.x);
        a11154 = (1024*i3);
        b716 = (a11152 + a11153);
        a11155 = (b716 + a11154);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a11156 = (2*a11107);
        a11157 = (a11156 + 1);
        /* MPAssignDD 64 */
        a11158 = (2*a11157);
        t3570 = P1[a11158];
        a11159 = (a11158 + 1);
        t3571 = P1[a11159];
        /* MPAddQDD 64 */
        s705 = (((uint128_t ) t3571) + ((uint128_t ) t3569));
        t3572 = ((uint64_t ) s705);
        c308 = (s705 >> 64);
        s706 = (((uint128_t ) t3570) + ((uint128_t ) t3568));
        s707 = (((uint128_t ) s706) + ((uint128_t ) c308));
        t3573 = ((uint64_t ) s707);
        c309 = (s707 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a11160 = (2*a11156);
        t3574 = P1[a11160];
        a11161 = (a11160 + 1);
        t3575 = P1[a11161];
        /* MPAddQDD 64 */
        s708 = (((uint128_t ) t3575) + ((uint128_t ) t3567));
        t3576 = ((uint64_t ) s708);
        c310 = (s708 >> 64);
        s709 = (((uint128_t ) t3574) + ((uint128_t ) t3566));
        s710 = (((uint128_t ) s709) + ((uint128_t ) c310));
        t3577 = ((uint64_t ) s710);
        /* MPPropagateCarry 64 */
        t3578 = (t3576 + c309);
        a11162 = ((t3578 == 0));
        a11163 = (t3577 + c309);
        t3579 = ((a11162) ? (a11163) : (t3577));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a11170 = ((a9219 < t3579));
        a11171 = ((a9219 == t3579));
        a11172 = ((a9220 < t3578));
        a11173 = ((a11171) && (a11172));
        a11174 = ((a11170) || (a11173));
        /* MPEqual 64 */
        a11175 = ((a9220 == t3578));
        a11176 = ((a11171) && (a11175));
        /* MPLessThan 64 */
        a11177 = ((a9221 < t3573));
        a11178 = ((a9221 == t3573));
        a11179 = ((a9222 < t3572));
        a11180 = ((a11178) && (a11179));
        a11181 = ((a11177) || (a11180));
        a11182 = ((a11176) && (a11181));
        i454 = ((a11174) || (a11182));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d954 = (t3572 - a9222);
        b717 = ((t3572 < a9222));
        d955 = (t3573 - a9221);
        d956 = (d955 - b717);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a11184 = ((t3573 < a9221));
        a11185 = ((t3573 == a9221));
        a11186 = ((a11185) && (b717));
        b718 = ((a11184) || (a11186));
        /* Begin of MPSubDDD 64 */
        d957 = (t3578 - a9220);
        b719 = ((t3578 < a9220));
        d958 = (t3579 - a9219);
        d959 = (d958 - b719);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d960 = (d957 - b718);
        b720 = ((d957 < b718));
        t3582 = (d959 - b720);
        /* End of MPSubDDD 128 */
        a11190 = (2*a11155);
        /* MPCondD 64 */
        a11191 = (2*a11190);
        Y[a11191] = ((i454) ? (t3582) : (t3579));
        a11192 = (a11191 + 1);
        Y[a11192] = ((i454) ? (d960) : (t3578));
        a11193 = (a11190 + 1);
        /* MPCondD 64 */
        a11194 = (2*a11193);
        Y[a11194] = ((i454) ? (d956) : (t3573));
        a11195 = (a11194 + 1);
        Y[a11195] = ((i454) ? (d954) : (t3572));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a11196 = (a11155 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d961 = (t3571 - t3569);
        b721 = ((t3571 < t3569));
        d962 = (t3570 - t3568);
        d963 = (d962 - b721);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a11198 = ((t3570 < t3568));
        a11199 = ((t3570 == t3568));
        a11200 = ((a11199) && (b721));
        b722 = ((a11198) || (a11200));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d964 = (t3575 - t3567);
        b723 = ((t3575 < t3567));
        d965 = (t3574 - t3566);
        d966 = (d965 - b723);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d967 = (d964 - b722);
        b724 = ((d964 < b722));
        t3583 = (d966 - b724);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s711 = (((uint128_t ) d961) + ((uint128_t ) a9222));
        t3584 = ((uint64_t ) s711);
        c312 = (s711 >> 64);
        s712 = (((uint128_t ) d963) + ((uint128_t ) a9221));
        s713 = (((uint128_t ) s712) + ((uint128_t ) c312));
        t3585 = ((uint64_t ) s713);
        c313 = (s713 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s714 = (((uint128_t ) d967) + ((uint128_t ) a9220));
        t3586 = ((uint64_t ) s714);
        c314 = (s714 >> 64);
        s715 = (((uint128_t ) t3583) + ((uint128_t ) a9219));
        s716 = (((uint128_t ) s715) + ((uint128_t ) c314));
        t3587 = ((uint64_t ) s716);
        /* MPPropagateCarry 64 */
        t3588 = (t3586 + c313);
        a11204 = ((t3588 == 0));
        a11205 = (t3587 + c313);
        t3589 = ((a11204) ? (a11205) : (t3587));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a11212 = ((t3574 < t3566));
        a11213 = ((t3574 == t3566));
        a11214 = ((a11213) && (b723));
        a11215 = ((a11212) || (a11214));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a11216 = ((t3575 == t3567));
        a11217 = ((a11213) && (a11216));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a11218 = ((a11217) && (b722));
        i455 = ((a11215) || (a11218));
        a11219 = (2*a11196);
        /* MPCondD 64 */
        a11220 = (2*a11219);
        Y[a11220] = ((i455) ? (t3589) : (t3583));
        a11221 = (a11220 + 1);
        Y[a11221] = ((i455) ? (t3588) : (d967));
        a11222 = (a11219 + 1);
        /* MPCondD 64 */
        a11223 = (2*a11222);
        Y[a11223] = ((i455) ? (t3585) : (d963));
        a11224 = (a11223 + 1);
        Y[a11224] = ((i455) ? (t3584) : (d961));
        /* End of MPModSub 128 */
    }
}

void nttmpcuda(uint64_t  *Y, uint64_t  *X, uint64_t modulus[2], uint64_t  *twiddles, uint64_t mu[2]) {
    dim3 b68(512, 1, 1), b69(512, 1, 1), b70(512, 1, 1), b71(512, 1, 1), b72(512, 1, 1), b73(512, 1, 1), b74(512, 1, 1), b75(512, 1, 1), 
    b76(512, 1, 1), b77(512, 1, 1), b78(512, 1, 1), b79(512, 1, 1), b80(512, 1, 1), b81(512, 1, 1), g1(2, 1, 1), g10(2, 1, 1), 
    g11(2, 1, 1), g12(2, 1, 1), g13(2, 1, 1), g14(2, 1, 1), g2(2, 1, 1), g3(2, 1, 1), g4(2, 1, 1), g5(2, 1, 1), 
    g6(2, 1, 1), g7(2, 1, 1), g8(2, 1, 1), g9(2, 1, 1);
    ker_code0<<<g1, b68>>>(X, Y, modulus, twiddles, mu);
    ker_code1<<<g2, b69>>>(X, Y, modulus, twiddles, mu);
    ker_code2<<<g3, b70>>>(X, Y, modulus, twiddles, mu);
    ker_code3<<<g4, b71>>>(X, Y, modulus, twiddles, mu);
    ker_code4<<<g5, b72>>>(X, Y, modulus, twiddles, mu);
    ker_code5<<<g6, b73>>>(X, Y, modulus, twiddles, mu);
    ker_code6<<<g7, b74>>>(X, Y, modulus, twiddles, mu);
    ker_code7<<<g8, b75>>>(X, Y, modulus, twiddles, mu);
    ker_code8<<<g9, b76>>>(X, Y, modulus, twiddles, mu);
    ker_code9<<<g10, b77>>>(X, Y, modulus, twiddles, mu);
    ker_code10<<<g11, b78>>>(X, Y, modulus, twiddles, mu);
    ker_code11<<<g12, b79>>>(X, Y, modulus, twiddles, mu);
    ker_code12<<<g13, b80>>>(X, Y, modulus, twiddles, mu);
    ker_code13<<<g14, b81>>>(X, Y, modulus, twiddles, mu);
}

void destroy_nttmpcuda() {
    /* skip */
}
