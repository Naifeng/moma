
/*
 * This code was generated by Spiral 8.5.1, www.spiral.net
 */

#include <stdint.h>
__device__ uint64_t P1[65536];
__device__ uint64_t P2[65536];

__device__ void MPMulQDD_L3(uint64_t &t5139, uint64_t &t5140, uint64_t &t5141, uint64_t &t5142, uint64_t &t5177, uint64_t &t5178, uint64_t &t5179, uint64_t &t5180, uint64_t &t5239, uint64_t &t5240, uint64_t &t5241, uint64_t &t5242, uint64_t &t5735, uint64_t &t5740, uint64_t &t5743, uint64_t &t5744, uint64_t t4607, uint64_t t4608, uint64_t t4609, uint64_t t4610, uint64_t t4603, uint64_t t4604, uint64_t t4605, uint64_t t4606, uint64_t t4615, uint64_t t4616, uint64_t t4617, uint64_t t4618, uint64_t t4611, uint64_t t4612, uint64_t t4613, uint64_t t4614) {
    int a18439, a18441, a18442, a18452, a18454, a18455, a18460, a18483, 
            a18485, a18486, a18496, a18498, a18499, a18504, a18527, a18529, 
            a18530, a18540, a18542, a18543, a18548, a18571, a18573, a18574, 
            a18584, a18586, a18587, a18592, a18599, a18601, a18602, a18607, 
            a18609, a18610, a18615, a18616, a18617, a18618, a18619, a18620, 
            a18621, a18625, a18627, a18628, a18633, a18634, a18635, a18640, 
            a18642, a18643, a18648, a18649, a18650, a18651, a18652, a18653, 
            a18654, a18655, a18656, a18657, c470, c471, c472, c473, 
            c474, c475, c476, c477, c478, c479, c480, c481, 
            c482, c483, c484, c485, c486, c487, c488, c489, 
            c490, c491, c492, c493, c494, c496, c497, c498, 
            c499, c500, c501, c502, c503, c504, c505, c506, 
            c507, c508, c509, c510, c511, c512, c513, c514, 
            c515, c516, c517, c518, c519, c520, c522, c523, 
            c524, c525, c526, c527, c528, c529, c530, c531, 
            c532, c533, c534, c535, c536, c537, c538, c539, 
            c540, c541, c542, c543, c544, c545, c546, c548, 
            c549, c550, c551, c552, c553, c554, c555, c556, 
            c557, c558, c559, c560, c561, c562, c563, c564, 
            c565, c566, c567, c568, c569, c570, c571, c572, 
            c574, c575, c576, c577, c578, c579, c580, c581, 
            c582, c583, c584, c585, c586, c587, c588, c589, 
            c590, c591, c592, c593, c594, c595, c596, c597, 
            c598, c599, c601, c602;
    uint64_t a18440, a18443, a18453, a18456, a18461, a18484, a18487, a18497, 
            a18500, a18505, a18528, a18531, a18541, a18544, a18549, a18572, 
            a18575, a18585, a18588, a18593, a18600, a18603, a18608, a18611, 
            a18626, a18629, a18641, a18644, t6177, t6178, t6179, t6180, 
            t6181, t6182, t6183, t6184, t6185, t6186, t6187, t6188, 
            t6189, t6190, t6191, t6192, t6193, t6194, t6195, t6196, 
            t6197, t6198, t6199, t6200, t6201, t6202, t6203, t6204, 
            t6205, t6206, t6207, t6208, t6209, t6210, t6211, t6212, 
            t6213, t6214, t6215, t6216, t6217, t6218, t6219, t6220, 
            t6221, t6222, t6223, t6224, t6225, t6226, t6227, t6228, 
            t6229, t6230, t6231, t6232, t6233, t6234, t6235, t6236, 
            t6237, t6238, t6239, t6241, t6242, t6243, t6244, t6245, 
            t6246, t6247, t6248, t6249, t6251, t6252, t6253, t6254, 
            t6257, t6258, t6259, t6260, t6261, t6262, t6263, t6264, 
            t6265, t6266, t6267, t6268, t6269, t6270, t6271, t6272, 
            t6273, t6274, t6275, t6276, t6277, t6278, t6279, t6280, 
            t6281, t6282, t6283, t6284, t6285, t6286, t6287, t6288, 
            t6289, t6290, t6291, t6292, t6293, t6294, t6295, t6296, 
            t6297, t6298, t6299, t6300, t6301, t6302, t6303, t6304, 
            t6305, t6306, t6307, t6308, t6309, t6310, t6311, t6312, 
            t6313, t6314, t6315, t6316, t6317, t6318, t6319, t6321, 
            t6322, t6323, t6324, t6325, t6326, t6327, t6328, t6329, 
            t6331, t6332, t6333, t6334, t6337, t6338, t6339, t6340, 
            t6341, t6342, t6343, t6344, t6345, t6346, t6347, t6348, 
            t6349, t6350, t6351, t6352, t6353, t6354, t6355, t6356, 
            t6357, t6358, t6359, t6360, t6361, t6362, t6363, t6364, 
            t6365, t6366, t6367, t6368, t6369, t6370, t6371, t6372, 
            t6373, t6374, t6375, t6376, t6377, t6378, t6379, t6380, 
            t6381, t6382, t6383, t6384, t6385, t6386, t6387, t6388, 
            t6389, t6390, t6391, t6392, t6393, t6394, t6395, t6396, 
            t6397, t6398, t6399, t6401, t6402, t6403, t6404, t6405, 
            t6406, t6407, t6408, t6409, t6411, t6412, t6413, t6414, 
            t6417, t6418, t6419, t6420, t6421, t6422, t6423, t6424, 
            t6425, t6426, t6427, t6428, t6429, t6430, t6431, t6432, 
            t6433, t6434, t6435, t6436, t6437, t6438, t6439, t6440, 
            t6441, t6442, t6443, t6444, t6445, t6446, t6447, t6448, 
            t6449, t6450, t6451, t6452, t6453, t6454, t6455, t6456, 
            t6457, t6458, t6459, t6460, t6461, t6462, t6463, t6464, 
            t6465, t6466, t6467, t6468, t6469, t6470, t6471, t6472, 
            t6473, t6474, t6475, t6476, t6477, t6478, t6479, t6481, 
            t6482, t6483, t6484, t6485, t6486, t6487, t6488, t6489, 
            t6491, t6492, t6493, t6494, t6497, t6498, t6499, t6500, 
            t6501, t6502, t6503, t6505, t6506, t6507, t6508, t6509, 
            t6510, t6511, t6513, t6514, t6515, t6516, t6517, t6518, 
            t6519, t6520, t6521, t6522, t6523, t6524, t6525, t6526, 
            t6527, t6528, t6530, t6531, t6532, t6533, t6534, t6535, 
            t6536, t6537, t6538, t6540, t6541, t6542, t6543, t6544, 
            t6545, t6546, t6547, t6548, t6549, t6550, t6551;
    uint128_t a18423, a18424, a18425, a18426, a18427, a18428, a18429, a18430, 
            a18431, a18432, a18433, a18434, a18435, a18436, a18437, a18438, 
            a18467, a18468, a18469, a18470, a18471, a18472, a18473, a18474, 
            a18475, a18476, a18477, a18478, a18479, a18480, a18481, a18482, 
            a18511, a18512, a18513, a18514, a18515, a18516, a18517, a18518, 
            a18519, a18520, a18521, a18522, a18523, a18524, a18525, a18526, 
            a18555, a18556, a18557, a18558, a18559, a18560, a18561, a18562, 
            a18563, a18564, a18565, a18566, a18567, a18568, a18569, a18570, 
            s1000, s1001, s1002, s1003, s1004, s1005, s1006, s1007, 
            s1008, s1009, s1010, s1011, s1012, s1013, s1014, s1015, 
            s1016, s1017, s1018, s1019, s1020, s1021, s1022, s1023, 
            s1024, s1025, s1026, s1027, s1028, s1029, s1030, s1031, 
            s1032, s1033, s1034, s1035, s1036, s1037, s1038, s1039, 
            s1040, s1041, s1042, s1043, s1044, s1045, s1046, s1047, 
            s1048, s1049, s1050, s1051, s1052, s1053, s1054, s1055, 
            s1056, s1057, s1058, s1059, s1060, s1061, s1062, s1063, 
            s1064, s1065, s1066, s1067, s1068, s1069, s1070, s1071, 
            s1072, s1073, s1074, s1075, s1076, s1077, s1078, s1079, 
            s1080, s1081, s1082, s1083, s1084, s1085, s1086, s1087, 
            s1088, s1089, s1090, s1091, s1092, s1093, s1094, s1095, 
            s1096, s1097, s1098, s1099, s1100, s1101, s1102, s1103, 
            s1104, s1105, s1106, s1107, s1108, s1109, s1110, s1111, 
            s1112, s1113, s1114, s1115, s1116, s1117, s1118, s1119, 
            s1120, s1121, s1122, s1123, s1124, s1125, s1126, s1127, 
            s1128, s1129, s1130, s1131, s1132, s1133, s1134, s1135, 
            s1136, s1137, s1138, s1139, s1140, s1141, s1142, s1143, 
            s1144, s1145, s1146, s1147, s1148, s1149, s1150, s1151, 
            s1152, s1153, s1154, s1155, s1156, s1157, s1158, s1159, 
            s1160, s1161, s1162, s1163, s934, s935, s936, s937, 
            s938, s939, s940, s941, s942, s943, s944, s945, 
            s946, s947, s948, s949, s950, s951, s952, s953, 
            s954, s955, s956, s957, s958, s959, s960, s961, 
            s962, s963, s964, s965, s966, s967, s968, s969, 
            s970, s971, s972, s973, s974, s975, s976, s977, 
            s978, s979, s980, s981, s982, s983, s984, s985, 
            s986, s987, s988, s989, s990, s991, s992, s993, 
            s994, s995, s996, s997, s998, s999;
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18423 = (((uint128_t ) t4606)*((uint128_t ) t4614));
    t6177 = (a18423 >> 64);
    t6178 = ((uint64_t ) a18423);
    a18424 = (((uint128_t ) t4605)*((uint128_t ) t4613));
    t6179 = (a18424 >> 64);
    t6180 = ((uint64_t ) a18424);
    a18425 = (((uint128_t ) t4605)*((uint128_t ) t4614));
    t6181 = (a18425 >> 64);
    t6182 = ((uint64_t ) a18425);
    a18426 = (((uint128_t ) t4606)*((uint128_t ) t4613));
    t6183 = (a18426 >> 64);
    t6184 = ((uint64_t ) a18426);
    /* MPAddQDD 64 */
    s934 = (((uint128_t ) t6182) + ((uint128_t ) t6184));
    t6185 = ((uint64_t ) s934);
    c470 = (s934 >> 64);
    s935 = (((uint128_t ) t6181) + ((uint128_t ) t6183));
    s936 = (((uint128_t ) s935) + ((uint128_t ) c470));
    t6186 = ((uint64_t ) s936);
    c471 = (s936 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6187 = ((uint64_t ) t6178);
    s937 = (((uint128_t ) t6177) + ((uint128_t ) t6185));
    t6188 = ((uint64_t ) s937);
    c472 = (s937 >> 64);
    s938 = (((uint128_t ) t6180) + ((uint128_t ) t6186));
    s939 = (((uint128_t ) s938) + ((uint128_t ) c472));
    t6189 = ((uint64_t ) s939);
    c473 = (s939 >> 64);
    s940 = (((uint128_t ) t6179) + ((uint128_t ) c471));
    s941 = (((uint128_t ) s940) + ((uint128_t ) c473));
    t6190 = ((uint64_t ) s941);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18427 = (((uint128_t ) t4604)*((uint128_t ) t4612));
    t6191 = (a18427 >> 64);
    t6192 = ((uint64_t ) a18427);
    a18428 = (((uint128_t ) t4603)*((uint128_t ) t4611));
    t6193 = (a18428 >> 64);
    t6194 = ((uint64_t ) a18428);
    a18429 = (((uint128_t ) t4603)*((uint128_t ) t4612));
    t6195 = (a18429 >> 64);
    t6196 = ((uint64_t ) a18429);
    a18430 = (((uint128_t ) t4604)*((uint128_t ) t4611));
    t6197 = (a18430 >> 64);
    t6198 = ((uint64_t ) a18430);
    /* MPAddQDD 64 */
    s942 = (((uint128_t ) t6196) + ((uint128_t ) t6198));
    t6199 = ((uint64_t ) s942);
    c474 = (s942 >> 64);
    s943 = (((uint128_t ) t6195) + ((uint128_t ) t6197));
    s944 = (((uint128_t ) s943) + ((uint128_t ) c474));
    t6200 = ((uint64_t ) s944);
    c475 = (s944 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6201 = ((uint64_t ) t6192);
    s945 = (((uint128_t ) t6191) + ((uint128_t ) t6199));
    t6202 = ((uint64_t ) s945);
    c476 = (s945 >> 64);
    s946 = (((uint128_t ) t6194) + ((uint128_t ) t6200));
    s947 = (((uint128_t ) s946) + ((uint128_t ) c476));
    t6203 = ((uint64_t ) s947);
    c477 = (s947 >> 64);
    s948 = (((uint128_t ) t6193) + ((uint128_t ) c475));
    s949 = (((uint128_t ) s948) + ((uint128_t ) c477));
    t6204 = ((uint64_t ) s949);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18431 = (((uint128_t ) t4604)*((uint128_t ) t4614));
    t6205 = (a18431 >> 64);
    t6206 = ((uint64_t ) a18431);
    a18432 = (((uint128_t ) t4603)*((uint128_t ) t4613));
    t6207 = (a18432 >> 64);
    t6208 = ((uint64_t ) a18432);
    a18433 = (((uint128_t ) t4603)*((uint128_t ) t4614));
    t6209 = (a18433 >> 64);
    t6210 = ((uint64_t ) a18433);
    a18434 = (((uint128_t ) t4604)*((uint128_t ) t4613));
    t6211 = (a18434 >> 64);
    t6212 = ((uint64_t ) a18434);
    /* MPAddQDD 64 */
    s950 = (((uint128_t ) t6210) + ((uint128_t ) t6212));
    t6213 = ((uint64_t ) s950);
    c478 = (s950 >> 64);
    s951 = (((uint128_t ) t6209) + ((uint128_t ) t6211));
    s952 = (((uint128_t ) s951) + ((uint128_t ) c478));
    t6214 = ((uint64_t ) s952);
    c479 = (s952 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6215 = ((uint64_t ) t6206);
    s953 = (((uint128_t ) t6205) + ((uint128_t ) t6213));
    t6216 = ((uint64_t ) s953);
    c480 = (s953 >> 64);
    s954 = (((uint128_t ) t6208) + ((uint128_t ) t6214));
    s955 = (((uint128_t ) s954) + ((uint128_t ) c480));
    t6217 = ((uint64_t ) s955);
    c481 = (s955 >> 64);
    s956 = (((uint128_t ) t6207) + ((uint128_t ) c479));
    s957 = (((uint128_t ) s956) + ((uint128_t ) c481));
    t6218 = ((uint64_t ) s957);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18435 = (((uint128_t ) t4606)*((uint128_t ) t4612));
    t6219 = (a18435 >> 64);
    t6220 = ((uint64_t ) a18435);
    a18436 = (((uint128_t ) t4605)*((uint128_t ) t4611));
    t6221 = (a18436 >> 64);
    t6222 = ((uint64_t ) a18436);
    a18437 = (((uint128_t ) t4605)*((uint128_t ) t4612));
    t6223 = (a18437 >> 64);
    t6224 = ((uint64_t ) a18437);
    a18438 = (((uint128_t ) t4606)*((uint128_t ) t4611));
    t6225 = (a18438 >> 64);
    t6226 = ((uint64_t ) a18438);
    /* MPAddQDD 64 */
    s958 = (((uint128_t ) t6224) + ((uint128_t ) t6226));
    t6227 = ((uint64_t ) s958);
    c482 = (s958 >> 64);
    s959 = (((uint128_t ) t6223) + ((uint128_t ) t6225));
    s960 = (((uint128_t ) s959) + ((uint128_t ) c482));
    t6228 = ((uint64_t ) s960);
    c483 = (s960 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6229 = ((uint64_t ) t6220);
    s961 = (((uint128_t ) t6219) + ((uint128_t ) t6227));
    t6230 = ((uint64_t ) s961);
    c484 = (s961 >> 64);
    s962 = (((uint128_t ) t6222) + ((uint128_t ) t6228));
    s963 = (((uint128_t ) s962) + ((uint128_t ) c484));
    t6231 = ((uint64_t ) s963);
    c485 = (s963 >> 64);
    s964 = (((uint128_t ) t6221) + ((uint128_t ) c483));
    s965 = (((uint128_t ) s964) + ((uint128_t ) c485));
    t6232 = ((uint64_t ) s965);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s966 = (((uint128_t ) t6215) + ((uint128_t ) t6229));
    t6233 = ((uint64_t ) s966);
    c486 = (s966 >> 64);
    s967 = (((uint128_t ) t6216) + ((uint128_t ) t6230));
    s968 = (((uint128_t ) s967) + ((uint128_t ) c486));
    t6234 = ((uint64_t ) s968);
    c487 = (s968 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s969 = (((uint128_t ) t6217) + ((uint128_t ) t6231));
    t6235 = ((uint64_t ) s969);
    c488 = (s969 >> 64);
    s970 = (((uint128_t ) t6218) + ((uint128_t ) t6232));
    s971 = (((uint128_t ) s970) + ((uint128_t ) c488));
    t6236 = ((uint64_t ) s971);
    c489 = (s971 >> 64);
    /* MPPropagateCarry 64 */
    t6237 = (t6235 + c487);
    a18439 = ((t6237 == 0));
    a18440 = (t6236 + c487);
    t6238 = ((a18439) ? (a18440) : (t6236));
    a18441 = ((t6238 == 0));
    a18442 = ((a18441) && (a18439));
    a18443 = (c489 + c487);
    t6239 = ((a18442) ? (a18443) : (c489));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6241 = ((uint64_t ) t6187);
    t6242 = ((uint64_t ) t6188);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s972 = (((uint128_t ) t6189) + ((uint128_t ) t6233));
    t6243 = ((uint64_t ) s972);
    c490 = (s972 >> 64);
    s973 = (((uint128_t ) t6190) + ((uint128_t ) t6234));
    s974 = (((uint128_t ) s973) + ((uint128_t ) c490));
    t6244 = ((uint64_t ) s974);
    c491 = (s974 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s975 = (((uint128_t ) t6201) + ((uint128_t ) t6237));
    t6245 = ((uint64_t ) s975);
    c492 = (s975 >> 64);
    s976 = (((uint128_t ) t6202) + ((uint128_t ) t6238));
    s977 = (((uint128_t ) s976) + ((uint128_t ) c492));
    t6246 = ((uint64_t ) s977);
    c493 = (s977 >> 64);
    /* MPPropagateCarry 64 */
    t6247 = (t6245 + c491);
    a18452 = ((t6247 == 0));
    a18453 = (t6246 + c491);
    t6248 = ((a18452) ? (a18453) : (t6246));
    a18454 = ((t6248 == 0));
    a18455 = ((a18454) && (a18452));
    a18456 = (c493 + c491);
    t6249 = ((a18455) ? (a18456) : (c493));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s978 = (((uint128_t ) t6203) + ((uint128_t ) t6239));
    t6251 = ((uint64_t ) s978);
    c494 = (s978 >> 64);
    s979 = (((uint128_t ) t6204) + ((uint128_t ) c494));
    t6252 = ((uint64_t ) s979);
    /* MPPropagateCarry 64 */
    t6253 = (t6251 + t6249);
    a18460 = ((t6253 == 0));
    a18461 = (t6252 + t6249);
    t6254 = ((a18460) ? (a18461) : (t6252));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18467 = (((uint128_t ) t4610)*((uint128_t ) t4618));
    t6257 = (a18467 >> 64);
    t6258 = ((uint64_t ) a18467);
    a18468 = (((uint128_t ) t4609)*((uint128_t ) t4617));
    t6259 = (a18468 >> 64);
    t6260 = ((uint64_t ) a18468);
    a18469 = (((uint128_t ) t4609)*((uint128_t ) t4618));
    t6261 = (a18469 >> 64);
    t6262 = ((uint64_t ) a18469);
    a18470 = (((uint128_t ) t4610)*((uint128_t ) t4617));
    t6263 = (a18470 >> 64);
    t6264 = ((uint64_t ) a18470);
    /* MPAddQDD 64 */
    s980 = (((uint128_t ) t6262) + ((uint128_t ) t6264));
    t6265 = ((uint64_t ) s980);
    c496 = (s980 >> 64);
    s981 = (((uint128_t ) t6261) + ((uint128_t ) t6263));
    s982 = (((uint128_t ) s981) + ((uint128_t ) c496));
    t6266 = ((uint64_t ) s982);
    c497 = (s982 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6267 = ((uint64_t ) t6258);
    s983 = (((uint128_t ) t6257) + ((uint128_t ) t6265));
    t6268 = ((uint64_t ) s983);
    c498 = (s983 >> 64);
    s984 = (((uint128_t ) t6260) + ((uint128_t ) t6266));
    s985 = (((uint128_t ) s984) + ((uint128_t ) c498));
    t6269 = ((uint64_t ) s985);
    c499 = (s985 >> 64);
    s986 = (((uint128_t ) t6259) + ((uint128_t ) c497));
    s987 = (((uint128_t ) s986) + ((uint128_t ) c499));
    t6270 = ((uint64_t ) s987);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18471 = (((uint128_t ) t4608)*((uint128_t ) t4616));
    t6271 = (a18471 >> 64);
    t6272 = ((uint64_t ) a18471);
    a18472 = (((uint128_t ) t4607)*((uint128_t ) t4615));
    t6273 = (a18472 >> 64);
    t6274 = ((uint64_t ) a18472);
    a18473 = (((uint128_t ) t4607)*((uint128_t ) t4616));
    t6275 = (a18473 >> 64);
    t6276 = ((uint64_t ) a18473);
    a18474 = (((uint128_t ) t4608)*((uint128_t ) t4615));
    t6277 = (a18474 >> 64);
    t6278 = ((uint64_t ) a18474);
    /* MPAddQDD 64 */
    s988 = (((uint128_t ) t6276) + ((uint128_t ) t6278));
    t6279 = ((uint64_t ) s988);
    c500 = (s988 >> 64);
    s989 = (((uint128_t ) t6275) + ((uint128_t ) t6277));
    s990 = (((uint128_t ) s989) + ((uint128_t ) c500));
    t6280 = ((uint64_t ) s990);
    c501 = (s990 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6281 = ((uint64_t ) t6272);
    s991 = (((uint128_t ) t6271) + ((uint128_t ) t6279));
    t6282 = ((uint64_t ) s991);
    c502 = (s991 >> 64);
    s992 = (((uint128_t ) t6274) + ((uint128_t ) t6280));
    s993 = (((uint128_t ) s992) + ((uint128_t ) c502));
    t6283 = ((uint64_t ) s993);
    c503 = (s993 >> 64);
    s994 = (((uint128_t ) t6273) + ((uint128_t ) c501));
    s995 = (((uint128_t ) s994) + ((uint128_t ) c503));
    t6284 = ((uint64_t ) s995);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18475 = (((uint128_t ) t4608)*((uint128_t ) t4618));
    t6285 = (a18475 >> 64);
    t6286 = ((uint64_t ) a18475);
    a18476 = (((uint128_t ) t4607)*((uint128_t ) t4617));
    t6287 = (a18476 >> 64);
    t6288 = ((uint64_t ) a18476);
    a18477 = (((uint128_t ) t4607)*((uint128_t ) t4618));
    t6289 = (a18477 >> 64);
    t6290 = ((uint64_t ) a18477);
    a18478 = (((uint128_t ) t4608)*((uint128_t ) t4617));
    t6291 = (a18478 >> 64);
    t6292 = ((uint64_t ) a18478);
    /* MPAddQDD 64 */
    s996 = (((uint128_t ) t6290) + ((uint128_t ) t6292));
    t6293 = ((uint64_t ) s996);
    c504 = (s996 >> 64);
    s997 = (((uint128_t ) t6289) + ((uint128_t ) t6291));
    s998 = (((uint128_t ) s997) + ((uint128_t ) c504));
    t6294 = ((uint64_t ) s998);
    c505 = (s998 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6295 = ((uint64_t ) t6286);
    s999 = (((uint128_t ) t6285) + ((uint128_t ) t6293));
    t6296 = ((uint64_t ) s999);
    c506 = (s999 >> 64);
    s1000 = (((uint128_t ) t6288) + ((uint128_t ) t6294));
    s1001 = (((uint128_t ) s1000) + ((uint128_t ) c506));
    t6297 = ((uint64_t ) s1001);
    c507 = (s1001 >> 64);
    s1002 = (((uint128_t ) t6287) + ((uint128_t ) c505));
    s1003 = (((uint128_t ) s1002) + ((uint128_t ) c507));
    t6298 = ((uint64_t ) s1003);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18479 = (((uint128_t ) t4610)*((uint128_t ) t4616));
    t6299 = (a18479 >> 64);
    t6300 = ((uint64_t ) a18479);
    a18480 = (((uint128_t ) t4609)*((uint128_t ) t4615));
    t6301 = (a18480 >> 64);
    t6302 = ((uint64_t ) a18480);
    a18481 = (((uint128_t ) t4609)*((uint128_t ) t4616));
    t6303 = (a18481 >> 64);
    t6304 = ((uint64_t ) a18481);
    a18482 = (((uint128_t ) t4610)*((uint128_t ) t4615));
    t6305 = (a18482 >> 64);
    t6306 = ((uint64_t ) a18482);
    /* MPAddQDD 64 */
    s1004 = (((uint128_t ) t6304) + ((uint128_t ) t6306));
    t6307 = ((uint64_t ) s1004);
    c508 = (s1004 >> 64);
    s1005 = (((uint128_t ) t6303) + ((uint128_t ) t6305));
    s1006 = (((uint128_t ) s1005) + ((uint128_t ) c508));
    t6308 = ((uint64_t ) s1006);
    c509 = (s1006 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6309 = ((uint64_t ) t6300);
    s1007 = (((uint128_t ) t6299) + ((uint128_t ) t6307));
    t6310 = ((uint64_t ) s1007);
    c510 = (s1007 >> 64);
    s1008 = (((uint128_t ) t6302) + ((uint128_t ) t6308));
    s1009 = (((uint128_t ) s1008) + ((uint128_t ) c510));
    t6311 = ((uint64_t ) s1009);
    c511 = (s1009 >> 64);
    s1010 = (((uint128_t ) t6301) + ((uint128_t ) c509));
    s1011 = (((uint128_t ) s1010) + ((uint128_t ) c511));
    t6312 = ((uint64_t ) s1011);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1012 = (((uint128_t ) t6295) + ((uint128_t ) t6309));
    t6313 = ((uint64_t ) s1012);
    c512 = (s1012 >> 64);
    s1013 = (((uint128_t ) t6296) + ((uint128_t ) t6310));
    s1014 = (((uint128_t ) s1013) + ((uint128_t ) c512));
    t6314 = ((uint64_t ) s1014);
    c513 = (s1014 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1015 = (((uint128_t ) t6297) + ((uint128_t ) t6311));
    t6315 = ((uint64_t ) s1015);
    c514 = (s1015 >> 64);
    s1016 = (((uint128_t ) t6298) + ((uint128_t ) t6312));
    s1017 = (((uint128_t ) s1016) + ((uint128_t ) c514));
    t6316 = ((uint64_t ) s1017);
    c515 = (s1017 >> 64);
    /* MPPropagateCarry 64 */
    t6317 = (t6315 + c513);
    a18483 = ((t6317 == 0));
    a18484 = (t6316 + c513);
    t6318 = ((a18483) ? (a18484) : (t6316));
    a18485 = ((t6318 == 0));
    a18486 = ((a18485) && (a18483));
    a18487 = (c515 + c513);
    t6319 = ((a18486) ? (a18487) : (c515));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6321 = ((uint64_t ) t6267);
    t6322 = ((uint64_t ) t6268);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1018 = (((uint128_t ) t6269) + ((uint128_t ) t6313));
    t6323 = ((uint64_t ) s1018);
    c516 = (s1018 >> 64);
    s1019 = (((uint128_t ) t6270) + ((uint128_t ) t6314));
    s1020 = (((uint128_t ) s1019) + ((uint128_t ) c516));
    t6324 = ((uint64_t ) s1020);
    c517 = (s1020 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1021 = (((uint128_t ) t6281) + ((uint128_t ) t6317));
    t6325 = ((uint64_t ) s1021);
    c518 = (s1021 >> 64);
    s1022 = (((uint128_t ) t6282) + ((uint128_t ) t6318));
    s1023 = (((uint128_t ) s1022) + ((uint128_t ) c518));
    t6326 = ((uint64_t ) s1023);
    c519 = (s1023 >> 64);
    /* MPPropagateCarry 64 */
    t6327 = (t6325 + c517);
    a18496 = ((t6327 == 0));
    a18497 = (t6326 + c517);
    t6328 = ((a18496) ? (a18497) : (t6326));
    a18498 = ((t6328 == 0));
    a18499 = ((a18498) && (a18496));
    a18500 = (c519 + c517);
    t6329 = ((a18499) ? (a18500) : (c519));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1024 = (((uint128_t ) t6283) + ((uint128_t ) t6319));
    t6331 = ((uint64_t ) s1024);
    c520 = (s1024 >> 64);
    s1025 = (((uint128_t ) t6284) + ((uint128_t ) c520));
    t6332 = ((uint64_t ) s1025);
    /* MPPropagateCarry 64 */
    t6333 = (t6331 + t6329);
    a18504 = ((t6333 == 0));
    a18505 = (t6332 + t6329);
    t6334 = ((a18504) ? (a18505) : (t6332));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18511 = (((uint128_t ) t4610)*((uint128_t ) t4614));
    t6337 = (a18511 >> 64);
    t6338 = ((uint64_t ) a18511);
    a18512 = (((uint128_t ) t4609)*((uint128_t ) t4613));
    t6339 = (a18512 >> 64);
    t6340 = ((uint64_t ) a18512);
    a18513 = (((uint128_t ) t4609)*((uint128_t ) t4614));
    t6341 = (a18513 >> 64);
    t6342 = ((uint64_t ) a18513);
    a18514 = (((uint128_t ) t4610)*((uint128_t ) t4613));
    t6343 = (a18514 >> 64);
    t6344 = ((uint64_t ) a18514);
    /* MPAddQDD 64 */
    s1026 = (((uint128_t ) t6342) + ((uint128_t ) t6344));
    t6345 = ((uint64_t ) s1026);
    c522 = (s1026 >> 64);
    s1027 = (((uint128_t ) t6341) + ((uint128_t ) t6343));
    s1028 = (((uint128_t ) s1027) + ((uint128_t ) c522));
    t6346 = ((uint64_t ) s1028);
    c523 = (s1028 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6347 = ((uint64_t ) t6338);
    s1029 = (((uint128_t ) t6337) + ((uint128_t ) t6345));
    t6348 = ((uint64_t ) s1029);
    c524 = (s1029 >> 64);
    s1030 = (((uint128_t ) t6340) + ((uint128_t ) t6346));
    s1031 = (((uint128_t ) s1030) + ((uint128_t ) c524));
    t6349 = ((uint64_t ) s1031);
    c525 = (s1031 >> 64);
    s1032 = (((uint128_t ) t6339) + ((uint128_t ) c523));
    s1033 = (((uint128_t ) s1032) + ((uint128_t ) c525));
    t6350 = ((uint64_t ) s1033);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18515 = (((uint128_t ) t4608)*((uint128_t ) t4612));
    t6351 = (a18515 >> 64);
    t6352 = ((uint64_t ) a18515);
    a18516 = (((uint128_t ) t4607)*((uint128_t ) t4611));
    t6353 = (a18516 >> 64);
    t6354 = ((uint64_t ) a18516);
    a18517 = (((uint128_t ) t4607)*((uint128_t ) t4612));
    t6355 = (a18517 >> 64);
    t6356 = ((uint64_t ) a18517);
    a18518 = (((uint128_t ) t4608)*((uint128_t ) t4611));
    t6357 = (a18518 >> 64);
    t6358 = ((uint64_t ) a18518);
    /* MPAddQDD 64 */
    s1034 = (((uint128_t ) t6356) + ((uint128_t ) t6358));
    t6359 = ((uint64_t ) s1034);
    c526 = (s1034 >> 64);
    s1035 = (((uint128_t ) t6355) + ((uint128_t ) t6357));
    s1036 = (((uint128_t ) s1035) + ((uint128_t ) c526));
    t6360 = ((uint64_t ) s1036);
    c527 = (s1036 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6361 = ((uint64_t ) t6352);
    s1037 = (((uint128_t ) t6351) + ((uint128_t ) t6359));
    t6362 = ((uint64_t ) s1037);
    c528 = (s1037 >> 64);
    s1038 = (((uint128_t ) t6354) + ((uint128_t ) t6360));
    s1039 = (((uint128_t ) s1038) + ((uint128_t ) c528));
    t6363 = ((uint64_t ) s1039);
    c529 = (s1039 >> 64);
    s1040 = (((uint128_t ) t6353) + ((uint128_t ) c527));
    s1041 = (((uint128_t ) s1040) + ((uint128_t ) c529));
    t6364 = ((uint64_t ) s1041);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18519 = (((uint128_t ) t4608)*((uint128_t ) t4614));
    t6365 = (a18519 >> 64);
    t6366 = ((uint64_t ) a18519);
    a18520 = (((uint128_t ) t4607)*((uint128_t ) t4613));
    t6367 = (a18520 >> 64);
    t6368 = ((uint64_t ) a18520);
    a18521 = (((uint128_t ) t4607)*((uint128_t ) t4614));
    t6369 = (a18521 >> 64);
    t6370 = ((uint64_t ) a18521);
    a18522 = (((uint128_t ) t4608)*((uint128_t ) t4613));
    t6371 = (a18522 >> 64);
    t6372 = ((uint64_t ) a18522);
    /* MPAddQDD 64 */
    s1042 = (((uint128_t ) t6370) + ((uint128_t ) t6372));
    t6373 = ((uint64_t ) s1042);
    c530 = (s1042 >> 64);
    s1043 = (((uint128_t ) t6369) + ((uint128_t ) t6371));
    s1044 = (((uint128_t ) s1043) + ((uint128_t ) c530));
    t6374 = ((uint64_t ) s1044);
    c531 = (s1044 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6375 = ((uint64_t ) t6366);
    s1045 = (((uint128_t ) t6365) + ((uint128_t ) t6373));
    t6376 = ((uint64_t ) s1045);
    c532 = (s1045 >> 64);
    s1046 = (((uint128_t ) t6368) + ((uint128_t ) t6374));
    s1047 = (((uint128_t ) s1046) + ((uint128_t ) c532));
    t6377 = ((uint64_t ) s1047);
    c533 = (s1047 >> 64);
    s1048 = (((uint128_t ) t6367) + ((uint128_t ) c531));
    s1049 = (((uint128_t ) s1048) + ((uint128_t ) c533));
    t6378 = ((uint64_t ) s1049);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18523 = (((uint128_t ) t4610)*((uint128_t ) t4612));
    t6379 = (a18523 >> 64);
    t6380 = ((uint64_t ) a18523);
    a18524 = (((uint128_t ) t4609)*((uint128_t ) t4611));
    t6381 = (a18524 >> 64);
    t6382 = ((uint64_t ) a18524);
    a18525 = (((uint128_t ) t4609)*((uint128_t ) t4612));
    t6383 = (a18525 >> 64);
    t6384 = ((uint64_t ) a18525);
    a18526 = (((uint128_t ) t4610)*((uint128_t ) t4611));
    t6385 = (a18526 >> 64);
    t6386 = ((uint64_t ) a18526);
    /* MPAddQDD 64 */
    s1050 = (((uint128_t ) t6384) + ((uint128_t ) t6386));
    t6387 = ((uint64_t ) s1050);
    c534 = (s1050 >> 64);
    s1051 = (((uint128_t ) t6383) + ((uint128_t ) t6385));
    s1052 = (((uint128_t ) s1051) + ((uint128_t ) c534));
    t6388 = ((uint64_t ) s1052);
    c535 = (s1052 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6389 = ((uint64_t ) t6380);
    s1053 = (((uint128_t ) t6379) + ((uint128_t ) t6387));
    t6390 = ((uint64_t ) s1053);
    c536 = (s1053 >> 64);
    s1054 = (((uint128_t ) t6382) + ((uint128_t ) t6388));
    s1055 = (((uint128_t ) s1054) + ((uint128_t ) c536));
    t6391 = ((uint64_t ) s1055);
    c537 = (s1055 >> 64);
    s1056 = (((uint128_t ) t6381) + ((uint128_t ) c535));
    s1057 = (((uint128_t ) s1056) + ((uint128_t ) c537));
    t6392 = ((uint64_t ) s1057);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1058 = (((uint128_t ) t6375) + ((uint128_t ) t6389));
    t6393 = ((uint64_t ) s1058);
    c538 = (s1058 >> 64);
    s1059 = (((uint128_t ) t6376) + ((uint128_t ) t6390));
    s1060 = (((uint128_t ) s1059) + ((uint128_t ) c538));
    t6394 = ((uint64_t ) s1060);
    c539 = (s1060 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1061 = (((uint128_t ) t6377) + ((uint128_t ) t6391));
    t6395 = ((uint64_t ) s1061);
    c540 = (s1061 >> 64);
    s1062 = (((uint128_t ) t6378) + ((uint128_t ) t6392));
    s1063 = (((uint128_t ) s1062) + ((uint128_t ) c540));
    t6396 = ((uint64_t ) s1063);
    c541 = (s1063 >> 64);
    /* MPPropagateCarry 64 */
    t6397 = (t6395 + c539);
    a18527 = ((t6397 == 0));
    a18528 = (t6396 + c539);
    t6398 = ((a18527) ? (a18528) : (t6396));
    a18529 = ((t6398 == 0));
    a18530 = ((a18529) && (a18527));
    a18531 = (c541 + c539);
    t6399 = ((a18530) ? (a18531) : (c541));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6401 = ((uint64_t ) t6347);
    t6402 = ((uint64_t ) t6348);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1064 = (((uint128_t ) t6349) + ((uint128_t ) t6393));
    t6403 = ((uint64_t ) s1064);
    c542 = (s1064 >> 64);
    s1065 = (((uint128_t ) t6350) + ((uint128_t ) t6394));
    s1066 = (((uint128_t ) s1065) + ((uint128_t ) c542));
    t6404 = ((uint64_t ) s1066);
    c543 = (s1066 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1067 = (((uint128_t ) t6361) + ((uint128_t ) t6397));
    t6405 = ((uint64_t ) s1067);
    c544 = (s1067 >> 64);
    s1068 = (((uint128_t ) t6362) + ((uint128_t ) t6398));
    s1069 = (((uint128_t ) s1068) + ((uint128_t ) c544));
    t6406 = ((uint64_t ) s1069);
    c545 = (s1069 >> 64);
    /* MPPropagateCarry 64 */
    t6407 = (t6405 + c543);
    a18540 = ((t6407 == 0));
    a18541 = (t6406 + c543);
    t6408 = ((a18540) ? (a18541) : (t6406));
    a18542 = ((t6408 == 0));
    a18543 = ((a18542) && (a18540));
    a18544 = (c545 + c543);
    t6409 = ((a18543) ? (a18544) : (c545));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1070 = (((uint128_t ) t6363) + ((uint128_t ) t6399));
    t6411 = ((uint64_t ) s1070);
    c546 = (s1070 >> 64);
    s1071 = (((uint128_t ) t6364) + ((uint128_t ) c546));
    t6412 = ((uint64_t ) s1071);
    /* MPPropagateCarry 64 */
    t6413 = (t6411 + t6409);
    a18548 = ((t6413 == 0));
    a18549 = (t6412 + t6409);
    t6414 = ((a18548) ? (a18549) : (t6412));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18555 = (((uint128_t ) t4606)*((uint128_t ) t4618));
    t6417 = (a18555 >> 64);
    t6418 = ((uint64_t ) a18555);
    a18556 = (((uint128_t ) t4605)*((uint128_t ) t4617));
    t6419 = (a18556 >> 64);
    t6420 = ((uint64_t ) a18556);
    a18557 = (((uint128_t ) t4605)*((uint128_t ) t4618));
    t6421 = (a18557 >> 64);
    t6422 = ((uint64_t ) a18557);
    a18558 = (((uint128_t ) t4606)*((uint128_t ) t4617));
    t6423 = (a18558 >> 64);
    t6424 = ((uint64_t ) a18558);
    /* MPAddQDD 64 */
    s1072 = (((uint128_t ) t6422) + ((uint128_t ) t6424));
    t6425 = ((uint64_t ) s1072);
    c548 = (s1072 >> 64);
    s1073 = (((uint128_t ) t6421) + ((uint128_t ) t6423));
    s1074 = (((uint128_t ) s1073) + ((uint128_t ) c548));
    t6426 = ((uint64_t ) s1074);
    c549 = (s1074 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6427 = ((uint64_t ) t6418);
    s1075 = (((uint128_t ) t6417) + ((uint128_t ) t6425));
    t6428 = ((uint64_t ) s1075);
    c550 = (s1075 >> 64);
    s1076 = (((uint128_t ) t6420) + ((uint128_t ) t6426));
    s1077 = (((uint128_t ) s1076) + ((uint128_t ) c550));
    t6429 = ((uint64_t ) s1077);
    c551 = (s1077 >> 64);
    s1078 = (((uint128_t ) t6419) + ((uint128_t ) c549));
    s1079 = (((uint128_t ) s1078) + ((uint128_t ) c551));
    t6430 = ((uint64_t ) s1079);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18559 = (((uint128_t ) t4604)*((uint128_t ) t4616));
    t6431 = (a18559 >> 64);
    t6432 = ((uint64_t ) a18559);
    a18560 = (((uint128_t ) t4603)*((uint128_t ) t4615));
    t6433 = (a18560 >> 64);
    t6434 = ((uint64_t ) a18560);
    a18561 = (((uint128_t ) t4603)*((uint128_t ) t4616));
    t6435 = (a18561 >> 64);
    t6436 = ((uint64_t ) a18561);
    a18562 = (((uint128_t ) t4604)*((uint128_t ) t4615));
    t6437 = (a18562 >> 64);
    t6438 = ((uint64_t ) a18562);
    /* MPAddQDD 64 */
    s1080 = (((uint128_t ) t6436) + ((uint128_t ) t6438));
    t6439 = ((uint64_t ) s1080);
    c552 = (s1080 >> 64);
    s1081 = (((uint128_t ) t6435) + ((uint128_t ) t6437));
    s1082 = (((uint128_t ) s1081) + ((uint128_t ) c552));
    t6440 = ((uint64_t ) s1082);
    c553 = (s1082 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6441 = ((uint64_t ) t6432);
    s1083 = (((uint128_t ) t6431) + ((uint128_t ) t6439));
    t6442 = ((uint64_t ) s1083);
    c554 = (s1083 >> 64);
    s1084 = (((uint128_t ) t6434) + ((uint128_t ) t6440));
    s1085 = (((uint128_t ) s1084) + ((uint128_t ) c554));
    t6443 = ((uint64_t ) s1085);
    c555 = (s1085 >> 64);
    s1086 = (((uint128_t ) t6433) + ((uint128_t ) c553));
    s1087 = (((uint128_t ) s1086) + ((uint128_t ) c555));
    t6444 = ((uint64_t ) s1087);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18563 = (((uint128_t ) t4604)*((uint128_t ) t4618));
    t6445 = (a18563 >> 64);
    t6446 = ((uint64_t ) a18563);
    a18564 = (((uint128_t ) t4603)*((uint128_t ) t4617));
    t6447 = (a18564 >> 64);
    t6448 = ((uint64_t ) a18564);
    a18565 = (((uint128_t ) t4603)*((uint128_t ) t4618));
    t6449 = (a18565 >> 64);
    t6450 = ((uint64_t ) a18565);
    a18566 = (((uint128_t ) t4604)*((uint128_t ) t4617));
    t6451 = (a18566 >> 64);
    t6452 = ((uint64_t ) a18566);
    /* MPAddQDD 64 */
    s1088 = (((uint128_t ) t6450) + ((uint128_t ) t6452));
    t6453 = ((uint64_t ) s1088);
    c556 = (s1088 >> 64);
    s1089 = (((uint128_t ) t6449) + ((uint128_t ) t6451));
    s1090 = (((uint128_t ) s1089) + ((uint128_t ) c556));
    t6454 = ((uint64_t ) s1090);
    c557 = (s1090 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6455 = ((uint64_t ) t6446);
    s1091 = (((uint128_t ) t6445) + ((uint128_t ) t6453));
    t6456 = ((uint64_t ) s1091);
    c558 = (s1091 >> 64);
    s1092 = (((uint128_t ) t6448) + ((uint128_t ) t6454));
    s1093 = (((uint128_t ) s1092) + ((uint128_t ) c558));
    t6457 = ((uint64_t ) s1093);
    c559 = (s1093 >> 64);
    s1094 = (((uint128_t ) t6447) + ((uint128_t ) c557));
    s1095 = (((uint128_t ) s1094) + ((uint128_t ) c559));
    t6458 = ((uint64_t ) s1095);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18567 = (((uint128_t ) t4606)*((uint128_t ) t4616));
    t6459 = (a18567 >> 64);
    t6460 = ((uint64_t ) a18567);
    a18568 = (((uint128_t ) t4605)*((uint128_t ) t4615));
    t6461 = (a18568 >> 64);
    t6462 = ((uint64_t ) a18568);
    a18569 = (((uint128_t ) t4605)*((uint128_t ) t4616));
    t6463 = (a18569 >> 64);
    t6464 = ((uint64_t ) a18569);
    a18570 = (((uint128_t ) t4606)*((uint128_t ) t4615));
    t6465 = (a18570 >> 64);
    t6466 = ((uint64_t ) a18570);
    /* MPAddQDD 64 */
    s1096 = (((uint128_t ) t6464) + ((uint128_t ) t6466));
    t6467 = ((uint64_t ) s1096);
    c560 = (s1096 >> 64);
    s1097 = (((uint128_t ) t6463) + ((uint128_t ) t6465));
    s1098 = (((uint128_t ) s1097) + ((uint128_t ) c560));
    t6468 = ((uint64_t ) s1098);
    c561 = (s1098 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6469 = ((uint64_t ) t6460);
    s1099 = (((uint128_t ) t6459) + ((uint128_t ) t6467));
    t6470 = ((uint64_t ) s1099);
    c562 = (s1099 >> 64);
    s1100 = (((uint128_t ) t6462) + ((uint128_t ) t6468));
    s1101 = (((uint128_t ) s1100) + ((uint128_t ) c562));
    t6471 = ((uint64_t ) s1101);
    c563 = (s1101 >> 64);
    s1102 = (((uint128_t ) t6461) + ((uint128_t ) c561));
    s1103 = (((uint128_t ) s1102) + ((uint128_t ) c563));
    t6472 = ((uint64_t ) s1103);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1104 = (((uint128_t ) t6455) + ((uint128_t ) t6469));
    t6473 = ((uint64_t ) s1104);
    c564 = (s1104 >> 64);
    s1105 = (((uint128_t ) t6456) + ((uint128_t ) t6470));
    s1106 = (((uint128_t ) s1105) + ((uint128_t ) c564));
    t6474 = ((uint64_t ) s1106);
    c565 = (s1106 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1107 = (((uint128_t ) t6457) + ((uint128_t ) t6471));
    t6475 = ((uint64_t ) s1107);
    c566 = (s1107 >> 64);
    s1108 = (((uint128_t ) t6458) + ((uint128_t ) t6472));
    s1109 = (((uint128_t ) s1108) + ((uint128_t ) c566));
    t6476 = ((uint64_t ) s1109);
    c567 = (s1109 >> 64);
    /* MPPropagateCarry 64 */
    t6477 = (t6475 + c565);
    a18571 = ((t6477 == 0));
    a18572 = (t6476 + c565);
    t6478 = ((a18571) ? (a18572) : (t6476));
    a18573 = ((t6478 == 0));
    a18574 = ((a18573) && (a18571));
    a18575 = (c567 + c565);
    t6479 = ((a18574) ? (a18575) : (c567));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6481 = ((uint64_t ) t6427);
    t6482 = ((uint64_t ) t6428);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1110 = (((uint128_t ) t6429) + ((uint128_t ) t6473));
    t6483 = ((uint64_t ) s1110);
    c568 = (s1110 >> 64);
    s1111 = (((uint128_t ) t6430) + ((uint128_t ) t6474));
    s1112 = (((uint128_t ) s1111) + ((uint128_t ) c568));
    t6484 = ((uint64_t ) s1112);
    c569 = (s1112 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1113 = (((uint128_t ) t6441) + ((uint128_t ) t6477));
    t6485 = ((uint64_t ) s1113);
    c570 = (s1113 >> 64);
    s1114 = (((uint128_t ) t6442) + ((uint128_t ) t6478));
    s1115 = (((uint128_t ) s1114) + ((uint128_t ) c570));
    t6486 = ((uint64_t ) s1115);
    c571 = (s1115 >> 64);
    /* MPPropagateCarry 64 */
    t6487 = (t6485 + c569);
    a18584 = ((t6487 == 0));
    a18585 = (t6486 + c569);
    t6488 = ((a18584) ? (a18585) : (t6486));
    a18586 = ((t6488 == 0));
    a18587 = ((a18586) && (a18584));
    a18588 = (c571 + c569);
    t6489 = ((a18587) ? (a18588) : (c571));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1116 = (((uint128_t ) t6443) + ((uint128_t ) t6479));
    t6491 = ((uint64_t ) s1116);
    c572 = (s1116 >> 64);
    s1117 = (((uint128_t ) t6444) + ((uint128_t ) c572));
    t6492 = ((uint64_t ) s1117);
    /* MPPropagateCarry 64 */
    t6493 = (t6491 + t6489);
    a18592 = ((t6493 == 0));
    a18593 = (t6492 + t6489);
    t6494 = ((a18592) ? (a18593) : (t6492));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* MPAddQDD 256 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1118 = (((uint128_t ) t6401) + ((uint128_t ) t6481));
    t6497 = ((uint64_t ) s1118);
    c574 = (s1118 >> 64);
    s1119 = (((uint128_t ) t6402) + ((uint128_t ) t6482));
    s1120 = (((uint128_t ) s1119) + ((uint128_t ) c574));
    t6498 = ((uint64_t ) s1120);
    c575 = (s1120 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1121 = (((uint128_t ) t6403) + ((uint128_t ) t6483));
    t6499 = ((uint64_t ) s1121);
    c576 = (s1121 >> 64);
    s1122 = (((uint128_t ) t6404) + ((uint128_t ) t6484));
    s1123 = (((uint128_t ) s1122) + ((uint128_t ) c576));
    t6500 = ((uint64_t ) s1123);
    c577 = (s1123 >> 64);
    /* MPPropagateCarry 64 */
    t6501 = (t6499 + c575);
    a18599 = ((t6501 == 0));
    a18600 = (t6500 + c575);
    t6502 = ((a18599) ? (a18600) : (t6500));
    a18601 = ((t6502 == 0));
    a18602 = ((a18601) && (a18599));
    a18603 = (c577 + c575);
    t6503 = ((a18602) ? (a18603) : (c577));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1124 = (((uint128_t ) t6407) + ((uint128_t ) t6487));
    t6505 = ((uint64_t ) s1124);
    c578 = (s1124 >> 64);
    s1125 = (((uint128_t ) t6408) + ((uint128_t ) t6488));
    s1126 = (((uint128_t ) s1125) + ((uint128_t ) c578));
    t6506 = ((uint64_t ) s1126);
    c579 = (s1126 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1127 = (((uint128_t ) t6413) + ((uint128_t ) t6493));
    t6507 = ((uint64_t ) s1127);
    c580 = (s1127 >> 64);
    s1128 = (((uint128_t ) t6414) + ((uint128_t ) t6494));
    s1129 = (((uint128_t ) s1128) + ((uint128_t ) c580));
    t6508 = ((uint64_t ) s1129);
    c581 = (s1129 >> 64);
    /* MPPropagateCarry 64 */
    t6509 = (t6507 + c579);
    a18607 = ((t6509 == 0));
    a18608 = (t6508 + c579);
    t6510 = ((a18607) ? (a18608) : (t6508));
    a18609 = ((t6510 == 0));
    a18610 = ((a18609) && (a18607));
    a18611 = (c581 + c579);
    t6511 = ((a18610) ? (a18611) : (c581));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDI 64 */
    s1130 = (((uint128_t ) t6505) + ((uint128_t ) t6503));
    t6513 = ((uint64_t ) s1130);
    c582 = (s1130 >> 64);
    s1131 = (((uint128_t ) t6506) + ((uint128_t ) c582));
    t6514 = ((uint64_t ) s1131);
    /* MPEqualDI 64 */
    a18615 = ((t6514 == 0));
    a18616 = ((t6513 == 0));
    a18617 = ((a18615) && (a18616));
    /* MPAddDDI 64 */
    s1132 = (((uint128_t ) t6509) + ((uint128_t ) t6503));
    t6515 = ((uint64_t ) s1132);
    c583 = (s1132 >> 64);
    s1133 = (((uint128_t ) t6510) + ((uint128_t ) c583));
    t6516 = ((uint64_t ) s1133);
    /* MPCondD 64 */
    t6517 = ((a18617) ? (t6516) : (t6510));
    t6518 = ((a18617) ? (t6515) : (t6509));
    /* MPEqualDI 64 */
    a18618 = ((t6517 == 0));
    a18619 = ((t6518 == 0));
    a18620 = ((a18618) && (a18619));
    /* MPEqualDI 64 */
    a18621 = ((a18620) && (a18617));
    /* MPAddDII 64 */
    t6519 = (t6511 + t6503);
    /* MPCondDDI 64 */
    t6520 = ((a18621) ? (t6519) : (t6511));
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPTypeCastDI 128 */
    /* MPTypeCastDI 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 256 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    t5744 = ((uint64_t ) t6241);
    t5743 = ((uint64_t ) t6242);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    t5740 = ((uint64_t ) t6243);
    t6521 = ((uint64_t ) t6244);
    /* MPPropagateCarry 64 */
    t5735 = t6521;
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1134 = (((uint128_t ) t6247) + ((uint128_t ) t6497));
    t6522 = ((uint64_t ) s1134);
    c584 = (s1134 >> 64);
    s1135 = (((uint128_t ) t6248) + ((uint128_t ) t6498));
    s1136 = (((uint128_t ) s1135) + ((uint128_t ) c584));
    t6523 = ((uint64_t ) s1136);
    c585 = (s1136 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1137 = (((uint128_t ) t6253) + ((uint128_t ) t6501));
    t6524 = ((uint64_t ) s1137);
    c586 = (s1137 >> 64);
    s1138 = (((uint128_t ) t6254) + ((uint128_t ) t6502));
    s1139 = (((uint128_t ) s1138) + ((uint128_t ) c586));
    t6525 = ((uint64_t ) s1139);
    c587 = (s1139 >> 64);
    /* MPPropagateCarry 64 */
    t6526 = (t6524 + c585);
    a18625 = ((t6526 == 0));
    a18626 = (t6525 + c585);
    t6527 = ((a18625) ? (a18626) : (t6525));
    a18627 = ((t6527 == 0));
    a18628 = ((a18627) && (a18625));
    a18629 = (c587 + c585);
    t6528 = ((a18628) ? (a18629) : (c587));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDI 64 */
    t5242 = ((uint64_t ) t6522);
    c588 = (t6522 >> 64);
    s1140 = (((uint128_t ) t6523) + ((uint128_t ) c588));
    t5241 = ((uint64_t ) s1140);
    /* MPEqualDI 64 */
    a18633 = ((t5241 == 0));
    a18634 = ((t5242 == 0));
    a18635 = ((a18633) && (a18634));
    /* MPAddDDI 64 */
    t6530 = ((uint64_t ) t6526);
    c589 = (t6526 >> 64);
    s1141 = (((uint128_t ) t6527) + ((uint128_t ) c589));
    t6531 = ((uint64_t ) s1141);
    /* MPCondD 64 */
    t5239 = ((a18635) ? (t6531) : (t6527));
    t5240 = ((a18635) ? (t6530) : (t6526));
    /* MPEqualDI 64 */
    /* MPEqualDI 64 */
    /* MPAddDII 64 */
    /* MPCondDDI 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1142 = (((uint128_t ) t6321) + ((uint128_t ) t6513));
    t6532 = ((uint64_t ) s1142);
    c590 = (s1142 >> 64);
    s1143 = (((uint128_t ) t6322) + ((uint128_t ) t6514));
    s1144 = (((uint128_t ) s1143) + ((uint128_t ) c590));
    t6533 = ((uint64_t ) s1144);
    c591 = (s1144 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1145 = (((uint128_t ) t6323) + ((uint128_t ) t6518));
    t6534 = ((uint64_t ) s1145);
    c592 = (s1145 >> 64);
    s1146 = (((uint128_t ) t6324) + ((uint128_t ) t6517));
    s1147 = (((uint128_t ) s1146) + ((uint128_t ) c592));
    t6535 = ((uint64_t ) s1147);
    c593 = (s1147 >> 64);
    /* MPPropagateCarry 64 */
    t6536 = (t6534 + c591);
    a18640 = ((t6536 == 0));
    a18641 = (t6535 + c591);
    t6537 = ((a18640) ? (a18641) : (t6535));
    a18642 = ((t6537 == 0));
    a18643 = ((a18642) && (a18640));
    a18644 = (c593 + c591);
    t6538 = ((a18643) ? (a18644) : (c593));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDD 64 */
    s1148 = (((uint128_t ) t6532) + ((uint128_t ) t6528));
    t5180 = ((uint64_t ) s1148);
    c594 = (s1148 >> 64);
    s1149 = (((uint128_t ) t6533) + ((uint128_t ) c594));
    t5179 = ((uint64_t ) s1149);
    /* MPEqualDI 64 */
    a18648 = ((t5179 == 0));
    a18649 = ((t5180 == 0));
    a18650 = ((a18648) && (a18649));
    /* MPAddDDD 64 */
    s1150 = (((uint128_t ) t6536) + ((uint128_t ) t6528));
    t6540 = ((uint64_t ) s1150);
    c595 = (s1150 >> 64);
    s1151 = (((uint128_t ) t6537) + ((uint128_t ) c595));
    t6541 = ((uint64_t ) s1151);
    /* MPCondD 64 */
    t5177 = ((a18650) ? (t6541) : (t6537));
    t5178 = ((a18650) ? (t6540) : (t6536));
    /* MPEqualDI 64 */
    a18651 = ((t5177 == 0));
    a18652 = ((t5178 == 0));
    a18653 = ((a18651) && (a18652));
    /* MPEqualDI 64 */
    a18654 = ((a18653) && (a18650));
    /* MPAddDDI 64 */
    s1152 = (((uint128_t ) t6528) + ((uint128_t ) t6538));
    t6542 = ((uint64_t ) s1152);
    c596 = (s1152 >> 64);
    s1153 = (((uint128_t ) 0) + ((uint128_t ) c596));
    t6543 = ((uint64_t ) s1153);
    /* MPCondDDI 64 */
    t6544 = ((a18654) ? (t6543) : (0));
    t6545 = ((a18654) ? (t6542) : (t6538));
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQID 128 */
    /* MPAddQDD 64 */
    s1154 = (((uint128_t ) t6327) + ((uint128_t ) t6520));
    t6546 = ((uint64_t ) s1154);
    c597 = (s1154 >> 64);
    s1155 = (((uint128_t ) t6328) + ((uint128_t ) c597));
    t6547 = ((uint64_t ) s1155);
    c598 = (s1155 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1156 = (((uint128_t ) t6333) + ((uint128_t ) c598));
    t6548 = ((uint64_t ) s1156);
    c599 = (s1156 >> 64);
    s1157 = (((uint128_t ) t6334) + ((uint128_t ) c599));
    t6549 = ((uint64_t ) s1157);
    /* MPExtractLow 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDD 64 */
    s1158 = (((uint128_t ) t6546) + ((uint128_t ) t6545));
    t5142 = ((uint64_t ) s1158);
    c601 = (s1158 >> 64);
    s1159 = (((uint128_t ) t6547) + ((uint128_t ) t6544));
    s1160 = (((uint128_t ) s1159) + ((uint128_t ) c601));
    t5141 = ((uint64_t ) s1160);
    /* MPEqualDI 64 */
    a18655 = ((t5141 == 0));
    a18656 = ((t5142 == 0));
    a18657 = ((a18655) && (a18656));
    /* MPAddDDD 64 */
    s1161 = (((uint128_t ) t6548) + ((uint128_t ) t6545));
    t6550 = ((uint64_t ) s1161);
    c602 = (s1161 >> 64);
    s1162 = (((uint128_t ) t6549) + ((uint128_t ) t6544));
    s1163 = (((uint128_t ) s1162) + ((uint128_t ) c602));
    t6551 = ((uint64_t ) s1163);
    /* MPCondD 64 */
    t5139 = ((a18657) ? (t6551) : (t6549));
    t5140 = ((a18657) ? (t6550) : (t6548));
    /* MPExtractLow 128 */
    /* End of MPAddQQQ 256 */
    /* End of MPMulQDD_Schoolbook_Full */
}

__device__ void MPMulQDD_L3_1(uint64_t &t5139, uint64_t &t5140, uint64_t &t5141, uint64_t &t5142, uint64_t &t5177, uint64_t &t5178, uint64_t &t5179, uint64_t &t5180, uint64_t &t5239, uint64_t &t5240, uint64_t &t5241, uint64_t &t5242, uint64_t &t5735, uint64_t &t5740, uint64_t &t5743, uint64_t &t5744, uint64_t t4607, uint64_t t4608, uint64_t t4609, uint64_t t4610, uint64_t t4603, uint64_t t4604, uint64_t t4605, uint64_t t4606, uint64_t t4615, uint64_t t4616, uint64_t t4617, uint64_t t4618, uint64_t t4611, uint64_t t4612, uint64_t t4613, uint64_t t4614) {
    int a18674, a18676, a18677, a18687, a18689, a18690, a18695, a18710, 
            a18723, a18754, a18756, a18757, a18767, a18769, a18770, a18775, 
            a18790, a18792, a18793, a18803, a18805, a18806, a18811, a18818, 
            a18820, a18821, a18826, a18828, a18829, a18834, a18835, a18836, 
            a18837, a18838, a18839, a18840, a18844, a18846, a18847, a18852, 
            a18853, a18854, a18859, a18861, a18862, a18867, a18868, a18869, 
            a18870, a18871, a18872, a18873, c603, c604, c605, c606, 
            c607, c608, c609, c610, c611, c612, c613, c614, 
            c615, c616, c617, c618, c619, c620, c621, c622, 
            c623, c624, c625, c626, c627, c629, c630, c631, 
            c632, c633, c634, c635, c636, c637, c638, c639, 
            c640, c641, c642, c643, c645, c646, c647, c651, 
            c652, c653, c654, c655, c656, c657, c658, c659, 
            c660, c661, c662, c663, c664, c665, c666, c667, 
            c668, c669, c670, c671, c672, c673, c674, c675, 
            c677, c678, c679, c680, c681, c682, c683, c684, 
            c685, c686, c687, c688, c689, c690, c691, c692, 
            c693, c695, c696, c697, c698, c699, c700, c701, 
            c702, c703, c704, c705, c706, c707, c708, c709, 
            c710, c711, c712, c713, c714, c715, c716, c717, 
            c718, c722;
    uint64_t a18675, a18678, a18688, a18691, a18696, a18711, a18724, a18755, 
            a18758, a18768, a18771, a18776, a18791, a18794, a18804, a18807, 
            a18812, a18819, a18822, a18827, a18830, a18845, a18848, a18860, 
            a18863, t6552, t6553, t6554, t6555, t6556, t6557, t6558, 
            t6559, t6560, t6561, t6562, t6563, t6564, t6565, t6566, 
            t6567, t6568, t6569, t6570, t6571, t6572, t6573, t6574, 
            t6575, t6576, t6577, t6578, t6579, t6580, t6581, t6582, 
            t6583, t6584, t6585, t6586, t6587, t6588, t6589, t6590, 
            t6591, t6592, t6593, t6594, t6595, t6596, t6597, t6598, 
            t6599, t6600, t6601, t6602, t6603, t6604, t6605, t6606, 
            t6607, t6608, t6609, t6610, t6611, t6612, t6613, t6614, 
            t6616, t6617, t6618, t6619, t6620, t6621, t6622, t6623, 
            t6624, t6626, t6627, t6628, t6629, t6632, t6633, t6634, 
            t6635, t6636, t6637, t6638, t6639, t6640, t6641, t6642, 
            t6643, t6644, t6645, t6646, t6647, t6648, t6649, t6650, 
            t6651, t6652, t6653, t6654, t6655, t6656, t6657, t6658, 
            t6659, t6660, t6661, t6662, t6663, t6664, t6665, t6666, 
            t6667, t6668, t6669, t6670, t6671, t6672, t6675, t6676, 
            t6677, t6678, t6679, t6680, t6681, t6682, t6691, t6692, 
            t6693, t6694, t6695, t6696, t6697, t6698, t6699, t6700, 
            t6701, t6702, t6703, t6704, t6705, t6706, t6707, t6708, 
            t6709, t6710, t6711, t6712, t6713, t6714, t6715, t6716, 
            t6717, t6718, t6719, t6720, t6721, t6722, t6723, t6724, 
            t6725, t6726, t6727, t6728, t6729, t6730, t6731, t6732, 
            t6733, t6734, t6735, t6736, t6737, t6738, t6739, t6740, 
            t6741, t6742, t6743, t6744, t6745, t6746, t6747, t6748, 
            t6749, t6750, t6751, t6752, t6753, t6755, t6756, t6757, 
            t6758, t6759, t6760, t6761, t6762, t6763, t6765, t6766, 
            t6767, t6768, t6771, t6772, t6773, t6774, t6775, t6776, 
            t6777, t6778, t6779, t6780, t6781, t6782, t6783, t6784, 
            t6785, t6786, t6787, t6788, t6789, t6790, t6791, t6792, 
            t6793, t6794, t6795, t6796, t6797, t6798, t6799, t6800, 
            t6801, t6802, t6803, t6804, t6805, t6807, t6808, t6809, 
            t6810, t6811, t6812, t6813, t6814, t6815, t6817, t6818, 
            t6819, t6820, t6823, t6824, t6825, t6826, t6827, t6828, 
            t6829, t6831, t6832, t6833, t6834, t6835, t6836, t6837, 
            t6839, t6840, t6841, t6842, t6843, t6844, t6845, t6846, 
            t6847, t6848, t6849, t6850, t6851, t6852, t6853, t6854, 
            t6856, t6857, t6858, t6859, t6860, t6861, t6862, t6863, 
            t6864, t6866, t6867, t6868, t6869, t6870, t6871, t6872, 
            t6873;
    uint128_t a18658, a18659, a18660, a18661, a18662, a18663, a18664, a18665, 
            a18666, a18667, a18668, a18669, a18670, a18671, a18672, a18673, 
            a18702, a18703, a18704, a18705, a18706, a18707, a18708, a18709, 
            a18738, a18739, a18740, a18741, a18742, a18743, a18744, a18745, 
            a18746, a18747, a18748, a18749, a18750, a18751, a18752, a18753, 
            a18782, a18783, a18784, a18785, a18786, a18787, a18788, a18789, 
            s1164, s1165, s1166, s1167, s1168, s1169, s1170, s1171, 
            s1172, s1173, s1174, s1175, s1176, s1177, s1178, s1179, 
            s1180, s1181, s1182, s1183, s1184, s1185, s1186, s1187, 
            s1188, s1189, s1190, s1191, s1192, s1193, s1194, s1195, 
            s1196, s1197, s1198, s1199, s1200, s1201, s1202, s1203, 
            s1204, s1205, s1206, s1207, s1208, s1209, s1210, s1211, 
            s1212, s1213, s1214, s1215, s1216, s1217, s1218, s1219, 
            s1220, s1221, s1222, s1223, s1224, s1225, s1226, s1227, 
            s1228, s1229, s1230, s1231, s1232, s1233, s1234, s1235, 
            s1236, s1237, s1238, s1239, s1240, s1241, s1242, s1243, 
            s1246, s1247, s1248, s1249, s1250, s1251, s1252, s1253, 
            s1254, s1255, s1256, s1257, s1258, s1259, s1260, s1261, 
            s1262, s1263, s1264, s1265, s1266, s1267, s1268, s1269, 
            s1270, s1271, s1272, s1273, s1274, s1275, s1276, s1277, 
            s1278, s1279, s1280, s1281, s1282, s1283, s1284, s1285, 
            s1286, s1287, s1288, s1289, s1290, s1291, s1292, s1293, 
            s1294, s1295, s1296, s1297, s1298, s1299, s1300, s1301, 
            s1302, s1303, s1304, s1305, s1306, s1307, s1308, s1309, 
            s1310, s1311, s1312, s1313, s1314, s1315, s1316, s1317, 
            s1318, s1319, s1320, s1321, s1322, s1323, s1324, s1325, 
            s1326, s1327, s1328, s1329, s1330, s1331, s1332, s1333, 
            s1334, s1335, s1336, s1337, s1338, s1339, s1340, s1341, 
            s1342, s1343, s1344, s1345, s1346, s1347, s1348, s1349, 
            s1350, s1351, s1352, s1353, s1354, s1355, s1356, s1357, 
            s1358, s1359, s1362, s1363, s1364;
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18658 = (((uint128_t ) t4606)*((uint128_t ) t4614));
    t6552 = (a18658 >> 64);
    t6553 = ((uint64_t ) a18658);
    a18659 = (((uint128_t ) t4605)*((uint128_t ) t4613));
    t6554 = (a18659 >> 64);
    t6555 = ((uint64_t ) a18659);
    a18660 = (((uint128_t ) t4605)*((uint128_t ) t4614));
    t6556 = (a18660 >> 64);
    t6557 = ((uint64_t ) a18660);
    a18661 = (((uint128_t ) t4606)*((uint128_t ) t4613));
    t6558 = (a18661 >> 64);
    t6559 = ((uint64_t ) a18661);
    /* MPAddQDD 64 */
    s1164 = (((uint128_t ) t6557) + ((uint128_t ) t6559));
    t6560 = ((uint64_t ) s1164);
    c603 = (s1164 >> 64);
    s1165 = (((uint128_t ) t6556) + ((uint128_t ) t6558));
    s1166 = (((uint128_t ) s1165) + ((uint128_t ) c603));
    t6561 = ((uint64_t ) s1166);
    c604 = (s1166 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6562 = ((uint64_t ) t6553);
    s1167 = (((uint128_t ) t6552) + ((uint128_t ) t6560));
    t6563 = ((uint64_t ) s1167);
    c605 = (s1167 >> 64);
    s1168 = (((uint128_t ) t6555) + ((uint128_t ) t6561));
    s1169 = (((uint128_t ) s1168) + ((uint128_t ) c605));
    t6564 = ((uint64_t ) s1169);
    c606 = (s1169 >> 64);
    s1170 = (((uint128_t ) t6554) + ((uint128_t ) c604));
    s1171 = (((uint128_t ) s1170) + ((uint128_t ) c606));
    t6565 = ((uint64_t ) s1171);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18662 = (((uint128_t ) t4604)*((uint128_t ) t4612));
    t6566 = (a18662 >> 64);
    t6567 = ((uint64_t ) a18662);
    a18663 = (((uint128_t ) t4603)*((uint128_t ) t4611));
    t6568 = (a18663 >> 64);
    t6569 = ((uint64_t ) a18663);
    a18664 = (((uint128_t ) t4603)*((uint128_t ) t4612));
    t6570 = (a18664 >> 64);
    t6571 = ((uint64_t ) a18664);
    a18665 = (((uint128_t ) t4604)*((uint128_t ) t4611));
    t6572 = (a18665 >> 64);
    t6573 = ((uint64_t ) a18665);
    /* MPAddQDD 64 */
    s1172 = (((uint128_t ) t6571) + ((uint128_t ) t6573));
    t6574 = ((uint64_t ) s1172);
    c607 = (s1172 >> 64);
    s1173 = (((uint128_t ) t6570) + ((uint128_t ) t6572));
    s1174 = (((uint128_t ) s1173) + ((uint128_t ) c607));
    t6575 = ((uint64_t ) s1174);
    c608 = (s1174 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6576 = ((uint64_t ) t6567);
    s1175 = (((uint128_t ) t6566) + ((uint128_t ) t6574));
    t6577 = ((uint64_t ) s1175);
    c609 = (s1175 >> 64);
    s1176 = (((uint128_t ) t6569) + ((uint128_t ) t6575));
    s1177 = (((uint128_t ) s1176) + ((uint128_t ) c609));
    t6578 = ((uint64_t ) s1177);
    c610 = (s1177 >> 64);
    s1178 = (((uint128_t ) t6568) + ((uint128_t ) c608));
    s1179 = (((uint128_t ) s1178) + ((uint128_t ) c610));
    t6579 = ((uint64_t ) s1179);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18666 = (((uint128_t ) t4604)*((uint128_t ) t4614));
    t6580 = (a18666 >> 64);
    t6581 = ((uint64_t ) a18666);
    a18667 = (((uint128_t ) t4603)*((uint128_t ) t4613));
    t6582 = (a18667 >> 64);
    t6583 = ((uint64_t ) a18667);
    a18668 = (((uint128_t ) t4603)*((uint128_t ) t4614));
    t6584 = (a18668 >> 64);
    t6585 = ((uint64_t ) a18668);
    a18669 = (((uint128_t ) t4604)*((uint128_t ) t4613));
    t6586 = (a18669 >> 64);
    t6587 = ((uint64_t ) a18669);
    /* MPAddQDD 64 */
    s1180 = (((uint128_t ) t6585) + ((uint128_t ) t6587));
    t6588 = ((uint64_t ) s1180);
    c611 = (s1180 >> 64);
    s1181 = (((uint128_t ) t6584) + ((uint128_t ) t6586));
    s1182 = (((uint128_t ) s1181) + ((uint128_t ) c611));
    t6589 = ((uint64_t ) s1182);
    c612 = (s1182 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6590 = ((uint64_t ) t6581);
    s1183 = (((uint128_t ) t6580) + ((uint128_t ) t6588));
    t6591 = ((uint64_t ) s1183);
    c613 = (s1183 >> 64);
    s1184 = (((uint128_t ) t6583) + ((uint128_t ) t6589));
    s1185 = (((uint128_t ) s1184) + ((uint128_t ) c613));
    t6592 = ((uint64_t ) s1185);
    c614 = (s1185 >> 64);
    s1186 = (((uint128_t ) t6582) + ((uint128_t ) c612));
    s1187 = (((uint128_t ) s1186) + ((uint128_t ) c614));
    t6593 = ((uint64_t ) s1187);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18670 = (((uint128_t ) t4606)*((uint128_t ) t4612));
    t6594 = (a18670 >> 64);
    t6595 = ((uint64_t ) a18670);
    a18671 = (((uint128_t ) t4605)*((uint128_t ) t4611));
    t6596 = (a18671 >> 64);
    t6597 = ((uint64_t ) a18671);
    a18672 = (((uint128_t ) t4605)*((uint128_t ) t4612));
    t6598 = (a18672 >> 64);
    t6599 = ((uint64_t ) a18672);
    a18673 = (((uint128_t ) t4606)*((uint128_t ) t4611));
    t6600 = (a18673 >> 64);
    t6601 = ((uint64_t ) a18673);
    /* MPAddQDD 64 */
    s1188 = (((uint128_t ) t6599) + ((uint128_t ) t6601));
    t6602 = ((uint64_t ) s1188);
    c615 = (s1188 >> 64);
    s1189 = (((uint128_t ) t6598) + ((uint128_t ) t6600));
    s1190 = (((uint128_t ) s1189) + ((uint128_t ) c615));
    t6603 = ((uint64_t ) s1190);
    c616 = (s1190 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6604 = ((uint64_t ) t6595);
    s1191 = (((uint128_t ) t6594) + ((uint128_t ) t6602));
    t6605 = ((uint64_t ) s1191);
    c617 = (s1191 >> 64);
    s1192 = (((uint128_t ) t6597) + ((uint128_t ) t6603));
    s1193 = (((uint128_t ) s1192) + ((uint128_t ) c617));
    t6606 = ((uint64_t ) s1193);
    c618 = (s1193 >> 64);
    s1194 = (((uint128_t ) t6596) + ((uint128_t ) c616));
    s1195 = (((uint128_t ) s1194) + ((uint128_t ) c618));
    t6607 = ((uint64_t ) s1195);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1196 = (((uint128_t ) t6590) + ((uint128_t ) t6604));
    t6608 = ((uint64_t ) s1196);
    c619 = (s1196 >> 64);
    s1197 = (((uint128_t ) t6591) + ((uint128_t ) t6605));
    s1198 = (((uint128_t ) s1197) + ((uint128_t ) c619));
    t6609 = ((uint64_t ) s1198);
    c620 = (s1198 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1199 = (((uint128_t ) t6592) + ((uint128_t ) t6606));
    t6610 = ((uint64_t ) s1199);
    c621 = (s1199 >> 64);
    s1200 = (((uint128_t ) t6593) + ((uint128_t ) t6607));
    s1201 = (((uint128_t ) s1200) + ((uint128_t ) c621));
    t6611 = ((uint64_t ) s1201);
    c622 = (s1201 >> 64);
    /* MPPropagateCarry 64 */
    t6612 = (t6610 + c620);
    a18674 = ((t6612 == 0));
    a18675 = (t6611 + c620);
    t6613 = ((a18674) ? (a18675) : (t6611));
    a18676 = ((t6613 == 0));
    a18677 = ((a18676) && (a18674));
    a18678 = (c622 + c620);
    t6614 = ((a18677) ? (a18678) : (c622));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6616 = ((uint64_t ) t6562);
    t6617 = ((uint64_t ) t6563);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1202 = (((uint128_t ) t6564) + ((uint128_t ) t6608));
    t6618 = ((uint64_t ) s1202);
    c623 = (s1202 >> 64);
    s1203 = (((uint128_t ) t6565) + ((uint128_t ) t6609));
    s1204 = (((uint128_t ) s1203) + ((uint128_t ) c623));
    t6619 = ((uint64_t ) s1204);
    c624 = (s1204 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1205 = (((uint128_t ) t6576) + ((uint128_t ) t6612));
    t6620 = ((uint64_t ) s1205);
    c625 = (s1205 >> 64);
    s1206 = (((uint128_t ) t6577) + ((uint128_t ) t6613));
    s1207 = (((uint128_t ) s1206) + ((uint128_t ) c625));
    t6621 = ((uint64_t ) s1207);
    c626 = (s1207 >> 64);
    /* MPPropagateCarry 64 */
    t6622 = (t6620 + c624);
    a18687 = ((t6622 == 0));
    a18688 = (t6621 + c624);
    t6623 = ((a18687) ? (a18688) : (t6621));
    a18689 = ((t6623 == 0));
    a18690 = ((a18689) && (a18687));
    a18691 = (c626 + c624);
    t6624 = ((a18690) ? (a18691) : (c626));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1208 = (((uint128_t ) t6578) + ((uint128_t ) t6614));
    t6626 = ((uint64_t ) s1208);
    c627 = (s1208 >> 64);
    s1209 = (((uint128_t ) t6579) + ((uint128_t ) c627));
    t6627 = ((uint64_t ) s1209);
    /* MPPropagateCarry 64 */
    t6628 = (t6626 + t6624);
    a18695 = ((t6628 == 0));
    a18696 = (t6627 + t6624);
    t6629 = ((a18695) ? (a18696) : (t6627));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18702 = (((uint128_t ) t4610)*((uint128_t ) t4618));
    t6632 = (a18702 >> 64);
    t6633 = ((uint64_t ) a18702);
    a18703 = (((uint128_t ) t4609)*((uint128_t ) t4617));
    t6634 = (a18703 >> 64);
    t6635 = ((uint64_t ) a18703);
    a18704 = (((uint128_t ) t4609)*((uint128_t ) t4618));
    t6636 = (a18704 >> 64);
    t6637 = ((uint64_t ) a18704);
    a18705 = (((uint128_t ) t4610)*((uint128_t ) t4617));
    t6638 = (a18705 >> 64);
    t6639 = ((uint64_t ) a18705);
    /* MPAddQDD 64 */
    s1210 = (((uint128_t ) t6637) + ((uint128_t ) t6639));
    t6640 = ((uint64_t ) s1210);
    c629 = (s1210 >> 64);
    s1211 = (((uint128_t ) t6636) + ((uint128_t ) t6638));
    s1212 = (((uint128_t ) s1211) + ((uint128_t ) c629));
    t6641 = ((uint64_t ) s1212);
    c630 = (s1212 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6642 = ((uint64_t ) t6633);
    s1213 = (((uint128_t ) t6632) + ((uint128_t ) t6640));
    t6643 = ((uint64_t ) s1213);
    c631 = (s1213 >> 64);
    s1214 = (((uint128_t ) t6635) + ((uint128_t ) t6641));
    s1215 = (((uint128_t ) s1214) + ((uint128_t ) c631));
    t6644 = ((uint64_t ) s1215);
    c632 = (s1215 >> 64);
    s1216 = (((uint128_t ) t6634) + ((uint128_t ) c630));
    s1217 = (((uint128_t ) s1216) + ((uint128_t ) c632));
    t6645 = ((uint64_t ) s1217);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    t6646 = ((uint64_t ) 0);
    /* MPAddQDD 64 */
    s1218 = (((uint128_t ) t6646) + ((uint128_t ) t6646));
    t6647 = ((uint64_t ) s1218);
    c633 = (s1218 >> 64);
    s1219 = (((uint128_t ) 0) + ((uint128_t ) c633));
    t6648 = ((uint64_t ) s1219);
    c634 = (s1219 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6649 = ((uint64_t ) t6646);
    t6650 = ((uint64_t ) t6647);
    c635 = (t6647 >> 64);
    s1220 = (((uint128_t ) t6646) + ((uint128_t ) t6648));
    s1221 = (((uint128_t ) s1220) + ((uint128_t ) c635));
    t6651 = ((uint64_t ) s1221);
    c636 = (s1221 >> 64);
    s1222 = (((uint128_t ) 0) + ((uint128_t ) c634));
    s1223 = (((uint128_t ) s1222) + ((uint128_t ) c636));
    t6652 = ((uint64_t ) s1223);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18706 = (((uint128_t ) t4608)*((uint128_t ) t4618));
    t6653 = (a18706 >> 64);
    t6654 = ((uint64_t ) a18706);
    a18707 = (((uint128_t ) t4607)*((uint128_t ) t4617));
    t6655 = (a18707 >> 64);
    t6656 = ((uint64_t ) a18707);
    a18708 = (((uint128_t ) t4607)*((uint128_t ) t4618));
    t6657 = (a18708 >> 64);
    t6658 = ((uint64_t ) a18708);
    a18709 = (((uint128_t ) t4608)*((uint128_t ) t4617));
    t6659 = (a18709 >> 64);
    t6660 = ((uint64_t ) a18709);
    /* MPAddQDD 64 */
    s1224 = (((uint128_t ) t6658) + ((uint128_t ) t6660));
    t6661 = ((uint64_t ) s1224);
    c637 = (s1224 >> 64);
    s1225 = (((uint128_t ) t6657) + ((uint128_t ) t6659));
    s1226 = (((uint128_t ) s1225) + ((uint128_t ) c637));
    t6662 = ((uint64_t ) s1226);
    c638 = (s1226 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6663 = ((uint64_t ) t6654);
    s1227 = (((uint128_t ) t6653) + ((uint128_t ) t6661));
    t6664 = ((uint64_t ) s1227);
    c639 = (s1227 >> 64);
    s1228 = (((uint128_t ) t6656) + ((uint128_t ) t6662));
    s1229 = (((uint128_t ) s1228) + ((uint128_t ) c639));
    t6665 = ((uint64_t ) s1229);
    c640 = (s1229 >> 64);
    s1230 = (((uint128_t ) t6655) + ((uint128_t ) c638));
    s1231 = (((uint128_t ) s1230) + ((uint128_t ) c640));
    t6666 = ((uint64_t ) s1231);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1232 = (((uint128_t ) t6663) + ((uint128_t ) t6649));
    t6667 = ((uint64_t ) s1232);
    c641 = (s1232 >> 64);
    s1233 = (((uint128_t ) t6664) + ((uint128_t ) t6650));
    s1234 = (((uint128_t ) s1233) + ((uint128_t ) c641));
    t6668 = ((uint64_t ) s1234);
    c642 = (s1234 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1235 = (((uint128_t ) t6665) + ((uint128_t ) t6651));
    t6669 = ((uint64_t ) s1235);
    c643 = (s1235 >> 64);
    s1236 = (((uint128_t ) t6666) + ((uint128_t ) t6652));
    s1237 = (((uint128_t ) s1236) + ((uint128_t ) c643));
    t6670 = ((uint64_t ) s1237);
    /* MPPropagateCarry 64 */
    t6671 = (t6669 + c642);
    a18710 = ((t6671 == 0));
    a18711 = (t6670 + c642);
    t6672 = ((a18710) ? (a18711) : (t6670));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6675 = ((uint64_t ) t6642);
    t6676 = ((uint64_t ) t6643);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1238 = (((uint128_t ) t6644) + ((uint128_t ) t6667));
    t6677 = ((uint64_t ) s1238);
    c645 = (s1238 >> 64);
    s1239 = (((uint128_t ) t6645) + ((uint128_t ) t6668));
    s1240 = (((uint128_t ) s1239) + ((uint128_t ) c645));
    t6678 = ((uint64_t ) s1240);
    c646 = (s1240 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1241 = (((uint128_t ) t6649) + ((uint128_t ) t6671));
    t6679 = ((uint64_t ) s1241);
    c647 = (s1241 >> 64);
    s1242 = (((uint128_t ) t6650) + ((uint128_t ) t6672));
    s1243 = (((uint128_t ) s1242) + ((uint128_t ) c647));
    t6680 = ((uint64_t ) s1243);
    /* MPPropagateCarry 64 */
    t6681 = (t6679 + c646);
    a18723 = ((t6681 == 0));
    a18724 = (t6680 + c646);
    t6682 = ((a18723) ? (a18724) : (t6680));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18738 = (((uint128_t ) t4610)*((uint128_t ) t4614));
    t6691 = (a18738 >> 64);
    t6692 = ((uint64_t ) a18738);
    a18739 = (((uint128_t ) t4609)*((uint128_t ) t4613));
    t6693 = (a18739 >> 64);
    t6694 = ((uint64_t ) a18739);
    a18740 = (((uint128_t ) t4609)*((uint128_t ) t4614));
    t6695 = (a18740 >> 64);
    t6696 = ((uint64_t ) a18740);
    a18741 = (((uint128_t ) t4610)*((uint128_t ) t4613));
    t6697 = (a18741 >> 64);
    t6698 = ((uint64_t ) a18741);
    /* MPAddQDD 64 */
    s1246 = (((uint128_t ) t6696) + ((uint128_t ) t6698));
    t6699 = ((uint64_t ) s1246);
    c651 = (s1246 >> 64);
    s1247 = (((uint128_t ) t6695) + ((uint128_t ) t6697));
    s1248 = (((uint128_t ) s1247) + ((uint128_t ) c651));
    t6700 = ((uint64_t ) s1248);
    c652 = (s1248 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6701 = ((uint64_t ) t6692);
    s1249 = (((uint128_t ) t6691) + ((uint128_t ) t6699));
    t6702 = ((uint64_t ) s1249);
    c653 = (s1249 >> 64);
    s1250 = (((uint128_t ) t6694) + ((uint128_t ) t6700));
    s1251 = (((uint128_t ) s1250) + ((uint128_t ) c653));
    t6703 = ((uint64_t ) s1251);
    c654 = (s1251 >> 64);
    s1252 = (((uint128_t ) t6693) + ((uint128_t ) c652));
    s1253 = (((uint128_t ) s1252) + ((uint128_t ) c654));
    t6704 = ((uint64_t ) s1253);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18742 = (((uint128_t ) t4608)*((uint128_t ) t4612));
    t6705 = (a18742 >> 64);
    t6706 = ((uint64_t ) a18742);
    a18743 = (((uint128_t ) t4607)*((uint128_t ) t4611));
    t6707 = (a18743 >> 64);
    t6708 = ((uint64_t ) a18743);
    a18744 = (((uint128_t ) t4607)*((uint128_t ) t4612));
    t6709 = (a18744 >> 64);
    t6710 = ((uint64_t ) a18744);
    a18745 = (((uint128_t ) t4608)*((uint128_t ) t4611));
    t6711 = (a18745 >> 64);
    t6712 = ((uint64_t ) a18745);
    /* MPAddQDD 64 */
    s1254 = (((uint128_t ) t6710) + ((uint128_t ) t6712));
    t6713 = ((uint64_t ) s1254);
    c655 = (s1254 >> 64);
    s1255 = (((uint128_t ) t6709) + ((uint128_t ) t6711));
    s1256 = (((uint128_t ) s1255) + ((uint128_t ) c655));
    t6714 = ((uint64_t ) s1256);
    c656 = (s1256 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6715 = ((uint64_t ) t6706);
    s1257 = (((uint128_t ) t6705) + ((uint128_t ) t6713));
    t6716 = ((uint64_t ) s1257);
    c657 = (s1257 >> 64);
    s1258 = (((uint128_t ) t6708) + ((uint128_t ) t6714));
    s1259 = (((uint128_t ) s1258) + ((uint128_t ) c657));
    t6717 = ((uint64_t ) s1259);
    c658 = (s1259 >> 64);
    s1260 = (((uint128_t ) t6707) + ((uint128_t ) c656));
    s1261 = (((uint128_t ) s1260) + ((uint128_t ) c658));
    t6718 = ((uint64_t ) s1261);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18746 = (((uint128_t ) t4608)*((uint128_t ) t4614));
    t6719 = (a18746 >> 64);
    t6720 = ((uint64_t ) a18746);
    a18747 = (((uint128_t ) t4607)*((uint128_t ) t4613));
    t6721 = (a18747 >> 64);
    t6722 = ((uint64_t ) a18747);
    a18748 = (((uint128_t ) t4607)*((uint128_t ) t4614));
    t6723 = (a18748 >> 64);
    t6724 = ((uint64_t ) a18748);
    a18749 = (((uint128_t ) t4608)*((uint128_t ) t4613));
    t6725 = (a18749 >> 64);
    t6726 = ((uint64_t ) a18749);
    /* MPAddQDD 64 */
    s1262 = (((uint128_t ) t6724) + ((uint128_t ) t6726));
    t6727 = ((uint64_t ) s1262);
    c659 = (s1262 >> 64);
    s1263 = (((uint128_t ) t6723) + ((uint128_t ) t6725));
    s1264 = (((uint128_t ) s1263) + ((uint128_t ) c659));
    t6728 = ((uint64_t ) s1264);
    c660 = (s1264 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6729 = ((uint64_t ) t6720);
    s1265 = (((uint128_t ) t6719) + ((uint128_t ) t6727));
    t6730 = ((uint64_t ) s1265);
    c661 = (s1265 >> 64);
    s1266 = (((uint128_t ) t6722) + ((uint128_t ) t6728));
    s1267 = (((uint128_t ) s1266) + ((uint128_t ) c661));
    t6731 = ((uint64_t ) s1267);
    c662 = (s1267 >> 64);
    s1268 = (((uint128_t ) t6721) + ((uint128_t ) c660));
    s1269 = (((uint128_t ) s1268) + ((uint128_t ) c662));
    t6732 = ((uint64_t ) s1269);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18750 = (((uint128_t ) t4610)*((uint128_t ) t4612));
    t6733 = (a18750 >> 64);
    t6734 = ((uint64_t ) a18750);
    a18751 = (((uint128_t ) t4609)*((uint128_t ) t4611));
    t6735 = (a18751 >> 64);
    t6736 = ((uint64_t ) a18751);
    a18752 = (((uint128_t ) t4609)*((uint128_t ) t4612));
    t6737 = (a18752 >> 64);
    t6738 = ((uint64_t ) a18752);
    a18753 = (((uint128_t ) t4610)*((uint128_t ) t4611));
    t6739 = (a18753 >> 64);
    t6740 = ((uint64_t ) a18753);
    /* MPAddQDD 64 */
    s1270 = (((uint128_t ) t6738) + ((uint128_t ) t6740));
    t6741 = ((uint64_t ) s1270);
    c663 = (s1270 >> 64);
    s1271 = (((uint128_t ) t6737) + ((uint128_t ) t6739));
    s1272 = (((uint128_t ) s1271) + ((uint128_t ) c663));
    t6742 = ((uint64_t ) s1272);
    c664 = (s1272 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6743 = ((uint64_t ) t6734);
    s1273 = (((uint128_t ) t6733) + ((uint128_t ) t6741));
    t6744 = ((uint64_t ) s1273);
    c665 = (s1273 >> 64);
    s1274 = (((uint128_t ) t6736) + ((uint128_t ) t6742));
    s1275 = (((uint128_t ) s1274) + ((uint128_t ) c665));
    t6745 = ((uint64_t ) s1275);
    c666 = (s1275 >> 64);
    s1276 = (((uint128_t ) t6735) + ((uint128_t ) c664));
    s1277 = (((uint128_t ) s1276) + ((uint128_t ) c666));
    t6746 = ((uint64_t ) s1277);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1278 = (((uint128_t ) t6729) + ((uint128_t ) t6743));
    t6747 = ((uint64_t ) s1278);
    c667 = (s1278 >> 64);
    s1279 = (((uint128_t ) t6730) + ((uint128_t ) t6744));
    s1280 = (((uint128_t ) s1279) + ((uint128_t ) c667));
    t6748 = ((uint64_t ) s1280);
    c668 = (s1280 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1281 = (((uint128_t ) t6731) + ((uint128_t ) t6745));
    t6749 = ((uint64_t ) s1281);
    c669 = (s1281 >> 64);
    s1282 = (((uint128_t ) t6732) + ((uint128_t ) t6746));
    s1283 = (((uint128_t ) s1282) + ((uint128_t ) c669));
    t6750 = ((uint64_t ) s1283);
    c670 = (s1283 >> 64);
    /* MPPropagateCarry 64 */
    t6751 = (t6749 + c668);
    a18754 = ((t6751 == 0));
    a18755 = (t6750 + c668);
    t6752 = ((a18754) ? (a18755) : (t6750));
    a18756 = ((t6752 == 0));
    a18757 = ((a18756) && (a18754));
    a18758 = (c670 + c668);
    t6753 = ((a18757) ? (a18758) : (c670));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6755 = ((uint64_t ) t6701);
    t6756 = ((uint64_t ) t6702);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1284 = (((uint128_t ) t6703) + ((uint128_t ) t6747));
    t6757 = ((uint64_t ) s1284);
    c671 = (s1284 >> 64);
    s1285 = (((uint128_t ) t6704) + ((uint128_t ) t6748));
    s1286 = (((uint128_t ) s1285) + ((uint128_t ) c671));
    t6758 = ((uint64_t ) s1286);
    c672 = (s1286 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1287 = (((uint128_t ) t6715) + ((uint128_t ) t6751));
    t6759 = ((uint64_t ) s1287);
    c673 = (s1287 >> 64);
    s1288 = (((uint128_t ) t6716) + ((uint128_t ) t6752));
    s1289 = (((uint128_t ) s1288) + ((uint128_t ) c673));
    t6760 = ((uint64_t ) s1289);
    c674 = (s1289 >> 64);
    /* MPPropagateCarry 64 */
    t6761 = (t6759 + c672);
    a18767 = ((t6761 == 0));
    a18768 = (t6760 + c672);
    t6762 = ((a18767) ? (a18768) : (t6760));
    a18769 = ((t6762 == 0));
    a18770 = ((a18769) && (a18767));
    a18771 = (c674 + c672);
    t6763 = ((a18770) ? (a18771) : (c674));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1290 = (((uint128_t ) t6717) + ((uint128_t ) t6753));
    t6765 = ((uint64_t ) s1290);
    c675 = (s1290 >> 64);
    s1291 = (((uint128_t ) t6718) + ((uint128_t ) c675));
    t6766 = ((uint64_t ) s1291);
    /* MPPropagateCarry 64 */
    t6767 = (t6765 + t6763);
    a18775 = ((t6767 == 0));
    a18776 = (t6766 + t6763);
    t6768 = ((a18775) ? (a18776) : (t6766));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18782 = (((uint128_t ) t4606)*((uint128_t ) t4618));
    t6771 = (a18782 >> 64);
    t6772 = ((uint64_t ) a18782);
    a18783 = (((uint128_t ) t4605)*((uint128_t ) t4617));
    t6773 = (a18783 >> 64);
    t6774 = ((uint64_t ) a18783);
    a18784 = (((uint128_t ) t4605)*((uint128_t ) t4618));
    t6775 = (a18784 >> 64);
    t6776 = ((uint64_t ) a18784);
    a18785 = (((uint128_t ) t4606)*((uint128_t ) t4617));
    t6777 = (a18785 >> 64);
    t6778 = ((uint64_t ) a18785);
    /* MPAddQDD 64 */
    s1292 = (((uint128_t ) t6776) + ((uint128_t ) t6778));
    t6779 = ((uint64_t ) s1292);
    c677 = (s1292 >> 64);
    s1293 = (((uint128_t ) t6775) + ((uint128_t ) t6777));
    s1294 = (((uint128_t ) s1293) + ((uint128_t ) c677));
    t6780 = ((uint64_t ) s1294);
    c678 = (s1294 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6781 = ((uint64_t ) t6772);
    s1295 = (((uint128_t ) t6771) + ((uint128_t ) t6779));
    t6782 = ((uint64_t ) s1295);
    c679 = (s1295 >> 64);
    s1296 = (((uint128_t ) t6774) + ((uint128_t ) t6780));
    s1297 = (((uint128_t ) s1296) + ((uint128_t ) c679));
    t6783 = ((uint64_t ) s1297);
    c680 = (s1297 >> 64);
    s1298 = (((uint128_t ) t6773) + ((uint128_t ) c678));
    s1299 = (((uint128_t ) s1298) + ((uint128_t ) c680));
    t6784 = ((uint64_t ) s1299);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18786 = (((uint128_t ) t4604)*((uint128_t ) t4618));
    t6785 = (a18786 >> 64);
    t6786 = ((uint64_t ) a18786);
    a18787 = (((uint128_t ) t4603)*((uint128_t ) t4617));
    t6787 = (a18787 >> 64);
    t6788 = ((uint64_t ) a18787);
    a18788 = (((uint128_t ) t4603)*((uint128_t ) t4618));
    t6789 = (a18788 >> 64);
    t6790 = ((uint64_t ) a18788);
    a18789 = (((uint128_t ) t4604)*((uint128_t ) t4617));
    t6791 = (a18789 >> 64);
    t6792 = ((uint64_t ) a18789);
    /* MPAddQDD 64 */
    s1300 = (((uint128_t ) t6790) + ((uint128_t ) t6792));
    t6793 = ((uint64_t ) s1300);
    c681 = (s1300 >> 64);
    s1301 = (((uint128_t ) t6789) + ((uint128_t ) t6791));
    s1302 = (((uint128_t ) s1301) + ((uint128_t ) c681));
    t6794 = ((uint64_t ) s1302);
    c682 = (s1302 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6795 = ((uint64_t ) t6786);
    s1303 = (((uint128_t ) t6785) + ((uint128_t ) t6793));
    t6796 = ((uint64_t ) s1303);
    c683 = (s1303 >> 64);
    s1304 = (((uint128_t ) t6788) + ((uint128_t ) t6794));
    s1305 = (((uint128_t ) s1304) + ((uint128_t ) c683));
    t6797 = ((uint64_t ) s1305);
    c684 = (s1305 >> 64);
    s1306 = (((uint128_t ) t6787) + ((uint128_t ) c682));
    s1307 = (((uint128_t ) s1306) + ((uint128_t ) c684));
    t6798 = ((uint64_t ) s1307);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1308 = (((uint128_t ) t6795) + ((uint128_t ) t6649));
    t6799 = ((uint64_t ) s1308);
    c685 = (s1308 >> 64);
    s1309 = (((uint128_t ) t6796) + ((uint128_t ) t6650));
    s1310 = (((uint128_t ) s1309) + ((uint128_t ) c685));
    t6800 = ((uint64_t ) s1310);
    c686 = (s1310 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1311 = (((uint128_t ) t6797) + ((uint128_t ) t6651));
    t6801 = ((uint64_t ) s1311);
    c687 = (s1311 >> 64);
    s1312 = (((uint128_t ) t6798) + ((uint128_t ) t6652));
    s1313 = (((uint128_t ) s1312) + ((uint128_t ) c687));
    t6802 = ((uint64_t ) s1313);
    c688 = (s1313 >> 64);
    /* MPPropagateCarry 64 */
    t6803 = (t6801 + c686);
    a18790 = ((t6803 == 0));
    a18791 = (t6802 + c686);
    t6804 = ((a18790) ? (a18791) : (t6802));
    a18792 = ((t6804 == 0));
    a18793 = ((a18792) && (a18790));
    a18794 = (c688 + c686);
    t6805 = ((a18793) ? (a18794) : (c688));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6807 = ((uint64_t ) t6781);
    t6808 = ((uint64_t ) t6782);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1314 = (((uint128_t ) t6783) + ((uint128_t ) t6799));
    t6809 = ((uint64_t ) s1314);
    c689 = (s1314 >> 64);
    s1315 = (((uint128_t ) t6784) + ((uint128_t ) t6800));
    s1316 = (((uint128_t ) s1315) + ((uint128_t ) c689));
    t6810 = ((uint64_t ) s1316);
    c690 = (s1316 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1317 = (((uint128_t ) t6649) + ((uint128_t ) t6803));
    t6811 = ((uint64_t ) s1317);
    c691 = (s1317 >> 64);
    s1318 = (((uint128_t ) t6650) + ((uint128_t ) t6804));
    s1319 = (((uint128_t ) s1318) + ((uint128_t ) c691));
    t6812 = ((uint64_t ) s1319);
    c692 = (s1319 >> 64);
    /* MPPropagateCarry 64 */
    t6813 = (t6811 + c690);
    a18803 = ((t6813 == 0));
    a18804 = (t6812 + c690);
    t6814 = ((a18803) ? (a18804) : (t6812));
    a18805 = ((t6814 == 0));
    a18806 = ((a18805) && (a18803));
    a18807 = (c692 + c690);
    t6815 = ((a18806) ? (a18807) : (c692));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1320 = (((uint128_t ) t6651) + ((uint128_t ) t6805));
    t6817 = ((uint64_t ) s1320);
    c693 = (s1320 >> 64);
    s1321 = (((uint128_t ) t6652) + ((uint128_t ) c693));
    t6818 = ((uint64_t ) s1321);
    /* MPPropagateCarry 64 */
    t6819 = (t6817 + t6815);
    a18811 = ((t6819 == 0));
    a18812 = (t6818 + t6815);
    t6820 = ((a18811) ? (a18812) : (t6818));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* MPAddQDD 256 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1322 = (((uint128_t ) t6755) + ((uint128_t ) t6807));
    t6823 = ((uint64_t ) s1322);
    c695 = (s1322 >> 64);
    s1323 = (((uint128_t ) t6756) + ((uint128_t ) t6808));
    s1324 = (((uint128_t ) s1323) + ((uint128_t ) c695));
    t6824 = ((uint64_t ) s1324);
    c696 = (s1324 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1325 = (((uint128_t ) t6757) + ((uint128_t ) t6809));
    t6825 = ((uint64_t ) s1325);
    c697 = (s1325 >> 64);
    s1326 = (((uint128_t ) t6758) + ((uint128_t ) t6810));
    s1327 = (((uint128_t ) s1326) + ((uint128_t ) c697));
    t6826 = ((uint64_t ) s1327);
    c698 = (s1327 >> 64);
    /* MPPropagateCarry 64 */
    t6827 = (t6825 + c696);
    a18818 = ((t6827 == 0));
    a18819 = (t6826 + c696);
    t6828 = ((a18818) ? (a18819) : (t6826));
    a18820 = ((t6828 == 0));
    a18821 = ((a18820) && (a18818));
    a18822 = (c698 + c696);
    t6829 = ((a18821) ? (a18822) : (c698));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1328 = (((uint128_t ) t6761) + ((uint128_t ) t6813));
    t6831 = ((uint64_t ) s1328);
    c699 = (s1328 >> 64);
    s1329 = (((uint128_t ) t6762) + ((uint128_t ) t6814));
    s1330 = (((uint128_t ) s1329) + ((uint128_t ) c699));
    t6832 = ((uint64_t ) s1330);
    c700 = (s1330 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1331 = (((uint128_t ) t6767) + ((uint128_t ) t6819));
    t6833 = ((uint64_t ) s1331);
    c701 = (s1331 >> 64);
    s1332 = (((uint128_t ) t6768) + ((uint128_t ) t6820));
    s1333 = (((uint128_t ) s1332) + ((uint128_t ) c701));
    t6834 = ((uint64_t ) s1333);
    c702 = (s1333 >> 64);
    /* MPPropagateCarry 64 */
    t6835 = (t6833 + c700);
    a18826 = ((t6835 == 0));
    a18827 = (t6834 + c700);
    t6836 = ((a18826) ? (a18827) : (t6834));
    a18828 = ((t6836 == 0));
    a18829 = ((a18828) && (a18826));
    a18830 = (c702 + c700);
    t6837 = ((a18829) ? (a18830) : (c702));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDI 64 */
    s1334 = (((uint128_t ) t6831) + ((uint128_t ) t6829));
    t6839 = ((uint64_t ) s1334);
    c703 = (s1334 >> 64);
    s1335 = (((uint128_t ) t6832) + ((uint128_t ) c703));
    t6840 = ((uint64_t ) s1335);
    /* MPEqualDI 64 */
    a18834 = ((t6840 == 0));
    a18835 = ((t6839 == 0));
    a18836 = ((a18834) && (a18835));
    /* MPAddDDI 64 */
    s1336 = (((uint128_t ) t6835) + ((uint128_t ) t6829));
    t6841 = ((uint64_t ) s1336);
    c704 = (s1336 >> 64);
    s1337 = (((uint128_t ) t6836) + ((uint128_t ) c704));
    t6842 = ((uint64_t ) s1337);
    /* MPCondD 64 */
    t6843 = ((a18836) ? (t6842) : (t6836));
    t6844 = ((a18836) ? (t6841) : (t6835));
    /* MPEqualDI 64 */
    a18837 = ((t6843 == 0));
    a18838 = ((t6844 == 0));
    a18839 = ((a18837) && (a18838));
    /* MPEqualDI 64 */
    a18840 = ((a18839) && (a18836));
    /* MPAddDII 64 */
    t6845 = (t6837 + t6829);
    /* MPCondDDI 64 */
    t6846 = ((a18840) ? (t6845) : (t6837));
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPTypeCastDI 128 */
    /* MPTypeCastDI 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 256 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    t5744 = ((uint64_t ) t6616);
    t5743 = ((uint64_t ) t6617);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    t5740 = ((uint64_t ) t6618);
    t6847 = ((uint64_t ) t6619);
    /* MPPropagateCarry 64 */
    t5735 = t6847;
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1338 = (((uint128_t ) t6622) + ((uint128_t ) t6823));
    t6848 = ((uint64_t ) s1338);
    c705 = (s1338 >> 64);
    s1339 = (((uint128_t ) t6623) + ((uint128_t ) t6824));
    s1340 = (((uint128_t ) s1339) + ((uint128_t ) c705));
    t6849 = ((uint64_t ) s1340);
    c706 = (s1340 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1341 = (((uint128_t ) t6628) + ((uint128_t ) t6827));
    t6850 = ((uint64_t ) s1341);
    c707 = (s1341 >> 64);
    s1342 = (((uint128_t ) t6629) + ((uint128_t ) t6828));
    s1343 = (((uint128_t ) s1342) + ((uint128_t ) c707));
    t6851 = ((uint64_t ) s1343);
    c708 = (s1343 >> 64);
    /* MPPropagateCarry 64 */
    t6852 = (t6850 + c706);
    a18844 = ((t6852 == 0));
    a18845 = (t6851 + c706);
    t6853 = ((a18844) ? (a18845) : (t6851));
    a18846 = ((t6853 == 0));
    a18847 = ((a18846) && (a18844));
    a18848 = (c708 + c706);
    t6854 = ((a18847) ? (a18848) : (c708));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDI 64 */
    t5242 = ((uint64_t ) t6848);
    c709 = (t6848 >> 64);
    s1344 = (((uint128_t ) t6849) + ((uint128_t ) c709));
    t5241 = ((uint64_t ) s1344);
    /* MPEqualDI 64 */
    a18852 = ((t5241 == 0));
    a18853 = ((t5242 == 0));
    a18854 = ((a18852) && (a18853));
    /* MPAddDDI 64 */
    t6856 = ((uint64_t ) t6852);
    c710 = (t6852 >> 64);
    s1345 = (((uint128_t ) t6853) + ((uint128_t ) c710));
    t6857 = ((uint64_t ) s1345);
    /* MPCondD 64 */
    t5239 = ((a18854) ? (t6857) : (t6853));
    t5240 = ((a18854) ? (t6856) : (t6852));
    /* MPEqualDI 64 */
    /* MPEqualDI 64 */
    /* MPAddDII 64 */
    /* MPCondDDI 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1346 = (((uint128_t ) t6675) + ((uint128_t ) t6839));
    t6858 = ((uint64_t ) s1346);
    c711 = (s1346 >> 64);
    s1347 = (((uint128_t ) t6676) + ((uint128_t ) t6840));
    s1348 = (((uint128_t ) s1347) + ((uint128_t ) c711));
    t6859 = ((uint64_t ) s1348);
    c712 = (s1348 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1349 = (((uint128_t ) t6677) + ((uint128_t ) t6844));
    t6860 = ((uint64_t ) s1349);
    c713 = (s1349 >> 64);
    s1350 = (((uint128_t ) t6678) + ((uint128_t ) t6843));
    s1351 = (((uint128_t ) s1350) + ((uint128_t ) c713));
    t6861 = ((uint64_t ) s1351);
    c714 = (s1351 >> 64);
    /* MPPropagateCarry 64 */
    t6862 = (t6860 + c712);
    a18859 = ((t6862 == 0));
    a18860 = (t6861 + c712);
    t6863 = ((a18859) ? (a18860) : (t6861));
    a18861 = ((t6863 == 0));
    a18862 = ((a18861) && (a18859));
    a18863 = (c714 + c712);
    t6864 = ((a18862) ? (a18863) : (c714));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDD 64 */
    s1352 = (((uint128_t ) t6858) + ((uint128_t ) t6854));
    t5180 = ((uint64_t ) s1352);
    c715 = (s1352 >> 64);
    s1353 = (((uint128_t ) t6859) + ((uint128_t ) c715));
    t5179 = ((uint64_t ) s1353);
    /* MPEqualDI 64 */
    a18867 = ((t5179 == 0));
    a18868 = ((t5180 == 0));
    a18869 = ((a18867) && (a18868));
    /* MPAddDDD 64 */
    s1354 = (((uint128_t ) t6862) + ((uint128_t ) t6854));
    t6866 = ((uint64_t ) s1354);
    c716 = (s1354 >> 64);
    s1355 = (((uint128_t ) t6863) + ((uint128_t ) c716));
    t6867 = ((uint64_t ) s1355);
    /* MPCondD 64 */
    t5177 = ((a18869) ? (t6867) : (t6863));
    t5178 = ((a18869) ? (t6866) : (t6862));
    /* MPEqualDI 64 */
    a18870 = ((t5177 == 0));
    a18871 = ((t5178 == 0));
    a18872 = ((a18870) && (a18871));
    /* MPEqualDI 64 */
    a18873 = ((a18872) && (a18869));
    /* MPAddDDI 64 */
    s1356 = (((uint128_t ) t6854) + ((uint128_t ) t6864));
    t6868 = ((uint64_t ) s1356);
    c717 = (s1356 >> 64);
    s1357 = (((uint128_t ) 0) + ((uint128_t ) c717));
    t6869 = ((uint64_t ) s1357);
    /* MPCondDDI 64 */
    t6870 = ((a18873) ? (t6869) : (0));
    t6871 = ((a18873) ? (t6868) : (t6864));
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQID 128 */
    /* MPAddQDD 64 */
    s1358 = (((uint128_t ) t6681) + ((uint128_t ) t6846));
    t6872 = ((uint64_t ) s1358);
    c718 = (s1358 >> 64);
    s1359 = (((uint128_t ) t6682) + ((uint128_t ) c718));
    t6873 = ((uint64_t ) s1359);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    /* MPExtractLow 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDD 64 */
    s1362 = (((uint128_t ) t6872) + ((uint128_t ) t6871));
    t5142 = ((uint64_t ) s1362);
    c722 = (s1362 >> 64);
    s1363 = (((uint128_t ) t6873) + ((uint128_t ) t6870));
    s1364 = (((uint128_t ) s1363) + ((uint128_t ) c722));
    t5141 = ((uint64_t ) s1364);
    /* MPEqualDI 64 */
    /* MPAddDDD 64 */
    /* MPCondD 64 */
    /* MPExtractLow 128 */
    /* End of MPAddQQQ 256 */
    /* End of MPMulQDD_Schoolbook_Full */
}

__device__ void MPMulQDD_L3_2(uint64_t &t5139, uint64_t &t5140, uint64_t &t5141, uint64_t &t5142, uint64_t &t5177, uint64_t &t5178, uint64_t &t5179, uint64_t &t5180, uint64_t &t5239, uint64_t &t5240, uint64_t &t5241, uint64_t &t5242, uint64_t &t5735, uint64_t &t5740, uint64_t &t5743, uint64_t &t5744, uint64_t t4607, uint64_t t4608, uint64_t t4609, uint64_t t4610, uint64_t t4603, uint64_t t4604, uint64_t t4605, uint64_t t4606, uint64_t t4615, uint64_t t4616, uint64_t t4617, uint64_t t4618, uint64_t t4611, uint64_t t4612, uint64_t t4613, uint64_t t4614) {
    int a18893, a18895, a18896, a18906, a18908, a18909, a18914, a18961, 
            a18963, a18964, a18974, a18976, a18977, a18982, a18997, a18999, 
            a19000, a19010, a19012, a19013, a19018, a19025, a19027, a19028, 
            a19033, a19041, a19042, a19043, a19051, a19053, a19054, a19059, 
            a19060, a19061, a19066, a19074, a19075, a19076, c724, c725, 
            c726, c727, c728, c729, c730, c731, c732, c733, 
            c734, c735, c736, c737, c738, c739, c740, c741, 
            c742, c743, c744, c745, c746, c747, c748, c750, 
            c751, c752, c753, c754, c755, c756, c757, c758, 
            c762, c768, c769, c770, c771, c772, c773, c774, 
            c775, c776, c777, c778, c779, c780, c781, c782, 
            c783, c784, c786, c787, c788, c789, c790, c791, 
            c792, c793, c794, c795, c796, c797, c798, c799, 
            c800, c801, c802, c804, c805, c806, c807, c808, 
            c809, c810, c812, c813, c814, c815, c816, c817, 
            c818, c819, c820, c821, c822, c824, c825;
    uint64_t a18894, a18897, a18907, a18910, a18915, a18962, a18965, a18975, 
            a18978, a18983, a18998, a19001, a19011, a19014, a19019, a19026, 
            a19029, a19034, a19052, a19055, a19067, t6878, t6879, t6880, 
            t6881, t6882, t6883, t6884, t6885, t6886, t6887, t6888, 
            t6889, t6890, t6891, t6892, t6893, t6894, t6895, t6896, 
            t6897, t6898, t6899, t6900, t6901, t6902, t6903, t6904, 
            t6905, t6906, t6907, t6908, t6909, t6910, t6911, t6912, 
            t6913, t6914, t6915, t6916, t6917, t6918, t6919, t6920, 
            t6921, t6922, t6923, t6924, t6925, t6926, t6927, t6928, 
            t6929, t6930, t6931, t6932, t6933, t6934, t6935, t6936, 
            t6937, t6938, t6939, t6940, t6942, t6943, t6944, t6945, 
            t6946, t6947, t6948, t6949, t6950, t6952, t6953, t6954, 
            t6955, t6958, t6959, t6960, t6961, t6962, t6963, t6964, 
            t6965, t6966, t6967, t6968, t6969, t6970, t6971, t6972, 
            t6973, t6974, t6975, t6976, t6977, t6978, t6979, t6980, 
            t6987, t6988, t6989, t6990, t7003, t7004, t7005, t7006, 
            t7007, t7008, t7009, t7010, t7011, t7012, t7013, t7014, 
            t7015, t7016, t7017, t7018, t7019, t7020, t7021, t7022, 
            t7023, t7024, t7025, t7026, t7027, t7028, t7029, t7030, 
            t7031, t7032, t7033, t7034, t7035, t7036, t7037, t7039, 
            t7040, t7041, t7042, t7043, t7044, t7045, t7046, t7047, 
            t7049, t7050, t7051, t7052, t7055, t7056, t7057, t7058, 
            t7059, t7060, t7061, t7062, t7063, t7064, t7065, t7066, 
            t7067, t7068, t7069, t7070, t7071, t7072, t7073, t7074, 
            t7075, t7076, t7077, t7078, t7079, t7080, t7081, t7082, 
            t7083, t7084, t7085, t7086, t7087, t7088, t7089, t7091, 
            t7092, t7093, t7094, t7095, t7096, t7097, t7098, t7099, 
            t7101, t7102, t7103, t7104, t7107, t7108, t7109, t7110, 
            t7111, t7112, t7113, t7115, t7116, t7117, t7118, t7119, 
            t7120, t7123, t7124, t7125, t7126, t7127, t7128, t7131, 
            t7132, t7133, t7134, t7135, t7136, t7137, t7138, t7140, 
            t7141, t7142, t7143, t7144, t7145, t7146, t7147, t7150, 
            t7151;
    uint128_t a18877, a18878, a18879, a18880, a18881, a18882, a18883, a18884, 
            a18885, a18886, a18887, a18888, a18889, a18890, a18891, a18892, 
            a18921, a18922, a18923, a18924, a18953, a18954, a18955, a18956, 
            a18957, a18958, a18959, a18960, a18989, a18990, a18991, a18992, 
            a18993, a18994, a18995, a18996, s1368, s1369, s1370, s1371, 
            s1372, s1373, s1374, s1375, s1376, s1377, s1378, s1379, 
            s1380, s1381, s1382, s1383, s1384, s1385, s1386, s1387, 
            s1388, s1389, s1390, s1391, s1392, s1393, s1394, s1395, 
            s1396, s1397, s1398, s1399, s1400, s1401, s1402, s1403, 
            s1404, s1405, s1406, s1407, s1408, s1409, s1410, s1411, 
            s1412, s1413, s1414, s1415, s1416, s1417, s1418, s1419, 
            s1420, s1421, s1422, s1423, s1424, s1425, s1426, s1427, 
            s1428, s1429, s1430, s1434, s1435, s1436, s1442, s1443, 
            s1444, s1445, s1446, s1447, s1448, s1449, s1450, s1451, 
            s1452, s1453, s1454, s1455, s1456, s1457, s1458, s1459, 
            s1460, s1461, s1462, s1463, s1464, s1465, s1466, s1467, 
            s1468, s1469, s1470, s1471, s1472, s1473, s1474, s1475, 
            s1476, s1477, s1478, s1479, s1480, s1481, s1482, s1483, 
            s1484, s1485, s1486, s1487, s1488, s1489, s1490, s1491, 
            s1492, s1493, s1494, s1495, s1496, s1497, s1498, s1499, 
            s1500, s1501, s1502, s1503, s1504, s1505, s1506, s1507, 
            s1508, s1509, s1510, s1511, s1512, s1513, s1514, s1515, 
            s1516, s1517, s1518, s1519, s1520, s1521, s1522, s1523, 
            s1524, s1525, s1526, s1527, s1528, s1529, s1530, s1531, 
            s1532, s1533, s1534, s1535;
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18877 = (((uint128_t ) t4606)*((uint128_t ) t4614));
    t6878 = (a18877 >> 64);
    t6879 = ((uint64_t ) a18877);
    a18878 = (((uint128_t ) t4605)*((uint128_t ) t4613));
    t6880 = (a18878 >> 64);
    t6881 = ((uint64_t ) a18878);
    a18879 = (((uint128_t ) t4605)*((uint128_t ) t4614));
    t6882 = (a18879 >> 64);
    t6883 = ((uint64_t ) a18879);
    a18880 = (((uint128_t ) t4606)*((uint128_t ) t4613));
    t6884 = (a18880 >> 64);
    t6885 = ((uint64_t ) a18880);
    /* MPAddQDD 64 */
    s1368 = (((uint128_t ) t6883) + ((uint128_t ) t6885));
    t6886 = ((uint64_t ) s1368);
    c724 = (s1368 >> 64);
    s1369 = (((uint128_t ) t6882) + ((uint128_t ) t6884));
    s1370 = (((uint128_t ) s1369) + ((uint128_t ) c724));
    t6887 = ((uint64_t ) s1370);
    c725 = (s1370 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6888 = ((uint64_t ) t6879);
    s1371 = (((uint128_t ) t6878) + ((uint128_t ) t6886));
    t6889 = ((uint64_t ) s1371);
    c726 = (s1371 >> 64);
    s1372 = (((uint128_t ) t6881) + ((uint128_t ) t6887));
    s1373 = (((uint128_t ) s1372) + ((uint128_t ) c726));
    t6890 = ((uint64_t ) s1373);
    c727 = (s1373 >> 64);
    s1374 = (((uint128_t ) t6880) + ((uint128_t ) c725));
    s1375 = (((uint128_t ) s1374) + ((uint128_t ) c727));
    t6891 = ((uint64_t ) s1375);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18881 = (((uint128_t ) t4604)*((uint128_t ) t4612));
    t6892 = (a18881 >> 64);
    t6893 = ((uint64_t ) a18881);
    a18882 = (((uint128_t ) t4603)*((uint128_t ) t4611));
    t6894 = (a18882 >> 64);
    t6895 = ((uint64_t ) a18882);
    a18883 = (((uint128_t ) t4603)*((uint128_t ) t4612));
    t6896 = (a18883 >> 64);
    t6897 = ((uint64_t ) a18883);
    a18884 = (((uint128_t ) t4604)*((uint128_t ) t4611));
    t6898 = (a18884 >> 64);
    t6899 = ((uint64_t ) a18884);
    /* MPAddQDD 64 */
    s1376 = (((uint128_t ) t6897) + ((uint128_t ) t6899));
    t6900 = ((uint64_t ) s1376);
    c728 = (s1376 >> 64);
    s1377 = (((uint128_t ) t6896) + ((uint128_t ) t6898));
    s1378 = (((uint128_t ) s1377) + ((uint128_t ) c728));
    t6901 = ((uint64_t ) s1378);
    c729 = (s1378 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6902 = ((uint64_t ) t6893);
    s1379 = (((uint128_t ) t6892) + ((uint128_t ) t6900));
    t6903 = ((uint64_t ) s1379);
    c730 = (s1379 >> 64);
    s1380 = (((uint128_t ) t6895) + ((uint128_t ) t6901));
    s1381 = (((uint128_t ) s1380) + ((uint128_t ) c730));
    t6904 = ((uint64_t ) s1381);
    c731 = (s1381 >> 64);
    s1382 = (((uint128_t ) t6894) + ((uint128_t ) c729));
    s1383 = (((uint128_t ) s1382) + ((uint128_t ) c731));
    t6905 = ((uint64_t ) s1383);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18885 = (((uint128_t ) t4604)*((uint128_t ) t4614));
    t6906 = (a18885 >> 64);
    t6907 = ((uint64_t ) a18885);
    a18886 = (((uint128_t ) t4603)*((uint128_t ) t4613));
    t6908 = (a18886 >> 64);
    t6909 = ((uint64_t ) a18886);
    a18887 = (((uint128_t ) t4603)*((uint128_t ) t4614));
    t6910 = (a18887 >> 64);
    t6911 = ((uint64_t ) a18887);
    a18888 = (((uint128_t ) t4604)*((uint128_t ) t4613));
    t6912 = (a18888 >> 64);
    t6913 = ((uint64_t ) a18888);
    /* MPAddQDD 64 */
    s1384 = (((uint128_t ) t6911) + ((uint128_t ) t6913));
    t6914 = ((uint64_t ) s1384);
    c732 = (s1384 >> 64);
    s1385 = (((uint128_t ) t6910) + ((uint128_t ) t6912));
    s1386 = (((uint128_t ) s1385) + ((uint128_t ) c732));
    t6915 = ((uint64_t ) s1386);
    c733 = (s1386 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6916 = ((uint64_t ) t6907);
    s1387 = (((uint128_t ) t6906) + ((uint128_t ) t6914));
    t6917 = ((uint64_t ) s1387);
    c734 = (s1387 >> 64);
    s1388 = (((uint128_t ) t6909) + ((uint128_t ) t6915));
    s1389 = (((uint128_t ) s1388) + ((uint128_t ) c734));
    t6918 = ((uint64_t ) s1389);
    c735 = (s1389 >> 64);
    s1390 = (((uint128_t ) t6908) + ((uint128_t ) c733));
    s1391 = (((uint128_t ) s1390) + ((uint128_t ) c735));
    t6919 = ((uint64_t ) s1391);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18889 = (((uint128_t ) t4606)*((uint128_t ) t4612));
    t6920 = (a18889 >> 64);
    t6921 = ((uint64_t ) a18889);
    a18890 = (((uint128_t ) t4605)*((uint128_t ) t4611));
    t6922 = (a18890 >> 64);
    t6923 = ((uint64_t ) a18890);
    a18891 = (((uint128_t ) t4605)*((uint128_t ) t4612));
    t6924 = (a18891 >> 64);
    t6925 = ((uint64_t ) a18891);
    a18892 = (((uint128_t ) t4606)*((uint128_t ) t4611));
    t6926 = (a18892 >> 64);
    t6927 = ((uint64_t ) a18892);
    /* MPAddQDD 64 */
    s1392 = (((uint128_t ) t6925) + ((uint128_t ) t6927));
    t6928 = ((uint64_t ) s1392);
    c736 = (s1392 >> 64);
    s1393 = (((uint128_t ) t6924) + ((uint128_t ) t6926));
    s1394 = (((uint128_t ) s1393) + ((uint128_t ) c736));
    t6929 = ((uint64_t ) s1394);
    c737 = (s1394 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6930 = ((uint64_t ) t6921);
    s1395 = (((uint128_t ) t6920) + ((uint128_t ) t6928));
    t6931 = ((uint64_t ) s1395);
    c738 = (s1395 >> 64);
    s1396 = (((uint128_t ) t6923) + ((uint128_t ) t6929));
    s1397 = (((uint128_t ) s1396) + ((uint128_t ) c738));
    t6932 = ((uint64_t ) s1397);
    c739 = (s1397 >> 64);
    s1398 = (((uint128_t ) t6922) + ((uint128_t ) c737));
    s1399 = (((uint128_t ) s1398) + ((uint128_t ) c739));
    t6933 = ((uint64_t ) s1399);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1400 = (((uint128_t ) t6916) + ((uint128_t ) t6930));
    t6934 = ((uint64_t ) s1400);
    c740 = (s1400 >> 64);
    s1401 = (((uint128_t ) t6917) + ((uint128_t ) t6931));
    s1402 = (((uint128_t ) s1401) + ((uint128_t ) c740));
    t6935 = ((uint64_t ) s1402);
    c741 = (s1402 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1403 = (((uint128_t ) t6918) + ((uint128_t ) t6932));
    t6936 = ((uint64_t ) s1403);
    c742 = (s1403 >> 64);
    s1404 = (((uint128_t ) t6919) + ((uint128_t ) t6933));
    s1405 = (((uint128_t ) s1404) + ((uint128_t ) c742));
    t6937 = ((uint64_t ) s1405);
    c743 = (s1405 >> 64);
    /* MPPropagateCarry 64 */
    t6938 = (t6936 + c741);
    a18893 = ((t6938 == 0));
    a18894 = (t6937 + c741);
    t6939 = ((a18893) ? (a18894) : (t6937));
    a18895 = ((t6939 == 0));
    a18896 = ((a18895) && (a18893));
    a18897 = (c743 + c741);
    t6940 = ((a18896) ? (a18897) : (c743));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6942 = ((uint64_t ) t6888);
    t6943 = ((uint64_t ) t6889);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1406 = (((uint128_t ) t6890) + ((uint128_t ) t6934));
    t6944 = ((uint64_t ) s1406);
    c744 = (s1406 >> 64);
    s1407 = (((uint128_t ) t6891) + ((uint128_t ) t6935));
    s1408 = (((uint128_t ) s1407) + ((uint128_t ) c744));
    t6945 = ((uint64_t ) s1408);
    c745 = (s1408 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1409 = (((uint128_t ) t6902) + ((uint128_t ) t6938));
    t6946 = ((uint64_t ) s1409);
    c746 = (s1409 >> 64);
    s1410 = (((uint128_t ) t6903) + ((uint128_t ) t6939));
    s1411 = (((uint128_t ) s1410) + ((uint128_t ) c746));
    t6947 = ((uint64_t ) s1411);
    c747 = (s1411 >> 64);
    /* MPPropagateCarry 64 */
    t6948 = (t6946 + c745);
    a18906 = ((t6948 == 0));
    a18907 = (t6947 + c745);
    t6949 = ((a18906) ? (a18907) : (t6947));
    a18908 = ((t6949 == 0));
    a18909 = ((a18908) && (a18906));
    a18910 = (c747 + c745);
    t6950 = ((a18909) ? (a18910) : (c747));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1412 = (((uint128_t ) t6904) + ((uint128_t ) t6940));
    t6952 = ((uint64_t ) s1412);
    c748 = (s1412 >> 64);
    s1413 = (((uint128_t ) t6905) + ((uint128_t ) c748));
    t6953 = ((uint64_t ) s1413);
    /* MPPropagateCarry 64 */
    t6954 = (t6952 + t6950);
    a18914 = ((t6954 == 0));
    a18915 = (t6953 + t6950);
    t6955 = ((a18914) ? (a18915) : (t6953));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18921 = (((uint128_t ) t4610)*((uint128_t ) t4618));
    t6958 = (a18921 >> 64);
    t6959 = ((uint64_t ) a18921);
    a18922 = (((uint128_t ) t4609)*((uint128_t ) t4617));
    t6960 = (a18922 >> 64);
    t6961 = ((uint64_t ) a18922);
    a18923 = (((uint128_t ) t4609)*((uint128_t ) t4618));
    t6962 = (a18923 >> 64);
    t6963 = ((uint64_t ) a18923);
    a18924 = (((uint128_t ) t4610)*((uint128_t ) t4617));
    t6964 = (a18924 >> 64);
    t6965 = ((uint64_t ) a18924);
    /* MPAddQDD 64 */
    s1414 = (((uint128_t ) t6963) + ((uint128_t ) t6965));
    t6966 = ((uint64_t ) s1414);
    c750 = (s1414 >> 64);
    s1415 = (((uint128_t ) t6962) + ((uint128_t ) t6964));
    s1416 = (((uint128_t ) s1415) + ((uint128_t ) c750));
    t6967 = ((uint64_t ) s1416);
    c751 = (s1416 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6968 = ((uint64_t ) t6959);
    s1417 = (((uint128_t ) t6958) + ((uint128_t ) t6966));
    t6969 = ((uint64_t ) s1417);
    c752 = (s1417 >> 64);
    s1418 = (((uint128_t ) t6961) + ((uint128_t ) t6967));
    s1419 = (((uint128_t ) s1418) + ((uint128_t ) c752));
    t6970 = ((uint64_t ) s1419);
    c753 = (s1419 >> 64);
    s1420 = (((uint128_t ) t6960) + ((uint128_t ) c751));
    s1421 = (((uint128_t ) s1420) + ((uint128_t ) c753));
    t6971 = ((uint64_t ) s1421);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    t6972 = ((uint64_t ) 0);
    /* MPAddQDD 64 */
    s1422 = (((uint128_t ) t6972) + ((uint128_t ) t6972));
    t6973 = ((uint64_t ) s1422);
    c754 = (s1422 >> 64);
    s1423 = (((uint128_t ) 0) + ((uint128_t ) c754));
    t6974 = ((uint64_t ) s1423);
    c755 = (s1423 >> 64);
    /* Begin of MPAddQQQ 64 */
    t6975 = ((uint64_t ) t6972);
    t6976 = ((uint64_t ) t6973);
    c756 = (t6973 >> 64);
    s1424 = (((uint128_t ) t6972) + ((uint128_t ) t6974));
    s1425 = (((uint128_t ) s1424) + ((uint128_t ) c756));
    t6977 = ((uint64_t ) s1425);
    c757 = (s1425 >> 64);
    s1426 = (((uint128_t ) 0) + ((uint128_t ) c755));
    s1427 = (((uint128_t ) s1426) + ((uint128_t ) c757));
    t6978 = ((uint64_t ) s1427);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1428 = (((uint128_t ) t6975) + ((uint128_t ) t6975));
    t6979 = ((uint64_t ) s1428);
    c758 = (s1428 >> 64);
    s1429 = (((uint128_t ) t6976) + ((uint128_t ) t6976));
    s1430 = (((uint128_t ) s1429) + ((uint128_t ) c758));
    t6980 = ((uint64_t ) s1430);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t6987 = ((uint64_t ) t6968);
    t6988 = ((uint64_t ) t6969);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1434 = (((uint128_t ) t6970) + ((uint128_t ) t6979));
    t6989 = ((uint64_t ) s1434);
    c762 = (s1434 >> 64);
    s1435 = (((uint128_t ) t6971) + ((uint128_t ) t6980));
    s1436 = (((uint128_t ) s1435) + ((uint128_t ) c762));
    t6990 = ((uint64_t ) s1436);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18953 = (((uint128_t ) t4610)*((uint128_t ) t4614));
    t7003 = (a18953 >> 64);
    t7004 = ((uint64_t ) a18953);
    a18954 = (((uint128_t ) t4609)*((uint128_t ) t4613));
    t7005 = (a18954 >> 64);
    t7006 = ((uint64_t ) a18954);
    a18955 = (((uint128_t ) t4609)*((uint128_t ) t4614));
    t7007 = (a18955 >> 64);
    t7008 = ((uint64_t ) a18955);
    a18956 = (((uint128_t ) t4610)*((uint128_t ) t4613));
    t7009 = (a18956 >> 64);
    t7010 = ((uint64_t ) a18956);
    /* MPAddQDD 64 */
    s1442 = (((uint128_t ) t7008) + ((uint128_t ) t7010));
    t7011 = ((uint64_t ) s1442);
    c768 = (s1442 >> 64);
    s1443 = (((uint128_t ) t7007) + ((uint128_t ) t7009));
    s1444 = (((uint128_t ) s1443) + ((uint128_t ) c768));
    t7012 = ((uint64_t ) s1444);
    c769 = (s1444 >> 64);
    /* Begin of MPAddQQQ 64 */
    t7013 = ((uint64_t ) t7004);
    s1445 = (((uint128_t ) t7003) + ((uint128_t ) t7011));
    t7014 = ((uint64_t ) s1445);
    c770 = (s1445 >> 64);
    s1446 = (((uint128_t ) t7006) + ((uint128_t ) t7012));
    s1447 = (((uint128_t ) s1446) + ((uint128_t ) c770));
    t7015 = ((uint64_t ) s1447);
    c771 = (s1447 >> 64);
    s1448 = (((uint128_t ) t7005) + ((uint128_t ) c769));
    s1449 = (((uint128_t ) s1448) + ((uint128_t ) c771));
    t7016 = ((uint64_t ) s1449);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18957 = (((uint128_t ) t4610)*((uint128_t ) t4612));
    t7017 = (a18957 >> 64);
    t7018 = ((uint64_t ) a18957);
    a18958 = (((uint128_t ) t4609)*((uint128_t ) t4611));
    t7019 = (a18958 >> 64);
    t7020 = ((uint64_t ) a18958);
    a18959 = (((uint128_t ) t4609)*((uint128_t ) t4612));
    t7021 = (a18959 >> 64);
    t7022 = ((uint64_t ) a18959);
    a18960 = (((uint128_t ) t4610)*((uint128_t ) t4611));
    t7023 = (a18960 >> 64);
    t7024 = ((uint64_t ) a18960);
    /* MPAddQDD 64 */
    s1450 = (((uint128_t ) t7022) + ((uint128_t ) t7024));
    t7025 = ((uint64_t ) s1450);
    c772 = (s1450 >> 64);
    s1451 = (((uint128_t ) t7021) + ((uint128_t ) t7023));
    s1452 = (((uint128_t ) s1451) + ((uint128_t ) c772));
    t7026 = ((uint64_t ) s1452);
    c773 = (s1452 >> 64);
    /* Begin of MPAddQQQ 64 */
    t7027 = ((uint64_t ) t7018);
    s1453 = (((uint128_t ) t7017) + ((uint128_t ) t7025));
    t7028 = ((uint64_t ) s1453);
    c774 = (s1453 >> 64);
    s1454 = (((uint128_t ) t7020) + ((uint128_t ) t7026));
    s1455 = (((uint128_t ) s1454) + ((uint128_t ) c774));
    t7029 = ((uint64_t ) s1455);
    c775 = (s1455 >> 64);
    s1456 = (((uint128_t ) t7019) + ((uint128_t ) c773));
    s1457 = (((uint128_t ) s1456) + ((uint128_t ) c775));
    t7030 = ((uint64_t ) s1457);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1458 = (((uint128_t ) t6975) + ((uint128_t ) t7027));
    t7031 = ((uint64_t ) s1458);
    c776 = (s1458 >> 64);
    s1459 = (((uint128_t ) t6976) + ((uint128_t ) t7028));
    s1460 = (((uint128_t ) s1459) + ((uint128_t ) c776));
    t7032 = ((uint64_t ) s1460);
    c777 = (s1460 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1461 = (((uint128_t ) t6977) + ((uint128_t ) t7029));
    t7033 = ((uint64_t ) s1461);
    c778 = (s1461 >> 64);
    s1462 = (((uint128_t ) t6978) + ((uint128_t ) t7030));
    s1463 = (((uint128_t ) s1462) + ((uint128_t ) c778));
    t7034 = ((uint64_t ) s1463);
    c779 = (s1463 >> 64);
    /* MPPropagateCarry 64 */
    t7035 = (t7033 + c777);
    a18961 = ((t7035 == 0));
    a18962 = (t7034 + c777);
    t7036 = ((a18961) ? (a18962) : (t7034));
    a18963 = ((t7036 == 0));
    a18964 = ((a18963) && (a18961));
    a18965 = (c779 + c777);
    t7037 = ((a18964) ? (a18965) : (c779));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t7039 = ((uint64_t ) t7013);
    t7040 = ((uint64_t ) t7014);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1464 = (((uint128_t ) t7015) + ((uint128_t ) t7031));
    t7041 = ((uint64_t ) s1464);
    c780 = (s1464 >> 64);
    s1465 = (((uint128_t ) t7016) + ((uint128_t ) t7032));
    s1466 = (((uint128_t ) s1465) + ((uint128_t ) c780));
    t7042 = ((uint64_t ) s1466);
    c781 = (s1466 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1467 = (((uint128_t ) t6975) + ((uint128_t ) t7035));
    t7043 = ((uint64_t ) s1467);
    c782 = (s1467 >> 64);
    s1468 = (((uint128_t ) t6976) + ((uint128_t ) t7036));
    s1469 = (((uint128_t ) s1468) + ((uint128_t ) c782));
    t7044 = ((uint64_t ) s1469);
    c783 = (s1469 >> 64);
    /* MPPropagateCarry 64 */
    t7045 = (t7043 + c781);
    a18974 = ((t7045 == 0));
    a18975 = (t7044 + c781);
    t7046 = ((a18974) ? (a18975) : (t7044));
    a18976 = ((t7046 == 0));
    a18977 = ((a18976) && (a18974));
    a18978 = (c783 + c781);
    t7047 = ((a18977) ? (a18978) : (c783));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1470 = (((uint128_t ) t6977) + ((uint128_t ) t7037));
    t7049 = ((uint64_t ) s1470);
    c784 = (s1470 >> 64);
    s1471 = (((uint128_t ) t6978) + ((uint128_t ) c784));
    t7050 = ((uint64_t ) s1471);
    /* MPPropagateCarry 64 */
    t7051 = (t7049 + t7047);
    a18982 = ((t7051 == 0));
    a18983 = (t7050 + t7047);
    t7052 = ((a18982) ? (a18983) : (t7050));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18989 = (((uint128_t ) t4606)*((uint128_t ) t4618));
    t7055 = (a18989 >> 64);
    t7056 = ((uint64_t ) a18989);
    a18990 = (((uint128_t ) t4605)*((uint128_t ) t4617));
    t7057 = (a18990 >> 64);
    t7058 = ((uint64_t ) a18990);
    a18991 = (((uint128_t ) t4605)*((uint128_t ) t4618));
    t7059 = (a18991 >> 64);
    t7060 = ((uint64_t ) a18991);
    a18992 = (((uint128_t ) t4606)*((uint128_t ) t4617));
    t7061 = (a18992 >> 64);
    t7062 = ((uint64_t ) a18992);
    /* MPAddQDD 64 */
    s1472 = (((uint128_t ) t7060) + ((uint128_t ) t7062));
    t7063 = ((uint64_t ) s1472);
    c786 = (s1472 >> 64);
    s1473 = (((uint128_t ) t7059) + ((uint128_t ) t7061));
    s1474 = (((uint128_t ) s1473) + ((uint128_t ) c786));
    t7064 = ((uint64_t ) s1474);
    c787 = (s1474 >> 64);
    /* Begin of MPAddQQQ 64 */
    t7065 = ((uint64_t ) t7056);
    s1475 = (((uint128_t ) t7055) + ((uint128_t ) t7063));
    t7066 = ((uint64_t ) s1475);
    c788 = (s1475 >> 64);
    s1476 = (((uint128_t ) t7058) + ((uint128_t ) t7064));
    s1477 = (((uint128_t ) s1476) + ((uint128_t ) c788));
    t7067 = ((uint64_t ) s1477);
    c789 = (s1477 >> 64);
    s1478 = (((uint128_t ) t7057) + ((uint128_t ) c787));
    s1479 = (((uint128_t ) s1478) + ((uint128_t ) c789));
    t7068 = ((uint64_t ) s1479);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    a18993 = (((uint128_t ) t4604)*((uint128_t ) t4618));
    t7069 = (a18993 >> 64);
    t7070 = ((uint64_t ) a18993);
    a18994 = (((uint128_t ) t4603)*((uint128_t ) t4617));
    t7071 = (a18994 >> 64);
    t7072 = ((uint64_t ) a18994);
    a18995 = (((uint128_t ) t4603)*((uint128_t ) t4618));
    t7073 = (a18995 >> 64);
    t7074 = ((uint64_t ) a18995);
    a18996 = (((uint128_t ) t4604)*((uint128_t ) t4617));
    t7075 = (a18996 >> 64);
    t7076 = ((uint64_t ) a18996);
    /* MPAddQDD 64 */
    s1480 = (((uint128_t ) t7074) + ((uint128_t ) t7076));
    t7077 = ((uint64_t ) s1480);
    c790 = (s1480 >> 64);
    s1481 = (((uint128_t ) t7073) + ((uint128_t ) t7075));
    s1482 = (((uint128_t ) s1481) + ((uint128_t ) c790));
    t7078 = ((uint64_t ) s1482);
    c791 = (s1482 >> 64);
    /* Begin of MPAddQQQ 64 */
    t7079 = ((uint64_t ) t7070);
    s1483 = (((uint128_t ) t7069) + ((uint128_t ) t7077));
    t7080 = ((uint64_t ) s1483);
    c792 = (s1483 >> 64);
    s1484 = (((uint128_t ) t7072) + ((uint128_t ) t7078));
    s1485 = (((uint128_t ) s1484) + ((uint128_t ) c792));
    t7081 = ((uint64_t ) s1485);
    c793 = (s1485 >> 64);
    s1486 = (((uint128_t ) t7071) + ((uint128_t ) c791));
    s1487 = (((uint128_t ) s1486) + ((uint128_t ) c793));
    t7082 = ((uint64_t ) s1487);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Schoolbook_Full */
    /* MPAddQDD 64 */
    /* Begin of MPAddQQQ 64 */
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1488 = (((uint128_t ) t7079) + ((uint128_t ) t6975));
    t7083 = ((uint64_t ) s1488);
    c794 = (s1488 >> 64);
    s1489 = (((uint128_t ) t7080) + ((uint128_t ) t6976));
    s1490 = (((uint128_t ) s1489) + ((uint128_t ) c794));
    t7084 = ((uint64_t ) s1490);
    c795 = (s1490 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1491 = (((uint128_t ) t7081) + ((uint128_t ) t6977));
    t7085 = ((uint64_t ) s1491);
    c796 = (s1491 >> 64);
    s1492 = (((uint128_t ) t7082) + ((uint128_t ) t6978));
    s1493 = (((uint128_t ) s1492) + ((uint128_t ) c796));
    t7086 = ((uint64_t ) s1493);
    c797 = (s1493 >> 64);
    /* MPPropagateCarry 64 */
    t7087 = (t7085 + c795);
    a18997 = ((t7087 == 0));
    a18998 = (t7086 + c795);
    t7088 = ((a18997) ? (a18998) : (t7086));
    a18999 = ((t7088 == 0));
    a19000 = ((a18999) && (a18997));
    a19001 = (c797 + c795);
    t7089 = ((a19000) ? (a19001) : (c797));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t7091 = ((uint64_t ) t7065);
    t7092 = ((uint64_t ) t7066);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1494 = (((uint128_t ) t7067) + ((uint128_t ) t7083));
    t7093 = ((uint64_t ) s1494);
    c798 = (s1494 >> 64);
    s1495 = (((uint128_t ) t7068) + ((uint128_t ) t7084));
    s1496 = (((uint128_t ) s1495) + ((uint128_t ) c798));
    t7094 = ((uint64_t ) s1496);
    c799 = (s1496 >> 64);
    /* MPPropagateCarry 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1497 = (((uint128_t ) t6975) + ((uint128_t ) t7087));
    t7095 = ((uint64_t ) s1497);
    c800 = (s1497 >> 64);
    s1498 = (((uint128_t ) t6976) + ((uint128_t ) t7088));
    s1499 = (((uint128_t ) s1498) + ((uint128_t ) c800));
    t7096 = ((uint64_t ) s1499);
    c801 = (s1499 >> 64);
    /* MPPropagateCarry 64 */
    t7097 = (t7095 + c799);
    a19010 = ((t7097 == 0));
    a19011 = (t7096 + c799);
    t7098 = ((a19010) ? (a19011) : (t7096));
    a19012 = ((t7098 == 0));
    a19013 = ((a19012) && (a19010));
    a19014 = (c801 + c799);
    t7099 = ((a19013) ? (a19014) : (c801));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    s1500 = (((uint128_t ) t6977) + ((uint128_t ) t7089));
    t7101 = ((uint64_t ) s1500);
    c802 = (s1500 >> 64);
    s1501 = (((uint128_t ) t6978) + ((uint128_t ) c802));
    t7102 = ((uint64_t ) s1501);
    /* MPPropagateCarry 64 */
    t7103 = (t7101 + t7099);
    a19018 = ((t7103 == 0));
    a19019 = (t7102 + t7099);
    t7104 = ((a19018) ? (a19019) : (t7102));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Schoolbook_Full */
    /* MPExtractHigh 128 */
    /* MPExtractLow 128 */
    /* MPAddQDD 256 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1502 = (((uint128_t ) t7039) + ((uint128_t ) t7091));
    t7107 = ((uint64_t ) s1502);
    c804 = (s1502 >> 64);
    s1503 = (((uint128_t ) t7040) + ((uint128_t ) t7092));
    s1504 = (((uint128_t ) s1503) + ((uint128_t ) c804));
    t7108 = ((uint64_t ) s1504);
    c805 = (s1504 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1505 = (((uint128_t ) t7041) + ((uint128_t ) t7093));
    t7109 = ((uint64_t ) s1505);
    c806 = (s1505 >> 64);
    s1506 = (((uint128_t ) t7042) + ((uint128_t ) t7094));
    s1507 = (((uint128_t ) s1506) + ((uint128_t ) c806));
    t7110 = ((uint64_t ) s1507);
    c807 = (s1507 >> 64);
    /* MPPropagateCarry 64 */
    t7111 = (t7109 + c805);
    a19025 = ((t7111 == 0));
    a19026 = (t7110 + c805);
    t7112 = ((a19025) ? (a19026) : (t7110));
    a19027 = ((t7112 == 0));
    a19028 = ((a19027) && (a19025));
    a19029 = (c807 + c805);
    t7113 = ((a19028) ? (a19029) : (c807));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1508 = (((uint128_t ) t7045) + ((uint128_t ) t7097));
    t7115 = ((uint64_t ) s1508);
    c808 = (s1508 >> 64);
    s1509 = (((uint128_t ) t7046) + ((uint128_t ) t7098));
    s1510 = (((uint128_t ) s1509) + ((uint128_t ) c808));
    t7116 = ((uint64_t ) s1510);
    c809 = (s1510 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1511 = (((uint128_t ) t7051) + ((uint128_t ) t7103));
    t7117 = ((uint64_t ) s1511);
    c810 = (s1511 >> 64);
    s1512 = (((uint128_t ) t7052) + ((uint128_t ) t7104));
    s1513 = (((uint128_t ) s1512) + ((uint128_t ) c810));
    t7118 = ((uint64_t ) s1513);
    /* MPPropagateCarry 64 */
    t7119 = (t7117 + c809);
    a19033 = ((t7119 == 0));
    a19034 = (t7118 + c809);
    t7120 = ((a19033) ? (a19034) : (t7118));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDI 64 */
    s1514 = (((uint128_t ) t7115) + ((uint128_t ) t7113));
    t7123 = ((uint64_t ) s1514);
    c812 = (s1514 >> 64);
    s1515 = (((uint128_t ) t7116) + ((uint128_t ) c812));
    t7124 = ((uint64_t ) s1515);
    /* MPEqualDI 64 */
    a19041 = ((t7124 == 0));
    a19042 = ((t7123 == 0));
    a19043 = ((a19041) && (a19042));
    /* MPAddDDI 64 */
    s1516 = (((uint128_t ) t7119) + ((uint128_t ) t7113));
    t7125 = ((uint64_t ) s1516);
    c813 = (s1516 >> 64);
    s1517 = (((uint128_t ) t7120) + ((uint128_t ) c813));
    t7126 = ((uint64_t ) s1517);
    /* MPCondD 64 */
    t7127 = ((a19043) ? (t7126) : (t7120));
    t7128 = ((a19043) ? (t7125) : (t7119));
    /* MPEqualDI 64 */
    /* MPEqualDI 64 */
    /* MPAddDII 64 */
    /* MPCondDDI 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPTypeCastDI 128 */
    /* MPTypeCastDI 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 256 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    t5744 = ((uint64_t ) t6942);
    t5743 = ((uint64_t ) t6943);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    t5740 = ((uint64_t ) t6944);
    t7131 = ((uint64_t ) t6945);
    /* MPPropagateCarry 64 */
    t5735 = t7131;
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1518 = (((uint128_t ) t6948) + ((uint128_t ) t7107));
    t7132 = ((uint64_t ) s1518);
    c814 = (s1518 >> 64);
    s1519 = (((uint128_t ) t6949) + ((uint128_t ) t7108));
    s1520 = (((uint128_t ) s1519) + ((uint128_t ) c814));
    t7133 = ((uint64_t ) s1520);
    c815 = (s1520 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1521 = (((uint128_t ) t6954) + ((uint128_t ) t7111));
    t7134 = ((uint64_t ) s1521);
    c816 = (s1521 >> 64);
    s1522 = (((uint128_t ) t6955) + ((uint128_t ) t7112));
    s1523 = (((uint128_t ) s1522) + ((uint128_t ) c816));
    t7135 = ((uint64_t ) s1523);
    c817 = (s1523 >> 64);
    /* MPPropagateCarry 64 */
    t7136 = (t7134 + c815);
    a19051 = ((t7136 == 0));
    a19052 = (t7135 + c815);
    t7137 = ((a19051) ? (a19052) : (t7135));
    a19053 = ((t7137 == 0));
    a19054 = ((a19053) && (a19051));
    a19055 = (c817 + c815);
    t7138 = ((a19054) ? (a19055) : (c817));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDI 64 */
    t5242 = ((uint64_t ) t7132);
    c818 = (t7132 >> 64);
    s1524 = (((uint128_t ) t7133) + ((uint128_t ) c818));
    t5241 = ((uint64_t ) s1524);
    /* MPEqualDI 64 */
    a19059 = ((t5241 == 0));
    a19060 = ((t5242 == 0));
    a19061 = ((a19059) && (a19060));
    /* MPAddDDI 64 */
    t7140 = ((uint64_t ) t7136);
    c819 = (t7136 >> 64);
    s1525 = (((uint128_t ) t7137) + ((uint128_t ) c819));
    t7141 = ((uint64_t ) s1525);
    /* MPCondD 64 */
    t5239 = ((a19061) ? (t7141) : (t7137));
    t5240 = ((a19061) ? (t7140) : (t7136));
    /* MPEqualDI 64 */
    /* MPEqualDI 64 */
    /* MPAddDII 64 */
    /* MPCondDDI 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s1526 = (((uint128_t ) t6987) + ((uint128_t ) t7123));
    t7142 = ((uint64_t ) s1526);
    c820 = (s1526 >> 64);
    s1527 = (((uint128_t ) t6988) + ((uint128_t ) t7124));
    s1528 = (((uint128_t ) s1527) + ((uint128_t ) c820));
    t7143 = ((uint64_t ) s1528);
    c821 = (s1528 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s1529 = (((uint128_t ) t6989) + ((uint128_t ) t7128));
    t7144 = ((uint64_t ) s1529);
    c822 = (s1529 >> 64);
    s1530 = (((uint128_t ) t6990) + ((uint128_t ) t7127));
    s1531 = (((uint128_t ) s1530) + ((uint128_t ) c822));
    t7145 = ((uint64_t ) s1531);
    /* MPPropagateCarry 64 */
    t7146 = (t7144 + c821);
    a19066 = ((t7146 == 0));
    a19067 = (t7145 + c821);
    t7147 = ((a19066) ? (a19067) : (t7145));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDD 64 */
    s1532 = (((uint128_t ) t7142) + ((uint128_t ) t7138));
    t5180 = ((uint64_t ) s1532);
    c824 = (s1532 >> 64);
    s1533 = (((uint128_t ) t7143) + ((uint128_t ) c824));
    t5179 = ((uint64_t ) s1533);
    /* MPEqualDI 64 */
    a19074 = ((t5179 == 0));
    a19075 = ((t5180 == 0));
    a19076 = ((a19074) && (a19075));
    /* MPAddDDD 64 */
    s1534 = (((uint128_t ) t7146) + ((uint128_t ) t7138));
    t7150 = ((uint64_t ) s1534);
    c825 = (s1534 >> 64);
    s1535 = (((uint128_t ) t7147) + ((uint128_t ) c825));
    t7151 = ((uint64_t ) s1535);
    /* MPCondD 64 */
    t5177 = ((a19076) ? (t7151) : (t7147));
    t5178 = ((a19076) ? (t7150) : (t7146));
    /* MPEqualDI 64 */
    /* MPEqualDI 64 */
    /* MPAddDDI 64 */
    /* MPCondDDI 64 */
    /* MPExtractLow 128 */
    /* MPExtractCarry 128 */
    /* MPAddQID 128 */
    /* MPAddQDD 64 */
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    /* MPExtractLow 64 */
    /* MPPropagateCarry 128 */
    /* MPAddDDD 64 */
    /* MPEqualDI 64 */
    /* MPAddDDD 64 */
    /* MPCondD 64 */
    /* MPExtractLow 128 */
    /* End of MPAddQQQ 256 */
    /* End of MPMulQDD_Schoolbook_Full */
}

void init_nttmpcuda() {
    /* skip */
}

__global__ void ker_code0(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a19084, a19085, a19086, a19087, a19088, a19089, a19090, a19091, 
            a19092, a19093, a19094, a19095, a19096, a19097, a19098, a19099, 
            a19118, a19119, a19120, a19124, a19125, a19126, a19127, a19128, 
            a19129, a19130, a19133, a19134, a19135, a19140, a19144, a19145, 
            a19146, a19150, a19151, a19152, a19153, a19154, a19155, a19156, 
            a19159, a19160, a19161, a19165, a19168, a19169, a19170, a19171, 
            a19172, a19173, a19174, a19175, a19176, a19177, a19178, a19179, 
            a19180, a19181, a19182, a19183, a19184, a19185, a19186, a19187, 
            a19189, a19190, a19195, a19196, a19197, a19198, a19199, a19207, 
            a19208, a19209, a19210, a19211, a19212, a19213, a19214, a19215, 
            a19216, a19217, a19218, a19219, a19220, a19221, a19222, a19223, 
            a19224, a19225, a19226, a19227, a19228, a19229, a19230, a19231, 
            a19232, a19233, a19234, a19235, a19236, a19237, a19238, a19239, 
            a19240, a19241, a19243, a19244, a19245, a19249, a19250, a19251, 
            a19252, a19253, a19254, a19255, a19259, a19260, a19261, a19262, 
            a19263, a19264, a19265, a19266, a19267, a19268, a19269, a19270, 
            a19271, a19273, a19274, a19275, a19279, a19280, a19281, a19282, 
            a19283, a19284, a19285, a19289, a19291, a19292, a19297, a19298, 
            a19299, a19300, a19301, a19302, a19303, a19304, a19305, a19306, 
            a19307, a19308, a19309, a19310, a19311, a19312, a19313, a19314, 
            a19315, a19316, a19317, a19318, a19319, a19320, a19321, a19322, 
            a19323, a19324, a19325, b763, b764, b766, b767, b768, 
            b769, b770, b771, b772, b773, b774, b775, b776, 
            b777, b778, b779, b780, b781, b782, b783, b784, 
            b785, b786, b787, b788, b789, b790, b791, b792, 
            b793, b794, b795, b796, b797, b798, b799, b800, 
            b801, b802, b803, c833, c834, c835, c836, c837, 
            c838, c839, c841, c842, c843, c844, c845, c846, 
            c847, c849, i327, i328, i329;
    uint64_t a19100, a19101, a19102, a19103, a19104, a19105, a19106, a19107, 
            a19108, a19109, a19111, a19112, a19113, a19114, a19115, a19116, 
            a19188, a19191, a19200, a19290, a19293, a9446, a9447, a9448, 
            a9449, a9450, a9451, a9551, a9552, a9553, a9554, a9555, 
            a9556, d1000, d1001, d1002, d1003, d1004, d1005, d1006, 
            d1007, d1008, d1009, d1010, d1011, d1012, d1013, d1014, 
            d1015, d1016, d1017, d1018, d1019, d1020, d1021, d1022, 
            d1023, d1024, d1025, d1026, d1027, d1028, d1029, d1030, 
            d1031, d1032, d1033, d1034, d1035, d1036, d1037, d1038, 
            d1039, d1040, d1041, d1042, d1043, d992, d993, d994, 
            d995, d996, d997, d998, d999, t3923, t3924, t3925, 
            t3926, t3927, t3928, t3929, t3930, t3931, t3932, t3933, 
            t3934, t3935, t3936, t3937, t3938, t3939, t3940, t3941, 
            t3942, t3943, t3944, t3945, t3946, t3947, t3948, t3949, 
            t3950, t3951, t3952, t3953, t3954, t3955, t3956, t3957, 
            t3958, t3959, t3960, t3961, t3962, t3963, t3964, t3965, 
            t3966, t3967, t3968, t3969, t3970, t7162, t7163, t7164, 
            t7165, t7166, t7167, t7168, t7169, t7170, t7171, t7172, 
            t7173, t7174, t7175, t7176, t7177, t7178, t7179, t7180, 
            t7181, t7182, t7183, t7184, t7185, t7186, t7187, t7188, 
            t7189, t7192, t7193, t7194, t7195, t7196, t7197, t7198, 
            t7199, t7200, t7201, t7202, t7203, t7204, t7205, t7206, 
            t7207, t7208, t7209, t7210, t7211, t7212, t7213, t7214, 
            t7215, t7216, t7217, t7218, t7219, t7220, t7221, t7222, 
            t7223, t7224, t7225, t7226, t7227, t7228, t7229, t7230, 
            t7231, t7232, t7233, t7234, t7235, t7237, t7238, t7239, 
            t7240, t7241, t7242, t7243, t7244, t7247, t7248, t7249, 
            t7250, t7251, t7252, t7253, t7254, t7255, t7256, t7257, 
            t7258, t7259, t7260, t7261, t7262, t7263, t7265, t7266, 
            t7267, t7268;
    uint128_t s1548, s1549, s1550, s1551, s1552, s1553, s1554, s1555, 
            s1556, s1557, s1558, s1559, s1560, s1561, s1562, s1563, 
            s1564, s1565, s1566, s1567, s1568, s1569, s1570, s1571, 
            s1572;
    for(int i21 = 0; i21 <= 3; i21++) {
        a19084 = (1024*blockIdx.x);
        a19085 = (128*i21);
        b763 = (a19084 + threadIdx.x);
        a19086 = (b763 + a19085);
        a19087 = (a19086 + 512);
        /* Begin of MPModMul 256 */
        a19088 = (2*a19087);
        a19089 = (a19088 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19090 = (2*a19088);
        a19091 = (a19090 + 1);
        /* MPAssignDD 64 */
        a19092 = (2*a19091);
        t7162 = X[a19092];
        a19093 = (a19092 + 1);
        t7163 = X[a19093];
        /* MPAssignDD 128 */
        a19094 = (2*a19089);
        /* MPAssignDD 64 */
        a19095 = (2*a19094);
        t7164 = X[a19095];
        a19096 = (a19095 + 1);
        t7165 = X[a19096];
        a19097 = (a19094 + 1);
        /* MPAssignDD 64 */
        a19098 = (2*a19097);
        t7166 = X[a19098];
        a19099 = (a19098 + 1);
        t7167 = X[a19099];
        MPMulQDD_L3_2(t3935, t3936, t3937, t3938, t3931, t3932, t3933, t3934, 
    t3927, t3928, t3929, t3930, t3923, t3924, t3925, t3926, 
    0, 0, twiddles[10], twiddles[11], twiddles[12], twiddles[13], twiddles[14], twiddles[15], 
    0, 0, t7162, t7163, t7164, t7165, t7166, t7167);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7168 = (t3927 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19100 = (t3927 << 6);
        a19101 = (t3928 >> 58);
        t7169 = (((a19100)|(a19101)));
        t7170 = (t3928 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7171 = (t3929 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7172 = (((t7170)|(t7171)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b764 = ((int) 1);
        t7173 = (288230376151711744 - b764);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7174 = (((t3937)&(t7173)));
        t7175 = (((t3938)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19102 = (t7174 << 6);
        a19103 = (t7175 >> 58);
        t7176 = (((a19102)|(a19103)));
        t7177 = (t7175 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7178 = (t3931 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19104 = (t3931 << 6);
        a19105 = (t3932 >> 58);
        t7179 = (((a19104)|(a19105)));
        t7180 = (t3932 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7181 = (t3933 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7182 = (((t7180)|(t7181)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7183 = (((t7177)|(t7178)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19106 = (t3933 << 6);
        a19107 = (t3934 >> 58);
        t7184 = (((a19106)|(a19107)));
        t7185 = (t3934 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7186 = (((t7185)|(t7168)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a9446 = mu[2];
        a9447 = mu[3];
        a9448 = mu[4];
        a9449 = mu[5];
        a9450 = mu[6];
        a9451 = mu[7];
        MPMulQDD_L3_1(t3967, t3968, t3969, t3970, t3963, t3964, t3965, t3966, 
    t3959, t3960, t3961, t3962, t3955, t3956, t3957, t3958, 
    t7176, t7183, t7179, t7182, t7184, t7186, t7169, t7172, 
    0, 0, a9446, a9447, a9448, a9449, a9450, a9451);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7187 = (t3959 >> 1);
        a19108 = (t3959 << 63);
        a19109 = (t3960 >> 1);
        t7188 = (((a19108)|(a19109)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7189 = (0 - b764);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d992 = (2 - b764);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7192 = (((t3968)&(d992)));
        /* MPBinAndD 64 */
        t7193 = (((t3969)&(t7189)));
        t7194 = (((t3970)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7195 = (t7192 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7196 = (t7193 >> 1);
        a19111 = (t7193 << 63);
        a19112 = (t7194 >> 1);
        t7197 = (((a19111)|(a19112)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7198 = (((t7195)|(t7196)));
        /* Begin of MPShiftLeft1D */
        t7199 = (t7194 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7200 = (t3963 >> 1);
        a19113 = (t3963 << 63);
        a19114 = (t3964 >> 1);
        t7201 = (((a19113)|(a19114)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7202 = (((t7199)|(t7200)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7203 = (t3964 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7204 = (t3965 >> 1);
        a19115 = (t3965 << 63);
        a19116 = (t3966 >> 1);
        t7205 = (((a19115)|(a19116)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7206 = (((t7203)|(t7204)));
        /* Begin of MPShiftLeft1D */
        t7207 = (t3966 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7208 = (((t7207)|(t7187)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a9551 = modulus[2];
        a9552 = modulus[3];
        a9553 = modulus[4];
        a9554 = modulus[5];
        a9555 = modulus[6];
        a9556 = modulus[7];
        MPMulQDD_L3_1(t3951, t3952, t3953, t3954, t3947, t3948, t3949, t3950, 
    t3943, t3944, t3945, t3946, t3939, t3940, t3941, t3942, 
    t7198, t7197, t7202, t7201, t7206, t7205, t7208, t7188, 
    0, 0, a9551, a9552, a9553, a9554, a9555, a9556);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d993 = (t3926 - t3942);
        b766 = ((t3926 < t3942));
        d994 = (t3925 - t3941);
        d995 = (d994 - b766);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19118 = ((t3925 < t3941));
        a19119 = ((t3925 == t3941));
        a19120 = ((a19119) && (b766));
        b767 = ((a19118) || (a19120));
        /* Begin of MPSubDDD 64 */
        d996 = (t3924 - t3940);
        b768 = ((t3924 < t3940));
        d997 = (t3923 - t3939);
        d998 = (d997 - b768);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d999 = (d996 - b767);
        b769 = ((d996 < b767));
        t7209 = (d998 - b769);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19124 = ((t3923 < t3939));
        a19125 = ((t3923 == t3939));
        a19126 = ((a19125) && (b768));
        a19127 = ((a19124) || (a19126));
        /* MPEqual 64 */
        a19128 = ((t3924 == t3940));
        a19129 = ((a19125) && (a19128));
        /* MPLessThan 64 */
        a19130 = ((a19129) && (b767));
        b770 = ((a19127) || (a19130));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1000 = (t3930 - t3946);
        b771 = ((t3930 < t3946));
        d1001 = (t3929 - t3945);
        d1002 = (d1001 - b771);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19133 = ((t3929 < t3945));
        a19134 = ((t3929 == t3945));
        a19135 = ((a19134) && (b771));
        b772 = ((a19133) || (a19135));
        /* Begin of MPSubDDD 64 */
        d1003 = (t3928 - t3944);
        b773 = ((t3928 < t3944));
        d1004 = (t3927 - t3943);
        d1005 = (d1004 - b773);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1006 = (d1003 - b772);
        b774 = ((d1003 < b772));
        t7210 = (d1005 - b774);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1007 = (d1000 - b770);
        b775 = ((d1000 < b770));
        t7211 = (d1002 - b775);
        /* MPLessThanDI 64 */
        a19140 = ((d1002 == 0));
        b776 = ((a19140) && (b775));
        /* MPSubDDI 64 */
        d1008 = (d1006 - b776);
        b777 = ((d1006 < b776));
        t7212 = (t7210 - b777);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1009 = (d993 - a9556);
        b778 = ((d993 < a9556));
        d1010 = (d995 - a9555);
        d1011 = (d1010 - b778);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19144 = ((d995 < a9555));
        a19145 = ((d995 == a9555));
        a19146 = ((a19145) && (b778));
        b779 = ((a19144) || (a19146));
        /* Begin of MPSubDDD 64 */
        d1012 = (d999 - a9554);
        b780 = ((d999 < a9554));
        d1013 = (t7209 - a9553);
        d1014 = (d1013 - b780);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1015 = (d1012 - b779);
        b781 = ((d1012 < b779));
        t7213 = (d1014 - b781);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19150 = ((t7209 < a9553));
        a19151 = ((t7209 == a9553));
        a19152 = ((a19151) && (b780));
        a19153 = ((a19150) || (a19152));
        /* MPEqual 64 */
        a19154 = ((d999 == a9554));
        a19155 = ((a19151) && (a19154));
        /* MPLessThan 64 */
        a19156 = ((a19155) && (b779));
        b782 = ((a19153) || (a19156));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1016 = (d1007 - a9552);
        b783 = ((d1007 < a9552));
        d1017 = (t7211 - a9551);
        d1018 = (d1017 - b783);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19159 = ((t7211 < a9551));
        a19160 = ((t7211 == a9551));
        a19161 = ((a19160) && (b783));
        b784 = ((a19159) || (a19161));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1019 = (d1008 - b784);
        b785 = ((d1008 < b784));
        t7214 = (t7212 - b785);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1020 = (d1016 - b782);
        b786 = ((d1016 < b782));
        t7215 = (d1018 - b786);
        /* MPLessThanDI 64 */
        a19165 = ((d1018 == 0));
        b787 = ((a19165) && (b786));
        /* MPSubDDI 64 */
        d1021 = (d1019 - b787);
        b788 = ((d1019 < b787));
        t7216 = (t7214 - b788);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19168 = ((t7212 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19169 = ((d1008 == 0));
        a19170 = ((a19168) && (a19169));
        /* MPLessThan 64 */
        a19171 = ((a19170) && (b784));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19172 = ((d1007 == a9552));
        a19173 = ((a19160) && (a19172));
        a19174 = ((a19170) && (a19173));
        /* MPLessThan 128 */
        a19175 = ((a19174) && (b782));
        i327 = ((a19171) || (a19175));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7217 = ((i327) ? (t7212) : (t7216));
        t7218 = ((i327) ? (d1008) : (d1021));
        /* MPCondD 64 */
        t7219 = ((i327) ? (t7211) : (t7215));
        t7220 = ((i327) ? (d1007) : (d1020));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7221 = ((i327) ? (t7209) : (t7213));
        t7222 = ((i327) ? (d999) : (d1015));
        /* MPCondD 64 */
        t7223 = ((i327) ? (d995) : (d1011));
        t7224 = ((i327) ? (d993) : (d1009));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a19176 = (256*i21);
        a19177 = (2*threadIdx.x);
        a19178 = (a19176 + a19177);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a19179 = (2*a19086);
        a19180 = (a19179 + 1);
        /* MPAssignDD 128 */
        a19181 = (2*a19180);
        /* MPAssignDD 64 */
        a19182 = (2*a19181);
        t7225 = X[a19182];
        a19183 = (a19182 + 1);
        t7226 = X[a19183];
        a19184 = (a19181 + 1);
        /* MPAssignDD 64 */
        a19185 = (2*a19184);
        t7227 = X[a19185];
        a19186 = (a19185 + 1);
        t7228 = X[a19186];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1548 = (((uint128_t ) t7228) + ((uint128_t ) t7224));
        t7229 = ((uint64_t ) s1548);
        c833 = (s1548 >> 64);
        s1549 = (((uint128_t ) t7227) + ((uint128_t ) t7223));
        s1550 = (((uint128_t ) s1549) + ((uint128_t ) c833));
        t7230 = ((uint64_t ) s1550);
        c834 = (s1550 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1551 = (((uint128_t ) t7226) + ((uint128_t ) t7222));
        t7231 = ((uint64_t ) s1551);
        c835 = (s1551 >> 64);
        s1552 = (((uint128_t ) t7225) + ((uint128_t ) t7221));
        s1553 = (((uint128_t ) s1552) + ((uint128_t ) c835));
        t7232 = ((uint64_t ) s1553);
        c836 = (s1553 >> 64);
        /* MPPropagateCarry 64 */
        t7233 = (t7231 + c834);
        a19187 = ((t7233 == 0));
        a19188 = (t7232 + c834);
        t7234 = ((a19187) ? (a19188) : (t7232));
        a19189 = ((t7234 == 0));
        a19190 = ((a19189) && (a19187));
        a19191 = (c836 + c834);
        t7235 = ((a19190) ? (a19191) : (c836));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19195 = (2*a19179);
        a19196 = (a19195 + 1);
        /* MPAssignDD 64 */
        a19197 = (2*a19196);
        t7237 = X[a19197];
        a19198 = (a19197 + 1);
        t7238 = X[a19198];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1554 = (((uint128_t ) t7238) + ((uint128_t ) t7220));
        t7239 = ((uint64_t ) s1554);
        c837 = (s1554 >> 64);
        s1555 = (((uint128_t ) t7237) + ((uint128_t ) t7219));
        s1556 = (((uint128_t ) s1555) + ((uint128_t ) c837));
        t7240 = ((uint64_t ) s1556);
        c838 = (s1556 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7241 = ((uint64_t ) t7218);
        c839 = (t7218 >> 64);
        s1557 = (((uint128_t ) t7217) + ((uint128_t ) c839));
        t7242 = ((uint64_t ) s1557);
        /* MPPropagateCarry 64 */
        t7243 = (t7241 + c838);
        a19199 = ((t7243 == 0));
        a19200 = (t7242 + c838);
        t7244 = ((a19199) ? (a19200) : (t7242));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1558 = (((uint128_t ) t7239) + ((uint128_t ) t7235));
        t7247 = ((uint64_t ) s1558);
        c841 = (s1558 >> 64);
        s1559 = (((uint128_t ) t7240) + ((uint128_t ) c841));
        t7248 = ((uint64_t ) s1559);
        /* MPEqualDI 64 */
        a19207 = ((t7248 == 0));
        a19208 = ((t7247 == 0));
        a19209 = ((a19207) && (a19208));
        /* MPAddDDI 64 */
        s1560 = (((uint128_t ) t7243) + ((uint128_t ) t7235));
        t7249 = ((uint64_t ) s1560);
        c842 = (s1560 >> 64);
        s1561 = (((uint128_t ) t7244) + ((uint128_t ) c842));
        t7250 = ((uint64_t ) s1561);
        /* MPCondD 64 */
        t7251 = ((a19209) ? (t7250) : (t7244));
        t7252 = ((a19209) ? (t7249) : (t7243));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19210 = ((0 < t7251));
        a19211 = ((0 == t7251));
        a19212 = ((0 < t7252));
        a19213 = ((a19211) && (a19212));
        a19214 = ((a19210) || (a19213));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19215 = ((0 == t7252));
        a19216 = ((a19211) && (a19215));
        /* MPLessThan 64 */
        a19217 = ((a9551 < t7248));
        a19218 = ((a9551 == t7248));
        a19219 = ((a9552 < t7247));
        a19220 = ((a19218) && (a19219));
        a19221 = ((a19217) || (a19220));
        a19222 = ((a19216) && (a19221));
        a19223 = ((a19214) || (a19222));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19224 = ((a9552 == t7247));
        a19225 = ((a19218) && (a19224));
        a19226 = ((a19216) && (a19225));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19227 = ((a9553 < t7234));
        a19228 = ((a9553 == t7234));
        a19229 = ((a9554 < t7233));
        a19230 = ((a19228) && (a19229));
        a19231 = ((a19227) || (a19230));
        /* MPEqual 64 */
        a19232 = ((a9554 == t7233));
        a19233 = ((a19228) && (a19232));
        /* MPLessThan 64 */
        a19234 = ((a9555 < t7230));
        a19235 = ((a9555 == t7230));
        a19236 = ((a9556 < t7229));
        a19237 = ((a19235) && (a19236));
        a19238 = ((a19234) || (a19237));
        a19239 = ((a19233) && (a19238));
        a19240 = ((a19231) || (a19239));
        a19241 = ((a19226) && (a19240));
        i328 = ((a19223) || (a19241));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1022 = (t7229 - a9556);
        b789 = ((t7229 < a9556));
        d1023 = (t7230 - a9555);
        d1024 = (d1023 - b789);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19243 = ((t7230 < a9555));
        a19244 = ((t7230 == a9555));
        a19245 = ((a19244) && (b789));
        b790 = ((a19243) || (a19245));
        /* Begin of MPSubDDD 64 */
        d1025 = (t7233 - a9554);
        b791 = ((t7233 < a9554));
        d1026 = (t7234 - a9553);
        d1027 = (d1026 - b791);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1028 = (d1025 - b790);
        b792 = ((d1025 < b790));
        t7253 = (d1027 - b792);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19249 = ((t7234 < a9553));
        a19250 = ((t7234 == a9553));
        a19251 = ((a19250) && (b791));
        a19252 = ((a19249) || (a19251));
        /* MPEqual 64 */
        a19253 = ((t7233 == a9554));
        a19254 = ((a19250) && (a19253));
        /* MPLessThan 64 */
        a19255 = ((a19254) && (b790));
        b793 = ((a19252) || (a19255));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1029 = (t7247 - a9552);
        b794 = ((t7247 < a9552));
        d1030 = (t7248 - a9551);
        d1031 = (d1030 - b794);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1032 = (d1029 - b793);
        b795 = ((d1029 < b793));
        t7254 = (d1031 - b795);
        /* End of MPSubDDD 256 */
        a19259 = (2*a19178);
        /* MPCondD 128 */
        a19260 = (2*a19259);
        a19261 = (a19260 + 1);
        /* MPCondD 64 */
        a19262 = (2*a19261);
        P1[a19262] = ((i328) ? (t7254) : (t7248));
        a19263 = (a19262 + 1);
        P1[a19263] = ((i328) ? (d1032) : (t7247));
        a19264 = (a19259 + 1);
        /* MPCondD 128 */
        a19265 = (2*a19264);
        /* MPCondD 64 */
        a19266 = (2*a19265);
        P1[a19266] = ((i328) ? (t7253) : (t7234));
        a19267 = (a19266 + 1);
        P1[a19267] = ((i328) ? (d1028) : (t7233));
        a19268 = (a19265 + 1);
        /* MPCondD 64 */
        a19269 = (2*a19268);
        P1[a19269] = ((i328) ? (d1024) : (t7230));
        a19270 = (a19269 + 1);
        P1[a19270] = ((i328) ? (d1022) : (t7229));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        b796 = (a19177 + a19176);
        a19271 = (b796 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1033 = (t7228 - t7224);
        b797 = ((t7228 < t7224));
        d1034 = (t7227 - t7223);
        d1035 = (d1034 - b797);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19273 = ((t7227 < t7223));
        a19274 = ((t7227 == t7223));
        a19275 = ((a19274) && (b797));
        b798 = ((a19273) || (a19275));
        /* Begin of MPSubDDD 64 */
        d1036 = (t7226 - t7222);
        b799 = ((t7226 < t7222));
        d1037 = (t7225 - t7221);
        d1038 = (d1037 - b799);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1039 = (d1036 - b798);
        b800 = ((d1036 < b798));
        t7255 = (d1038 - b800);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19279 = ((t7225 < t7221));
        a19280 = ((t7225 == t7221));
        a19281 = ((a19280) && (b799));
        a19282 = ((a19279) || (a19281));
        /* MPEqual 64 */
        a19283 = ((t7226 == t7222));
        a19284 = ((a19280) && (a19283));
        /* MPLessThan 64 */
        a19285 = ((a19284) && (b798));
        b801 = ((a19282) || (a19285));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1040 = (t7238 - t7220);
        b802 = ((t7238 < t7220));
        d1041 = (t7237 - t7219);
        d1042 = (d1041 - b802);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1043 = (d1040 - b801);
        b803 = ((d1040 < b801));
        t7256 = (d1042 - b803);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1562 = (((uint128_t ) d1033) + ((uint128_t ) a9556));
        t7257 = ((uint64_t ) s1562);
        c843 = (s1562 >> 64);
        s1563 = (((uint128_t ) d1035) + ((uint128_t ) a9555));
        s1564 = (((uint128_t ) s1563) + ((uint128_t ) c843));
        t7258 = ((uint64_t ) s1564);
        c844 = (s1564 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1565 = (((uint128_t ) d1039) + ((uint128_t ) a9554));
        t7259 = ((uint64_t ) s1565);
        c845 = (s1565 >> 64);
        s1566 = (((uint128_t ) t7255) + ((uint128_t ) a9553));
        s1567 = (((uint128_t ) s1566) + ((uint128_t ) c845));
        t7260 = ((uint64_t ) s1567);
        c846 = (s1567 >> 64);
        /* MPPropagateCarry 64 */
        t7261 = (t7259 + c844);
        a19289 = ((t7261 == 0));
        a19290 = (t7260 + c844);
        t7262 = ((a19289) ? (a19290) : (t7260));
        a19291 = ((t7262 == 0));
        a19292 = ((a19291) && (a19289));
        a19293 = (c846 + c844);
        t7263 = ((a19292) ? (a19293) : (c846));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1568 = (((uint128_t ) d1043) + ((uint128_t ) a9552));
        t7265 = ((uint64_t ) s1568);
        c847 = (s1568 >> 64);
        s1569 = (((uint128_t ) t7256) + ((uint128_t ) a9551));
        s1570 = (((uint128_t ) s1569) + ((uint128_t ) c847));
        t7266 = ((uint64_t ) s1570);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1571 = (((uint128_t ) t7265) + ((uint128_t ) t7263));
        t7267 = ((uint64_t ) s1571);
        c849 = (s1571 >> 64);
        s1572 = (((uint128_t ) t7266) + ((uint128_t ) c849));
        t7268 = ((uint64_t ) s1572);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19297 = ((0 < t7217));
        a19298 = ((0 == t7217));
        a19299 = ((0 < t7218));
        a19300 = ((a19298) && (a19299));
        a19301 = ((a19297) || (a19300));
        /* MPEqual 64 */
        a19302 = ((0 == t7218));
        a19303 = ((a19298) && (a19302));
        /* MPLessThan 64 */
        a19304 = ((t7237 < t7219));
        a19305 = ((t7237 == t7219));
        a19306 = ((a19305) && (b802));
        a19307 = ((a19304) || (a19306));
        a19308 = ((a19303) && (a19307));
        a19309 = ((a19301) || (a19308));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19310 = ((t7238 == t7220));
        a19311 = ((a19305) && (a19310));
        a19312 = ((a19303) && (a19311));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a19313 = ((a19312) && (b801));
        i329 = ((a19309) || (a19313));
        a19314 = (2*a19271);
        /* MPCondD 128 */
        a19315 = (2*a19314);
        a19316 = (a19315 + 1);
        /* MPCondD 64 */
        a19317 = (2*a19316);
        P1[a19317] = ((i329) ? (t7268) : (t7256));
        a19318 = (a19317 + 1);
        P1[a19318] = ((i329) ? (t7267) : (d1043));
        a19319 = (a19314 + 1);
        /* MPCondD 128 */
        a19320 = (2*a19319);
        /* MPCondD 64 */
        a19321 = (2*a19320);
        P1[a19321] = ((i329) ? (t7262) : (t7255));
        a19322 = (a19321 + 1);
        P1[a19322] = ((i329) ? (t7261) : (d1039));
        a19323 = (a19320 + 1);
        /* MPCondD 64 */
        a19324 = (2*a19323);
        P1[a19324] = ((i329) ? (t7258) : (d1035));
        a19325 = (a19324 + 1);
        P1[a19325] = ((i329) ? (t7257) : (d1033));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code1(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a19326, a19327, a19328, a19329, a19330, a19331, a19332, a19333, 
            a19334, a19335, a19336, a19337, a19338, a19339, a19340, a19341, 
            a19342, a19343, a19344, a19345, a19346, a19347, a19348, a19349, 
            a19350, a19351, a19352, a19353, a19354, a19373, a19374, a19375, 
            a19379, a19380, a19381, a19382, a19383, a19384, a19385, a19388, 
            a19389, a19390, a19395, a19399, a19400, a19401, a19405, a19406, 
            a19407, a19408, a19409, a19410, a19411, a19414, a19415, a19416, 
            a19420, a19423, a19424, a19425, a19426, a19427, a19428, a19429, 
            a19430, a19431, a19432, a19433, a19434, a19435, a19436, a19437, 
            a19438, a19439, a19440, a19441, a19442, a19444, a19445, a19450, 
            a19451, a19452, a19453, a19454, a19462, a19463, a19464, a19465, 
            a19466, a19467, a19468, a19469, a19470, a19471, a19472, a19473, 
            a19474, a19475, a19476, a19477, a19478, a19479, a19480, a19481, 
            a19482, a19483, a19484, a19485, a19486, a19487, a19488, a19489, 
            a19490, a19491, a19492, a19493, a19494, a19495, a19496, a19498, 
            a19499, a19500, a19504, a19505, a19506, a19507, a19508, a19509, 
            a19510, a19514, a19515, a19516, a19517, a19518, a19519, a19520, 
            a19521, a19522, a19523, a19524, a19525, a19526, a19528, a19529, 
            a19530, a19534, a19535, a19536, a19537, a19538, a19539, a19540, 
            a19544, a19546, a19547, a19552, a19553, a19554, a19555, a19556, 
            a19557, a19558, a19559, a19560, a19561, a19562, a19563, a19564, 
            a19565, a19566, a19567, a19568, a19569, a19570, a19571, a19572, 
            a19573, a19574, a19575, a19576, a19577, a19578, a19579, a19580, 
            b804, b805, b807, b808, b809, b810, b811, b812, 
            b813, b814, b815, b816, b817, b818, b819, b820, 
            b821, b822, b823, b824, b825, b826, b827, b828, 
            b829, b830, b831, b832, b833, b834, b835, b836, 
            b837, b838, b839, b840, b841, b842, b843, b844, 
            c850, c851, c852, c853, c854, c855, c856, c858, 
            c859, c860, c861, c862, c863, c864, c866, i330, 
            i331, i332;
    uint64_t a10357, a10358, a10359, a10360, a10361, a10362, a10462, a10463, 
            a10464, a10465, a10466, a10467, a19355, a19356, a19357, a19358, 
            a19359, a19360, a19361, a19362, a19363, a19364, a19366, a19367, 
            a19368, a19369, a19370, a19371, a19443, a19446, a19455, a19545, 
            a19548, d1044, d1045, d1046, d1047, d1048, d1049, d1050, 
            d1051, d1052, d1053, d1054, d1055, d1056, d1057, d1058, 
            d1059, d1060, d1061, d1062, d1063, d1064, d1065, d1066, 
            d1067, d1068, d1069, d1070, d1071, d1072, d1073, d1074, 
            d1075, d1076, d1077, d1078, d1079, d1080, d1081, d1082, 
            d1083, d1084, d1085, d1086, d1087, d1088, d1089, d1090, 
            d1091, d1092, d1093, d1094, d1095, t3987, t3988, t3989, 
            t3990, t3991, t3992, t3993, t3994, t3995, t3996, t3997, 
            t3998, t3999, t4000, t4001, t4002, t4003, t4004, t4005, 
            t4006, t4007, t4008, t4009, t4010, t4011, t4012, t4013, 
            t4014, t4015, t4016, t4017, t4018, t4019, t4020, t4021, 
            t4022, t4023, t4024, t4025, t4026, t4027, t4028, t4029, 
            t4030, t4031, t4032, t4033, t4034, t7269, t7270, t7271, 
            t7272, t7273, t7274, t7275, t7276, t7277, t7278, t7279, 
            t7280, t7281, t7282, t7283, t7284, t7285, t7286, t7287, 
            t7288, t7289, t7290, t7291, t7292, t7293, t7294, t7295, 
            t7296, t7297, t7298, t7299, t7300, t7301, t7302, t7305, 
            t7306, t7307, t7308, t7309, t7310, t7311, t7312, t7313, 
            t7314, t7315, t7316, t7317, t7318, t7319, t7320, t7321, 
            t7322, t7323, t7324, t7325, t7326, t7327, t7328, t7329, 
            t7330, t7331, t7332, t7333, t7334, t7335, t7336, t7337, 
            t7338, t7339, t7340, t7341, t7342, t7343, t7344, t7345, 
            t7346, t7347, t7348, t7350, t7351, t7352, t7353, t7354, 
            t7355, t7356, t7357, t7360, t7361, t7362, t7363, t7364, 
            t7365, t7366, t7367, t7368, t7369, t7370, t7371, t7372, 
            t7373, t7374, t7375, t7376, t7378, t7379, t7380, t7381;
    uint128_t s1573, s1574, s1575, s1576, s1577, s1578, s1579, s1580, 
            s1581, s1582, s1583, s1584, s1585, s1586, s1587, s1588, 
            s1589, s1590, s1591, s1592, s1593, s1594, s1595, s1596, 
            s1597;
    for(int i19 = 0; i19 <= 3; i19++) {
        a19326 = (128*i19);
        a19327 = (a19326 + threadIdx.x);
        b804 = (threadIdx.x + a19326);
        a19328 = (b804 + 512);
        a19329 = (a19328 % 2);
        a19330 = (2 + a19329);
        /* Begin of MPModMul 256 */
        a19331 = (2*a19330);
        a19332 = (a19331 + 1);
        a19333 = (2*a19328);
        a19334 = (a19333 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19335 = (2*a19331);
        a19336 = (a19335 + 1);
        /* MPAssignDD 64 */
        a19337 = (2*a19336);
        t7269 = twiddles[a19337];
        a19338 = (a19337 + 1);
        t7270 = twiddles[a19338];
        /* MPAssignDD 128 */
        a19339 = (2*a19332);
        /* MPAssignDD 64 */
        a19340 = (2*a19339);
        t7271 = twiddles[a19340];
        a19341 = (a19340 + 1);
        t7272 = twiddles[a19341];
        a19342 = (a19339 + 1);
        /* MPAssignDD 64 */
        a19343 = (2*a19342);
        t7273 = twiddles[a19343];
        a19344 = (a19343 + 1);
        t7274 = twiddles[a19344];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19345 = (2*a19333);
        a19346 = (a19345 + 1);
        /* MPAssignDD 64 */
        a19347 = (2*a19346);
        t7275 = P1[a19347];
        a19348 = (a19347 + 1);
        t7276 = P1[a19348];
        /* MPAssignDD 128 */
        a19349 = (2*a19334);
        /* MPAssignDD 64 */
        a19350 = (2*a19349);
        t7277 = P1[a19350];
        a19351 = (a19350 + 1);
        t7278 = P1[a19351];
        a19352 = (a19349 + 1);
        /* MPAssignDD 64 */
        a19353 = (2*a19352);
        t7279 = P1[a19353];
        a19354 = (a19353 + 1);
        t7280 = P1[a19354];
        MPMulQDD_L3_2(t3999, t4000, t4001, t4002, t3995, t3996, t3997, t3998, 
    t3991, t3992, t3993, t3994, t3987, t3988, t3989, t3990, 
    0, 0, t7269, t7270, t7271, t7272, t7273, t7274, 
    0, 0, t7275, t7276, t7277, t7278, t7279, t7280);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7281 = (t3991 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19355 = (t3991 << 6);
        a19356 = (t3992 >> 58);
        t7282 = (((a19355)|(a19356)));
        t7283 = (t3992 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7284 = (t3993 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7285 = (((t7283)|(t7284)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b805 = ((int) 1);
        t7286 = (288230376151711744 - b805);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7287 = (((t4001)&(t7286)));
        t7288 = (((t4002)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19357 = (t7287 << 6);
        a19358 = (t7288 >> 58);
        t7289 = (((a19357)|(a19358)));
        t7290 = (t7288 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7291 = (t3995 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19359 = (t3995 << 6);
        a19360 = (t3996 >> 58);
        t7292 = (((a19359)|(a19360)));
        t7293 = (t3996 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7294 = (t3997 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7295 = (((t7293)|(t7294)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7296 = (((t7290)|(t7291)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19361 = (t3997 << 6);
        a19362 = (t3998 >> 58);
        t7297 = (((a19361)|(a19362)));
        t7298 = (t3998 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7299 = (((t7298)|(t7281)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a10357 = mu[2];
        a10358 = mu[3];
        a10359 = mu[4];
        a10360 = mu[5];
        a10361 = mu[6];
        a10362 = mu[7];
        MPMulQDD_L3_1(t4031, t4032, t4033, t4034, t4027, t4028, t4029, t4030, 
    t4023, t4024, t4025, t4026, t4019, t4020, t4021, t4022, 
    t7289, t7296, t7292, t7295, t7297, t7299, t7282, t7285, 
    0, 0, a10357, a10358, a10359, a10360, a10361, a10362);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7300 = (t4023 >> 1);
        a19363 = (t4023 << 63);
        a19364 = (t4024 >> 1);
        t7301 = (((a19363)|(a19364)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7302 = (0 - b805);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1044 = (2 - b805);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7305 = (((t4032)&(d1044)));
        /* MPBinAndD 64 */
        t7306 = (((t4033)&(t7302)));
        t7307 = (((t4034)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7308 = (t7305 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7309 = (t7306 >> 1);
        a19366 = (t7306 << 63);
        a19367 = (t7307 >> 1);
        t7310 = (((a19366)|(a19367)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7311 = (((t7308)|(t7309)));
        /* Begin of MPShiftLeft1D */
        t7312 = (t7307 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7313 = (t4027 >> 1);
        a19368 = (t4027 << 63);
        a19369 = (t4028 >> 1);
        t7314 = (((a19368)|(a19369)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7315 = (((t7312)|(t7313)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7316 = (t4028 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7317 = (t4029 >> 1);
        a19370 = (t4029 << 63);
        a19371 = (t4030 >> 1);
        t7318 = (((a19370)|(a19371)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7319 = (((t7316)|(t7317)));
        /* Begin of MPShiftLeft1D */
        t7320 = (t4030 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7321 = (((t7320)|(t7300)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a10462 = modulus[2];
        a10463 = modulus[3];
        a10464 = modulus[4];
        a10465 = modulus[5];
        a10466 = modulus[6];
        a10467 = modulus[7];
        MPMulQDD_L3_1(t4015, t4016, t4017, t4018, t4011, t4012, t4013, t4014, 
    t4007, t4008, t4009, t4010, t4003, t4004, t4005, t4006, 
    t7311, t7310, t7315, t7314, t7319, t7318, t7321, t7301, 
    0, 0, a10462, a10463, a10464, a10465, a10466, a10467);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1045 = (t3990 - t4006);
        b807 = ((t3990 < t4006));
        d1046 = (t3989 - t4005);
        d1047 = (d1046 - b807);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19373 = ((t3989 < t4005));
        a19374 = ((t3989 == t4005));
        a19375 = ((a19374) && (b807));
        b808 = ((a19373) || (a19375));
        /* Begin of MPSubDDD 64 */
        d1048 = (t3988 - t4004);
        b809 = ((t3988 < t4004));
        d1049 = (t3987 - t4003);
        d1050 = (d1049 - b809);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1051 = (d1048 - b808);
        b810 = ((d1048 < b808));
        t7322 = (d1050 - b810);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19379 = ((t3987 < t4003));
        a19380 = ((t3987 == t4003));
        a19381 = ((a19380) && (b809));
        a19382 = ((a19379) || (a19381));
        /* MPEqual 64 */
        a19383 = ((t3988 == t4004));
        a19384 = ((a19380) && (a19383));
        /* MPLessThan 64 */
        a19385 = ((a19384) && (b808));
        b811 = ((a19382) || (a19385));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1052 = (t3994 - t4010);
        b812 = ((t3994 < t4010));
        d1053 = (t3993 - t4009);
        d1054 = (d1053 - b812);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19388 = ((t3993 < t4009));
        a19389 = ((t3993 == t4009));
        a19390 = ((a19389) && (b812));
        b813 = ((a19388) || (a19390));
        /* Begin of MPSubDDD 64 */
        d1055 = (t3992 - t4008);
        b814 = ((t3992 < t4008));
        d1056 = (t3991 - t4007);
        d1057 = (d1056 - b814);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1058 = (d1055 - b813);
        b815 = ((d1055 < b813));
        t7323 = (d1057 - b815);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1059 = (d1052 - b811);
        b816 = ((d1052 < b811));
        t7324 = (d1054 - b816);
        /* MPLessThanDI 64 */
        a19395 = ((d1054 == 0));
        b817 = ((a19395) && (b816));
        /* MPSubDDI 64 */
        d1060 = (d1058 - b817);
        b818 = ((d1058 < b817));
        t7325 = (t7323 - b818);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1061 = (d1045 - a10467);
        b819 = ((d1045 < a10467));
        d1062 = (d1047 - a10466);
        d1063 = (d1062 - b819);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19399 = ((d1047 < a10466));
        a19400 = ((d1047 == a10466));
        a19401 = ((a19400) && (b819));
        b820 = ((a19399) || (a19401));
        /* Begin of MPSubDDD 64 */
        d1064 = (d1051 - a10465);
        b821 = ((d1051 < a10465));
        d1065 = (t7322 - a10464);
        d1066 = (d1065 - b821);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1067 = (d1064 - b820);
        b822 = ((d1064 < b820));
        t7326 = (d1066 - b822);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19405 = ((t7322 < a10464));
        a19406 = ((t7322 == a10464));
        a19407 = ((a19406) && (b821));
        a19408 = ((a19405) || (a19407));
        /* MPEqual 64 */
        a19409 = ((d1051 == a10465));
        a19410 = ((a19406) && (a19409));
        /* MPLessThan 64 */
        a19411 = ((a19410) && (b820));
        b823 = ((a19408) || (a19411));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1068 = (d1059 - a10463);
        b824 = ((d1059 < a10463));
        d1069 = (t7324 - a10462);
        d1070 = (d1069 - b824);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19414 = ((t7324 < a10462));
        a19415 = ((t7324 == a10462));
        a19416 = ((a19415) && (b824));
        b825 = ((a19414) || (a19416));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1071 = (d1060 - b825);
        b826 = ((d1060 < b825));
        t7327 = (t7325 - b826);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1072 = (d1068 - b823);
        b827 = ((d1068 < b823));
        t7328 = (d1070 - b827);
        /* MPLessThanDI 64 */
        a19420 = ((d1070 == 0));
        b828 = ((a19420) && (b827));
        /* MPSubDDI 64 */
        d1073 = (d1071 - b828);
        b829 = ((d1071 < b828));
        t7329 = (t7327 - b829);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19423 = ((t7325 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19424 = ((d1060 == 0));
        a19425 = ((a19423) && (a19424));
        /* MPLessThan 64 */
        a19426 = ((a19425) && (b825));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19427 = ((d1059 == a10463));
        a19428 = ((a19415) && (a19427));
        a19429 = ((a19425) && (a19428));
        /* MPLessThan 128 */
        a19430 = ((a19429) && (b823));
        i330 = ((a19426) || (a19430));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7330 = ((i330) ? (t7325) : (t7329));
        t7331 = ((i330) ? (d1060) : (d1073));
        /* MPCondD 64 */
        t7332 = ((i330) ? (t7324) : (t7328));
        t7333 = ((i330) ? (d1059) : (d1072));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7334 = ((i330) ? (t7322) : (t7326));
        t7335 = ((i330) ? (d1051) : (d1067));
        /* MPCondD 64 */
        t7336 = ((i330) ? (d1047) : (d1063));
        t7337 = ((i330) ? (d1045) : (d1061));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a19431 = (256*i19);
        a19432 = (2*threadIdx.x);
        a19433 = (a19431 + a19432);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a19434 = (2*a19327);
        a19435 = (a19434 + 1);
        /* MPAssignDD 128 */
        a19436 = (2*a19435);
        /* MPAssignDD 64 */
        a19437 = (2*a19436);
        t7338 = P1[a19437];
        a19438 = (a19437 + 1);
        t7339 = P1[a19438];
        a19439 = (a19436 + 1);
        /* MPAssignDD 64 */
        a19440 = (2*a19439);
        t7340 = P1[a19440];
        a19441 = (a19440 + 1);
        t7341 = P1[a19441];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1573 = (((uint128_t ) t7341) + ((uint128_t ) t7337));
        t7342 = ((uint64_t ) s1573);
        c850 = (s1573 >> 64);
        s1574 = (((uint128_t ) t7340) + ((uint128_t ) t7336));
        s1575 = (((uint128_t ) s1574) + ((uint128_t ) c850));
        t7343 = ((uint64_t ) s1575);
        c851 = (s1575 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1576 = (((uint128_t ) t7339) + ((uint128_t ) t7335));
        t7344 = ((uint64_t ) s1576);
        c852 = (s1576 >> 64);
        s1577 = (((uint128_t ) t7338) + ((uint128_t ) t7334));
        s1578 = (((uint128_t ) s1577) + ((uint128_t ) c852));
        t7345 = ((uint64_t ) s1578);
        c853 = (s1578 >> 64);
        /* MPPropagateCarry 64 */
        t7346 = (t7344 + c851);
        a19442 = ((t7346 == 0));
        a19443 = (t7345 + c851);
        t7347 = ((a19442) ? (a19443) : (t7345));
        a19444 = ((t7347 == 0));
        a19445 = ((a19444) && (a19442));
        a19446 = (c853 + c851);
        t7348 = ((a19445) ? (a19446) : (c853));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19450 = (2*a19434);
        a19451 = (a19450 + 1);
        /* MPAssignDD 64 */
        a19452 = (2*a19451);
        t7350 = P1[a19452];
        a19453 = (a19452 + 1);
        t7351 = P1[a19453];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1579 = (((uint128_t ) t7351) + ((uint128_t ) t7333));
        t7352 = ((uint64_t ) s1579);
        c854 = (s1579 >> 64);
        s1580 = (((uint128_t ) t7350) + ((uint128_t ) t7332));
        s1581 = (((uint128_t ) s1580) + ((uint128_t ) c854));
        t7353 = ((uint64_t ) s1581);
        c855 = (s1581 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7354 = ((uint64_t ) t7331);
        c856 = (t7331 >> 64);
        s1582 = (((uint128_t ) t7330) + ((uint128_t ) c856));
        t7355 = ((uint64_t ) s1582);
        /* MPPropagateCarry 64 */
        t7356 = (t7354 + c855);
        a19454 = ((t7356 == 0));
        a19455 = (t7355 + c855);
        t7357 = ((a19454) ? (a19455) : (t7355));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1583 = (((uint128_t ) t7352) + ((uint128_t ) t7348));
        t7360 = ((uint64_t ) s1583);
        c858 = (s1583 >> 64);
        s1584 = (((uint128_t ) t7353) + ((uint128_t ) c858));
        t7361 = ((uint64_t ) s1584);
        /* MPEqualDI 64 */
        a19462 = ((t7361 == 0));
        a19463 = ((t7360 == 0));
        a19464 = ((a19462) && (a19463));
        /* MPAddDDI 64 */
        s1585 = (((uint128_t ) t7356) + ((uint128_t ) t7348));
        t7362 = ((uint64_t ) s1585);
        c859 = (s1585 >> 64);
        s1586 = (((uint128_t ) t7357) + ((uint128_t ) c859));
        t7363 = ((uint64_t ) s1586);
        /* MPCondD 64 */
        t7364 = ((a19464) ? (t7363) : (t7357));
        t7365 = ((a19464) ? (t7362) : (t7356));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19465 = ((0 < t7364));
        a19466 = ((0 == t7364));
        a19467 = ((0 < t7365));
        a19468 = ((a19466) && (a19467));
        a19469 = ((a19465) || (a19468));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19470 = ((0 == t7365));
        a19471 = ((a19466) && (a19470));
        /* MPLessThan 64 */
        a19472 = ((a10462 < t7361));
        a19473 = ((a10462 == t7361));
        a19474 = ((a10463 < t7360));
        a19475 = ((a19473) && (a19474));
        a19476 = ((a19472) || (a19475));
        a19477 = ((a19471) && (a19476));
        a19478 = ((a19469) || (a19477));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19479 = ((a10463 == t7360));
        a19480 = ((a19473) && (a19479));
        a19481 = ((a19471) && (a19480));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19482 = ((a10464 < t7347));
        a19483 = ((a10464 == t7347));
        a19484 = ((a10465 < t7346));
        a19485 = ((a19483) && (a19484));
        a19486 = ((a19482) || (a19485));
        /* MPEqual 64 */
        a19487 = ((a10465 == t7346));
        a19488 = ((a19483) && (a19487));
        /* MPLessThan 64 */
        a19489 = ((a10466 < t7343));
        a19490 = ((a10466 == t7343));
        a19491 = ((a10467 < t7342));
        a19492 = ((a19490) && (a19491));
        a19493 = ((a19489) || (a19492));
        a19494 = ((a19488) && (a19493));
        a19495 = ((a19486) || (a19494));
        a19496 = ((a19481) && (a19495));
        i331 = ((a19478) || (a19496));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1074 = (t7342 - a10467);
        b830 = ((t7342 < a10467));
        d1075 = (t7343 - a10466);
        d1076 = (d1075 - b830);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19498 = ((t7343 < a10466));
        a19499 = ((t7343 == a10466));
        a19500 = ((a19499) && (b830));
        b831 = ((a19498) || (a19500));
        /* Begin of MPSubDDD 64 */
        d1077 = (t7346 - a10465);
        b832 = ((t7346 < a10465));
        d1078 = (t7347 - a10464);
        d1079 = (d1078 - b832);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1080 = (d1077 - b831);
        b833 = ((d1077 < b831));
        t7366 = (d1079 - b833);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19504 = ((t7347 < a10464));
        a19505 = ((t7347 == a10464));
        a19506 = ((a19505) && (b832));
        a19507 = ((a19504) || (a19506));
        /* MPEqual 64 */
        a19508 = ((t7346 == a10465));
        a19509 = ((a19505) && (a19508));
        /* MPLessThan 64 */
        a19510 = ((a19509) && (b831));
        b834 = ((a19507) || (a19510));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1081 = (t7360 - a10463);
        b835 = ((t7360 < a10463));
        d1082 = (t7361 - a10462);
        d1083 = (d1082 - b835);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1084 = (d1081 - b834);
        b836 = ((d1081 < b834));
        t7367 = (d1083 - b836);
        /* End of MPSubDDD 256 */
        a19514 = (2*a19433);
        /* MPCondD 128 */
        a19515 = (2*a19514);
        a19516 = (a19515 + 1);
        /* MPCondD 64 */
        a19517 = (2*a19516);
        P2[a19517] = ((i331) ? (t7367) : (t7361));
        a19518 = (a19517 + 1);
        P2[a19518] = ((i331) ? (d1084) : (t7360));
        a19519 = (a19514 + 1);
        /* MPCondD 128 */
        a19520 = (2*a19519);
        /* MPCondD 64 */
        a19521 = (2*a19520);
        P2[a19521] = ((i331) ? (t7366) : (t7347));
        a19522 = (a19521 + 1);
        P2[a19522] = ((i331) ? (d1080) : (t7346));
        a19523 = (a19520 + 1);
        /* MPCondD 64 */
        a19524 = (2*a19523);
        P2[a19524] = ((i331) ? (d1076) : (t7343));
        a19525 = (a19524 + 1);
        P2[a19525] = ((i331) ? (d1074) : (t7342));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        b837 = (a19432 + a19431);
        a19526 = (b837 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1085 = (t7341 - t7337);
        b838 = ((t7341 < t7337));
        d1086 = (t7340 - t7336);
        d1087 = (d1086 - b838);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19528 = ((t7340 < t7336));
        a19529 = ((t7340 == t7336));
        a19530 = ((a19529) && (b838));
        b839 = ((a19528) || (a19530));
        /* Begin of MPSubDDD 64 */
        d1088 = (t7339 - t7335);
        b840 = ((t7339 < t7335));
        d1089 = (t7338 - t7334);
        d1090 = (d1089 - b840);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1091 = (d1088 - b839);
        b841 = ((d1088 < b839));
        t7368 = (d1090 - b841);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19534 = ((t7338 < t7334));
        a19535 = ((t7338 == t7334));
        a19536 = ((a19535) && (b840));
        a19537 = ((a19534) || (a19536));
        /* MPEqual 64 */
        a19538 = ((t7339 == t7335));
        a19539 = ((a19535) && (a19538));
        /* MPLessThan 64 */
        a19540 = ((a19539) && (b839));
        b842 = ((a19537) || (a19540));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1092 = (t7351 - t7333);
        b843 = ((t7351 < t7333));
        d1093 = (t7350 - t7332);
        d1094 = (d1093 - b843);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1095 = (d1092 - b842);
        b844 = ((d1092 < b842));
        t7369 = (d1094 - b844);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1587 = (((uint128_t ) d1085) + ((uint128_t ) a10467));
        t7370 = ((uint64_t ) s1587);
        c860 = (s1587 >> 64);
        s1588 = (((uint128_t ) d1087) + ((uint128_t ) a10466));
        s1589 = (((uint128_t ) s1588) + ((uint128_t ) c860));
        t7371 = ((uint64_t ) s1589);
        c861 = (s1589 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1590 = (((uint128_t ) d1091) + ((uint128_t ) a10465));
        t7372 = ((uint64_t ) s1590);
        c862 = (s1590 >> 64);
        s1591 = (((uint128_t ) t7368) + ((uint128_t ) a10464));
        s1592 = (((uint128_t ) s1591) + ((uint128_t ) c862));
        t7373 = ((uint64_t ) s1592);
        c863 = (s1592 >> 64);
        /* MPPropagateCarry 64 */
        t7374 = (t7372 + c861);
        a19544 = ((t7374 == 0));
        a19545 = (t7373 + c861);
        t7375 = ((a19544) ? (a19545) : (t7373));
        a19546 = ((t7375 == 0));
        a19547 = ((a19546) && (a19544));
        a19548 = (c863 + c861);
        t7376 = ((a19547) ? (a19548) : (c863));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1593 = (((uint128_t ) d1095) + ((uint128_t ) a10463));
        t7378 = ((uint64_t ) s1593);
        c864 = (s1593 >> 64);
        s1594 = (((uint128_t ) t7369) + ((uint128_t ) a10462));
        s1595 = (((uint128_t ) s1594) + ((uint128_t ) c864));
        t7379 = ((uint64_t ) s1595);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1596 = (((uint128_t ) t7378) + ((uint128_t ) t7376));
        t7380 = ((uint64_t ) s1596);
        c866 = (s1596 >> 64);
        s1597 = (((uint128_t ) t7379) + ((uint128_t ) c866));
        t7381 = ((uint64_t ) s1597);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19552 = ((0 < t7330));
        a19553 = ((0 == t7330));
        a19554 = ((0 < t7331));
        a19555 = ((a19553) && (a19554));
        a19556 = ((a19552) || (a19555));
        /* MPEqual 64 */
        a19557 = ((0 == t7331));
        a19558 = ((a19553) && (a19557));
        /* MPLessThan 64 */
        a19559 = ((t7350 < t7332));
        a19560 = ((t7350 == t7332));
        a19561 = ((a19560) && (b843));
        a19562 = ((a19559) || (a19561));
        a19563 = ((a19558) && (a19562));
        a19564 = ((a19556) || (a19563));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19565 = ((t7351 == t7333));
        a19566 = ((a19560) && (a19565));
        a19567 = ((a19558) && (a19566));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a19568 = ((a19567) && (b842));
        i332 = ((a19564) || (a19568));
        a19569 = (2*a19526);
        /* MPCondD 128 */
        a19570 = (2*a19569);
        a19571 = (a19570 + 1);
        /* MPCondD 64 */
        a19572 = (2*a19571);
        P2[a19572] = ((i332) ? (t7381) : (t7369));
        a19573 = (a19572 + 1);
        P2[a19573] = ((i332) ? (t7380) : (d1095));
        a19574 = (a19569 + 1);
        /* MPCondD 128 */
        a19575 = (2*a19574);
        /* MPCondD 64 */
        a19576 = (2*a19575);
        P2[a19576] = ((i332) ? (t7375) : (t7368));
        a19577 = (a19576 + 1);
        P2[a19577] = ((i332) ? (t7374) : (d1091));
        a19578 = (a19575 + 1);
        /* MPCondD 64 */
        a19579 = (2*a19578);
        P2[a19579] = ((i332) ? (t7371) : (d1087));
        a19580 = (a19579 + 1);
        P2[a19580] = ((i332) ? (t7370) : (d1085));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code2(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a19581, a19582, a19583, a19584, a19585, a19586, a19587, a19588, 
            a19589, a19590, a19591, a19592, a19593, a19594, a19595, a19596, 
            a19597, a19598, a19599, a19600, a19601, a19602, a19603, a19604, 
            a19605, a19606, a19607, a19608, a19609, a19628, a19629, a19630, 
            a19634, a19635, a19636, a19637, a19638, a19639, a19640, a19643, 
            a19644, a19645, a19650, a19654, a19655, a19656, a19660, a19661, 
            a19662, a19663, a19664, a19665, a19666, a19669, a19670, a19671, 
            a19675, a19678, a19679, a19680, a19681, a19682, a19683, a19684, 
            a19685, a19686, a19687, a19688, a19689, a19690, a19691, a19692, 
            a19693, a19694, a19695, a19696, a19697, a19699, a19700, a19705, 
            a19706, a19707, a19708, a19709, a19717, a19718, a19719, a19720, 
            a19721, a19722, a19723, a19724, a19725, a19726, a19727, a19728, 
            a19729, a19730, a19731, a19732, a19733, a19734, a19735, a19736, 
            a19737, a19738, a19739, a19740, a19741, a19742, a19743, a19744, 
            a19745, a19746, a19747, a19748, a19749, a19750, a19751, a19753, 
            a19754, a19755, a19759, a19760, a19761, a19762, a19763, a19764, 
            a19765, a19769, a19770, a19771, a19772, a19773, a19774, a19775, 
            a19776, a19777, a19778, a19779, a19780, a19781, a19783, a19784, 
            a19785, a19789, a19790, a19791, a19792, a19793, a19794, a19795, 
            a19799, a19801, a19802, a19807, a19808, a19809, a19810, a19811, 
            a19812, a19813, a19814, a19815, a19816, a19817, a19818, a19819, 
            a19820, a19821, a19822, a19823, a19824, a19825, a19826, a19827, 
            a19828, a19829, a19830, a19831, a19832, a19833, a19834, a19835, 
            b845, b846, b848, b849, b850, b851, b852, b853, 
            b854, b855, b856, b857, b858, b859, b860, b861, 
            b862, b863, b864, b865, b866, b867, b868, b869, 
            b870, b871, b872, b873, b874, b875, b876, b877, 
            b878, b879, b880, b881, b882, b883, b884, b885, 
            c867, c868, c869, c870, c871, c872, c873, c875, 
            c876, c877, c878, c879, c880, c881, c883, i333, 
            i334, i335;
    uint64_t a11268, a11269, a11270, a11271, a11272, a11273, a11373, a11374, 
            a11375, a11376, a11377, a11378, a19610, a19611, a19612, a19613, 
            a19614, a19615, a19616, a19617, a19618, a19619, a19621, a19622, 
            a19623, a19624, a19625, a19626, a19698, a19701, a19710, a19800, 
            a19803, d1096, d1097, d1098, d1099, d1100, d1101, d1102, 
            d1103, d1104, d1105, d1106, d1107, d1108, d1109, d1110, 
            d1111, d1112, d1113, d1114, d1115, d1116, d1117, d1118, 
            d1119, d1120, d1121, d1122, d1123, d1124, d1125, d1126, 
            d1127, d1128, d1129, d1130, d1131, d1132, d1133, d1134, 
            d1135, d1136, d1137, d1138, d1139, d1140, d1141, d1142, 
            d1143, d1144, d1145, d1146, d1147, t4051, t4052, t4053, 
            t4054, t4055, t4056, t4057, t4058, t4059, t4060, t4061, 
            t4062, t4063, t4064, t4065, t4066, t4067, t4068, t4069, 
            t4070, t4071, t4072, t4073, t4074, t4075, t4076, t4077, 
            t4078, t4079, t4080, t4081, t4082, t4083, t4084, t4085, 
            t4086, t4087, t4088, t4089, t4090, t4091, t4092, t4093, 
            t4094, t4095, t4096, t4097, t4098, t7382, t7383, t7384, 
            t7385, t7386, t7387, t7388, t7389, t7390, t7391, t7392, 
            t7393, t7394, t7395, t7396, t7397, t7398, t7399, t7400, 
            t7401, t7402, t7403, t7404, t7405, t7406, t7407, t7408, 
            t7409, t7410, t7411, t7412, t7413, t7414, t7415, t7418, 
            t7419, t7420, t7421, t7422, t7423, t7424, t7425, t7426, 
            t7427, t7428, t7429, t7430, t7431, t7432, t7433, t7434, 
            t7435, t7436, t7437, t7438, t7439, t7440, t7441, t7442, 
            t7443, t7444, t7445, t7446, t7447, t7448, t7449, t7450, 
            t7451, t7452, t7453, t7454, t7455, t7456, t7457, t7458, 
            t7459, t7460, t7461, t7463, t7464, t7465, t7466, t7467, 
            t7468, t7469, t7470, t7473, t7474, t7475, t7476, t7477, 
            t7478, t7479, t7480, t7481, t7482, t7483, t7484, t7485, 
            t7486, t7487, t7488, t7489, t7491, t7492, t7493, t7494;
    uint128_t s1598, s1599, s1600, s1601, s1602, s1603, s1604, s1605, 
            s1606, s1607, s1608, s1609, s1610, s1611, s1612, s1613, 
            s1614, s1615, s1616, s1617, s1618, s1619, s1620, s1621, 
            s1622;
    for(int i17 = 0; i17 <= 3; i17++) {
        a19581 = (128*i17);
        a19582 = (a19581 + threadIdx.x);
        b845 = (threadIdx.x + a19581);
        a19583 = (b845 + 512);
        a19584 = (a19583 % 4);
        a19585 = (4 + a19584);
        /* Begin of MPModMul 256 */
        a19586 = (2*a19585);
        a19587 = (a19586 + 1);
        a19588 = (2*a19583);
        a19589 = (a19588 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19590 = (2*a19586);
        a19591 = (a19590 + 1);
        /* MPAssignDD 64 */
        a19592 = (2*a19591);
        t7382 = twiddles[a19592];
        a19593 = (a19592 + 1);
        t7383 = twiddles[a19593];
        /* MPAssignDD 128 */
        a19594 = (2*a19587);
        /* MPAssignDD 64 */
        a19595 = (2*a19594);
        t7384 = twiddles[a19595];
        a19596 = (a19595 + 1);
        t7385 = twiddles[a19596];
        a19597 = (a19594 + 1);
        /* MPAssignDD 64 */
        a19598 = (2*a19597);
        t7386 = twiddles[a19598];
        a19599 = (a19598 + 1);
        t7387 = twiddles[a19599];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19600 = (2*a19588);
        a19601 = (a19600 + 1);
        /* MPAssignDD 64 */
        a19602 = (2*a19601);
        t7388 = P2[a19602];
        a19603 = (a19602 + 1);
        t7389 = P2[a19603];
        /* MPAssignDD 128 */
        a19604 = (2*a19589);
        /* MPAssignDD 64 */
        a19605 = (2*a19604);
        t7390 = P2[a19605];
        a19606 = (a19605 + 1);
        t7391 = P2[a19606];
        a19607 = (a19604 + 1);
        /* MPAssignDD 64 */
        a19608 = (2*a19607);
        t7392 = P2[a19608];
        a19609 = (a19608 + 1);
        t7393 = P2[a19609];
        MPMulQDD_L3_2(t4063, t4064, t4065, t4066, t4059, t4060, t4061, t4062, 
    t4055, t4056, t4057, t4058, t4051, t4052, t4053, t4054, 
    0, 0, t7382, t7383, t7384, t7385, t7386, t7387, 
    0, 0, t7388, t7389, t7390, t7391, t7392, t7393);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7394 = (t4055 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19610 = (t4055 << 6);
        a19611 = (t4056 >> 58);
        t7395 = (((a19610)|(a19611)));
        t7396 = (t4056 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7397 = (t4057 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7398 = (((t7396)|(t7397)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b846 = ((int) 1);
        t7399 = (288230376151711744 - b846);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7400 = (((t4065)&(t7399)));
        t7401 = (((t4066)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19612 = (t7400 << 6);
        a19613 = (t7401 >> 58);
        t7402 = (((a19612)|(a19613)));
        t7403 = (t7401 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7404 = (t4059 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19614 = (t4059 << 6);
        a19615 = (t4060 >> 58);
        t7405 = (((a19614)|(a19615)));
        t7406 = (t4060 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7407 = (t4061 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7408 = (((t7406)|(t7407)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7409 = (((t7403)|(t7404)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19616 = (t4061 << 6);
        a19617 = (t4062 >> 58);
        t7410 = (((a19616)|(a19617)));
        t7411 = (t4062 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7412 = (((t7411)|(t7394)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a11268 = mu[2];
        a11269 = mu[3];
        a11270 = mu[4];
        a11271 = mu[5];
        a11272 = mu[6];
        a11273 = mu[7];
        MPMulQDD_L3_1(t4095, t4096, t4097, t4098, t4091, t4092, t4093, t4094, 
    t4087, t4088, t4089, t4090, t4083, t4084, t4085, t4086, 
    t7402, t7409, t7405, t7408, t7410, t7412, t7395, t7398, 
    0, 0, a11268, a11269, a11270, a11271, a11272, a11273);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7413 = (t4087 >> 1);
        a19618 = (t4087 << 63);
        a19619 = (t4088 >> 1);
        t7414 = (((a19618)|(a19619)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7415 = (0 - b846);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1096 = (2 - b846);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7418 = (((t4096)&(d1096)));
        /* MPBinAndD 64 */
        t7419 = (((t4097)&(t7415)));
        t7420 = (((t4098)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7421 = (t7418 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7422 = (t7419 >> 1);
        a19621 = (t7419 << 63);
        a19622 = (t7420 >> 1);
        t7423 = (((a19621)|(a19622)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7424 = (((t7421)|(t7422)));
        /* Begin of MPShiftLeft1D */
        t7425 = (t7420 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7426 = (t4091 >> 1);
        a19623 = (t4091 << 63);
        a19624 = (t4092 >> 1);
        t7427 = (((a19623)|(a19624)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7428 = (((t7425)|(t7426)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7429 = (t4092 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7430 = (t4093 >> 1);
        a19625 = (t4093 << 63);
        a19626 = (t4094 >> 1);
        t7431 = (((a19625)|(a19626)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7432 = (((t7429)|(t7430)));
        /* Begin of MPShiftLeft1D */
        t7433 = (t4094 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7434 = (((t7433)|(t7413)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a11373 = modulus[2];
        a11374 = modulus[3];
        a11375 = modulus[4];
        a11376 = modulus[5];
        a11377 = modulus[6];
        a11378 = modulus[7];
        MPMulQDD_L3_1(t4079, t4080, t4081, t4082, t4075, t4076, t4077, t4078, 
    t4071, t4072, t4073, t4074, t4067, t4068, t4069, t4070, 
    t7424, t7423, t7428, t7427, t7432, t7431, t7434, t7414, 
    0, 0, a11373, a11374, a11375, a11376, a11377, a11378);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1097 = (t4054 - t4070);
        b848 = ((t4054 < t4070));
        d1098 = (t4053 - t4069);
        d1099 = (d1098 - b848);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19628 = ((t4053 < t4069));
        a19629 = ((t4053 == t4069));
        a19630 = ((a19629) && (b848));
        b849 = ((a19628) || (a19630));
        /* Begin of MPSubDDD 64 */
        d1100 = (t4052 - t4068);
        b850 = ((t4052 < t4068));
        d1101 = (t4051 - t4067);
        d1102 = (d1101 - b850);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1103 = (d1100 - b849);
        b851 = ((d1100 < b849));
        t7435 = (d1102 - b851);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19634 = ((t4051 < t4067));
        a19635 = ((t4051 == t4067));
        a19636 = ((a19635) && (b850));
        a19637 = ((a19634) || (a19636));
        /* MPEqual 64 */
        a19638 = ((t4052 == t4068));
        a19639 = ((a19635) && (a19638));
        /* MPLessThan 64 */
        a19640 = ((a19639) && (b849));
        b852 = ((a19637) || (a19640));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1104 = (t4058 - t4074);
        b853 = ((t4058 < t4074));
        d1105 = (t4057 - t4073);
        d1106 = (d1105 - b853);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19643 = ((t4057 < t4073));
        a19644 = ((t4057 == t4073));
        a19645 = ((a19644) && (b853));
        b854 = ((a19643) || (a19645));
        /* Begin of MPSubDDD 64 */
        d1107 = (t4056 - t4072);
        b855 = ((t4056 < t4072));
        d1108 = (t4055 - t4071);
        d1109 = (d1108 - b855);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1110 = (d1107 - b854);
        b856 = ((d1107 < b854));
        t7436 = (d1109 - b856);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1111 = (d1104 - b852);
        b857 = ((d1104 < b852));
        t7437 = (d1106 - b857);
        /* MPLessThanDI 64 */
        a19650 = ((d1106 == 0));
        b858 = ((a19650) && (b857));
        /* MPSubDDI 64 */
        d1112 = (d1110 - b858);
        b859 = ((d1110 < b858));
        t7438 = (t7436 - b859);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1113 = (d1097 - a11378);
        b860 = ((d1097 < a11378));
        d1114 = (d1099 - a11377);
        d1115 = (d1114 - b860);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19654 = ((d1099 < a11377));
        a19655 = ((d1099 == a11377));
        a19656 = ((a19655) && (b860));
        b861 = ((a19654) || (a19656));
        /* Begin of MPSubDDD 64 */
        d1116 = (d1103 - a11376);
        b862 = ((d1103 < a11376));
        d1117 = (t7435 - a11375);
        d1118 = (d1117 - b862);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1119 = (d1116 - b861);
        b863 = ((d1116 < b861));
        t7439 = (d1118 - b863);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19660 = ((t7435 < a11375));
        a19661 = ((t7435 == a11375));
        a19662 = ((a19661) && (b862));
        a19663 = ((a19660) || (a19662));
        /* MPEqual 64 */
        a19664 = ((d1103 == a11376));
        a19665 = ((a19661) && (a19664));
        /* MPLessThan 64 */
        a19666 = ((a19665) && (b861));
        b864 = ((a19663) || (a19666));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1120 = (d1111 - a11374);
        b865 = ((d1111 < a11374));
        d1121 = (t7437 - a11373);
        d1122 = (d1121 - b865);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19669 = ((t7437 < a11373));
        a19670 = ((t7437 == a11373));
        a19671 = ((a19670) && (b865));
        b866 = ((a19669) || (a19671));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1123 = (d1112 - b866);
        b867 = ((d1112 < b866));
        t7440 = (t7438 - b867);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1124 = (d1120 - b864);
        b868 = ((d1120 < b864));
        t7441 = (d1122 - b868);
        /* MPLessThanDI 64 */
        a19675 = ((d1122 == 0));
        b869 = ((a19675) && (b868));
        /* MPSubDDI 64 */
        d1125 = (d1123 - b869);
        b870 = ((d1123 < b869));
        t7442 = (t7440 - b870);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19678 = ((t7438 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19679 = ((d1112 == 0));
        a19680 = ((a19678) && (a19679));
        /* MPLessThan 64 */
        a19681 = ((a19680) && (b866));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19682 = ((d1111 == a11374));
        a19683 = ((a19670) && (a19682));
        a19684 = ((a19680) && (a19683));
        /* MPLessThan 128 */
        a19685 = ((a19684) && (b864));
        i333 = ((a19681) || (a19685));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7443 = ((i333) ? (t7438) : (t7442));
        t7444 = ((i333) ? (d1112) : (d1125));
        /* MPCondD 64 */
        t7445 = ((i333) ? (t7437) : (t7441));
        t7446 = ((i333) ? (d1111) : (d1124));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7447 = ((i333) ? (t7435) : (t7439));
        t7448 = ((i333) ? (d1103) : (d1119));
        /* MPCondD 64 */
        t7449 = ((i333) ? (d1099) : (d1115));
        t7450 = ((i333) ? (d1097) : (d1113));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a19686 = (256*i17);
        a19687 = (2*threadIdx.x);
        a19688 = (a19686 + a19687);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a19689 = (2*a19582);
        a19690 = (a19689 + 1);
        /* MPAssignDD 128 */
        a19691 = (2*a19690);
        /* MPAssignDD 64 */
        a19692 = (2*a19691);
        t7451 = P2[a19692];
        a19693 = (a19692 + 1);
        t7452 = P2[a19693];
        a19694 = (a19691 + 1);
        /* MPAssignDD 64 */
        a19695 = (2*a19694);
        t7453 = P2[a19695];
        a19696 = (a19695 + 1);
        t7454 = P2[a19696];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1598 = (((uint128_t ) t7454) + ((uint128_t ) t7450));
        t7455 = ((uint64_t ) s1598);
        c867 = (s1598 >> 64);
        s1599 = (((uint128_t ) t7453) + ((uint128_t ) t7449));
        s1600 = (((uint128_t ) s1599) + ((uint128_t ) c867));
        t7456 = ((uint64_t ) s1600);
        c868 = (s1600 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1601 = (((uint128_t ) t7452) + ((uint128_t ) t7448));
        t7457 = ((uint64_t ) s1601);
        c869 = (s1601 >> 64);
        s1602 = (((uint128_t ) t7451) + ((uint128_t ) t7447));
        s1603 = (((uint128_t ) s1602) + ((uint128_t ) c869));
        t7458 = ((uint64_t ) s1603);
        c870 = (s1603 >> 64);
        /* MPPropagateCarry 64 */
        t7459 = (t7457 + c868);
        a19697 = ((t7459 == 0));
        a19698 = (t7458 + c868);
        t7460 = ((a19697) ? (a19698) : (t7458));
        a19699 = ((t7460 == 0));
        a19700 = ((a19699) && (a19697));
        a19701 = (c870 + c868);
        t7461 = ((a19700) ? (a19701) : (c870));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19705 = (2*a19689);
        a19706 = (a19705 + 1);
        /* MPAssignDD 64 */
        a19707 = (2*a19706);
        t7463 = P2[a19707];
        a19708 = (a19707 + 1);
        t7464 = P2[a19708];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1604 = (((uint128_t ) t7464) + ((uint128_t ) t7446));
        t7465 = ((uint64_t ) s1604);
        c871 = (s1604 >> 64);
        s1605 = (((uint128_t ) t7463) + ((uint128_t ) t7445));
        s1606 = (((uint128_t ) s1605) + ((uint128_t ) c871));
        t7466 = ((uint64_t ) s1606);
        c872 = (s1606 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7467 = ((uint64_t ) t7444);
        c873 = (t7444 >> 64);
        s1607 = (((uint128_t ) t7443) + ((uint128_t ) c873));
        t7468 = ((uint64_t ) s1607);
        /* MPPropagateCarry 64 */
        t7469 = (t7467 + c872);
        a19709 = ((t7469 == 0));
        a19710 = (t7468 + c872);
        t7470 = ((a19709) ? (a19710) : (t7468));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1608 = (((uint128_t ) t7465) + ((uint128_t ) t7461));
        t7473 = ((uint64_t ) s1608);
        c875 = (s1608 >> 64);
        s1609 = (((uint128_t ) t7466) + ((uint128_t ) c875));
        t7474 = ((uint64_t ) s1609);
        /* MPEqualDI 64 */
        a19717 = ((t7474 == 0));
        a19718 = ((t7473 == 0));
        a19719 = ((a19717) && (a19718));
        /* MPAddDDI 64 */
        s1610 = (((uint128_t ) t7469) + ((uint128_t ) t7461));
        t7475 = ((uint64_t ) s1610);
        c876 = (s1610 >> 64);
        s1611 = (((uint128_t ) t7470) + ((uint128_t ) c876));
        t7476 = ((uint64_t ) s1611);
        /* MPCondD 64 */
        t7477 = ((a19719) ? (t7476) : (t7470));
        t7478 = ((a19719) ? (t7475) : (t7469));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19720 = ((0 < t7477));
        a19721 = ((0 == t7477));
        a19722 = ((0 < t7478));
        a19723 = ((a19721) && (a19722));
        a19724 = ((a19720) || (a19723));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19725 = ((0 == t7478));
        a19726 = ((a19721) && (a19725));
        /* MPLessThan 64 */
        a19727 = ((a11373 < t7474));
        a19728 = ((a11373 == t7474));
        a19729 = ((a11374 < t7473));
        a19730 = ((a19728) && (a19729));
        a19731 = ((a19727) || (a19730));
        a19732 = ((a19726) && (a19731));
        a19733 = ((a19724) || (a19732));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19734 = ((a11374 == t7473));
        a19735 = ((a19728) && (a19734));
        a19736 = ((a19726) && (a19735));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19737 = ((a11375 < t7460));
        a19738 = ((a11375 == t7460));
        a19739 = ((a11376 < t7459));
        a19740 = ((a19738) && (a19739));
        a19741 = ((a19737) || (a19740));
        /* MPEqual 64 */
        a19742 = ((a11376 == t7459));
        a19743 = ((a19738) && (a19742));
        /* MPLessThan 64 */
        a19744 = ((a11377 < t7456));
        a19745 = ((a11377 == t7456));
        a19746 = ((a11378 < t7455));
        a19747 = ((a19745) && (a19746));
        a19748 = ((a19744) || (a19747));
        a19749 = ((a19743) && (a19748));
        a19750 = ((a19741) || (a19749));
        a19751 = ((a19736) && (a19750));
        i334 = ((a19733) || (a19751));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1126 = (t7455 - a11378);
        b871 = ((t7455 < a11378));
        d1127 = (t7456 - a11377);
        d1128 = (d1127 - b871);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19753 = ((t7456 < a11377));
        a19754 = ((t7456 == a11377));
        a19755 = ((a19754) && (b871));
        b872 = ((a19753) || (a19755));
        /* Begin of MPSubDDD 64 */
        d1129 = (t7459 - a11376);
        b873 = ((t7459 < a11376));
        d1130 = (t7460 - a11375);
        d1131 = (d1130 - b873);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1132 = (d1129 - b872);
        b874 = ((d1129 < b872));
        t7479 = (d1131 - b874);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19759 = ((t7460 < a11375));
        a19760 = ((t7460 == a11375));
        a19761 = ((a19760) && (b873));
        a19762 = ((a19759) || (a19761));
        /* MPEqual 64 */
        a19763 = ((t7459 == a11376));
        a19764 = ((a19760) && (a19763));
        /* MPLessThan 64 */
        a19765 = ((a19764) && (b872));
        b875 = ((a19762) || (a19765));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1133 = (t7473 - a11374);
        b876 = ((t7473 < a11374));
        d1134 = (t7474 - a11373);
        d1135 = (d1134 - b876);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1136 = (d1133 - b875);
        b877 = ((d1133 < b875));
        t7480 = (d1135 - b877);
        /* End of MPSubDDD 256 */
        a19769 = (2*a19688);
        /* MPCondD 128 */
        a19770 = (2*a19769);
        a19771 = (a19770 + 1);
        /* MPCondD 64 */
        a19772 = (2*a19771);
        P1[a19772] = ((i334) ? (t7480) : (t7474));
        a19773 = (a19772 + 1);
        P1[a19773] = ((i334) ? (d1136) : (t7473));
        a19774 = (a19769 + 1);
        /* MPCondD 128 */
        a19775 = (2*a19774);
        /* MPCondD 64 */
        a19776 = (2*a19775);
        P1[a19776] = ((i334) ? (t7479) : (t7460));
        a19777 = (a19776 + 1);
        P1[a19777] = ((i334) ? (d1132) : (t7459));
        a19778 = (a19775 + 1);
        /* MPCondD 64 */
        a19779 = (2*a19778);
        P1[a19779] = ((i334) ? (d1128) : (t7456));
        a19780 = (a19779 + 1);
        P1[a19780] = ((i334) ? (d1126) : (t7455));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        b878 = (a19687 + a19686);
        a19781 = (b878 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1137 = (t7454 - t7450);
        b879 = ((t7454 < t7450));
        d1138 = (t7453 - t7449);
        d1139 = (d1138 - b879);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19783 = ((t7453 < t7449));
        a19784 = ((t7453 == t7449));
        a19785 = ((a19784) && (b879));
        b880 = ((a19783) || (a19785));
        /* Begin of MPSubDDD 64 */
        d1140 = (t7452 - t7448);
        b881 = ((t7452 < t7448));
        d1141 = (t7451 - t7447);
        d1142 = (d1141 - b881);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1143 = (d1140 - b880);
        b882 = ((d1140 < b880));
        t7481 = (d1142 - b882);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19789 = ((t7451 < t7447));
        a19790 = ((t7451 == t7447));
        a19791 = ((a19790) && (b881));
        a19792 = ((a19789) || (a19791));
        /* MPEqual 64 */
        a19793 = ((t7452 == t7448));
        a19794 = ((a19790) && (a19793));
        /* MPLessThan 64 */
        a19795 = ((a19794) && (b880));
        b883 = ((a19792) || (a19795));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1144 = (t7464 - t7446);
        b884 = ((t7464 < t7446));
        d1145 = (t7463 - t7445);
        d1146 = (d1145 - b884);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1147 = (d1144 - b883);
        b885 = ((d1144 < b883));
        t7482 = (d1146 - b885);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1612 = (((uint128_t ) d1137) + ((uint128_t ) a11378));
        t7483 = ((uint64_t ) s1612);
        c877 = (s1612 >> 64);
        s1613 = (((uint128_t ) d1139) + ((uint128_t ) a11377));
        s1614 = (((uint128_t ) s1613) + ((uint128_t ) c877));
        t7484 = ((uint64_t ) s1614);
        c878 = (s1614 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1615 = (((uint128_t ) d1143) + ((uint128_t ) a11376));
        t7485 = ((uint64_t ) s1615);
        c879 = (s1615 >> 64);
        s1616 = (((uint128_t ) t7481) + ((uint128_t ) a11375));
        s1617 = (((uint128_t ) s1616) + ((uint128_t ) c879));
        t7486 = ((uint64_t ) s1617);
        c880 = (s1617 >> 64);
        /* MPPropagateCarry 64 */
        t7487 = (t7485 + c878);
        a19799 = ((t7487 == 0));
        a19800 = (t7486 + c878);
        t7488 = ((a19799) ? (a19800) : (t7486));
        a19801 = ((t7488 == 0));
        a19802 = ((a19801) && (a19799));
        a19803 = (c880 + c878);
        t7489 = ((a19802) ? (a19803) : (c880));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1618 = (((uint128_t ) d1147) + ((uint128_t ) a11374));
        t7491 = ((uint64_t ) s1618);
        c881 = (s1618 >> 64);
        s1619 = (((uint128_t ) t7482) + ((uint128_t ) a11373));
        s1620 = (((uint128_t ) s1619) + ((uint128_t ) c881));
        t7492 = ((uint64_t ) s1620);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1621 = (((uint128_t ) t7491) + ((uint128_t ) t7489));
        t7493 = ((uint64_t ) s1621);
        c883 = (s1621 >> 64);
        s1622 = (((uint128_t ) t7492) + ((uint128_t ) c883));
        t7494 = ((uint64_t ) s1622);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19807 = ((0 < t7443));
        a19808 = ((0 == t7443));
        a19809 = ((0 < t7444));
        a19810 = ((a19808) && (a19809));
        a19811 = ((a19807) || (a19810));
        /* MPEqual 64 */
        a19812 = ((0 == t7444));
        a19813 = ((a19808) && (a19812));
        /* MPLessThan 64 */
        a19814 = ((t7463 < t7445));
        a19815 = ((t7463 == t7445));
        a19816 = ((a19815) && (b884));
        a19817 = ((a19814) || (a19816));
        a19818 = ((a19813) && (a19817));
        a19819 = ((a19811) || (a19818));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19820 = ((t7464 == t7446));
        a19821 = ((a19815) && (a19820));
        a19822 = ((a19813) && (a19821));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a19823 = ((a19822) && (b883));
        i335 = ((a19819) || (a19823));
        a19824 = (2*a19781);
        /* MPCondD 128 */
        a19825 = (2*a19824);
        a19826 = (a19825 + 1);
        /* MPCondD 64 */
        a19827 = (2*a19826);
        P1[a19827] = ((i335) ? (t7494) : (t7482));
        a19828 = (a19827 + 1);
        P1[a19828] = ((i335) ? (t7493) : (d1147));
        a19829 = (a19824 + 1);
        /* MPCondD 128 */
        a19830 = (2*a19829);
        /* MPCondD 64 */
        a19831 = (2*a19830);
        P1[a19831] = ((i335) ? (t7488) : (t7481));
        a19832 = (a19831 + 1);
        P1[a19832] = ((i335) ? (t7487) : (d1143));
        a19833 = (a19830 + 1);
        /* MPCondD 64 */
        a19834 = (2*a19833);
        P1[a19834] = ((i335) ? (t7484) : (d1139));
        a19835 = (a19834 + 1);
        P1[a19835] = ((i335) ? (t7483) : (d1137));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code3(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a19836, a19837, a19838, a19839, a19840, a19841, a19842, a19843, 
            a19844, a19845, a19846, a19847, a19848, a19849, a19850, a19851, 
            a19852, a19853, a19854, a19855, a19856, a19857, a19858, a19859, 
            a19860, a19861, a19862, a19863, a19864, a19883, a19884, a19885, 
            a19889, a19890, a19891, a19892, a19893, a19894, a19895, a19898, 
            a19899, a19900, a19905, a19909, a19910, a19911, a19915, a19916, 
            a19917, a19918, a19919, a19920, a19921, a19924, a19925, a19926, 
            a19930, a19933, a19934, a19935, a19936, a19937, a19938, a19939, 
            a19940, a19941, a19942, a19943, a19944, a19945, a19946, a19947, 
            a19948, a19949, a19950, a19951, a19952, a19954, a19955, a19960, 
            a19961, a19962, a19963, a19964, a19972, a19973, a19974, a19975, 
            a19976, a19977, a19978, a19979, a19980, a19981, a19982, a19983, 
            a19984, a19985, a19986, a19987, a19988, a19989, a19990, a19991, 
            a19992, a19993, a19994, a19995, a19996, a19997, a19998, a19999, 
            a20000, a20001, a20002, a20003, a20004, a20005, a20006, a20008, 
            a20009, a20010, a20014, a20015, a20016, a20017, a20018, a20019, 
            a20020, a20024, a20025, a20026, a20027, a20028, a20029, a20030, 
            a20031, a20032, a20033, a20034, a20035, a20036, a20038, a20039, 
            a20040, a20044, a20045, a20046, a20047, a20048, a20049, a20050, 
            a20054, a20056, a20057, a20062, a20063, a20064, a20065, a20066, 
            a20067, a20068, a20069, a20070, a20071, a20072, a20073, a20074, 
            a20075, a20076, a20077, a20078, a20079, a20080, a20081, a20082, 
            a20083, a20084, a20085, a20086, a20087, a20088, a20089, a20090, 
            b886, b887, b889, b890, b891, b892, b893, b894, 
            b895, b896, b897, b898, b899, b900, b901, b902, 
            b903, b904, b905, b906, b907, b908, b909, b910, 
            b911, b912, b913, b914, b915, b916, b917, b918, 
            b919, b920, b921, b922, b923, b924, b925, b926, 
            c884, c885, c886, c887, c888, c889, c890, c892, 
            c893, c894, c895, c896, c897, c898, c900, i336, 
            i337, i338;
    uint64_t a12179, a12180, a12181, a12182, a12183, a12184, a12284, a12285, 
            a12286, a12287, a12288, a12289, a19865, a19866, a19867, a19868, 
            a19869, a19870, a19871, a19872, a19873, a19874, a19876, a19877, 
            a19878, a19879, a19880, a19881, a19953, a19956, a19965, a20055, 
            a20058, d1148, d1149, d1150, d1151, d1152, d1153, d1154, 
            d1155, d1156, d1157, d1158, d1159, d1160, d1161, d1162, 
            d1163, d1164, d1165, d1166, d1167, d1168, d1169, d1170, 
            d1171, d1172, d1173, d1174, d1175, d1176, d1177, d1178, 
            d1179, d1180, d1181, d1182, d1183, d1184, d1185, d1186, 
            d1187, d1188, d1189, d1190, d1191, d1192, d1193, d1194, 
            d1195, d1196, d1197, d1198, d1199, t4123, t4124, t4125, 
            t4126, t4127, t4128, t4129, t4130, t4131, t4132, t4133, 
            t4134, t4135, t4136, t4137, t4138, t4139, t4140, t4141, 
            t4142, t4143, t4144, t4145, t4146, t4147, t4148, t4149, 
            t4150, t4151, t4152, t4153, t4154, t4155, t4156, t4157, 
            t4158, t4159, t4160, t4161, t4162, t4163, t4164, t4165, 
            t4166, t4167, t4168, t4169, t4170, t7495, t7496, t7497, 
            t7498, t7499, t7500, t7501, t7502, t7503, t7504, t7505, 
            t7506, t7507, t7508, t7509, t7510, t7511, t7512, t7513, 
            t7514, t7515, t7516, t7517, t7518, t7519, t7520, t7521, 
            t7522, t7523, t7524, t7525, t7526, t7527, t7528, t7531, 
            t7532, t7533, t7534, t7535, t7536, t7537, t7538, t7539, 
            t7540, t7541, t7542, t7543, t7544, t7545, t7546, t7547, 
            t7548, t7549, t7550, t7551, t7552, t7553, t7554, t7555, 
            t7556, t7557, t7558, t7559, t7560, t7561, t7562, t7563, 
            t7564, t7565, t7566, t7567, t7568, t7569, t7570, t7571, 
            t7572, t7573, t7574, t7576, t7577, t7578, t7579, t7580, 
            t7581, t7582, t7583, t7586, t7587, t7588, t7589, t7590, 
            t7591, t7592, t7593, t7594, t7595, t7596, t7597, t7598, 
            t7599, t7600, t7601, t7602, t7604, t7605, t7606, t7607;
    uint128_t s1623, s1624, s1625, s1626, s1627, s1628, s1629, s1630, 
            s1631, s1632, s1633, s1634, s1635, s1636, s1637, s1638, 
            s1639, s1640, s1641, s1642, s1643, s1644, s1645, s1646, 
            s1647;
    for(int i15 = 0; i15 <= 3; i15++) {
        a19836 = (128*i15);
        a19837 = (a19836 + threadIdx.x);
        b886 = (threadIdx.x + a19836);
        a19838 = (b886 + 512);
        a19839 = (a19838 % 8);
        a19840 = (8 + a19839);
        /* Begin of MPModMul 256 */
        a19841 = (2*a19840);
        a19842 = (a19841 + 1);
        a19843 = (2*a19838);
        a19844 = (a19843 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19845 = (2*a19841);
        a19846 = (a19845 + 1);
        /* MPAssignDD 64 */
        a19847 = (2*a19846);
        t7495 = twiddles[a19847];
        a19848 = (a19847 + 1);
        t7496 = twiddles[a19848];
        /* MPAssignDD 128 */
        a19849 = (2*a19842);
        /* MPAssignDD 64 */
        a19850 = (2*a19849);
        t7497 = twiddles[a19850];
        a19851 = (a19850 + 1);
        t7498 = twiddles[a19851];
        a19852 = (a19849 + 1);
        /* MPAssignDD 64 */
        a19853 = (2*a19852);
        t7499 = twiddles[a19853];
        a19854 = (a19853 + 1);
        t7500 = twiddles[a19854];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19855 = (2*a19843);
        a19856 = (a19855 + 1);
        /* MPAssignDD 64 */
        a19857 = (2*a19856);
        t7501 = P1[a19857];
        a19858 = (a19857 + 1);
        t7502 = P1[a19858];
        /* MPAssignDD 128 */
        a19859 = (2*a19844);
        /* MPAssignDD 64 */
        a19860 = (2*a19859);
        t7503 = P1[a19860];
        a19861 = (a19860 + 1);
        t7504 = P1[a19861];
        a19862 = (a19859 + 1);
        /* MPAssignDD 64 */
        a19863 = (2*a19862);
        t7505 = P1[a19863];
        a19864 = (a19863 + 1);
        t7506 = P1[a19864];
        MPMulQDD_L3_2(t4135, t4136, t4137, t4138, t4131, t4132, t4133, t4134, 
    t4127, t4128, t4129, t4130, t4123, t4124, t4125, t4126, 
    0, 0, t7495, t7496, t7497, t7498, t7499, t7500, 
    0, 0, t7501, t7502, t7503, t7504, t7505, t7506);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7507 = (t4127 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19865 = (t4127 << 6);
        a19866 = (t4128 >> 58);
        t7508 = (((a19865)|(a19866)));
        t7509 = (t4128 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7510 = (t4129 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7511 = (((t7509)|(t7510)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b887 = ((int) 1);
        t7512 = (288230376151711744 - b887);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7513 = (((t4137)&(t7512)));
        t7514 = (((t4138)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19867 = (t7513 << 6);
        a19868 = (t7514 >> 58);
        t7515 = (((a19867)|(a19868)));
        t7516 = (t7514 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7517 = (t4131 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a19869 = (t4131 << 6);
        a19870 = (t4132 >> 58);
        t7518 = (((a19869)|(a19870)));
        t7519 = (t4132 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7520 = (t4133 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7521 = (((t7519)|(t7520)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7522 = (((t7516)|(t7517)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a19871 = (t4133 << 6);
        a19872 = (t4134 >> 58);
        t7523 = (((a19871)|(a19872)));
        t7524 = (t4134 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7525 = (((t7524)|(t7507)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a12179 = mu[2];
        a12180 = mu[3];
        a12181 = mu[4];
        a12182 = mu[5];
        a12183 = mu[6];
        a12184 = mu[7];
        MPMulQDD_L3_1(t4167, t4168, t4169, t4170, t4163, t4164, t4165, t4166, 
    t4159, t4160, t4161, t4162, t4155, t4156, t4157, t4158, 
    t7515, t7522, t7518, t7521, t7523, t7525, t7508, t7511, 
    0, 0, a12179, a12180, a12181, a12182, a12183, a12184);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7526 = (t4159 >> 1);
        a19873 = (t4159 << 63);
        a19874 = (t4160 >> 1);
        t7527 = (((a19873)|(a19874)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7528 = (0 - b887);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1148 = (2 - b887);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7531 = (((t4168)&(d1148)));
        /* MPBinAndD 64 */
        t7532 = (((t4169)&(t7528)));
        t7533 = (((t4170)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7534 = (t7531 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7535 = (t7532 >> 1);
        a19876 = (t7532 << 63);
        a19877 = (t7533 >> 1);
        t7536 = (((a19876)|(a19877)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7537 = (((t7534)|(t7535)));
        /* Begin of MPShiftLeft1D */
        t7538 = (t7533 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7539 = (t4163 >> 1);
        a19878 = (t4163 << 63);
        a19879 = (t4164 >> 1);
        t7540 = (((a19878)|(a19879)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7541 = (((t7538)|(t7539)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7542 = (t4164 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7543 = (t4165 >> 1);
        a19880 = (t4165 << 63);
        a19881 = (t4166 >> 1);
        t7544 = (((a19880)|(a19881)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7545 = (((t7542)|(t7543)));
        /* Begin of MPShiftLeft1D */
        t7546 = (t4166 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7547 = (((t7546)|(t7526)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a12284 = modulus[2];
        a12285 = modulus[3];
        a12286 = modulus[4];
        a12287 = modulus[5];
        a12288 = modulus[6];
        a12289 = modulus[7];
        MPMulQDD_L3_1(t4151, t4152, t4153, t4154, t4147, t4148, t4149, t4150, 
    t4143, t4144, t4145, t4146, t4139, t4140, t4141, t4142, 
    t7537, t7536, t7541, t7540, t7545, t7544, t7547, t7527, 
    0, 0, a12284, a12285, a12286, a12287, a12288, a12289);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1149 = (t4126 - t4142);
        b889 = ((t4126 < t4142));
        d1150 = (t4125 - t4141);
        d1151 = (d1150 - b889);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19883 = ((t4125 < t4141));
        a19884 = ((t4125 == t4141));
        a19885 = ((a19884) && (b889));
        b890 = ((a19883) || (a19885));
        /* Begin of MPSubDDD 64 */
        d1152 = (t4124 - t4140);
        b891 = ((t4124 < t4140));
        d1153 = (t4123 - t4139);
        d1154 = (d1153 - b891);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1155 = (d1152 - b890);
        b892 = ((d1152 < b890));
        t7548 = (d1154 - b892);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19889 = ((t4123 < t4139));
        a19890 = ((t4123 == t4139));
        a19891 = ((a19890) && (b891));
        a19892 = ((a19889) || (a19891));
        /* MPEqual 64 */
        a19893 = ((t4124 == t4140));
        a19894 = ((a19890) && (a19893));
        /* MPLessThan 64 */
        a19895 = ((a19894) && (b890));
        b893 = ((a19892) || (a19895));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1156 = (t4130 - t4146);
        b894 = ((t4130 < t4146));
        d1157 = (t4129 - t4145);
        d1158 = (d1157 - b894);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19898 = ((t4129 < t4145));
        a19899 = ((t4129 == t4145));
        a19900 = ((a19899) && (b894));
        b895 = ((a19898) || (a19900));
        /* Begin of MPSubDDD 64 */
        d1159 = (t4128 - t4144);
        b896 = ((t4128 < t4144));
        d1160 = (t4127 - t4143);
        d1161 = (d1160 - b896);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1162 = (d1159 - b895);
        b897 = ((d1159 < b895));
        t7549 = (d1161 - b897);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1163 = (d1156 - b893);
        b898 = ((d1156 < b893));
        t7550 = (d1158 - b898);
        /* MPLessThanDI 64 */
        a19905 = ((d1158 == 0));
        b899 = ((a19905) && (b898));
        /* MPSubDDI 64 */
        d1164 = (d1162 - b899);
        b900 = ((d1162 < b899));
        t7551 = (t7549 - b900);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1165 = (d1149 - a12289);
        b901 = ((d1149 < a12289));
        d1166 = (d1151 - a12288);
        d1167 = (d1166 - b901);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19909 = ((d1151 < a12288));
        a19910 = ((d1151 == a12288));
        a19911 = ((a19910) && (b901));
        b902 = ((a19909) || (a19911));
        /* Begin of MPSubDDD 64 */
        d1168 = (d1155 - a12287);
        b903 = ((d1155 < a12287));
        d1169 = (t7548 - a12286);
        d1170 = (d1169 - b903);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1171 = (d1168 - b902);
        b904 = ((d1168 < b902));
        t7552 = (d1170 - b904);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19915 = ((t7548 < a12286));
        a19916 = ((t7548 == a12286));
        a19917 = ((a19916) && (b903));
        a19918 = ((a19915) || (a19917));
        /* MPEqual 64 */
        a19919 = ((d1155 == a12287));
        a19920 = ((a19916) && (a19919));
        /* MPLessThan 64 */
        a19921 = ((a19920) && (b902));
        b905 = ((a19918) || (a19921));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1172 = (d1163 - a12285);
        b906 = ((d1163 < a12285));
        d1173 = (t7550 - a12284);
        d1174 = (d1173 - b906);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a19924 = ((t7550 < a12284));
        a19925 = ((t7550 == a12284));
        a19926 = ((a19925) && (b906));
        b907 = ((a19924) || (a19926));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1175 = (d1164 - b907);
        b908 = ((d1164 < b907));
        t7553 = (t7551 - b908);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1176 = (d1172 - b905);
        b909 = ((d1172 < b905));
        t7554 = (d1174 - b909);
        /* MPLessThanDI 64 */
        a19930 = ((d1174 == 0));
        b910 = ((a19930) && (b909));
        /* MPSubDDI 64 */
        d1177 = (d1175 - b910);
        b911 = ((d1175 < b910));
        t7555 = (t7553 - b911);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19933 = ((t7551 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19934 = ((d1164 == 0));
        a19935 = ((a19933) && (a19934));
        /* MPLessThan 64 */
        a19936 = ((a19935) && (b907));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19937 = ((d1163 == a12285));
        a19938 = ((a19925) && (a19937));
        a19939 = ((a19935) && (a19938));
        /* MPLessThan 128 */
        a19940 = ((a19939) && (b905));
        i336 = ((a19936) || (a19940));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7556 = ((i336) ? (t7551) : (t7555));
        t7557 = ((i336) ? (d1164) : (d1177));
        /* MPCondD 64 */
        t7558 = ((i336) ? (t7550) : (t7554));
        t7559 = ((i336) ? (d1163) : (d1176));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7560 = ((i336) ? (t7548) : (t7552));
        t7561 = ((i336) ? (d1155) : (d1171));
        /* MPCondD 64 */
        t7562 = ((i336) ? (d1151) : (d1167));
        t7563 = ((i336) ? (d1149) : (d1165));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a19941 = (256*i15);
        a19942 = (2*threadIdx.x);
        a19943 = (a19941 + a19942);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a19944 = (2*a19837);
        a19945 = (a19944 + 1);
        /* MPAssignDD 128 */
        a19946 = (2*a19945);
        /* MPAssignDD 64 */
        a19947 = (2*a19946);
        t7564 = P1[a19947];
        a19948 = (a19947 + 1);
        t7565 = P1[a19948];
        a19949 = (a19946 + 1);
        /* MPAssignDD 64 */
        a19950 = (2*a19949);
        t7566 = P1[a19950];
        a19951 = (a19950 + 1);
        t7567 = P1[a19951];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1623 = (((uint128_t ) t7567) + ((uint128_t ) t7563));
        t7568 = ((uint64_t ) s1623);
        c884 = (s1623 >> 64);
        s1624 = (((uint128_t ) t7566) + ((uint128_t ) t7562));
        s1625 = (((uint128_t ) s1624) + ((uint128_t ) c884));
        t7569 = ((uint64_t ) s1625);
        c885 = (s1625 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1626 = (((uint128_t ) t7565) + ((uint128_t ) t7561));
        t7570 = ((uint64_t ) s1626);
        c886 = (s1626 >> 64);
        s1627 = (((uint128_t ) t7564) + ((uint128_t ) t7560));
        s1628 = (((uint128_t ) s1627) + ((uint128_t ) c886));
        t7571 = ((uint64_t ) s1628);
        c887 = (s1628 >> 64);
        /* MPPropagateCarry 64 */
        t7572 = (t7570 + c885);
        a19952 = ((t7572 == 0));
        a19953 = (t7571 + c885);
        t7573 = ((a19952) ? (a19953) : (t7571));
        a19954 = ((t7573 == 0));
        a19955 = ((a19954) && (a19952));
        a19956 = (c887 + c885);
        t7574 = ((a19955) ? (a19956) : (c887));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a19960 = (2*a19944);
        a19961 = (a19960 + 1);
        /* MPAssignDD 64 */
        a19962 = (2*a19961);
        t7576 = P1[a19962];
        a19963 = (a19962 + 1);
        t7577 = P1[a19963];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1629 = (((uint128_t ) t7577) + ((uint128_t ) t7559));
        t7578 = ((uint64_t ) s1629);
        c888 = (s1629 >> 64);
        s1630 = (((uint128_t ) t7576) + ((uint128_t ) t7558));
        s1631 = (((uint128_t ) s1630) + ((uint128_t ) c888));
        t7579 = ((uint64_t ) s1631);
        c889 = (s1631 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7580 = ((uint64_t ) t7557);
        c890 = (t7557 >> 64);
        s1632 = (((uint128_t ) t7556) + ((uint128_t ) c890));
        t7581 = ((uint64_t ) s1632);
        /* MPPropagateCarry 64 */
        t7582 = (t7580 + c889);
        a19964 = ((t7582 == 0));
        a19965 = (t7581 + c889);
        t7583 = ((a19964) ? (a19965) : (t7581));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1633 = (((uint128_t ) t7578) + ((uint128_t ) t7574));
        t7586 = ((uint64_t ) s1633);
        c892 = (s1633 >> 64);
        s1634 = (((uint128_t ) t7579) + ((uint128_t ) c892));
        t7587 = ((uint64_t ) s1634);
        /* MPEqualDI 64 */
        a19972 = ((t7587 == 0));
        a19973 = ((t7586 == 0));
        a19974 = ((a19972) && (a19973));
        /* MPAddDDI 64 */
        s1635 = (((uint128_t ) t7582) + ((uint128_t ) t7574));
        t7588 = ((uint64_t ) s1635);
        c893 = (s1635 >> 64);
        s1636 = (((uint128_t ) t7583) + ((uint128_t ) c893));
        t7589 = ((uint64_t ) s1636);
        /* MPCondD 64 */
        t7590 = ((a19974) ? (t7589) : (t7583));
        t7591 = ((a19974) ? (t7588) : (t7582));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a19975 = ((0 < t7590));
        a19976 = ((0 == t7590));
        a19977 = ((0 < t7591));
        a19978 = ((a19976) && (a19977));
        a19979 = ((a19975) || (a19978));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a19980 = ((0 == t7591));
        a19981 = ((a19976) && (a19980));
        /* MPLessThan 64 */
        a19982 = ((a12284 < t7587));
        a19983 = ((a12284 == t7587));
        a19984 = ((a12285 < t7586));
        a19985 = ((a19983) && (a19984));
        a19986 = ((a19982) || (a19985));
        a19987 = ((a19981) && (a19986));
        a19988 = ((a19979) || (a19987));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a19989 = ((a12285 == t7586));
        a19990 = ((a19983) && (a19989));
        a19991 = ((a19981) && (a19990));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a19992 = ((a12286 < t7573));
        a19993 = ((a12286 == t7573));
        a19994 = ((a12287 < t7572));
        a19995 = ((a19993) && (a19994));
        a19996 = ((a19992) || (a19995));
        /* MPEqual 64 */
        a19997 = ((a12287 == t7572));
        a19998 = ((a19993) && (a19997));
        /* MPLessThan 64 */
        a19999 = ((a12288 < t7569));
        a20000 = ((a12288 == t7569));
        a20001 = ((a12289 < t7568));
        a20002 = ((a20000) && (a20001));
        a20003 = ((a19999) || (a20002));
        a20004 = ((a19998) && (a20003));
        a20005 = ((a19996) || (a20004));
        a20006 = ((a19991) && (a20005));
        i337 = ((a19988) || (a20006));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1178 = (t7568 - a12289);
        b912 = ((t7568 < a12289));
        d1179 = (t7569 - a12288);
        d1180 = (d1179 - b912);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20008 = ((t7569 < a12288));
        a20009 = ((t7569 == a12288));
        a20010 = ((a20009) && (b912));
        b913 = ((a20008) || (a20010));
        /* Begin of MPSubDDD 64 */
        d1181 = (t7572 - a12287);
        b914 = ((t7572 < a12287));
        d1182 = (t7573 - a12286);
        d1183 = (d1182 - b914);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1184 = (d1181 - b913);
        b915 = ((d1181 < b913));
        t7592 = (d1183 - b915);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20014 = ((t7573 < a12286));
        a20015 = ((t7573 == a12286));
        a20016 = ((a20015) && (b914));
        a20017 = ((a20014) || (a20016));
        /* MPEqual 64 */
        a20018 = ((t7572 == a12287));
        a20019 = ((a20015) && (a20018));
        /* MPLessThan 64 */
        a20020 = ((a20019) && (b913));
        b916 = ((a20017) || (a20020));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1185 = (t7586 - a12285);
        b917 = ((t7586 < a12285));
        d1186 = (t7587 - a12284);
        d1187 = (d1186 - b917);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1188 = (d1185 - b916);
        b918 = ((d1185 < b916));
        t7593 = (d1187 - b918);
        /* End of MPSubDDD 256 */
        a20024 = (2*a19943);
        /* MPCondD 128 */
        a20025 = (2*a20024);
        a20026 = (a20025 + 1);
        /* MPCondD 64 */
        a20027 = (2*a20026);
        P2[a20027] = ((i337) ? (t7593) : (t7587));
        a20028 = (a20027 + 1);
        P2[a20028] = ((i337) ? (d1188) : (t7586));
        a20029 = (a20024 + 1);
        /* MPCondD 128 */
        a20030 = (2*a20029);
        /* MPCondD 64 */
        a20031 = (2*a20030);
        P2[a20031] = ((i337) ? (t7592) : (t7573));
        a20032 = (a20031 + 1);
        P2[a20032] = ((i337) ? (d1184) : (t7572));
        a20033 = (a20030 + 1);
        /* MPCondD 64 */
        a20034 = (2*a20033);
        P2[a20034] = ((i337) ? (d1180) : (t7569));
        a20035 = (a20034 + 1);
        P2[a20035] = ((i337) ? (d1178) : (t7568));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        b919 = (a19942 + a19941);
        a20036 = (b919 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1189 = (t7567 - t7563);
        b920 = ((t7567 < t7563));
        d1190 = (t7566 - t7562);
        d1191 = (d1190 - b920);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20038 = ((t7566 < t7562));
        a20039 = ((t7566 == t7562));
        a20040 = ((a20039) && (b920));
        b921 = ((a20038) || (a20040));
        /* Begin of MPSubDDD 64 */
        d1192 = (t7565 - t7561);
        b922 = ((t7565 < t7561));
        d1193 = (t7564 - t7560);
        d1194 = (d1193 - b922);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1195 = (d1192 - b921);
        b923 = ((d1192 < b921));
        t7594 = (d1194 - b923);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20044 = ((t7564 < t7560));
        a20045 = ((t7564 == t7560));
        a20046 = ((a20045) && (b922));
        a20047 = ((a20044) || (a20046));
        /* MPEqual 64 */
        a20048 = ((t7565 == t7561));
        a20049 = ((a20045) && (a20048));
        /* MPLessThan 64 */
        a20050 = ((a20049) && (b921));
        b924 = ((a20047) || (a20050));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1196 = (t7577 - t7559);
        b925 = ((t7577 < t7559));
        d1197 = (t7576 - t7558);
        d1198 = (d1197 - b925);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1199 = (d1196 - b924);
        b926 = ((d1196 < b924));
        t7595 = (d1198 - b926);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1637 = (((uint128_t ) d1189) + ((uint128_t ) a12289));
        t7596 = ((uint64_t ) s1637);
        c894 = (s1637 >> 64);
        s1638 = (((uint128_t ) d1191) + ((uint128_t ) a12288));
        s1639 = (((uint128_t ) s1638) + ((uint128_t ) c894));
        t7597 = ((uint64_t ) s1639);
        c895 = (s1639 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1640 = (((uint128_t ) d1195) + ((uint128_t ) a12287));
        t7598 = ((uint64_t ) s1640);
        c896 = (s1640 >> 64);
        s1641 = (((uint128_t ) t7594) + ((uint128_t ) a12286));
        s1642 = (((uint128_t ) s1641) + ((uint128_t ) c896));
        t7599 = ((uint64_t ) s1642);
        c897 = (s1642 >> 64);
        /* MPPropagateCarry 64 */
        t7600 = (t7598 + c895);
        a20054 = ((t7600 == 0));
        a20055 = (t7599 + c895);
        t7601 = ((a20054) ? (a20055) : (t7599));
        a20056 = ((t7601 == 0));
        a20057 = ((a20056) && (a20054));
        a20058 = (c897 + c895);
        t7602 = ((a20057) ? (a20058) : (c897));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1643 = (((uint128_t ) d1199) + ((uint128_t ) a12285));
        t7604 = ((uint64_t ) s1643);
        c898 = (s1643 >> 64);
        s1644 = (((uint128_t ) t7595) + ((uint128_t ) a12284));
        s1645 = (((uint128_t ) s1644) + ((uint128_t ) c898));
        t7605 = ((uint64_t ) s1645);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1646 = (((uint128_t ) t7604) + ((uint128_t ) t7602));
        t7606 = ((uint64_t ) s1646);
        c900 = (s1646 >> 64);
        s1647 = (((uint128_t ) t7605) + ((uint128_t ) c900));
        t7607 = ((uint64_t ) s1647);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20062 = ((0 < t7556));
        a20063 = ((0 == t7556));
        a20064 = ((0 < t7557));
        a20065 = ((a20063) && (a20064));
        a20066 = ((a20062) || (a20065));
        /* MPEqual 64 */
        a20067 = ((0 == t7557));
        a20068 = ((a20063) && (a20067));
        /* MPLessThan 64 */
        a20069 = ((t7576 < t7558));
        a20070 = ((t7576 == t7558));
        a20071 = ((a20070) && (b925));
        a20072 = ((a20069) || (a20071));
        a20073 = ((a20068) && (a20072));
        a20074 = ((a20066) || (a20073));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20075 = ((t7577 == t7559));
        a20076 = ((a20070) && (a20075));
        a20077 = ((a20068) && (a20076));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a20078 = ((a20077) && (b924));
        i338 = ((a20074) || (a20078));
        a20079 = (2*a20036);
        /* MPCondD 128 */
        a20080 = (2*a20079);
        a20081 = (a20080 + 1);
        /* MPCondD 64 */
        a20082 = (2*a20081);
        P2[a20082] = ((i338) ? (t7607) : (t7595));
        a20083 = (a20082 + 1);
        P2[a20083] = ((i338) ? (t7606) : (d1199));
        a20084 = (a20079 + 1);
        /* MPCondD 128 */
        a20085 = (2*a20084);
        /* MPCondD 64 */
        a20086 = (2*a20085);
        P2[a20086] = ((i338) ? (t7601) : (t7594));
        a20087 = (a20086 + 1);
        P2[a20087] = ((i338) ? (t7600) : (d1195));
        a20088 = (a20085 + 1);
        /* MPCondD 64 */
        a20089 = (2*a20088);
        P2[a20089] = ((i338) ? (t7597) : (d1191));
        a20090 = (a20089 + 1);
        P2[a20090] = ((i338) ? (t7596) : (d1189));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code4(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a20091, a20092, a20093, a20094, a20095, a20096, a20097, a20098, 
            a20099, a20100, a20101, a20102, a20103, a20104, a20105, a20106, 
            a20107, a20108, a20109, a20110, a20111, a20112, a20113, a20114, 
            a20115, a20116, a20117, a20118, a20119, a20138, a20139, a20140, 
            a20144, a20145, a20146, a20147, a20148, a20149, a20150, a20153, 
            a20154, a20155, a20160, a20164, a20165, a20166, a20170, a20171, 
            a20172, a20173, a20174, a20175, a20176, a20179, a20180, a20181, 
            a20185, a20188, a20189, a20190, a20191, a20192, a20193, a20194, 
            a20195, a20196, a20197, a20198, a20199, a20200, a20201, a20202, 
            a20203, a20204, a20205, a20206, a20207, a20209, a20210, a20215, 
            a20216, a20217, a20218, a20219, a20227, a20228, a20229, a20230, 
            a20231, a20232, a20233, a20234, a20235, a20236, a20237, a20238, 
            a20239, a20240, a20241, a20242, a20243, a20244, a20245, a20246, 
            a20247, a20248, a20249, a20250, a20251, a20252, a20253, a20254, 
            a20255, a20256, a20257, a20258, a20259, a20260, a20261, a20263, 
            a20264, a20265, a20269, a20270, a20271, a20272, a20273, a20274, 
            a20275, a20279, a20280, a20281, a20282, a20283, a20284, a20285, 
            a20286, a20287, a20288, a20289, a20290, a20291, a20293, a20294, 
            a20295, a20299, a20300, a20301, a20302, a20303, a20304, a20305, 
            a20309, a20311, a20312, a20317, a20318, a20319, a20320, a20321, 
            a20322, a20323, a20324, a20325, a20326, a20327, a20328, a20329, 
            a20330, a20331, a20332, a20333, a20334, a20335, a20336, a20337, 
            a20338, a20339, a20340, a20341, a20342, a20343, a20344, a20345, 
            b927, b928, b930, b931, b932, b933, b934, b935, 
            b936, b937, b938, b939, b940, b941, b942, b943, 
            b944, b945, b946, b947, b948, b949, b950, b951, 
            b952, b953, b954, b955, b956, b957, b958, b959, 
            b960, b961, b962, b963, b964, b965, b966, b967, 
            c901, c902, c903, c904, c905, c906, c907, c909, 
            c910, c911, c912, c913, c914, c915, c917, i339, 
            i340, i341;
    uint64_t a13090, a13091, a13092, a13093, a13094, a13095, a13195, a13196, 
            a13197, a13198, a13199, a13200, a20120, a20121, a20122, a20123, 
            a20124, a20125, a20126, a20127, a20128, a20129, a20131, a20132, 
            a20133, a20134, a20135, a20136, a20208, a20211, a20220, a20310, 
            a20313, d1200, d1201, d1202, d1203, d1204, d1205, d1206, 
            d1207, d1208, d1209, d1210, d1211, d1212, d1213, d1214, 
            d1215, d1216, d1217, d1218, d1219, d1220, d1221, d1222, 
            d1223, d1224, d1225, d1226, d1227, d1228, d1229, d1230, 
            d1231, d1232, d1233, d1234, d1235, d1236, d1237, d1238, 
            d1239, d1240, d1241, d1242, d1243, d1244, d1245, d1246, 
            d1247, d1248, d1249, d1250, d1251, t4187, t4188, t4189, 
            t4190, t4191, t4192, t4193, t4194, t4195, t4196, t4197, 
            t4198, t4199, t4200, t4201, t4202, t4203, t4204, t4205, 
            t4206, t4207, t4208, t4209, t4210, t4211, t4212, t4213, 
            t4214, t4215, t4216, t4217, t4218, t4219, t4220, t4221, 
            t4222, t4223, t4224, t4225, t4226, t4227, t4228, t4229, 
            t4230, t4231, t4232, t4233, t4234, t7608, t7609, t7610, 
            t7611, t7612, t7613, t7614, t7615, t7616, t7617, t7618, 
            t7619, t7620, t7621, t7622, t7623, t7624, t7625, t7626, 
            t7627, t7628, t7629, t7630, t7631, t7632, t7633, t7634, 
            t7635, t7636, t7637, t7638, t7639, t7640, t7641, t7644, 
            t7645, t7646, t7647, t7648, t7649, t7650, t7651, t7652, 
            t7653, t7654, t7655, t7656, t7657, t7658, t7659, t7660, 
            t7661, t7662, t7663, t7664, t7665, t7666, t7667, t7668, 
            t7669, t7670, t7671, t7672, t7673, t7674, t7675, t7676, 
            t7677, t7678, t7679, t7680, t7681, t7682, t7683, t7684, 
            t7685, t7686, t7687, t7689, t7690, t7691, t7692, t7693, 
            t7694, t7695, t7696, t7699, t7700, t7701, t7702, t7703, 
            t7704, t7705, t7706, t7707, t7708, t7709, t7710, t7711, 
            t7712, t7713, t7714, t7715, t7717, t7718, t7719, t7720;
    uint128_t s1648, s1649, s1650, s1651, s1652, s1653, s1654, s1655, 
            s1656, s1657, s1658, s1659, s1660, s1661, s1662, s1663, 
            s1664, s1665, s1666, s1667, s1668, s1669, s1670, s1671, 
            s1672;
    for(int i13 = 0; i13 <= 3; i13++) {
        a20091 = (128*i13);
        a20092 = (a20091 + threadIdx.x);
        b927 = (threadIdx.x + a20091);
        a20093 = (b927 + 512);
        a20094 = (a20093 % 16);
        a20095 = (16 + a20094);
        /* Begin of MPModMul 256 */
        a20096 = (2*a20095);
        a20097 = (a20096 + 1);
        a20098 = (2*a20093);
        a20099 = (a20098 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20100 = (2*a20096);
        a20101 = (a20100 + 1);
        /* MPAssignDD 64 */
        a20102 = (2*a20101);
        t7608 = twiddles[a20102];
        a20103 = (a20102 + 1);
        t7609 = twiddles[a20103];
        /* MPAssignDD 128 */
        a20104 = (2*a20097);
        /* MPAssignDD 64 */
        a20105 = (2*a20104);
        t7610 = twiddles[a20105];
        a20106 = (a20105 + 1);
        t7611 = twiddles[a20106];
        a20107 = (a20104 + 1);
        /* MPAssignDD 64 */
        a20108 = (2*a20107);
        t7612 = twiddles[a20108];
        a20109 = (a20108 + 1);
        t7613 = twiddles[a20109];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20110 = (2*a20098);
        a20111 = (a20110 + 1);
        /* MPAssignDD 64 */
        a20112 = (2*a20111);
        t7614 = P2[a20112];
        a20113 = (a20112 + 1);
        t7615 = P2[a20113];
        /* MPAssignDD 128 */
        a20114 = (2*a20099);
        /* MPAssignDD 64 */
        a20115 = (2*a20114);
        t7616 = P2[a20115];
        a20116 = (a20115 + 1);
        t7617 = P2[a20116];
        a20117 = (a20114 + 1);
        /* MPAssignDD 64 */
        a20118 = (2*a20117);
        t7618 = P2[a20118];
        a20119 = (a20118 + 1);
        t7619 = P2[a20119];
        MPMulQDD_L3_2(t4199, t4200, t4201, t4202, t4195, t4196, t4197, t4198, 
    t4191, t4192, t4193, t4194, t4187, t4188, t4189, t4190, 
    0, 0, t7608, t7609, t7610, t7611, t7612, t7613, 
    0, 0, t7614, t7615, t7616, t7617, t7618, t7619);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7620 = (t4191 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20120 = (t4191 << 6);
        a20121 = (t4192 >> 58);
        t7621 = (((a20120)|(a20121)));
        t7622 = (t4192 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7623 = (t4193 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7624 = (((t7622)|(t7623)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b928 = ((int) 1);
        t7625 = (288230376151711744 - b928);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7626 = (((t4201)&(t7625)));
        t7627 = (((t4202)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20122 = (t7626 << 6);
        a20123 = (t7627 >> 58);
        t7628 = (((a20122)|(a20123)));
        t7629 = (t7627 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7630 = (t4195 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20124 = (t4195 << 6);
        a20125 = (t4196 >> 58);
        t7631 = (((a20124)|(a20125)));
        t7632 = (t4196 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7633 = (t4197 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7634 = (((t7632)|(t7633)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7635 = (((t7629)|(t7630)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20126 = (t4197 << 6);
        a20127 = (t4198 >> 58);
        t7636 = (((a20126)|(a20127)));
        t7637 = (t4198 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7638 = (((t7637)|(t7620)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a13090 = mu[2];
        a13091 = mu[3];
        a13092 = mu[4];
        a13093 = mu[5];
        a13094 = mu[6];
        a13095 = mu[7];
        MPMulQDD_L3_1(t4231, t4232, t4233, t4234, t4227, t4228, t4229, t4230, 
    t4223, t4224, t4225, t4226, t4219, t4220, t4221, t4222, 
    t7628, t7635, t7631, t7634, t7636, t7638, t7621, t7624, 
    0, 0, a13090, a13091, a13092, a13093, a13094, a13095);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7639 = (t4223 >> 1);
        a20128 = (t4223 << 63);
        a20129 = (t4224 >> 1);
        t7640 = (((a20128)|(a20129)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7641 = (0 - b928);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1200 = (2 - b928);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7644 = (((t4232)&(d1200)));
        /* MPBinAndD 64 */
        t7645 = (((t4233)&(t7641)));
        t7646 = (((t4234)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7647 = (t7644 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7648 = (t7645 >> 1);
        a20131 = (t7645 << 63);
        a20132 = (t7646 >> 1);
        t7649 = (((a20131)|(a20132)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7650 = (((t7647)|(t7648)));
        /* Begin of MPShiftLeft1D */
        t7651 = (t7646 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7652 = (t4227 >> 1);
        a20133 = (t4227 << 63);
        a20134 = (t4228 >> 1);
        t7653 = (((a20133)|(a20134)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7654 = (((t7651)|(t7652)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7655 = (t4228 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7656 = (t4229 >> 1);
        a20135 = (t4229 << 63);
        a20136 = (t4230 >> 1);
        t7657 = (((a20135)|(a20136)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7658 = (((t7655)|(t7656)));
        /* Begin of MPShiftLeft1D */
        t7659 = (t4230 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7660 = (((t7659)|(t7639)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a13195 = modulus[2];
        a13196 = modulus[3];
        a13197 = modulus[4];
        a13198 = modulus[5];
        a13199 = modulus[6];
        a13200 = modulus[7];
        MPMulQDD_L3_1(t4215, t4216, t4217, t4218, t4211, t4212, t4213, t4214, 
    t4207, t4208, t4209, t4210, t4203, t4204, t4205, t4206, 
    t7650, t7649, t7654, t7653, t7658, t7657, t7660, t7640, 
    0, 0, a13195, a13196, a13197, a13198, a13199, a13200);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1201 = (t4190 - t4206);
        b930 = ((t4190 < t4206));
        d1202 = (t4189 - t4205);
        d1203 = (d1202 - b930);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20138 = ((t4189 < t4205));
        a20139 = ((t4189 == t4205));
        a20140 = ((a20139) && (b930));
        b931 = ((a20138) || (a20140));
        /* Begin of MPSubDDD 64 */
        d1204 = (t4188 - t4204);
        b932 = ((t4188 < t4204));
        d1205 = (t4187 - t4203);
        d1206 = (d1205 - b932);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1207 = (d1204 - b931);
        b933 = ((d1204 < b931));
        t7661 = (d1206 - b933);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20144 = ((t4187 < t4203));
        a20145 = ((t4187 == t4203));
        a20146 = ((a20145) && (b932));
        a20147 = ((a20144) || (a20146));
        /* MPEqual 64 */
        a20148 = ((t4188 == t4204));
        a20149 = ((a20145) && (a20148));
        /* MPLessThan 64 */
        a20150 = ((a20149) && (b931));
        b934 = ((a20147) || (a20150));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1208 = (t4194 - t4210);
        b935 = ((t4194 < t4210));
        d1209 = (t4193 - t4209);
        d1210 = (d1209 - b935);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20153 = ((t4193 < t4209));
        a20154 = ((t4193 == t4209));
        a20155 = ((a20154) && (b935));
        b936 = ((a20153) || (a20155));
        /* Begin of MPSubDDD 64 */
        d1211 = (t4192 - t4208);
        b937 = ((t4192 < t4208));
        d1212 = (t4191 - t4207);
        d1213 = (d1212 - b937);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1214 = (d1211 - b936);
        b938 = ((d1211 < b936));
        t7662 = (d1213 - b938);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1215 = (d1208 - b934);
        b939 = ((d1208 < b934));
        t7663 = (d1210 - b939);
        /* MPLessThanDI 64 */
        a20160 = ((d1210 == 0));
        b940 = ((a20160) && (b939));
        /* MPSubDDI 64 */
        d1216 = (d1214 - b940);
        b941 = ((d1214 < b940));
        t7664 = (t7662 - b941);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1217 = (d1201 - a13200);
        b942 = ((d1201 < a13200));
        d1218 = (d1203 - a13199);
        d1219 = (d1218 - b942);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20164 = ((d1203 < a13199));
        a20165 = ((d1203 == a13199));
        a20166 = ((a20165) && (b942));
        b943 = ((a20164) || (a20166));
        /* Begin of MPSubDDD 64 */
        d1220 = (d1207 - a13198);
        b944 = ((d1207 < a13198));
        d1221 = (t7661 - a13197);
        d1222 = (d1221 - b944);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1223 = (d1220 - b943);
        b945 = ((d1220 < b943));
        t7665 = (d1222 - b945);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20170 = ((t7661 < a13197));
        a20171 = ((t7661 == a13197));
        a20172 = ((a20171) && (b944));
        a20173 = ((a20170) || (a20172));
        /* MPEqual 64 */
        a20174 = ((d1207 == a13198));
        a20175 = ((a20171) && (a20174));
        /* MPLessThan 64 */
        a20176 = ((a20175) && (b943));
        b946 = ((a20173) || (a20176));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1224 = (d1215 - a13196);
        b947 = ((d1215 < a13196));
        d1225 = (t7663 - a13195);
        d1226 = (d1225 - b947);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20179 = ((t7663 < a13195));
        a20180 = ((t7663 == a13195));
        a20181 = ((a20180) && (b947));
        b948 = ((a20179) || (a20181));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1227 = (d1216 - b948);
        b949 = ((d1216 < b948));
        t7666 = (t7664 - b949);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1228 = (d1224 - b946);
        b950 = ((d1224 < b946));
        t7667 = (d1226 - b950);
        /* MPLessThanDI 64 */
        a20185 = ((d1226 == 0));
        b951 = ((a20185) && (b950));
        /* MPSubDDI 64 */
        d1229 = (d1227 - b951);
        b952 = ((d1227 < b951));
        t7668 = (t7666 - b952);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20188 = ((t7664 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20189 = ((d1216 == 0));
        a20190 = ((a20188) && (a20189));
        /* MPLessThan 64 */
        a20191 = ((a20190) && (b948));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20192 = ((d1215 == a13196));
        a20193 = ((a20180) && (a20192));
        a20194 = ((a20190) && (a20193));
        /* MPLessThan 128 */
        a20195 = ((a20194) && (b946));
        i339 = ((a20191) || (a20195));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7669 = ((i339) ? (t7664) : (t7668));
        t7670 = ((i339) ? (d1216) : (d1229));
        /* MPCondD 64 */
        t7671 = ((i339) ? (t7663) : (t7667));
        t7672 = ((i339) ? (d1215) : (d1228));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7673 = ((i339) ? (t7661) : (t7665));
        t7674 = ((i339) ? (d1207) : (d1223));
        /* MPCondD 64 */
        t7675 = ((i339) ? (d1203) : (d1219));
        t7676 = ((i339) ? (d1201) : (d1217));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a20196 = (256*i13);
        a20197 = (2*threadIdx.x);
        a20198 = (a20196 + a20197);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a20199 = (2*a20092);
        a20200 = (a20199 + 1);
        /* MPAssignDD 128 */
        a20201 = (2*a20200);
        /* MPAssignDD 64 */
        a20202 = (2*a20201);
        t7677 = P2[a20202];
        a20203 = (a20202 + 1);
        t7678 = P2[a20203];
        a20204 = (a20201 + 1);
        /* MPAssignDD 64 */
        a20205 = (2*a20204);
        t7679 = P2[a20205];
        a20206 = (a20205 + 1);
        t7680 = P2[a20206];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1648 = (((uint128_t ) t7680) + ((uint128_t ) t7676));
        t7681 = ((uint64_t ) s1648);
        c901 = (s1648 >> 64);
        s1649 = (((uint128_t ) t7679) + ((uint128_t ) t7675));
        s1650 = (((uint128_t ) s1649) + ((uint128_t ) c901));
        t7682 = ((uint64_t ) s1650);
        c902 = (s1650 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1651 = (((uint128_t ) t7678) + ((uint128_t ) t7674));
        t7683 = ((uint64_t ) s1651);
        c903 = (s1651 >> 64);
        s1652 = (((uint128_t ) t7677) + ((uint128_t ) t7673));
        s1653 = (((uint128_t ) s1652) + ((uint128_t ) c903));
        t7684 = ((uint64_t ) s1653);
        c904 = (s1653 >> 64);
        /* MPPropagateCarry 64 */
        t7685 = (t7683 + c902);
        a20207 = ((t7685 == 0));
        a20208 = (t7684 + c902);
        t7686 = ((a20207) ? (a20208) : (t7684));
        a20209 = ((t7686 == 0));
        a20210 = ((a20209) && (a20207));
        a20211 = (c904 + c902);
        t7687 = ((a20210) ? (a20211) : (c904));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20215 = (2*a20199);
        a20216 = (a20215 + 1);
        /* MPAssignDD 64 */
        a20217 = (2*a20216);
        t7689 = P2[a20217];
        a20218 = (a20217 + 1);
        t7690 = P2[a20218];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1654 = (((uint128_t ) t7690) + ((uint128_t ) t7672));
        t7691 = ((uint64_t ) s1654);
        c905 = (s1654 >> 64);
        s1655 = (((uint128_t ) t7689) + ((uint128_t ) t7671));
        s1656 = (((uint128_t ) s1655) + ((uint128_t ) c905));
        t7692 = ((uint64_t ) s1656);
        c906 = (s1656 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7693 = ((uint64_t ) t7670);
        c907 = (t7670 >> 64);
        s1657 = (((uint128_t ) t7669) + ((uint128_t ) c907));
        t7694 = ((uint64_t ) s1657);
        /* MPPropagateCarry 64 */
        t7695 = (t7693 + c906);
        a20219 = ((t7695 == 0));
        a20220 = (t7694 + c906);
        t7696 = ((a20219) ? (a20220) : (t7694));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1658 = (((uint128_t ) t7691) + ((uint128_t ) t7687));
        t7699 = ((uint64_t ) s1658);
        c909 = (s1658 >> 64);
        s1659 = (((uint128_t ) t7692) + ((uint128_t ) c909));
        t7700 = ((uint64_t ) s1659);
        /* MPEqualDI 64 */
        a20227 = ((t7700 == 0));
        a20228 = ((t7699 == 0));
        a20229 = ((a20227) && (a20228));
        /* MPAddDDI 64 */
        s1660 = (((uint128_t ) t7695) + ((uint128_t ) t7687));
        t7701 = ((uint64_t ) s1660);
        c910 = (s1660 >> 64);
        s1661 = (((uint128_t ) t7696) + ((uint128_t ) c910));
        t7702 = ((uint64_t ) s1661);
        /* MPCondD 64 */
        t7703 = ((a20229) ? (t7702) : (t7696));
        t7704 = ((a20229) ? (t7701) : (t7695));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20230 = ((0 < t7703));
        a20231 = ((0 == t7703));
        a20232 = ((0 < t7704));
        a20233 = ((a20231) && (a20232));
        a20234 = ((a20230) || (a20233));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20235 = ((0 == t7704));
        a20236 = ((a20231) && (a20235));
        /* MPLessThan 64 */
        a20237 = ((a13195 < t7700));
        a20238 = ((a13195 == t7700));
        a20239 = ((a13196 < t7699));
        a20240 = ((a20238) && (a20239));
        a20241 = ((a20237) || (a20240));
        a20242 = ((a20236) && (a20241));
        a20243 = ((a20234) || (a20242));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20244 = ((a13196 == t7699));
        a20245 = ((a20238) && (a20244));
        a20246 = ((a20236) && (a20245));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20247 = ((a13197 < t7686));
        a20248 = ((a13197 == t7686));
        a20249 = ((a13198 < t7685));
        a20250 = ((a20248) && (a20249));
        a20251 = ((a20247) || (a20250));
        /* MPEqual 64 */
        a20252 = ((a13198 == t7685));
        a20253 = ((a20248) && (a20252));
        /* MPLessThan 64 */
        a20254 = ((a13199 < t7682));
        a20255 = ((a13199 == t7682));
        a20256 = ((a13200 < t7681));
        a20257 = ((a20255) && (a20256));
        a20258 = ((a20254) || (a20257));
        a20259 = ((a20253) && (a20258));
        a20260 = ((a20251) || (a20259));
        a20261 = ((a20246) && (a20260));
        i340 = ((a20243) || (a20261));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1230 = (t7681 - a13200);
        b953 = ((t7681 < a13200));
        d1231 = (t7682 - a13199);
        d1232 = (d1231 - b953);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20263 = ((t7682 < a13199));
        a20264 = ((t7682 == a13199));
        a20265 = ((a20264) && (b953));
        b954 = ((a20263) || (a20265));
        /* Begin of MPSubDDD 64 */
        d1233 = (t7685 - a13198);
        b955 = ((t7685 < a13198));
        d1234 = (t7686 - a13197);
        d1235 = (d1234 - b955);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1236 = (d1233 - b954);
        b956 = ((d1233 < b954));
        t7705 = (d1235 - b956);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20269 = ((t7686 < a13197));
        a20270 = ((t7686 == a13197));
        a20271 = ((a20270) && (b955));
        a20272 = ((a20269) || (a20271));
        /* MPEqual 64 */
        a20273 = ((t7685 == a13198));
        a20274 = ((a20270) && (a20273));
        /* MPLessThan 64 */
        a20275 = ((a20274) && (b954));
        b957 = ((a20272) || (a20275));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1237 = (t7699 - a13196);
        b958 = ((t7699 < a13196));
        d1238 = (t7700 - a13195);
        d1239 = (d1238 - b958);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1240 = (d1237 - b957);
        b959 = ((d1237 < b957));
        t7706 = (d1239 - b959);
        /* End of MPSubDDD 256 */
        a20279 = (2*a20198);
        /* MPCondD 128 */
        a20280 = (2*a20279);
        a20281 = (a20280 + 1);
        /* MPCondD 64 */
        a20282 = (2*a20281);
        P1[a20282] = ((i340) ? (t7706) : (t7700));
        a20283 = (a20282 + 1);
        P1[a20283] = ((i340) ? (d1240) : (t7699));
        a20284 = (a20279 + 1);
        /* MPCondD 128 */
        a20285 = (2*a20284);
        /* MPCondD 64 */
        a20286 = (2*a20285);
        P1[a20286] = ((i340) ? (t7705) : (t7686));
        a20287 = (a20286 + 1);
        P1[a20287] = ((i340) ? (d1236) : (t7685));
        a20288 = (a20285 + 1);
        /* MPCondD 64 */
        a20289 = (2*a20288);
        P1[a20289] = ((i340) ? (d1232) : (t7682));
        a20290 = (a20289 + 1);
        P1[a20290] = ((i340) ? (d1230) : (t7681));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        b960 = (a20197 + a20196);
        a20291 = (b960 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1241 = (t7680 - t7676);
        b961 = ((t7680 < t7676));
        d1242 = (t7679 - t7675);
        d1243 = (d1242 - b961);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20293 = ((t7679 < t7675));
        a20294 = ((t7679 == t7675));
        a20295 = ((a20294) && (b961));
        b962 = ((a20293) || (a20295));
        /* Begin of MPSubDDD 64 */
        d1244 = (t7678 - t7674);
        b963 = ((t7678 < t7674));
        d1245 = (t7677 - t7673);
        d1246 = (d1245 - b963);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1247 = (d1244 - b962);
        b964 = ((d1244 < b962));
        t7707 = (d1246 - b964);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20299 = ((t7677 < t7673));
        a20300 = ((t7677 == t7673));
        a20301 = ((a20300) && (b963));
        a20302 = ((a20299) || (a20301));
        /* MPEqual 64 */
        a20303 = ((t7678 == t7674));
        a20304 = ((a20300) && (a20303));
        /* MPLessThan 64 */
        a20305 = ((a20304) && (b962));
        b965 = ((a20302) || (a20305));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1248 = (t7690 - t7672);
        b966 = ((t7690 < t7672));
        d1249 = (t7689 - t7671);
        d1250 = (d1249 - b966);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1251 = (d1248 - b965);
        b967 = ((d1248 < b965));
        t7708 = (d1250 - b967);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1662 = (((uint128_t ) d1241) + ((uint128_t ) a13200));
        t7709 = ((uint64_t ) s1662);
        c911 = (s1662 >> 64);
        s1663 = (((uint128_t ) d1243) + ((uint128_t ) a13199));
        s1664 = (((uint128_t ) s1663) + ((uint128_t ) c911));
        t7710 = ((uint64_t ) s1664);
        c912 = (s1664 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1665 = (((uint128_t ) d1247) + ((uint128_t ) a13198));
        t7711 = ((uint64_t ) s1665);
        c913 = (s1665 >> 64);
        s1666 = (((uint128_t ) t7707) + ((uint128_t ) a13197));
        s1667 = (((uint128_t ) s1666) + ((uint128_t ) c913));
        t7712 = ((uint64_t ) s1667);
        c914 = (s1667 >> 64);
        /* MPPropagateCarry 64 */
        t7713 = (t7711 + c912);
        a20309 = ((t7713 == 0));
        a20310 = (t7712 + c912);
        t7714 = ((a20309) ? (a20310) : (t7712));
        a20311 = ((t7714 == 0));
        a20312 = ((a20311) && (a20309));
        a20313 = (c914 + c912);
        t7715 = ((a20312) ? (a20313) : (c914));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1668 = (((uint128_t ) d1251) + ((uint128_t ) a13196));
        t7717 = ((uint64_t ) s1668);
        c915 = (s1668 >> 64);
        s1669 = (((uint128_t ) t7708) + ((uint128_t ) a13195));
        s1670 = (((uint128_t ) s1669) + ((uint128_t ) c915));
        t7718 = ((uint64_t ) s1670);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1671 = (((uint128_t ) t7717) + ((uint128_t ) t7715));
        t7719 = ((uint64_t ) s1671);
        c917 = (s1671 >> 64);
        s1672 = (((uint128_t ) t7718) + ((uint128_t ) c917));
        t7720 = ((uint64_t ) s1672);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20317 = ((0 < t7669));
        a20318 = ((0 == t7669));
        a20319 = ((0 < t7670));
        a20320 = ((a20318) && (a20319));
        a20321 = ((a20317) || (a20320));
        /* MPEqual 64 */
        a20322 = ((0 == t7670));
        a20323 = ((a20318) && (a20322));
        /* MPLessThan 64 */
        a20324 = ((t7689 < t7671));
        a20325 = ((t7689 == t7671));
        a20326 = ((a20325) && (b966));
        a20327 = ((a20324) || (a20326));
        a20328 = ((a20323) && (a20327));
        a20329 = ((a20321) || (a20328));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20330 = ((t7690 == t7672));
        a20331 = ((a20325) && (a20330));
        a20332 = ((a20323) && (a20331));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a20333 = ((a20332) && (b965));
        i341 = ((a20329) || (a20333));
        a20334 = (2*a20291);
        /* MPCondD 128 */
        a20335 = (2*a20334);
        a20336 = (a20335 + 1);
        /* MPCondD 64 */
        a20337 = (2*a20336);
        P1[a20337] = ((i341) ? (t7720) : (t7708));
        a20338 = (a20337 + 1);
        P1[a20338] = ((i341) ? (t7719) : (d1251));
        a20339 = (a20334 + 1);
        /* MPCondD 128 */
        a20340 = (2*a20339);
        /* MPCondD 64 */
        a20341 = (2*a20340);
        P1[a20341] = ((i341) ? (t7714) : (t7707));
        a20342 = (a20341 + 1);
        P1[a20342] = ((i341) ? (t7713) : (d1247));
        a20343 = (a20340 + 1);
        /* MPCondD 64 */
        a20344 = (2*a20343);
        P1[a20344] = ((i341) ? (t7710) : (d1243));
        a20345 = (a20344 + 1);
        P1[a20345] = ((i341) ? (t7709) : (d1241));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code5(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a20346, a20347, a20348, a20349, a20350, a20351, a20352, a20353, 
            a20354, a20355, a20356, a20357, a20358, a20359, a20360, a20361, 
            a20362, a20363, a20364, a20365, a20366, a20367, a20368, a20369, 
            a20370, a20371, a20372, a20373, a20374, a20393, a20394, a20395, 
            a20399, a20400, a20401, a20402, a20403, a20404, a20405, a20408, 
            a20409, a20410, a20415, a20419, a20420, a20421, a20425, a20426, 
            a20427, a20428, a20429, a20430, a20431, a20434, a20435, a20436, 
            a20440, a20443, a20444, a20445, a20446, a20447, a20448, a20449, 
            a20450, a20451, a20452, a20453, a20454, a20455, a20456, a20457, 
            a20458, a20459, a20460, a20461, a20462, a20464, a20465, a20470, 
            a20471, a20472, a20473, a20474, a20482, a20483, a20484, a20485, 
            a20486, a20487, a20488, a20489, a20490, a20491, a20492, a20493, 
            a20494, a20495, a20496, a20497, a20498, a20499, a20500, a20501, 
            a20502, a20503, a20504, a20505, a20506, a20507, a20508, a20509, 
            a20510, a20511, a20512, a20513, a20514, a20515, a20516, a20518, 
            a20519, a20520, a20524, a20525, a20526, a20527, a20528, a20529, 
            a20530, a20534, a20535, a20536, a20537, a20538, a20539, a20540, 
            a20541, a20542, a20543, a20544, a20545, a20546, a20548, a20549, 
            a20550, a20554, a20555, a20556, a20557, a20558, a20559, a20560, 
            a20564, a20566, a20567, a20572, a20573, a20574, a20575, a20576, 
            a20577, a20578, a20579, a20580, a20581, a20582, a20583, a20584, 
            a20585, a20586, a20587, a20588, a20589, a20590, a20591, a20592, 
            a20593, a20594, a20595, a20596, a20597, a20598, a20599, a20600, 
            b1000, b1001, b1002, b1003, b1004, b1005, b1006, b1007, 
            b1008, b968, b969, b971, b972, b973, b974, b975, 
            b976, b977, b978, b979, b980, b981, b982, b983, 
            b984, b985, b986, b987, b988, b989, b990, b991, 
            b992, b993, b994, b995, b996, b997, b998, b999, 
            c918, c919, c920, c921, c922, c923, c924, c926, 
            c927, c928, c929, c930, c931, c932, c934, i342, 
            i343, i344;
    uint64_t a14001, a14002, a14003, a14004, a14005, a14006, a14106, a14107, 
            a14108, a14109, a14110, a14111, a20375, a20376, a20377, a20378, 
            a20379, a20380, a20381, a20382, a20383, a20384, a20386, a20387, 
            a20388, a20389, a20390, a20391, a20463, a20466, a20475, a20565, 
            a20568, d1252, d1253, d1254, d1255, d1256, d1257, d1258, 
            d1259, d1260, d1261, d1262, d1263, d1264, d1265, d1266, 
            d1267, d1268, d1269, d1270, d1271, d1272, d1273, d1274, 
            d1275, d1276, d1277, d1278, d1279, d1280, d1281, d1282, 
            d1283, d1284, d1285, d1286, d1287, d1288, d1289, d1290, 
            d1291, d1292, d1293, d1294, d1295, d1296, d1297, d1298, 
            d1299, d1300, d1301, d1302, d1303, t4251, t4252, t4253, 
            t4254, t4255, t4256, t4257, t4258, t4259, t4260, t4261, 
            t4262, t4263, t4264, t4265, t4266, t4267, t4268, t4269, 
            t4270, t4271, t4272, t4273, t4274, t4275, t4276, t4277, 
            t4278, t4279, t4280, t4281, t4282, t4283, t4284, t4285, 
            t4286, t4287, t4288, t4289, t4290, t4291, t4292, t4293, 
            t4294, t4295, t4296, t4297, t4298, t7721, t7722, t7723, 
            t7724, t7725, t7726, t7727, t7728, t7729, t7730, t7731, 
            t7732, t7733, t7734, t7735, t7736, t7737, t7738, t7739, 
            t7740, t7741, t7742, t7743, t7744, t7745, t7746, t7747, 
            t7748, t7749, t7750, t7751, t7752, t7753, t7754, t7757, 
            t7758, t7759, t7760, t7761, t7762, t7763, t7764, t7765, 
            t7766, t7767, t7768, t7769, t7770, t7771, t7772, t7773, 
            t7774, t7775, t7776, t7777, t7778, t7779, t7780, t7781, 
            t7782, t7783, t7784, t7785, t7786, t7787, t7788, t7789, 
            t7790, t7791, t7792, t7793, t7794, t7795, t7796, t7797, 
            t7798, t7799, t7800, t7802, t7803, t7804, t7805, t7806, 
            t7807, t7808, t7809, t7812, t7813, t7814, t7815, t7816, 
            t7817, t7818, t7819, t7820, t7821, t7822, t7823, t7824, 
            t7825, t7826, t7827, t7828, t7830, t7831, t7832, t7833;
    uint128_t s1673, s1674, s1675, s1676, s1677, s1678, s1679, s1680, 
            s1681, s1682, s1683, s1684, s1685, s1686, s1687, s1688, 
            s1689, s1690, s1691, s1692, s1693, s1694, s1695, s1696, 
            s1697;
    for(int i11 = 0; i11 <= 3; i11++) {
        a20346 = (128*i11);
        a20347 = (a20346 + threadIdx.x);
        b968 = (threadIdx.x + a20346);
        a20348 = (b968 + 512);
        a20349 = (a20348 % 32);
        a20350 = (32 + a20349);
        /* Begin of MPModMul 256 */
        a20351 = (2*a20350);
        a20352 = (a20351 + 1);
        a20353 = (2*a20348);
        a20354 = (a20353 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20355 = (2*a20351);
        a20356 = (a20355 + 1);
        /* MPAssignDD 64 */
        a20357 = (2*a20356);
        t7721 = twiddles[a20357];
        a20358 = (a20357 + 1);
        t7722 = twiddles[a20358];
        /* MPAssignDD 128 */
        a20359 = (2*a20352);
        /* MPAssignDD 64 */
        a20360 = (2*a20359);
        t7723 = twiddles[a20360];
        a20361 = (a20360 + 1);
        t7724 = twiddles[a20361];
        a20362 = (a20359 + 1);
        /* MPAssignDD 64 */
        a20363 = (2*a20362);
        t7725 = twiddles[a20363];
        a20364 = (a20363 + 1);
        t7726 = twiddles[a20364];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20365 = (2*a20353);
        a20366 = (a20365 + 1);
        /* MPAssignDD 64 */
        a20367 = (2*a20366);
        t7727 = P1[a20367];
        a20368 = (a20367 + 1);
        t7728 = P1[a20368];
        /* MPAssignDD 128 */
        a20369 = (2*a20354);
        /* MPAssignDD 64 */
        a20370 = (2*a20369);
        t7729 = P1[a20370];
        a20371 = (a20370 + 1);
        t7730 = P1[a20371];
        a20372 = (a20369 + 1);
        /* MPAssignDD 64 */
        a20373 = (2*a20372);
        t7731 = P1[a20373];
        a20374 = (a20373 + 1);
        t7732 = P1[a20374];
        MPMulQDD_L3_2(t4263, t4264, t4265, t4266, t4259, t4260, t4261, t4262, 
    t4255, t4256, t4257, t4258, t4251, t4252, t4253, t4254, 
    0, 0, t7721, t7722, t7723, t7724, t7725, t7726, 
    0, 0, t7727, t7728, t7729, t7730, t7731, t7732);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7733 = (t4255 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20375 = (t4255 << 6);
        a20376 = (t4256 >> 58);
        t7734 = (((a20375)|(a20376)));
        t7735 = (t4256 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7736 = (t4257 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7737 = (((t7735)|(t7736)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b969 = ((int) 1);
        t7738 = (288230376151711744 - b969);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7739 = (((t4265)&(t7738)));
        t7740 = (((t4266)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20377 = (t7739 << 6);
        a20378 = (t7740 >> 58);
        t7741 = (((a20377)|(a20378)));
        t7742 = (t7740 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7743 = (t4259 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20379 = (t4259 << 6);
        a20380 = (t4260 >> 58);
        t7744 = (((a20379)|(a20380)));
        t7745 = (t4260 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7746 = (t4261 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7747 = (((t7745)|(t7746)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7748 = (((t7742)|(t7743)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20381 = (t4261 << 6);
        a20382 = (t4262 >> 58);
        t7749 = (((a20381)|(a20382)));
        t7750 = (t4262 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7751 = (((t7750)|(t7733)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a14001 = mu[2];
        a14002 = mu[3];
        a14003 = mu[4];
        a14004 = mu[5];
        a14005 = mu[6];
        a14006 = mu[7];
        MPMulQDD_L3_1(t4295, t4296, t4297, t4298, t4291, t4292, t4293, t4294, 
    t4287, t4288, t4289, t4290, t4283, t4284, t4285, t4286, 
    t7741, t7748, t7744, t7747, t7749, t7751, t7734, t7737, 
    0, 0, a14001, a14002, a14003, a14004, a14005, a14006);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7752 = (t4287 >> 1);
        a20383 = (t4287 << 63);
        a20384 = (t4288 >> 1);
        t7753 = (((a20383)|(a20384)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7754 = (0 - b969);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1252 = (2 - b969);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7757 = (((t4296)&(d1252)));
        /* MPBinAndD 64 */
        t7758 = (((t4297)&(t7754)));
        t7759 = (((t4298)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7760 = (t7757 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7761 = (t7758 >> 1);
        a20386 = (t7758 << 63);
        a20387 = (t7759 >> 1);
        t7762 = (((a20386)|(a20387)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7763 = (((t7760)|(t7761)));
        /* Begin of MPShiftLeft1D */
        t7764 = (t7759 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7765 = (t4291 >> 1);
        a20388 = (t4291 << 63);
        a20389 = (t4292 >> 1);
        t7766 = (((a20388)|(a20389)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7767 = (((t7764)|(t7765)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7768 = (t4292 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7769 = (t4293 >> 1);
        a20390 = (t4293 << 63);
        a20391 = (t4294 >> 1);
        t7770 = (((a20390)|(a20391)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7771 = (((t7768)|(t7769)));
        /* Begin of MPShiftLeft1D */
        t7772 = (t4294 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7773 = (((t7772)|(t7752)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a14106 = modulus[2];
        a14107 = modulus[3];
        a14108 = modulus[4];
        a14109 = modulus[5];
        a14110 = modulus[6];
        a14111 = modulus[7];
        MPMulQDD_L3_1(t4279, t4280, t4281, t4282, t4275, t4276, t4277, t4278, 
    t4271, t4272, t4273, t4274, t4267, t4268, t4269, t4270, 
    t7763, t7762, t7767, t7766, t7771, t7770, t7773, t7753, 
    0, 0, a14106, a14107, a14108, a14109, a14110, a14111);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1253 = (t4254 - t4270);
        b971 = ((t4254 < t4270));
        d1254 = (t4253 - t4269);
        d1255 = (d1254 - b971);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20393 = ((t4253 < t4269));
        a20394 = ((t4253 == t4269));
        a20395 = ((a20394) && (b971));
        b972 = ((a20393) || (a20395));
        /* Begin of MPSubDDD 64 */
        d1256 = (t4252 - t4268);
        b973 = ((t4252 < t4268));
        d1257 = (t4251 - t4267);
        d1258 = (d1257 - b973);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1259 = (d1256 - b972);
        b974 = ((d1256 < b972));
        t7774 = (d1258 - b974);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20399 = ((t4251 < t4267));
        a20400 = ((t4251 == t4267));
        a20401 = ((a20400) && (b973));
        a20402 = ((a20399) || (a20401));
        /* MPEqual 64 */
        a20403 = ((t4252 == t4268));
        a20404 = ((a20400) && (a20403));
        /* MPLessThan 64 */
        a20405 = ((a20404) && (b972));
        b975 = ((a20402) || (a20405));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1260 = (t4258 - t4274);
        b976 = ((t4258 < t4274));
        d1261 = (t4257 - t4273);
        d1262 = (d1261 - b976);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20408 = ((t4257 < t4273));
        a20409 = ((t4257 == t4273));
        a20410 = ((a20409) && (b976));
        b977 = ((a20408) || (a20410));
        /* Begin of MPSubDDD 64 */
        d1263 = (t4256 - t4272);
        b978 = ((t4256 < t4272));
        d1264 = (t4255 - t4271);
        d1265 = (d1264 - b978);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1266 = (d1263 - b977);
        b979 = ((d1263 < b977));
        t7775 = (d1265 - b979);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1267 = (d1260 - b975);
        b980 = ((d1260 < b975));
        t7776 = (d1262 - b980);
        /* MPLessThanDI 64 */
        a20415 = ((d1262 == 0));
        b981 = ((a20415) && (b980));
        /* MPSubDDI 64 */
        d1268 = (d1266 - b981);
        b982 = ((d1266 < b981));
        t7777 = (t7775 - b982);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1269 = (d1253 - a14111);
        b983 = ((d1253 < a14111));
        d1270 = (d1255 - a14110);
        d1271 = (d1270 - b983);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20419 = ((d1255 < a14110));
        a20420 = ((d1255 == a14110));
        a20421 = ((a20420) && (b983));
        b984 = ((a20419) || (a20421));
        /* Begin of MPSubDDD 64 */
        d1272 = (d1259 - a14109);
        b985 = ((d1259 < a14109));
        d1273 = (t7774 - a14108);
        d1274 = (d1273 - b985);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1275 = (d1272 - b984);
        b986 = ((d1272 < b984));
        t7778 = (d1274 - b986);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20425 = ((t7774 < a14108));
        a20426 = ((t7774 == a14108));
        a20427 = ((a20426) && (b985));
        a20428 = ((a20425) || (a20427));
        /* MPEqual 64 */
        a20429 = ((d1259 == a14109));
        a20430 = ((a20426) && (a20429));
        /* MPLessThan 64 */
        a20431 = ((a20430) && (b984));
        b987 = ((a20428) || (a20431));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1276 = (d1267 - a14107);
        b988 = ((d1267 < a14107));
        d1277 = (t7776 - a14106);
        d1278 = (d1277 - b988);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20434 = ((t7776 < a14106));
        a20435 = ((t7776 == a14106));
        a20436 = ((a20435) && (b988));
        b989 = ((a20434) || (a20436));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1279 = (d1268 - b989);
        b990 = ((d1268 < b989));
        t7779 = (t7777 - b990);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1280 = (d1276 - b987);
        b991 = ((d1276 < b987));
        t7780 = (d1278 - b991);
        /* MPLessThanDI 64 */
        a20440 = ((d1278 == 0));
        b992 = ((a20440) && (b991));
        /* MPSubDDI 64 */
        d1281 = (d1279 - b992);
        b993 = ((d1279 < b992));
        t7781 = (t7779 - b993);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20443 = ((t7777 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20444 = ((d1268 == 0));
        a20445 = ((a20443) && (a20444));
        /* MPLessThan 64 */
        a20446 = ((a20445) && (b989));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20447 = ((d1267 == a14107));
        a20448 = ((a20435) && (a20447));
        a20449 = ((a20445) && (a20448));
        /* MPLessThan 128 */
        a20450 = ((a20449) && (b987));
        i342 = ((a20446) || (a20450));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7782 = ((i342) ? (t7777) : (t7781));
        t7783 = ((i342) ? (d1268) : (d1281));
        /* MPCondD 64 */
        t7784 = ((i342) ? (t7776) : (t7780));
        t7785 = ((i342) ? (d1267) : (d1280));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7786 = ((i342) ? (t7774) : (t7778));
        t7787 = ((i342) ? (d1259) : (d1275));
        /* MPCondD 64 */
        t7788 = ((i342) ? (d1255) : (d1271));
        t7789 = ((i342) ? (d1253) : (d1269));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a20451 = (256*i11);
        a20452 = (2*threadIdx.x);
        a20453 = (a20451 + a20452);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a20454 = (2*a20347);
        a20455 = (a20454 + 1);
        /* MPAssignDD 128 */
        a20456 = (2*a20455);
        /* MPAssignDD 64 */
        a20457 = (2*a20456);
        t7790 = P1[a20457];
        a20458 = (a20457 + 1);
        t7791 = P1[a20458];
        a20459 = (a20456 + 1);
        /* MPAssignDD 64 */
        a20460 = (2*a20459);
        t7792 = P1[a20460];
        a20461 = (a20460 + 1);
        t7793 = P1[a20461];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1673 = (((uint128_t ) t7793) + ((uint128_t ) t7789));
        t7794 = ((uint64_t ) s1673);
        c918 = (s1673 >> 64);
        s1674 = (((uint128_t ) t7792) + ((uint128_t ) t7788));
        s1675 = (((uint128_t ) s1674) + ((uint128_t ) c918));
        t7795 = ((uint64_t ) s1675);
        c919 = (s1675 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1676 = (((uint128_t ) t7791) + ((uint128_t ) t7787));
        t7796 = ((uint64_t ) s1676);
        c920 = (s1676 >> 64);
        s1677 = (((uint128_t ) t7790) + ((uint128_t ) t7786));
        s1678 = (((uint128_t ) s1677) + ((uint128_t ) c920));
        t7797 = ((uint64_t ) s1678);
        c921 = (s1678 >> 64);
        /* MPPropagateCarry 64 */
        t7798 = (t7796 + c919);
        a20462 = ((t7798 == 0));
        a20463 = (t7797 + c919);
        t7799 = ((a20462) ? (a20463) : (t7797));
        a20464 = ((t7799 == 0));
        a20465 = ((a20464) && (a20462));
        a20466 = (c921 + c919);
        t7800 = ((a20465) ? (a20466) : (c921));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20470 = (2*a20454);
        a20471 = (a20470 + 1);
        /* MPAssignDD 64 */
        a20472 = (2*a20471);
        t7802 = P1[a20472];
        a20473 = (a20472 + 1);
        t7803 = P1[a20473];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1679 = (((uint128_t ) t7803) + ((uint128_t ) t7785));
        t7804 = ((uint64_t ) s1679);
        c922 = (s1679 >> 64);
        s1680 = (((uint128_t ) t7802) + ((uint128_t ) t7784));
        s1681 = (((uint128_t ) s1680) + ((uint128_t ) c922));
        t7805 = ((uint64_t ) s1681);
        c923 = (s1681 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7806 = ((uint64_t ) t7783);
        c924 = (t7783 >> 64);
        s1682 = (((uint128_t ) t7782) + ((uint128_t ) c924));
        t7807 = ((uint64_t ) s1682);
        /* MPPropagateCarry 64 */
        t7808 = (t7806 + c923);
        a20474 = ((t7808 == 0));
        a20475 = (t7807 + c923);
        t7809 = ((a20474) ? (a20475) : (t7807));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1683 = (((uint128_t ) t7804) + ((uint128_t ) t7800));
        t7812 = ((uint64_t ) s1683);
        c926 = (s1683 >> 64);
        s1684 = (((uint128_t ) t7805) + ((uint128_t ) c926));
        t7813 = ((uint64_t ) s1684);
        /* MPEqualDI 64 */
        a20482 = ((t7813 == 0));
        a20483 = ((t7812 == 0));
        a20484 = ((a20482) && (a20483));
        /* MPAddDDI 64 */
        s1685 = (((uint128_t ) t7808) + ((uint128_t ) t7800));
        t7814 = ((uint64_t ) s1685);
        c927 = (s1685 >> 64);
        s1686 = (((uint128_t ) t7809) + ((uint128_t ) c927));
        t7815 = ((uint64_t ) s1686);
        /* MPCondD 64 */
        t7816 = ((a20484) ? (t7815) : (t7809));
        t7817 = ((a20484) ? (t7814) : (t7808));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20485 = ((0 < t7816));
        a20486 = ((0 == t7816));
        a20487 = ((0 < t7817));
        a20488 = ((a20486) && (a20487));
        a20489 = ((a20485) || (a20488));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20490 = ((0 == t7817));
        a20491 = ((a20486) && (a20490));
        /* MPLessThan 64 */
        a20492 = ((a14106 < t7813));
        a20493 = ((a14106 == t7813));
        a20494 = ((a14107 < t7812));
        a20495 = ((a20493) && (a20494));
        a20496 = ((a20492) || (a20495));
        a20497 = ((a20491) && (a20496));
        a20498 = ((a20489) || (a20497));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20499 = ((a14107 == t7812));
        a20500 = ((a20493) && (a20499));
        a20501 = ((a20491) && (a20500));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20502 = ((a14108 < t7799));
        a20503 = ((a14108 == t7799));
        a20504 = ((a14109 < t7798));
        a20505 = ((a20503) && (a20504));
        a20506 = ((a20502) || (a20505));
        /* MPEqual 64 */
        a20507 = ((a14109 == t7798));
        a20508 = ((a20503) && (a20507));
        /* MPLessThan 64 */
        a20509 = ((a14110 < t7795));
        a20510 = ((a14110 == t7795));
        a20511 = ((a14111 < t7794));
        a20512 = ((a20510) && (a20511));
        a20513 = ((a20509) || (a20512));
        a20514 = ((a20508) && (a20513));
        a20515 = ((a20506) || (a20514));
        a20516 = ((a20501) && (a20515));
        i343 = ((a20498) || (a20516));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1282 = (t7794 - a14111);
        b994 = ((t7794 < a14111));
        d1283 = (t7795 - a14110);
        d1284 = (d1283 - b994);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20518 = ((t7795 < a14110));
        a20519 = ((t7795 == a14110));
        a20520 = ((a20519) && (b994));
        b995 = ((a20518) || (a20520));
        /* Begin of MPSubDDD 64 */
        d1285 = (t7798 - a14109);
        b996 = ((t7798 < a14109));
        d1286 = (t7799 - a14108);
        d1287 = (d1286 - b996);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1288 = (d1285 - b995);
        b997 = ((d1285 < b995));
        t7818 = (d1287 - b997);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20524 = ((t7799 < a14108));
        a20525 = ((t7799 == a14108));
        a20526 = ((a20525) && (b996));
        a20527 = ((a20524) || (a20526));
        /* MPEqual 64 */
        a20528 = ((t7798 == a14109));
        a20529 = ((a20525) && (a20528));
        /* MPLessThan 64 */
        a20530 = ((a20529) && (b995));
        b998 = ((a20527) || (a20530));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1289 = (t7812 - a14107);
        b999 = ((t7812 < a14107));
        d1290 = (t7813 - a14106);
        d1291 = (d1290 - b999);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1292 = (d1289 - b998);
        b1000 = ((d1289 < b998));
        t7819 = (d1291 - b1000);
        /* End of MPSubDDD 256 */
        a20534 = (2*a20453);
        /* MPCondD 128 */
        a20535 = (2*a20534);
        a20536 = (a20535 + 1);
        /* MPCondD 64 */
        a20537 = (2*a20536);
        P2[a20537] = ((i343) ? (t7819) : (t7813));
        a20538 = (a20537 + 1);
        P2[a20538] = ((i343) ? (d1292) : (t7812));
        a20539 = (a20534 + 1);
        /* MPCondD 128 */
        a20540 = (2*a20539);
        /* MPCondD 64 */
        a20541 = (2*a20540);
        P2[a20541] = ((i343) ? (t7818) : (t7799));
        a20542 = (a20541 + 1);
        P2[a20542] = ((i343) ? (d1288) : (t7798));
        a20543 = (a20540 + 1);
        /* MPCondD 64 */
        a20544 = (2*a20543);
        P2[a20544] = ((i343) ? (d1284) : (t7795));
        a20545 = (a20544 + 1);
        P2[a20545] = ((i343) ? (d1282) : (t7794));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        b1001 = (a20452 + a20451);
        a20546 = (b1001 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1293 = (t7793 - t7789);
        b1002 = ((t7793 < t7789));
        d1294 = (t7792 - t7788);
        d1295 = (d1294 - b1002);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20548 = ((t7792 < t7788));
        a20549 = ((t7792 == t7788));
        a20550 = ((a20549) && (b1002));
        b1003 = ((a20548) || (a20550));
        /* Begin of MPSubDDD 64 */
        d1296 = (t7791 - t7787);
        b1004 = ((t7791 < t7787));
        d1297 = (t7790 - t7786);
        d1298 = (d1297 - b1004);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1299 = (d1296 - b1003);
        b1005 = ((d1296 < b1003));
        t7820 = (d1298 - b1005);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20554 = ((t7790 < t7786));
        a20555 = ((t7790 == t7786));
        a20556 = ((a20555) && (b1004));
        a20557 = ((a20554) || (a20556));
        /* MPEqual 64 */
        a20558 = ((t7791 == t7787));
        a20559 = ((a20555) && (a20558));
        /* MPLessThan 64 */
        a20560 = ((a20559) && (b1003));
        b1006 = ((a20557) || (a20560));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1300 = (t7803 - t7785);
        b1007 = ((t7803 < t7785));
        d1301 = (t7802 - t7784);
        d1302 = (d1301 - b1007);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1303 = (d1300 - b1006);
        b1008 = ((d1300 < b1006));
        t7821 = (d1302 - b1008);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1687 = (((uint128_t ) d1293) + ((uint128_t ) a14111));
        t7822 = ((uint64_t ) s1687);
        c928 = (s1687 >> 64);
        s1688 = (((uint128_t ) d1295) + ((uint128_t ) a14110));
        s1689 = (((uint128_t ) s1688) + ((uint128_t ) c928));
        t7823 = ((uint64_t ) s1689);
        c929 = (s1689 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1690 = (((uint128_t ) d1299) + ((uint128_t ) a14109));
        t7824 = ((uint64_t ) s1690);
        c930 = (s1690 >> 64);
        s1691 = (((uint128_t ) t7820) + ((uint128_t ) a14108));
        s1692 = (((uint128_t ) s1691) + ((uint128_t ) c930));
        t7825 = ((uint64_t ) s1692);
        c931 = (s1692 >> 64);
        /* MPPropagateCarry 64 */
        t7826 = (t7824 + c929);
        a20564 = ((t7826 == 0));
        a20565 = (t7825 + c929);
        t7827 = ((a20564) ? (a20565) : (t7825));
        a20566 = ((t7827 == 0));
        a20567 = ((a20566) && (a20564));
        a20568 = (c931 + c929);
        t7828 = ((a20567) ? (a20568) : (c931));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1693 = (((uint128_t ) d1303) + ((uint128_t ) a14107));
        t7830 = ((uint64_t ) s1693);
        c932 = (s1693 >> 64);
        s1694 = (((uint128_t ) t7821) + ((uint128_t ) a14106));
        s1695 = (((uint128_t ) s1694) + ((uint128_t ) c932));
        t7831 = ((uint64_t ) s1695);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1696 = (((uint128_t ) t7830) + ((uint128_t ) t7828));
        t7832 = ((uint64_t ) s1696);
        c934 = (s1696 >> 64);
        s1697 = (((uint128_t ) t7831) + ((uint128_t ) c934));
        t7833 = ((uint64_t ) s1697);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20572 = ((0 < t7782));
        a20573 = ((0 == t7782));
        a20574 = ((0 < t7783));
        a20575 = ((a20573) && (a20574));
        a20576 = ((a20572) || (a20575));
        /* MPEqual 64 */
        a20577 = ((0 == t7783));
        a20578 = ((a20573) && (a20577));
        /* MPLessThan 64 */
        a20579 = ((t7802 < t7784));
        a20580 = ((t7802 == t7784));
        a20581 = ((a20580) && (b1007));
        a20582 = ((a20579) || (a20581));
        a20583 = ((a20578) && (a20582));
        a20584 = ((a20576) || (a20583));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20585 = ((t7803 == t7785));
        a20586 = ((a20580) && (a20585));
        a20587 = ((a20578) && (a20586));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a20588 = ((a20587) && (b1006));
        i344 = ((a20584) || (a20588));
        a20589 = (2*a20546);
        /* MPCondD 128 */
        a20590 = (2*a20589);
        a20591 = (a20590 + 1);
        /* MPCondD 64 */
        a20592 = (2*a20591);
        P2[a20592] = ((i344) ? (t7833) : (t7821));
        a20593 = (a20592 + 1);
        P2[a20593] = ((i344) ? (t7832) : (d1303));
        a20594 = (a20589 + 1);
        /* MPCondD 128 */
        a20595 = (2*a20594);
        /* MPCondD 64 */
        a20596 = (2*a20595);
        P2[a20596] = ((i344) ? (t7827) : (t7820));
        a20597 = (a20596 + 1);
        P2[a20597] = ((i344) ? (t7826) : (d1299));
        a20598 = (a20595 + 1);
        /* MPCondD 64 */
        a20599 = (2*a20598);
        P2[a20599] = ((i344) ? (t7823) : (d1295));
        a20600 = (a20599 + 1);
        P2[a20600] = ((i344) ? (t7822) : (d1293));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code6(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a20601, a20602, a20603, a20604, a20605, a20606, a20607, a20608, 
            a20609, a20610, a20611, a20612, a20613, a20614, a20615, a20616, 
            a20617, a20618, a20619, a20620, a20621, a20622, a20623, a20624, 
            a20625, a20626, a20627, a20628, a20629, a20648, a20649, a20650, 
            a20654, a20655, a20656, a20657, a20658, a20659, a20660, a20663, 
            a20664, a20665, a20670, a20674, a20675, a20676, a20680, a20681, 
            a20682, a20683, a20684, a20685, a20686, a20689, a20690, a20691, 
            a20695, a20698, a20699, a20700, a20701, a20702, a20703, a20704, 
            a20705, a20706, a20707, a20708, a20709, a20710, a20711, a20712, 
            a20713, a20714, a20715, a20716, a20717, a20719, a20720, a20725, 
            a20726, a20727, a20728, a20729, a20737, a20738, a20739, a20740, 
            a20741, a20742, a20743, a20744, a20745, a20746, a20747, a20748, 
            a20749, a20750, a20751, a20752, a20753, a20754, a20755, a20756, 
            a20757, a20758, a20759, a20760, a20761, a20762, a20763, a20764, 
            a20765, a20766, a20767, a20768, a20769, a20770, a20771, a20773, 
            a20774, a20775, a20779, a20780, a20781, a20782, a20783, a20784, 
            a20785, a20789, a20790, a20791, a20792, a20793, a20794, a20795, 
            a20796, a20797, a20798, a20799, a20800, a20801, a20803, a20804, 
            a20805, a20809, a20810, a20811, a20812, a20813, a20814, a20815, 
            a20819, a20821, a20822, a20827, a20828, a20829, a20830, a20831, 
            a20832, a20833, a20834, a20835, a20836, a20837, a20838, a20839, 
            a20840, a20841, a20842, a20843, a20844, a20845, a20846, a20847, 
            a20848, a20849, a20850, a20851, a20852, a20853, a20854, a20855, 
            b1009, b1011, b1012, b1013, b1014, b1015, b1016, b1017, 
            b1018, b1019, b1020, b1021, b1022, b1023, b1024, b1025, 
            b1026, b1027, b1028, b1029, b1030, b1031, b1032, b1033, 
            b1034, b1035, b1036, b1037, b1038, b1039, b1040, b1041, 
            b1042, b1043, b1044, b1045, b1046, b1047, c935, c936, 
            c937, c938, c939, c940, c941, c943, c944, c945, 
            c946, c947, c948, c949, c951, i345, i346, i347;
    uint64_t a14912, a14913, a14914, a14915, a14916, a14917, a15017, a15018, 
            a15019, a15020, a15021, a15022, a20630, a20631, a20632, a20633, 
            a20634, a20635, a20636, a20637, a20638, a20639, a20641, a20642, 
            a20643, a20644, a20645, a20646, a20718, a20721, a20730, a20820, 
            a20823, d1304, d1305, d1306, d1307, d1308, d1309, d1310, 
            d1311, d1312, d1313, d1314, d1315, d1316, d1317, d1318, 
            d1319, d1320, d1321, d1322, d1323, d1324, d1325, d1326, 
            d1327, d1328, d1329, d1330, d1331, d1332, d1333, d1334, 
            d1335, d1336, d1337, d1338, d1339, d1340, d1341, d1342, 
            d1343, d1344, d1345, d1346, d1347, d1348, d1349, d1350, 
            d1351, d1352, d1353, d1354, d1355, t4315, t4316, t4317, 
            t4318, t4319, t4320, t4321, t4322, t4323, t4324, t4325, 
            t4326, t4327, t4328, t4329, t4330, t4331, t4332, t4333, 
            t4334, t4335, t4336, t4337, t4338, t4339, t4340, t4341, 
            t4342, t4343, t4344, t4345, t4346, t4347, t4348, t4349, 
            t4350, t4351, t4352, t4353, t4354, t4355, t4356, t4357, 
            t4358, t4359, t4360, t4361, t4362, t7834, t7835, t7836, 
            t7837, t7838, t7839, t7840, t7841, t7842, t7843, t7844, 
            t7845, t7846, t7847, t7848, t7849, t7850, t7851, t7852, 
            t7853, t7854, t7855, t7856, t7857, t7858, t7859, t7860, 
            t7861, t7862, t7863, t7864, t7865, t7866, t7867, t7870, 
            t7871, t7872, t7873, t7874, t7875, t7876, t7877, t7878, 
            t7879, t7880, t7881, t7882, t7883, t7884, t7885, t7886, 
            t7887, t7888, t7889, t7890, t7891, t7892, t7893, t7894, 
            t7895, t7896, t7897, t7898, t7899, t7900, t7901, t7902, 
            t7903, t7904, t7905, t7906, t7907, t7908, t7909, t7910, 
            t7911, t7912, t7913, t7915, t7916, t7917, t7918, t7919, 
            t7920, t7921, t7922, t7925, t7926, t7927, t7928, t7929, 
            t7930, t7931, t7932, t7933, t7934, t7935, t7936, t7937, 
            t7938, t7939, t7940, t7941, t7943, t7944, t7945, t7946;
    uint128_t s1698, s1699, s1700, s1701, s1702, s1703, s1704, s1705, 
            s1706, s1707, s1708, s1709, s1710, s1711, s1712, s1713, 
            s1714, s1715, s1716, s1717, s1718, s1719, s1720, s1721, 
            s1722;
    for(int i9 = 0; i9 <= 3; i9++) {
        a20601 = (128*i9);
        a20602 = (threadIdx.x + a20601);
        a20603 = (a20602 + 512);
        a20604 = (a20603 % 64);
        a20605 = (64 + a20604);
        /* Begin of MPModMul 256 */
        a20606 = (2*a20605);
        a20607 = (a20606 + 1);
        a20608 = (2*a20603);
        a20609 = (a20608 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20610 = (2*a20606);
        a20611 = (a20610 + 1);
        /* MPAssignDD 64 */
        a20612 = (2*a20611);
        t7834 = twiddles[a20612];
        a20613 = (a20612 + 1);
        t7835 = twiddles[a20613];
        /* MPAssignDD 128 */
        a20614 = (2*a20607);
        /* MPAssignDD 64 */
        a20615 = (2*a20614);
        t7836 = twiddles[a20615];
        a20616 = (a20615 + 1);
        t7837 = twiddles[a20616];
        a20617 = (a20614 + 1);
        /* MPAssignDD 64 */
        a20618 = (2*a20617);
        t7838 = twiddles[a20618];
        a20619 = (a20618 + 1);
        t7839 = twiddles[a20619];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20620 = (2*a20608);
        a20621 = (a20620 + 1);
        /* MPAssignDD 64 */
        a20622 = (2*a20621);
        t7840 = P2[a20622];
        a20623 = (a20622 + 1);
        t7841 = P2[a20623];
        /* MPAssignDD 128 */
        a20624 = (2*a20609);
        /* MPAssignDD 64 */
        a20625 = (2*a20624);
        t7842 = P2[a20625];
        a20626 = (a20625 + 1);
        t7843 = P2[a20626];
        a20627 = (a20624 + 1);
        /* MPAssignDD 64 */
        a20628 = (2*a20627);
        t7844 = P2[a20628];
        a20629 = (a20628 + 1);
        t7845 = P2[a20629];
        MPMulQDD_L3_2(t4327, t4328, t4329, t4330, t4323, t4324, t4325, t4326, 
    t4319, t4320, t4321, t4322, t4315, t4316, t4317, t4318, 
    0, 0, t7834, t7835, t7836, t7837, t7838, t7839, 
    0, 0, t7840, t7841, t7842, t7843, t7844, t7845);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7846 = (t4319 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20630 = (t4319 << 6);
        a20631 = (t4320 >> 58);
        t7847 = (((a20630)|(a20631)));
        t7848 = (t4320 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7849 = (t4321 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7850 = (((t7848)|(t7849)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b1009 = ((int) 1);
        t7851 = (288230376151711744 - b1009);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7852 = (((t4329)&(t7851)));
        t7853 = (((t4330)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20632 = (t7852 << 6);
        a20633 = (t7853 >> 58);
        t7854 = (((a20632)|(a20633)));
        t7855 = (t7853 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7856 = (t4323 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20634 = (t4323 << 6);
        a20635 = (t4324 >> 58);
        t7857 = (((a20634)|(a20635)));
        t7858 = (t4324 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7859 = (t4325 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7860 = (((t7858)|(t7859)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7861 = (((t7855)|(t7856)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20636 = (t4325 << 6);
        a20637 = (t4326 >> 58);
        t7862 = (((a20636)|(a20637)));
        t7863 = (t4326 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7864 = (((t7863)|(t7846)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a14912 = mu[2];
        a14913 = mu[3];
        a14914 = mu[4];
        a14915 = mu[5];
        a14916 = mu[6];
        a14917 = mu[7];
        MPMulQDD_L3_1(t4359, t4360, t4361, t4362, t4355, t4356, t4357, t4358, 
    t4351, t4352, t4353, t4354, t4347, t4348, t4349, t4350, 
    t7854, t7861, t7857, t7860, t7862, t7864, t7847, t7850, 
    0, 0, a14912, a14913, a14914, a14915, a14916, a14917);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7865 = (t4351 >> 1);
        a20638 = (t4351 << 63);
        a20639 = (t4352 >> 1);
        t7866 = (((a20638)|(a20639)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7867 = (0 - b1009);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1304 = (2 - b1009);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7870 = (((t4360)&(d1304)));
        /* MPBinAndD 64 */
        t7871 = (((t4361)&(t7867)));
        t7872 = (((t4362)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7873 = (t7870 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7874 = (t7871 >> 1);
        a20641 = (t7871 << 63);
        a20642 = (t7872 >> 1);
        t7875 = (((a20641)|(a20642)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7876 = (((t7873)|(t7874)));
        /* Begin of MPShiftLeft1D */
        t7877 = (t7872 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7878 = (t4355 >> 1);
        a20643 = (t4355 << 63);
        a20644 = (t4356 >> 1);
        t7879 = (((a20643)|(a20644)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7880 = (((t7877)|(t7878)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7881 = (t4356 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7882 = (t4357 >> 1);
        a20645 = (t4357 << 63);
        a20646 = (t4358 >> 1);
        t7883 = (((a20645)|(a20646)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7884 = (((t7881)|(t7882)));
        /* Begin of MPShiftLeft1D */
        t7885 = (t4358 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7886 = (((t7885)|(t7865)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a15017 = modulus[2];
        a15018 = modulus[3];
        a15019 = modulus[4];
        a15020 = modulus[5];
        a15021 = modulus[6];
        a15022 = modulus[7];
        MPMulQDD_L3_1(t4343, t4344, t4345, t4346, t4339, t4340, t4341, t4342, 
    t4335, t4336, t4337, t4338, t4331, t4332, t4333, t4334, 
    t7876, t7875, t7880, t7879, t7884, t7883, t7886, t7866, 
    0, 0, a15017, a15018, a15019, a15020, a15021, a15022);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1305 = (t4318 - t4334);
        b1011 = ((t4318 < t4334));
        d1306 = (t4317 - t4333);
        d1307 = (d1306 - b1011);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20648 = ((t4317 < t4333));
        a20649 = ((t4317 == t4333));
        a20650 = ((a20649) && (b1011));
        b1012 = ((a20648) || (a20650));
        /* Begin of MPSubDDD 64 */
        d1308 = (t4316 - t4332);
        b1013 = ((t4316 < t4332));
        d1309 = (t4315 - t4331);
        d1310 = (d1309 - b1013);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1311 = (d1308 - b1012);
        b1014 = ((d1308 < b1012));
        t7887 = (d1310 - b1014);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20654 = ((t4315 < t4331));
        a20655 = ((t4315 == t4331));
        a20656 = ((a20655) && (b1013));
        a20657 = ((a20654) || (a20656));
        /* MPEqual 64 */
        a20658 = ((t4316 == t4332));
        a20659 = ((a20655) && (a20658));
        /* MPLessThan 64 */
        a20660 = ((a20659) && (b1012));
        b1015 = ((a20657) || (a20660));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1312 = (t4322 - t4338);
        b1016 = ((t4322 < t4338));
        d1313 = (t4321 - t4337);
        d1314 = (d1313 - b1016);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20663 = ((t4321 < t4337));
        a20664 = ((t4321 == t4337));
        a20665 = ((a20664) && (b1016));
        b1017 = ((a20663) || (a20665));
        /* Begin of MPSubDDD 64 */
        d1315 = (t4320 - t4336);
        b1018 = ((t4320 < t4336));
        d1316 = (t4319 - t4335);
        d1317 = (d1316 - b1018);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1318 = (d1315 - b1017);
        b1019 = ((d1315 < b1017));
        t7888 = (d1317 - b1019);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1319 = (d1312 - b1015);
        b1020 = ((d1312 < b1015));
        t7889 = (d1314 - b1020);
        /* MPLessThanDI 64 */
        a20670 = ((d1314 == 0));
        b1021 = ((a20670) && (b1020));
        /* MPSubDDI 64 */
        d1320 = (d1318 - b1021);
        b1022 = ((d1318 < b1021));
        t7890 = (t7888 - b1022);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1321 = (d1305 - a15022);
        b1023 = ((d1305 < a15022));
        d1322 = (d1307 - a15021);
        d1323 = (d1322 - b1023);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20674 = ((d1307 < a15021));
        a20675 = ((d1307 == a15021));
        a20676 = ((a20675) && (b1023));
        b1024 = ((a20674) || (a20676));
        /* Begin of MPSubDDD 64 */
        d1324 = (d1311 - a15020);
        b1025 = ((d1311 < a15020));
        d1325 = (t7887 - a15019);
        d1326 = (d1325 - b1025);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1327 = (d1324 - b1024);
        b1026 = ((d1324 < b1024));
        t7891 = (d1326 - b1026);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20680 = ((t7887 < a15019));
        a20681 = ((t7887 == a15019));
        a20682 = ((a20681) && (b1025));
        a20683 = ((a20680) || (a20682));
        /* MPEqual 64 */
        a20684 = ((d1311 == a15020));
        a20685 = ((a20681) && (a20684));
        /* MPLessThan 64 */
        a20686 = ((a20685) && (b1024));
        b1027 = ((a20683) || (a20686));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1328 = (d1319 - a15018);
        b1028 = ((d1319 < a15018));
        d1329 = (t7889 - a15017);
        d1330 = (d1329 - b1028);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20689 = ((t7889 < a15017));
        a20690 = ((t7889 == a15017));
        a20691 = ((a20690) && (b1028));
        b1029 = ((a20689) || (a20691));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1331 = (d1320 - b1029);
        b1030 = ((d1320 < b1029));
        t7892 = (t7890 - b1030);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1332 = (d1328 - b1027);
        b1031 = ((d1328 < b1027));
        t7893 = (d1330 - b1031);
        /* MPLessThanDI 64 */
        a20695 = ((d1330 == 0));
        b1032 = ((a20695) && (b1031));
        /* MPSubDDI 64 */
        d1333 = (d1331 - b1032);
        b1033 = ((d1331 < b1032));
        t7894 = (t7892 - b1033);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20698 = ((t7890 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20699 = ((d1320 == 0));
        a20700 = ((a20698) && (a20699));
        /* MPLessThan 64 */
        a20701 = ((a20700) && (b1029));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20702 = ((d1319 == a15018));
        a20703 = ((a20690) && (a20702));
        a20704 = ((a20700) && (a20703));
        /* MPLessThan 128 */
        a20705 = ((a20704) && (b1027));
        i345 = ((a20701) || (a20705));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7895 = ((i345) ? (t7890) : (t7894));
        t7896 = ((i345) ? (d1320) : (d1333));
        /* MPCondD 64 */
        t7897 = ((i345) ? (t7889) : (t7893));
        t7898 = ((i345) ? (d1319) : (d1332));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t7899 = ((i345) ? (t7887) : (t7891));
        t7900 = ((i345) ? (d1311) : (d1327));
        /* MPCondD 64 */
        t7901 = ((i345) ? (d1307) : (d1323));
        t7902 = ((i345) ? (d1305) : (d1321));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a20706 = (2*threadIdx.x);
        a20707 = (256*i9);
        a20708 = (a20706 + a20707);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a20709 = (2*a20602);
        a20710 = (a20709 + 1);
        /* MPAssignDD 128 */
        a20711 = (2*a20710);
        /* MPAssignDD 64 */
        a20712 = (2*a20711);
        t7903 = P2[a20712];
        a20713 = (a20712 + 1);
        t7904 = P2[a20713];
        a20714 = (a20711 + 1);
        /* MPAssignDD 64 */
        a20715 = (2*a20714);
        t7905 = P2[a20715];
        a20716 = (a20715 + 1);
        t7906 = P2[a20716];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1698 = (((uint128_t ) t7906) + ((uint128_t ) t7902));
        t7907 = ((uint64_t ) s1698);
        c935 = (s1698 >> 64);
        s1699 = (((uint128_t ) t7905) + ((uint128_t ) t7901));
        s1700 = (((uint128_t ) s1699) + ((uint128_t ) c935));
        t7908 = ((uint64_t ) s1700);
        c936 = (s1700 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1701 = (((uint128_t ) t7904) + ((uint128_t ) t7900));
        t7909 = ((uint64_t ) s1701);
        c937 = (s1701 >> 64);
        s1702 = (((uint128_t ) t7903) + ((uint128_t ) t7899));
        s1703 = (((uint128_t ) s1702) + ((uint128_t ) c937));
        t7910 = ((uint64_t ) s1703);
        c938 = (s1703 >> 64);
        /* MPPropagateCarry 64 */
        t7911 = (t7909 + c936);
        a20717 = ((t7911 == 0));
        a20718 = (t7910 + c936);
        t7912 = ((a20717) ? (a20718) : (t7910));
        a20719 = ((t7912 == 0));
        a20720 = ((a20719) && (a20717));
        a20721 = (c938 + c936);
        t7913 = ((a20720) ? (a20721) : (c938));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20725 = (2*a20709);
        a20726 = (a20725 + 1);
        /* MPAssignDD 64 */
        a20727 = (2*a20726);
        t7915 = P2[a20727];
        a20728 = (a20727 + 1);
        t7916 = P2[a20728];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1704 = (((uint128_t ) t7916) + ((uint128_t ) t7898));
        t7917 = ((uint64_t ) s1704);
        c939 = (s1704 >> 64);
        s1705 = (((uint128_t ) t7915) + ((uint128_t ) t7897));
        s1706 = (((uint128_t ) s1705) + ((uint128_t ) c939));
        t7918 = ((uint64_t ) s1706);
        c940 = (s1706 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t7919 = ((uint64_t ) t7896);
        c941 = (t7896 >> 64);
        s1707 = (((uint128_t ) t7895) + ((uint128_t ) c941));
        t7920 = ((uint64_t ) s1707);
        /* MPPropagateCarry 64 */
        t7921 = (t7919 + c940);
        a20729 = ((t7921 == 0));
        a20730 = (t7920 + c940);
        t7922 = ((a20729) ? (a20730) : (t7920));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1708 = (((uint128_t ) t7917) + ((uint128_t ) t7913));
        t7925 = ((uint64_t ) s1708);
        c943 = (s1708 >> 64);
        s1709 = (((uint128_t ) t7918) + ((uint128_t ) c943));
        t7926 = ((uint64_t ) s1709);
        /* MPEqualDI 64 */
        a20737 = ((t7926 == 0));
        a20738 = ((t7925 == 0));
        a20739 = ((a20737) && (a20738));
        /* MPAddDDI 64 */
        s1710 = (((uint128_t ) t7921) + ((uint128_t ) t7913));
        t7927 = ((uint64_t ) s1710);
        c944 = (s1710 >> 64);
        s1711 = (((uint128_t ) t7922) + ((uint128_t ) c944));
        t7928 = ((uint64_t ) s1711);
        /* MPCondD 64 */
        t7929 = ((a20739) ? (t7928) : (t7922));
        t7930 = ((a20739) ? (t7927) : (t7921));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20740 = ((0 < t7929));
        a20741 = ((0 == t7929));
        a20742 = ((0 < t7930));
        a20743 = ((a20741) && (a20742));
        a20744 = ((a20740) || (a20743));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20745 = ((0 == t7930));
        a20746 = ((a20741) && (a20745));
        /* MPLessThan 64 */
        a20747 = ((a15017 < t7926));
        a20748 = ((a15017 == t7926));
        a20749 = ((a15018 < t7925));
        a20750 = ((a20748) && (a20749));
        a20751 = ((a20747) || (a20750));
        a20752 = ((a20746) && (a20751));
        a20753 = ((a20744) || (a20752));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20754 = ((a15018 == t7925));
        a20755 = ((a20748) && (a20754));
        a20756 = ((a20746) && (a20755));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20757 = ((a15019 < t7912));
        a20758 = ((a15019 == t7912));
        a20759 = ((a15020 < t7911));
        a20760 = ((a20758) && (a20759));
        a20761 = ((a20757) || (a20760));
        /* MPEqual 64 */
        a20762 = ((a15020 == t7911));
        a20763 = ((a20758) && (a20762));
        /* MPLessThan 64 */
        a20764 = ((a15021 < t7908));
        a20765 = ((a15021 == t7908));
        a20766 = ((a15022 < t7907));
        a20767 = ((a20765) && (a20766));
        a20768 = ((a20764) || (a20767));
        a20769 = ((a20763) && (a20768));
        a20770 = ((a20761) || (a20769));
        a20771 = ((a20756) && (a20770));
        i346 = ((a20753) || (a20771));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1334 = (t7907 - a15022);
        b1034 = ((t7907 < a15022));
        d1335 = (t7908 - a15021);
        d1336 = (d1335 - b1034);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20773 = ((t7908 < a15021));
        a20774 = ((t7908 == a15021));
        a20775 = ((a20774) && (b1034));
        b1035 = ((a20773) || (a20775));
        /* Begin of MPSubDDD 64 */
        d1337 = (t7911 - a15020);
        b1036 = ((t7911 < a15020));
        d1338 = (t7912 - a15019);
        d1339 = (d1338 - b1036);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1340 = (d1337 - b1035);
        b1037 = ((d1337 < b1035));
        t7931 = (d1339 - b1037);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20779 = ((t7912 < a15019));
        a20780 = ((t7912 == a15019));
        a20781 = ((a20780) && (b1036));
        a20782 = ((a20779) || (a20781));
        /* MPEqual 64 */
        a20783 = ((t7911 == a15020));
        a20784 = ((a20780) && (a20783));
        /* MPLessThan 64 */
        a20785 = ((a20784) && (b1035));
        b1038 = ((a20782) || (a20785));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1341 = (t7925 - a15018);
        b1039 = ((t7925 < a15018));
        d1342 = (t7926 - a15017);
        d1343 = (d1342 - b1039);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1344 = (d1341 - b1038);
        b1040 = ((d1341 < b1038));
        t7932 = (d1343 - b1040);
        /* End of MPSubDDD 256 */
        a20789 = (2*a20708);
        /* MPCondD 128 */
        a20790 = (2*a20789);
        a20791 = (a20790 + 1);
        /* MPCondD 64 */
        a20792 = (2*a20791);
        P1[a20792] = ((i346) ? (t7932) : (t7926));
        a20793 = (a20792 + 1);
        P1[a20793] = ((i346) ? (d1344) : (t7925));
        a20794 = (a20789 + 1);
        /* MPCondD 128 */
        a20795 = (2*a20794);
        /* MPCondD 64 */
        a20796 = (2*a20795);
        P1[a20796] = ((i346) ? (t7931) : (t7912));
        a20797 = (a20796 + 1);
        P1[a20797] = ((i346) ? (d1340) : (t7911));
        a20798 = (a20795 + 1);
        /* MPCondD 64 */
        a20799 = (2*a20798);
        P1[a20799] = ((i346) ? (d1336) : (t7908));
        a20800 = (a20799 + 1);
        P1[a20800] = ((i346) ? (d1334) : (t7907));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        a20801 = (a20708 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1345 = (t7906 - t7902);
        b1041 = ((t7906 < t7902));
        d1346 = (t7905 - t7901);
        d1347 = (d1346 - b1041);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20803 = ((t7905 < t7901));
        a20804 = ((t7905 == t7901));
        a20805 = ((a20804) && (b1041));
        b1042 = ((a20803) || (a20805));
        /* Begin of MPSubDDD 64 */
        d1348 = (t7904 - t7900);
        b1043 = ((t7904 < t7900));
        d1349 = (t7903 - t7899);
        d1350 = (d1349 - b1043);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1351 = (d1348 - b1042);
        b1044 = ((d1348 < b1042));
        t7933 = (d1350 - b1044);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20809 = ((t7903 < t7899));
        a20810 = ((t7903 == t7899));
        a20811 = ((a20810) && (b1043));
        a20812 = ((a20809) || (a20811));
        /* MPEqual 64 */
        a20813 = ((t7904 == t7900));
        a20814 = ((a20810) && (a20813));
        /* MPLessThan 64 */
        a20815 = ((a20814) && (b1042));
        b1045 = ((a20812) || (a20815));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1352 = (t7916 - t7898);
        b1046 = ((t7916 < t7898));
        d1353 = (t7915 - t7897);
        d1354 = (d1353 - b1046);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1355 = (d1352 - b1045);
        b1047 = ((d1352 < b1045));
        t7934 = (d1354 - b1047);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1712 = (((uint128_t ) d1345) + ((uint128_t ) a15022));
        t7935 = ((uint64_t ) s1712);
        c945 = (s1712 >> 64);
        s1713 = (((uint128_t ) d1347) + ((uint128_t ) a15021));
        s1714 = (((uint128_t ) s1713) + ((uint128_t ) c945));
        t7936 = ((uint64_t ) s1714);
        c946 = (s1714 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1715 = (((uint128_t ) d1351) + ((uint128_t ) a15020));
        t7937 = ((uint64_t ) s1715);
        c947 = (s1715 >> 64);
        s1716 = (((uint128_t ) t7933) + ((uint128_t ) a15019));
        s1717 = (((uint128_t ) s1716) + ((uint128_t ) c947));
        t7938 = ((uint64_t ) s1717);
        c948 = (s1717 >> 64);
        /* MPPropagateCarry 64 */
        t7939 = (t7937 + c946);
        a20819 = ((t7939 == 0));
        a20820 = (t7938 + c946);
        t7940 = ((a20819) ? (a20820) : (t7938));
        a20821 = ((t7940 == 0));
        a20822 = ((a20821) && (a20819));
        a20823 = (c948 + c946);
        t7941 = ((a20822) ? (a20823) : (c948));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1718 = (((uint128_t ) d1355) + ((uint128_t ) a15018));
        t7943 = ((uint64_t ) s1718);
        c949 = (s1718 >> 64);
        s1719 = (((uint128_t ) t7934) + ((uint128_t ) a15017));
        s1720 = (((uint128_t ) s1719) + ((uint128_t ) c949));
        t7944 = ((uint64_t ) s1720);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1721 = (((uint128_t ) t7943) + ((uint128_t ) t7941));
        t7945 = ((uint64_t ) s1721);
        c951 = (s1721 >> 64);
        s1722 = (((uint128_t ) t7944) + ((uint128_t ) c951));
        t7946 = ((uint64_t ) s1722);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20827 = ((0 < t7895));
        a20828 = ((0 == t7895));
        a20829 = ((0 < t7896));
        a20830 = ((a20828) && (a20829));
        a20831 = ((a20827) || (a20830));
        /* MPEqual 64 */
        a20832 = ((0 == t7896));
        a20833 = ((a20828) && (a20832));
        /* MPLessThan 64 */
        a20834 = ((t7915 < t7897));
        a20835 = ((t7915 == t7897));
        a20836 = ((a20835) && (b1046));
        a20837 = ((a20834) || (a20836));
        a20838 = ((a20833) && (a20837));
        a20839 = ((a20831) || (a20838));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20840 = ((t7916 == t7898));
        a20841 = ((a20835) && (a20840));
        a20842 = ((a20833) && (a20841));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a20843 = ((a20842) && (b1045));
        i347 = ((a20839) || (a20843));
        a20844 = (2*a20801);
        /* MPCondD 128 */
        a20845 = (2*a20844);
        a20846 = (a20845 + 1);
        /* MPCondD 64 */
        a20847 = (2*a20846);
        P1[a20847] = ((i347) ? (t7946) : (t7934));
        a20848 = (a20847 + 1);
        P1[a20848] = ((i347) ? (t7945) : (d1355));
        a20849 = (a20844 + 1);
        /* MPCondD 128 */
        a20850 = (2*a20849);
        /* MPCondD 64 */
        a20851 = (2*a20850);
        P1[a20851] = ((i347) ? (t7940) : (t7933));
        a20852 = (a20851 + 1);
        P1[a20852] = ((i347) ? (t7939) : (d1351));
        a20853 = (a20850 + 1);
        /* MPCondD 64 */
        a20854 = (2*a20853);
        P1[a20854] = ((i347) ? (t7936) : (d1347));
        a20855 = (a20854 + 1);
        P1[a20855] = ((i347) ? (t7935) : (d1345));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code7(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a20856, a20857, a20858, a20859, a20860, a20861, a20862, a20863, 
            a20864, a20865, a20866, a20867, a20868, a20869, a20870, a20871, 
            a20872, a20873, a20874, a20875, a20876, a20877, a20878, a20879, 
            a20880, a20881, a20882, a20883, a20884, a20903, a20904, a20905, 
            a20909, a20910, a20911, a20912, a20913, a20914, a20915, a20918, 
            a20919, a20920, a20925, a20929, a20930, a20931, a20935, a20936, 
            a20937, a20938, a20939, a20940, a20941, a20944, a20945, a20946, 
            a20950, a20953, a20954, a20955, a20956, a20957, a20958, a20959, 
            a20960, a20961, a20962, a20963, a20964, a20965, a20966, a20967, 
            a20968, a20969, a20970, a20971, a20972, a20974, a20975, a20980, 
            a20981, a20982, a20983, a20984, a20992, a20993, a20994, a20995, 
            a20996, a20997, a20998, a20999, a21000, a21001, a21002, a21003, 
            a21004, a21005, a21006, a21007, a21008, a21009, a21010, a21011, 
            a21012, a21013, a21014, a21015, a21016, a21017, a21018, a21019, 
            a21020, a21021, a21022, a21023, a21024, a21025, a21026, a21028, 
            a21029, a21030, a21034, a21035, a21036, a21037, a21038, a21039, 
            a21040, a21044, a21045, a21046, a21047, a21048, a21049, a21050, 
            a21051, a21052, a21053, a21054, a21055, a21056, a21058, a21059, 
            a21060, a21064, a21065, a21066, a21067, a21068, a21069, a21070, 
            a21074, a21076, a21077, a21082, a21083, a21084, a21085, a21086, 
            a21087, a21088, a21089, a21090, a21091, a21092, a21093, a21094, 
            a21095, a21096, a21097, a21098, a21099, a21100, a21101, a21102, 
            a21103, a21104, a21105, a21106, a21107, a21108, a21109, a21110, 
            b1048, b1050, b1051, b1052, b1053, b1054, b1055, b1056, 
            b1057, b1058, b1059, b1060, b1061, b1062, b1063, b1064, 
            b1065, b1066, b1067, b1068, b1069, b1070, b1071, b1072, 
            b1073, b1074, b1075, b1076, b1077, b1078, b1079, b1080, 
            b1081, b1082, b1083, b1084, b1085, b1086, c952, c953, 
            c954, c955, c956, c957, c958, c960, c961, c962, 
            c963, c964, c965, c966, c968, i348, i349, i350;
    uint64_t a15823, a15824, a15825, a15826, a15827, a15828, a15928, a15929, 
            a15930, a15931, a15932, a15933, a20885, a20886, a20887, a20888, 
            a20889, a20890, a20891, a20892, a20893, a20894, a20896, a20897, 
            a20898, a20899, a20900, a20901, a20973, a20976, a20985, a21075, 
            a21078, d1356, d1357, d1358, d1359, d1360, d1361, d1362, 
            d1363, d1364, d1365, d1366, d1367, d1368, d1369, d1370, 
            d1371, d1372, d1373, d1374, d1375, d1376, d1377, d1378, 
            d1379, d1380, d1381, d1382, d1383, d1384, d1385, d1386, 
            d1387, d1388, d1389, d1390, d1391, d1392, d1393, d1394, 
            d1395, d1396, d1397, d1398, d1399, d1400, d1401, d1402, 
            d1403, d1404, d1405, d1406, d1407, t4379, t4380, t4381, 
            t4382, t4383, t4384, t4385, t4386, t4387, t4388, t4389, 
            t4390, t4391, t4392, t4393, t4394, t4395, t4396, t4397, 
            t4398, t4399, t4400, t4401, t4402, t4403, t4404, t4405, 
            t4406, t4407, t4408, t4409, t4410, t4411, t4412, t4413, 
            t4414, t4415, t4416, t4417, t4418, t4419, t4420, t4421, 
            t4422, t4423, t4424, t4425, t4426, t7947, t7948, t7949, 
            t7950, t7951, t7952, t7953, t7954, t7955, t7956, t7957, 
            t7958, t7959, t7960, t7961, t7962, t7963, t7964, t7965, 
            t7966, t7967, t7968, t7969, t7970, t7971, t7972, t7973, 
            t7974, t7975, t7976, t7977, t7978, t7979, t7980, t7983, 
            t7984, t7985, t7986, t7987, t7988, t7989, t7990, t7991, 
            t7992, t7993, t7994, t7995, t7996, t7997, t7998, t7999, 
            t8000, t8001, t8002, t8003, t8004, t8005, t8006, t8007, 
            t8008, t8009, t8010, t8011, t8012, t8013, t8014, t8015, 
            t8016, t8017, t8018, t8019, t8020, t8021, t8022, t8023, 
            t8024, t8025, t8026, t8028, t8029, t8030, t8031, t8032, 
            t8033, t8034, t8035, t8038, t8039, t8040, t8041, t8042, 
            t8043, t8044, t8045, t8046, t8047, t8048, t8049, t8050, 
            t8051, t8052, t8053, t8054, t8056, t8057, t8058, t8059;
    uint128_t s1723, s1724, s1725, s1726, s1727, s1728, s1729, s1730, 
            s1731, s1732, s1733, s1734, s1735, s1736, s1737, s1738, 
            s1739, s1740, s1741, s1742, s1743, s1744, s1745, s1746, 
            s1747;
    for(int i7 = 0; i7 <= 3; i7++) {
        a20856 = (128*i7);
        a20857 = (threadIdx.x + a20856);
        a20858 = (a20857 + 512);
        a20859 = (a20858 % 128);
        a20860 = (128 + a20859);
        /* Begin of MPModMul 256 */
        a20861 = (2*a20860);
        a20862 = (a20861 + 1);
        a20863 = (2*a20858);
        a20864 = (a20863 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20865 = (2*a20861);
        a20866 = (a20865 + 1);
        /* MPAssignDD 64 */
        a20867 = (2*a20866);
        t7947 = twiddles[a20867];
        a20868 = (a20867 + 1);
        t7948 = twiddles[a20868];
        /* MPAssignDD 128 */
        a20869 = (2*a20862);
        /* MPAssignDD 64 */
        a20870 = (2*a20869);
        t7949 = twiddles[a20870];
        a20871 = (a20870 + 1);
        t7950 = twiddles[a20871];
        a20872 = (a20869 + 1);
        /* MPAssignDD 64 */
        a20873 = (2*a20872);
        t7951 = twiddles[a20873];
        a20874 = (a20873 + 1);
        t7952 = twiddles[a20874];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20875 = (2*a20863);
        a20876 = (a20875 + 1);
        /* MPAssignDD 64 */
        a20877 = (2*a20876);
        t7953 = P1[a20877];
        a20878 = (a20877 + 1);
        t7954 = P1[a20878];
        /* MPAssignDD 128 */
        a20879 = (2*a20864);
        /* MPAssignDD 64 */
        a20880 = (2*a20879);
        t7955 = P1[a20880];
        a20881 = (a20880 + 1);
        t7956 = P1[a20881];
        a20882 = (a20879 + 1);
        /* MPAssignDD 64 */
        a20883 = (2*a20882);
        t7957 = P1[a20883];
        a20884 = (a20883 + 1);
        t7958 = P1[a20884];
        MPMulQDD_L3_2(t4391, t4392, t4393, t4394, t4387, t4388, t4389, t4390, 
    t4383, t4384, t4385, t4386, t4379, t4380, t4381, t4382, 
    0, 0, t7947, t7948, t7949, t7950, t7951, t7952, 
    0, 0, t7953, t7954, t7955, t7956, t7957, t7958);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7959 = (t4383 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20885 = (t4383 << 6);
        a20886 = (t4384 >> 58);
        t7960 = (((a20885)|(a20886)));
        t7961 = (t4384 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7962 = (t4385 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7963 = (((t7961)|(t7962)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b1048 = ((int) 1);
        t7964 = (288230376151711744 - b1048);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7965 = (((t4393)&(t7964)));
        t7966 = (((t4394)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20887 = (t7965 << 6);
        a20888 = (t7966 >> 58);
        t7967 = (((a20887)|(a20888)));
        t7968 = (t7966 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t7969 = (t4387 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a20889 = (t4387 << 6);
        a20890 = (t4388 >> 58);
        t7970 = (((a20889)|(a20890)));
        t7971 = (t4388 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t7972 = (t4389 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t7973 = (((t7971)|(t7972)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7974 = (((t7968)|(t7969)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a20891 = (t4389 << 6);
        a20892 = (t4390 >> 58);
        t7975 = (((a20891)|(a20892)));
        t7976 = (t4390 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t7977 = (((t7976)|(t7959)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a15823 = mu[2];
        a15824 = mu[3];
        a15825 = mu[4];
        a15826 = mu[5];
        a15827 = mu[6];
        a15828 = mu[7];
        MPMulQDD_L3_1(t4423, t4424, t4425, t4426, t4419, t4420, t4421, t4422, 
    t4415, t4416, t4417, t4418, t4411, t4412, t4413, t4414, 
    t7967, t7974, t7970, t7973, t7975, t7977, t7960, t7963, 
    0, 0, a15823, a15824, a15825, a15826, a15827, a15828);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7978 = (t4415 >> 1);
        a20893 = (t4415 << 63);
        a20894 = (t4416 >> 1);
        t7979 = (((a20893)|(a20894)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t7980 = (0 - b1048);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1356 = (2 - b1048);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t7983 = (((t4424)&(d1356)));
        /* MPBinAndD 64 */
        t7984 = (((t4425)&(t7980)));
        t7985 = (((t4426)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7986 = (t7983 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7987 = (t7984 >> 1);
        a20896 = (t7984 << 63);
        a20897 = (t7985 >> 1);
        t7988 = (((a20896)|(a20897)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7989 = (((t7986)|(t7987)));
        /* Begin of MPShiftLeft1D */
        t7990 = (t7985 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t7991 = (t4419 >> 1);
        a20898 = (t4419 << 63);
        a20899 = (t4420 >> 1);
        t7992 = (((a20898)|(a20899)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7993 = (((t7990)|(t7991)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t7994 = (t4420 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t7995 = (t4421 >> 1);
        a20900 = (t4421 << 63);
        a20901 = (t4422 >> 1);
        t7996 = (((a20900)|(a20901)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t7997 = (((t7994)|(t7995)));
        /* Begin of MPShiftLeft1D */
        t7998 = (t4422 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t7999 = (((t7998)|(t7978)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a15928 = modulus[2];
        a15929 = modulus[3];
        a15930 = modulus[4];
        a15931 = modulus[5];
        a15932 = modulus[6];
        a15933 = modulus[7];
        MPMulQDD_L3_1(t4407, t4408, t4409, t4410, t4403, t4404, t4405, t4406, 
    t4399, t4400, t4401, t4402, t4395, t4396, t4397, t4398, 
    t7989, t7988, t7993, t7992, t7997, t7996, t7999, t7979, 
    0, 0, a15928, a15929, a15930, a15931, a15932, a15933);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1357 = (t4382 - t4398);
        b1050 = ((t4382 < t4398));
        d1358 = (t4381 - t4397);
        d1359 = (d1358 - b1050);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20903 = ((t4381 < t4397));
        a20904 = ((t4381 == t4397));
        a20905 = ((a20904) && (b1050));
        b1051 = ((a20903) || (a20905));
        /* Begin of MPSubDDD 64 */
        d1360 = (t4380 - t4396);
        b1052 = ((t4380 < t4396));
        d1361 = (t4379 - t4395);
        d1362 = (d1361 - b1052);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1363 = (d1360 - b1051);
        b1053 = ((d1360 < b1051));
        t8000 = (d1362 - b1053);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20909 = ((t4379 < t4395));
        a20910 = ((t4379 == t4395));
        a20911 = ((a20910) && (b1052));
        a20912 = ((a20909) || (a20911));
        /* MPEqual 64 */
        a20913 = ((t4380 == t4396));
        a20914 = ((a20910) && (a20913));
        /* MPLessThan 64 */
        a20915 = ((a20914) && (b1051));
        b1054 = ((a20912) || (a20915));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1364 = (t4386 - t4402);
        b1055 = ((t4386 < t4402));
        d1365 = (t4385 - t4401);
        d1366 = (d1365 - b1055);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20918 = ((t4385 < t4401));
        a20919 = ((t4385 == t4401));
        a20920 = ((a20919) && (b1055));
        b1056 = ((a20918) || (a20920));
        /* Begin of MPSubDDD 64 */
        d1367 = (t4384 - t4400);
        b1057 = ((t4384 < t4400));
        d1368 = (t4383 - t4399);
        d1369 = (d1368 - b1057);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1370 = (d1367 - b1056);
        b1058 = ((d1367 < b1056));
        t8001 = (d1369 - b1058);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1371 = (d1364 - b1054);
        b1059 = ((d1364 < b1054));
        t8002 = (d1366 - b1059);
        /* MPLessThanDI 64 */
        a20925 = ((d1366 == 0));
        b1060 = ((a20925) && (b1059));
        /* MPSubDDI 64 */
        d1372 = (d1370 - b1060);
        b1061 = ((d1370 < b1060));
        t8003 = (t8001 - b1061);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1373 = (d1357 - a15933);
        b1062 = ((d1357 < a15933));
        d1374 = (d1359 - a15932);
        d1375 = (d1374 - b1062);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20929 = ((d1359 < a15932));
        a20930 = ((d1359 == a15932));
        a20931 = ((a20930) && (b1062));
        b1063 = ((a20929) || (a20931));
        /* Begin of MPSubDDD 64 */
        d1376 = (d1363 - a15931);
        b1064 = ((d1363 < a15931));
        d1377 = (t8000 - a15930);
        d1378 = (d1377 - b1064);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1379 = (d1376 - b1063);
        b1065 = ((d1376 < b1063));
        t8004 = (d1378 - b1065);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a20935 = ((t8000 < a15930));
        a20936 = ((t8000 == a15930));
        a20937 = ((a20936) && (b1064));
        a20938 = ((a20935) || (a20937));
        /* MPEqual 64 */
        a20939 = ((d1363 == a15931));
        a20940 = ((a20936) && (a20939));
        /* MPLessThan 64 */
        a20941 = ((a20940) && (b1063));
        b1066 = ((a20938) || (a20941));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1380 = (d1371 - a15929);
        b1067 = ((d1371 < a15929));
        d1381 = (t8002 - a15928);
        d1382 = (d1381 - b1067);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a20944 = ((t8002 < a15928));
        a20945 = ((t8002 == a15928));
        a20946 = ((a20945) && (b1067));
        b1068 = ((a20944) || (a20946));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1383 = (d1372 - b1068);
        b1069 = ((d1372 < b1068));
        t8005 = (t8003 - b1069);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1384 = (d1380 - b1066);
        b1070 = ((d1380 < b1066));
        t8006 = (d1382 - b1070);
        /* MPLessThanDI 64 */
        a20950 = ((d1382 == 0));
        b1071 = ((a20950) && (b1070));
        /* MPSubDDI 64 */
        d1385 = (d1383 - b1071);
        b1072 = ((d1383 < b1071));
        t8007 = (t8005 - b1072);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20953 = ((t8003 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a20954 = ((d1372 == 0));
        a20955 = ((a20953) && (a20954));
        /* MPLessThan 64 */
        a20956 = ((a20955) && (b1068));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a20957 = ((d1371 == a15929));
        a20958 = ((a20945) && (a20957));
        a20959 = ((a20955) && (a20958));
        /* MPLessThan 128 */
        a20960 = ((a20959) && (b1066));
        i348 = ((a20956) || (a20960));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t8008 = ((i348) ? (t8003) : (t8007));
        t8009 = ((i348) ? (d1372) : (d1385));
        /* MPCondD 64 */
        t8010 = ((i348) ? (t8002) : (t8006));
        t8011 = ((i348) ? (d1371) : (d1384));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t8012 = ((i348) ? (t8000) : (t8004));
        t8013 = ((i348) ? (d1363) : (d1379));
        /* MPCondD 64 */
        t8014 = ((i348) ? (d1359) : (d1375));
        t8015 = ((i348) ? (d1357) : (d1373));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a20961 = (2*threadIdx.x);
        a20962 = (256*i7);
        a20963 = (a20961 + a20962);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a20964 = (2*a20857);
        a20965 = (a20964 + 1);
        /* MPAssignDD 128 */
        a20966 = (2*a20965);
        /* MPAssignDD 64 */
        a20967 = (2*a20966);
        t8016 = P1[a20967];
        a20968 = (a20967 + 1);
        t8017 = P1[a20968];
        a20969 = (a20966 + 1);
        /* MPAssignDD 64 */
        a20970 = (2*a20969);
        t8018 = P1[a20970];
        a20971 = (a20970 + 1);
        t8019 = P1[a20971];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1723 = (((uint128_t ) t8019) + ((uint128_t ) t8015));
        t8020 = ((uint64_t ) s1723);
        c952 = (s1723 >> 64);
        s1724 = (((uint128_t ) t8018) + ((uint128_t ) t8014));
        s1725 = (((uint128_t ) s1724) + ((uint128_t ) c952));
        t8021 = ((uint64_t ) s1725);
        c953 = (s1725 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1726 = (((uint128_t ) t8017) + ((uint128_t ) t8013));
        t8022 = ((uint64_t ) s1726);
        c954 = (s1726 >> 64);
        s1727 = (((uint128_t ) t8016) + ((uint128_t ) t8012));
        s1728 = (((uint128_t ) s1727) + ((uint128_t ) c954));
        t8023 = ((uint64_t ) s1728);
        c955 = (s1728 >> 64);
        /* MPPropagateCarry 64 */
        t8024 = (t8022 + c953);
        a20972 = ((t8024 == 0));
        a20973 = (t8023 + c953);
        t8025 = ((a20972) ? (a20973) : (t8023));
        a20974 = ((t8025 == 0));
        a20975 = ((a20974) && (a20972));
        a20976 = (c955 + c953);
        t8026 = ((a20975) ? (a20976) : (c955));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a20980 = (2*a20964);
        a20981 = (a20980 + 1);
        /* MPAssignDD 64 */
        a20982 = (2*a20981);
        t8028 = P1[a20982];
        a20983 = (a20982 + 1);
        t8029 = P1[a20983];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1729 = (((uint128_t ) t8029) + ((uint128_t ) t8011));
        t8030 = ((uint64_t ) s1729);
        c956 = (s1729 >> 64);
        s1730 = (((uint128_t ) t8028) + ((uint128_t ) t8010));
        s1731 = (((uint128_t ) s1730) + ((uint128_t ) c956));
        t8031 = ((uint64_t ) s1731);
        c957 = (s1731 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t8032 = ((uint64_t ) t8009);
        c958 = (t8009 >> 64);
        s1732 = (((uint128_t ) t8008) + ((uint128_t ) c958));
        t8033 = ((uint64_t ) s1732);
        /* MPPropagateCarry 64 */
        t8034 = (t8032 + c957);
        a20984 = ((t8034 == 0));
        a20985 = (t8033 + c957);
        t8035 = ((a20984) ? (a20985) : (t8033));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1733 = (((uint128_t ) t8030) + ((uint128_t ) t8026));
        t8038 = ((uint64_t ) s1733);
        c960 = (s1733 >> 64);
        s1734 = (((uint128_t ) t8031) + ((uint128_t ) c960));
        t8039 = ((uint64_t ) s1734);
        /* MPEqualDI 64 */
        a20992 = ((t8039 == 0));
        a20993 = ((t8038 == 0));
        a20994 = ((a20992) && (a20993));
        /* MPAddDDI 64 */
        s1735 = (((uint128_t ) t8034) + ((uint128_t ) t8026));
        t8040 = ((uint64_t ) s1735);
        c961 = (s1735 >> 64);
        s1736 = (((uint128_t ) t8035) + ((uint128_t ) c961));
        t8041 = ((uint64_t ) s1736);
        /* MPCondD 64 */
        t8042 = ((a20994) ? (t8041) : (t8035));
        t8043 = ((a20994) ? (t8040) : (t8034));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a20995 = ((0 < t8042));
        a20996 = ((0 == t8042));
        a20997 = ((0 < t8043));
        a20998 = ((a20996) && (a20997));
        a20999 = ((a20995) || (a20998));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a21000 = ((0 == t8043));
        a21001 = ((a20996) && (a21000));
        /* MPLessThan 64 */
        a21002 = ((a15928 < t8039));
        a21003 = ((a15928 == t8039));
        a21004 = ((a15929 < t8038));
        a21005 = ((a21003) && (a21004));
        a21006 = ((a21002) || (a21005));
        a21007 = ((a21001) && (a21006));
        a21008 = ((a20999) || (a21007));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21009 = ((a15929 == t8038));
        a21010 = ((a21003) && (a21009));
        a21011 = ((a21001) && (a21010));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21012 = ((a15930 < t8025));
        a21013 = ((a15930 == t8025));
        a21014 = ((a15931 < t8024));
        a21015 = ((a21013) && (a21014));
        a21016 = ((a21012) || (a21015));
        /* MPEqual 64 */
        a21017 = ((a15931 == t8024));
        a21018 = ((a21013) && (a21017));
        /* MPLessThan 64 */
        a21019 = ((a15932 < t8021));
        a21020 = ((a15932 == t8021));
        a21021 = ((a15933 < t8020));
        a21022 = ((a21020) && (a21021));
        a21023 = ((a21019) || (a21022));
        a21024 = ((a21018) && (a21023));
        a21025 = ((a21016) || (a21024));
        a21026 = ((a21011) && (a21025));
        i349 = ((a21008) || (a21026));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1386 = (t8020 - a15933);
        b1073 = ((t8020 < a15933));
        d1387 = (t8021 - a15932);
        d1388 = (d1387 - b1073);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21028 = ((t8021 < a15932));
        a21029 = ((t8021 == a15932));
        a21030 = ((a21029) && (b1073));
        b1074 = ((a21028) || (a21030));
        /* Begin of MPSubDDD 64 */
        d1389 = (t8024 - a15931);
        b1075 = ((t8024 < a15931));
        d1390 = (t8025 - a15930);
        d1391 = (d1390 - b1075);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1392 = (d1389 - b1074);
        b1076 = ((d1389 < b1074));
        t8044 = (d1391 - b1076);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21034 = ((t8025 < a15930));
        a21035 = ((t8025 == a15930));
        a21036 = ((a21035) && (b1075));
        a21037 = ((a21034) || (a21036));
        /* MPEqual 64 */
        a21038 = ((t8024 == a15931));
        a21039 = ((a21035) && (a21038));
        /* MPLessThan 64 */
        a21040 = ((a21039) && (b1074));
        b1077 = ((a21037) || (a21040));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1393 = (t8038 - a15929);
        b1078 = ((t8038 < a15929));
        d1394 = (t8039 - a15928);
        d1395 = (d1394 - b1078);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1396 = (d1393 - b1077);
        b1079 = ((d1393 < b1077));
        t8045 = (d1395 - b1079);
        /* End of MPSubDDD 256 */
        a21044 = (2*a20963);
        /* MPCondD 128 */
        a21045 = (2*a21044);
        a21046 = (a21045 + 1);
        /* MPCondD 64 */
        a21047 = (2*a21046);
        P2[a21047] = ((i349) ? (t8045) : (t8039));
        a21048 = (a21047 + 1);
        P2[a21048] = ((i349) ? (d1396) : (t8038));
        a21049 = (a21044 + 1);
        /* MPCondD 128 */
        a21050 = (2*a21049);
        /* MPCondD 64 */
        a21051 = (2*a21050);
        P2[a21051] = ((i349) ? (t8044) : (t8025));
        a21052 = (a21051 + 1);
        P2[a21052] = ((i349) ? (d1392) : (t8024));
        a21053 = (a21050 + 1);
        /* MPCondD 64 */
        a21054 = (2*a21053);
        P2[a21054] = ((i349) ? (d1388) : (t8021));
        a21055 = (a21054 + 1);
        P2[a21055] = ((i349) ? (d1386) : (t8020));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        a21056 = (a20963 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1397 = (t8019 - t8015);
        b1080 = ((t8019 < t8015));
        d1398 = (t8018 - t8014);
        d1399 = (d1398 - b1080);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21058 = ((t8018 < t8014));
        a21059 = ((t8018 == t8014));
        a21060 = ((a21059) && (b1080));
        b1081 = ((a21058) || (a21060));
        /* Begin of MPSubDDD 64 */
        d1400 = (t8017 - t8013);
        b1082 = ((t8017 < t8013));
        d1401 = (t8016 - t8012);
        d1402 = (d1401 - b1082);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1403 = (d1400 - b1081);
        b1083 = ((d1400 < b1081));
        t8046 = (d1402 - b1083);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21064 = ((t8016 < t8012));
        a21065 = ((t8016 == t8012));
        a21066 = ((a21065) && (b1082));
        a21067 = ((a21064) || (a21066));
        /* MPEqual 64 */
        a21068 = ((t8017 == t8013));
        a21069 = ((a21065) && (a21068));
        /* MPLessThan 64 */
        a21070 = ((a21069) && (b1081));
        b1084 = ((a21067) || (a21070));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1404 = (t8029 - t8011);
        b1085 = ((t8029 < t8011));
        d1405 = (t8028 - t8010);
        d1406 = (d1405 - b1085);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1407 = (d1404 - b1084);
        b1086 = ((d1404 < b1084));
        t8047 = (d1406 - b1086);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1737 = (((uint128_t ) d1397) + ((uint128_t ) a15933));
        t8048 = ((uint64_t ) s1737);
        c962 = (s1737 >> 64);
        s1738 = (((uint128_t ) d1399) + ((uint128_t ) a15932));
        s1739 = (((uint128_t ) s1738) + ((uint128_t ) c962));
        t8049 = ((uint64_t ) s1739);
        c963 = (s1739 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1740 = (((uint128_t ) d1403) + ((uint128_t ) a15931));
        t8050 = ((uint64_t ) s1740);
        c964 = (s1740 >> 64);
        s1741 = (((uint128_t ) t8046) + ((uint128_t ) a15930));
        s1742 = (((uint128_t ) s1741) + ((uint128_t ) c964));
        t8051 = ((uint64_t ) s1742);
        c965 = (s1742 >> 64);
        /* MPPropagateCarry 64 */
        t8052 = (t8050 + c963);
        a21074 = ((t8052 == 0));
        a21075 = (t8051 + c963);
        t8053 = ((a21074) ? (a21075) : (t8051));
        a21076 = ((t8053 == 0));
        a21077 = ((a21076) && (a21074));
        a21078 = (c965 + c963);
        t8054 = ((a21077) ? (a21078) : (c965));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1743 = (((uint128_t ) d1407) + ((uint128_t ) a15929));
        t8056 = ((uint64_t ) s1743);
        c966 = (s1743 >> 64);
        s1744 = (((uint128_t ) t8047) + ((uint128_t ) a15928));
        s1745 = (((uint128_t ) s1744) + ((uint128_t ) c966));
        t8057 = ((uint64_t ) s1745);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1746 = (((uint128_t ) t8056) + ((uint128_t ) t8054));
        t8058 = ((uint64_t ) s1746);
        c968 = (s1746 >> 64);
        s1747 = (((uint128_t ) t8057) + ((uint128_t ) c968));
        t8059 = ((uint64_t ) s1747);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21082 = ((0 < t8008));
        a21083 = ((0 == t8008));
        a21084 = ((0 < t8009));
        a21085 = ((a21083) && (a21084));
        a21086 = ((a21082) || (a21085));
        /* MPEqual 64 */
        a21087 = ((0 == t8009));
        a21088 = ((a21083) && (a21087));
        /* MPLessThan 64 */
        a21089 = ((t8028 < t8010));
        a21090 = ((t8028 == t8010));
        a21091 = ((a21090) && (b1085));
        a21092 = ((a21089) || (a21091));
        a21093 = ((a21088) && (a21092));
        a21094 = ((a21086) || (a21093));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21095 = ((t8029 == t8011));
        a21096 = ((a21090) && (a21095));
        a21097 = ((a21088) && (a21096));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a21098 = ((a21097) && (b1084));
        i350 = ((a21094) || (a21098));
        a21099 = (2*a21056);
        /* MPCondD 128 */
        a21100 = (2*a21099);
        a21101 = (a21100 + 1);
        /* MPCondD 64 */
        a21102 = (2*a21101);
        P2[a21102] = ((i350) ? (t8059) : (t8047));
        a21103 = (a21102 + 1);
        P2[a21103] = ((i350) ? (t8058) : (d1407));
        a21104 = (a21099 + 1);
        /* MPCondD 128 */
        a21105 = (2*a21104);
        /* MPCondD 64 */
        a21106 = (2*a21105);
        P2[a21106] = ((i350) ? (t8053) : (t8046));
        a21107 = (a21106 + 1);
        P2[a21107] = ((i350) ? (t8052) : (d1403));
        a21108 = (a21105 + 1);
        /* MPCondD 64 */
        a21109 = (2*a21108);
        P2[a21109] = ((i350) ? (t8049) : (d1399));
        a21110 = (a21109 + 1);
        P2[a21110] = ((i350) ? (t8048) : (d1397));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code8(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a21111, a21112, a21113, a21114, a21115, a21116, a21117, a21118, 
            a21119, a21120, a21121, a21122, a21123, a21124, a21125, a21126, 
            a21127, a21128, a21129, a21130, a21131, a21132, a21133, a21134, 
            a21135, a21136, a21137, a21138, a21139, a21158, a21159, a21160, 
            a21164, a21165, a21166, a21167, a21168, a21169, a21170, a21173, 
            a21174, a21175, a21180, a21184, a21185, a21186, a21190, a21191, 
            a21192, a21193, a21194, a21195, a21196, a21199, a21200, a21201, 
            a21205, a21208, a21209, a21210, a21211, a21212, a21213, a21214, 
            a21215, a21216, a21217, a21218, a21219, a21220, a21221, a21222, 
            a21223, a21224, a21225, a21226, a21227, a21229, a21230, a21235, 
            a21236, a21237, a21238, a21239, a21247, a21248, a21249, a21250, 
            a21251, a21252, a21253, a21254, a21255, a21256, a21257, a21258, 
            a21259, a21260, a21261, a21262, a21263, a21264, a21265, a21266, 
            a21267, a21268, a21269, a21270, a21271, a21272, a21273, a21274, 
            a21275, a21276, a21277, a21278, a21279, a21280, a21281, a21283, 
            a21284, a21285, a21289, a21290, a21291, a21292, a21293, a21294, 
            a21295, a21299, a21300, a21301, a21302, a21303, a21304, a21305, 
            a21306, a21307, a21308, a21309, a21310, a21311, a21313, a21314, 
            a21315, a21319, a21320, a21321, a21322, a21323, a21324, a21325, 
            a21329, a21331, a21332, a21337, a21338, a21339, a21340, a21341, 
            a21342, a21343, a21344, a21345, a21346, a21347, a21348, a21349, 
            a21350, a21351, a21352, a21353, a21354, a21355, a21356, a21357, 
            a21358, a21359, a21360, a21361, a21362, a21363, a21364, a21365, 
            b1087, b1089, b1090, b1091, b1092, b1093, b1094, b1095, 
            b1096, b1097, b1098, b1099, b1100, b1101, b1102, b1103, 
            b1104, b1105, b1106, b1107, b1108, b1109, b1110, b1111, 
            b1112, b1113, b1114, b1115, b1116, b1117, b1118, b1119, 
            b1120, b1121, b1122, b1123, b1124, b1125, c969, c970, 
            c971, c972, c973, c974, c975, c977, c978, c979, 
            c980, c981, c982, c983, c985, i351, i352, i353;
    uint64_t a16734, a16735, a16736, a16737, a16738, a16739, a16839, a16840, 
            a16841, a16842, a16843, a16844, a21140, a21141, a21142, a21143, 
            a21144, a21145, a21146, a21147, a21148, a21149, a21151, a21152, 
            a21153, a21154, a21155, a21156, a21228, a21231, a21240, a21330, 
            a21333, d1408, d1409, d1410, d1411, d1412, d1413, d1414, 
            d1415, d1416, d1417, d1418, d1419, d1420, d1421, d1422, 
            d1423, d1424, d1425, d1426, d1427, d1428, d1429, d1430, 
            d1431, d1432, d1433, d1434, d1435, d1436, d1437, d1438, 
            d1439, d1440, d1441, d1442, d1443, d1444, d1445, d1446, 
            d1447, d1448, d1449, d1450, d1451, d1452, d1453, d1454, 
            d1455, d1456, d1457, d1458, d1459, t4451, t4452, t4453, 
            t4454, t4455, t4456, t4457, t4458, t4459, t4460, t4461, 
            t4462, t4463, t4464, t4465, t4466, t4467, t4468, t4469, 
            t4470, t4471, t4472, t4473, t4474, t4475, t4476, t4477, 
            t4478, t4479, t4480, t4481, t4482, t4483, t4484, t4485, 
            t4486, t4487, t4488, t4489, t4490, t4491, t4492, t4493, 
            t4494, t4495, t4496, t4497, t4498, t8060, t8061, t8062, 
            t8063, t8064, t8065, t8066, t8067, t8068, t8069, t8070, 
            t8071, t8072, t8073, t8074, t8075, t8076, t8077, t8078, 
            t8079, t8080, t8081, t8082, t8083, t8084, t8085, t8086, 
            t8087, t8088, t8089, t8090, t8091, t8092, t8093, t8096, 
            t8097, t8098, t8099, t8100, t8101, t8102, t8103, t8104, 
            t8105, t8106, t8107, t8108, t8109, t8110, t8111, t8112, 
            t8113, t8114, t8115, t8116, t8117, t8118, t8119, t8120, 
            t8121, t8122, t8123, t8124, t8125, t8126, t8127, t8128, 
            t8129, t8130, t8131, t8132, t8133, t8134, t8135, t8136, 
            t8137, t8138, t8139, t8141, t8142, t8143, t8144, t8145, 
            t8146, t8147, t8148, t8151, t8152, t8153, t8154, t8155, 
            t8156, t8157, t8158, t8159, t8160, t8161, t8162, t8163, 
            t8164, t8165, t8166, t8167, t8169, t8170, t8171, t8172;
    uint128_t s1748, s1749, s1750, s1751, s1752, s1753, s1754, s1755, 
            s1756, s1757, s1758, s1759, s1760, s1761, s1762, s1763, 
            s1764, s1765, s1766, s1767, s1768, s1769, s1770, s1771, 
            s1772;
    for(int i5 = 0; i5 <= 3; i5++) {
        a21111 = (128*i5);
        a21112 = (threadIdx.x + a21111);
        a21113 = (a21112 + 512);
        a21114 = (a21113 % 256);
        a21115 = (256 + a21114);
        /* Begin of MPModMul 256 */
        a21116 = (2*a21115);
        a21117 = (a21116 + 1);
        a21118 = (2*a21113);
        a21119 = (a21118 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a21120 = (2*a21116);
        a21121 = (a21120 + 1);
        /* MPAssignDD 64 */
        a21122 = (2*a21121);
        t8060 = twiddles[a21122];
        a21123 = (a21122 + 1);
        t8061 = twiddles[a21123];
        /* MPAssignDD 128 */
        a21124 = (2*a21117);
        /* MPAssignDD 64 */
        a21125 = (2*a21124);
        t8062 = twiddles[a21125];
        a21126 = (a21125 + 1);
        t8063 = twiddles[a21126];
        a21127 = (a21124 + 1);
        /* MPAssignDD 64 */
        a21128 = (2*a21127);
        t8064 = twiddles[a21128];
        a21129 = (a21128 + 1);
        t8065 = twiddles[a21129];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a21130 = (2*a21118);
        a21131 = (a21130 + 1);
        /* MPAssignDD 64 */
        a21132 = (2*a21131);
        t8066 = P2[a21132];
        a21133 = (a21132 + 1);
        t8067 = P2[a21133];
        /* MPAssignDD 128 */
        a21134 = (2*a21119);
        /* MPAssignDD 64 */
        a21135 = (2*a21134);
        t8068 = P2[a21135];
        a21136 = (a21135 + 1);
        t8069 = P2[a21136];
        a21137 = (a21134 + 1);
        /* MPAssignDD 64 */
        a21138 = (2*a21137);
        t8070 = P2[a21138];
        a21139 = (a21138 + 1);
        t8071 = P2[a21139];
        MPMulQDD_L3_2(t4463, t4464, t4465, t4466, t4459, t4460, t4461, t4462, 
    t4455, t4456, t4457, t4458, t4451, t4452, t4453, t4454, 
    0, 0, t8060, t8061, t8062, t8063, t8064, t8065, 
    0, 0, t8066, t8067, t8068, t8069, t8070, t8071);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t8072 = (t4455 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a21140 = (t4455 << 6);
        a21141 = (t4456 >> 58);
        t8073 = (((a21140)|(a21141)));
        t8074 = (t4456 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t8075 = (t4457 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t8076 = (((t8074)|(t8075)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b1087 = ((int) 1);
        t8077 = (288230376151711744 - b1087);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t8078 = (((t4465)&(t8077)));
        t8079 = (((t4466)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a21142 = (t8078 << 6);
        a21143 = (t8079 >> 58);
        t8080 = (((a21142)|(a21143)));
        t8081 = (t8079 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t8082 = (t4459 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a21144 = (t4459 << 6);
        a21145 = (t4460 >> 58);
        t8083 = (((a21144)|(a21145)));
        t8084 = (t4460 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t8085 = (t4461 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t8086 = (((t8084)|(t8085)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t8087 = (((t8081)|(t8082)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a21146 = (t4461 << 6);
        a21147 = (t4462 >> 58);
        t8088 = (((a21146)|(a21147)));
        t8089 = (t4462 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t8090 = (((t8089)|(t8072)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a16734 = mu[2];
        a16735 = mu[3];
        a16736 = mu[4];
        a16737 = mu[5];
        a16738 = mu[6];
        a16739 = mu[7];
        MPMulQDD_L3_1(t4495, t4496, t4497, t4498, t4491, t4492, t4493, t4494, 
    t4487, t4488, t4489, t4490, t4483, t4484, t4485, t4486, 
    t8080, t8087, t8083, t8086, t8088, t8090, t8073, t8076, 
    0, 0, a16734, a16735, a16736, a16737, a16738, a16739);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t8091 = (t4487 >> 1);
        a21148 = (t4487 << 63);
        a21149 = (t4488 >> 1);
        t8092 = (((a21148)|(a21149)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t8093 = (0 - b1087);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1408 = (2 - b1087);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t8096 = (((t4496)&(d1408)));
        /* MPBinAndD 64 */
        t8097 = (((t4497)&(t8093)));
        t8098 = (((t4498)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t8099 = (t8096 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t8100 = (t8097 >> 1);
        a21151 = (t8097 << 63);
        a21152 = (t8098 >> 1);
        t8101 = (((a21151)|(a21152)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t8102 = (((t8099)|(t8100)));
        /* Begin of MPShiftLeft1D */
        t8103 = (t8098 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t8104 = (t4491 >> 1);
        a21153 = (t4491 << 63);
        a21154 = (t4492 >> 1);
        t8105 = (((a21153)|(a21154)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t8106 = (((t8103)|(t8104)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t8107 = (t4492 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t8108 = (t4493 >> 1);
        a21155 = (t4493 << 63);
        a21156 = (t4494 >> 1);
        t8109 = (((a21155)|(a21156)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t8110 = (((t8107)|(t8108)));
        /* Begin of MPShiftLeft1D */
        t8111 = (t4494 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t8112 = (((t8111)|(t8091)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a16839 = modulus[2];
        a16840 = modulus[3];
        a16841 = modulus[4];
        a16842 = modulus[5];
        a16843 = modulus[6];
        a16844 = modulus[7];
        MPMulQDD_L3_1(t4479, t4480, t4481, t4482, t4475, t4476, t4477, t4478, 
    t4471, t4472, t4473, t4474, t4467, t4468, t4469, t4470, 
    t8102, t8101, t8106, t8105, t8110, t8109, t8112, t8092, 
    0, 0, a16839, a16840, a16841, a16842, a16843, a16844);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1409 = (t4454 - t4470);
        b1089 = ((t4454 < t4470));
        d1410 = (t4453 - t4469);
        d1411 = (d1410 - b1089);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21158 = ((t4453 < t4469));
        a21159 = ((t4453 == t4469));
        a21160 = ((a21159) && (b1089));
        b1090 = ((a21158) || (a21160));
        /* Begin of MPSubDDD 64 */
        d1412 = (t4452 - t4468);
        b1091 = ((t4452 < t4468));
        d1413 = (t4451 - t4467);
        d1414 = (d1413 - b1091);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1415 = (d1412 - b1090);
        b1092 = ((d1412 < b1090));
        t8113 = (d1414 - b1092);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21164 = ((t4451 < t4467));
        a21165 = ((t4451 == t4467));
        a21166 = ((a21165) && (b1091));
        a21167 = ((a21164) || (a21166));
        /* MPEqual 64 */
        a21168 = ((t4452 == t4468));
        a21169 = ((a21165) && (a21168));
        /* MPLessThan 64 */
        a21170 = ((a21169) && (b1090));
        b1093 = ((a21167) || (a21170));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1416 = (t4458 - t4474);
        b1094 = ((t4458 < t4474));
        d1417 = (t4457 - t4473);
        d1418 = (d1417 - b1094);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21173 = ((t4457 < t4473));
        a21174 = ((t4457 == t4473));
        a21175 = ((a21174) && (b1094));
        b1095 = ((a21173) || (a21175));
        /* Begin of MPSubDDD 64 */
        d1419 = (t4456 - t4472);
        b1096 = ((t4456 < t4472));
        d1420 = (t4455 - t4471);
        d1421 = (d1420 - b1096);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1422 = (d1419 - b1095);
        b1097 = ((d1419 < b1095));
        t8114 = (d1421 - b1097);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1423 = (d1416 - b1093);
        b1098 = ((d1416 < b1093));
        t8115 = (d1418 - b1098);
        /* MPLessThanDI 64 */
        a21180 = ((d1418 == 0));
        b1099 = ((a21180) && (b1098));
        /* MPSubDDI 64 */
        d1424 = (d1422 - b1099);
        b1100 = ((d1422 < b1099));
        t8116 = (t8114 - b1100);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1425 = (d1409 - a16844);
        b1101 = ((d1409 < a16844));
        d1426 = (d1411 - a16843);
        d1427 = (d1426 - b1101);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21184 = ((d1411 < a16843));
        a21185 = ((d1411 == a16843));
        a21186 = ((a21185) && (b1101));
        b1102 = ((a21184) || (a21186));
        /* Begin of MPSubDDD 64 */
        d1428 = (d1415 - a16842);
        b1103 = ((d1415 < a16842));
        d1429 = (t8113 - a16841);
        d1430 = (d1429 - b1103);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1431 = (d1428 - b1102);
        b1104 = ((d1428 < b1102));
        t8117 = (d1430 - b1104);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21190 = ((t8113 < a16841));
        a21191 = ((t8113 == a16841));
        a21192 = ((a21191) && (b1103));
        a21193 = ((a21190) || (a21192));
        /* MPEqual 64 */
        a21194 = ((d1415 == a16842));
        a21195 = ((a21191) && (a21194));
        /* MPLessThan 64 */
        a21196 = ((a21195) && (b1102));
        b1105 = ((a21193) || (a21196));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1432 = (d1423 - a16840);
        b1106 = ((d1423 < a16840));
        d1433 = (t8115 - a16839);
        d1434 = (d1433 - b1106);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21199 = ((t8115 < a16839));
        a21200 = ((t8115 == a16839));
        a21201 = ((a21200) && (b1106));
        b1107 = ((a21199) || (a21201));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1435 = (d1424 - b1107);
        b1108 = ((d1424 < b1107));
        t8118 = (t8116 - b1108);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1436 = (d1432 - b1105);
        b1109 = ((d1432 < b1105));
        t8119 = (d1434 - b1109);
        /* MPLessThanDI 64 */
        a21205 = ((d1434 == 0));
        b1110 = ((a21205) && (b1109));
        /* MPSubDDI 64 */
        d1437 = (d1435 - b1110);
        b1111 = ((d1435 < b1110));
        t8120 = (t8118 - b1111);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a21208 = ((t8116 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a21209 = ((d1424 == 0));
        a21210 = ((a21208) && (a21209));
        /* MPLessThan 64 */
        a21211 = ((a21210) && (b1107));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21212 = ((d1423 == a16840));
        a21213 = ((a21200) && (a21212));
        a21214 = ((a21210) && (a21213));
        /* MPLessThan 128 */
        a21215 = ((a21214) && (b1105));
        i351 = ((a21211) || (a21215));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t8121 = ((i351) ? (t8116) : (t8120));
        t8122 = ((i351) ? (d1424) : (d1437));
        /* MPCondD 64 */
        t8123 = ((i351) ? (t8115) : (t8119));
        t8124 = ((i351) ? (d1423) : (d1436));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t8125 = ((i351) ? (t8113) : (t8117));
        t8126 = ((i351) ? (d1415) : (d1431));
        /* MPCondD 64 */
        t8127 = ((i351) ? (d1411) : (d1427));
        t8128 = ((i351) ? (d1409) : (d1425));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a21216 = (2*threadIdx.x);
        a21217 = (256*i5);
        a21218 = (a21216 + a21217);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a21219 = (2*a21112);
        a21220 = (a21219 + 1);
        /* MPAssignDD 128 */
        a21221 = (2*a21220);
        /* MPAssignDD 64 */
        a21222 = (2*a21221);
        t8129 = P2[a21222];
        a21223 = (a21222 + 1);
        t8130 = P2[a21223];
        a21224 = (a21221 + 1);
        /* MPAssignDD 64 */
        a21225 = (2*a21224);
        t8131 = P2[a21225];
        a21226 = (a21225 + 1);
        t8132 = P2[a21226];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1748 = (((uint128_t ) t8132) + ((uint128_t ) t8128));
        t8133 = ((uint64_t ) s1748);
        c969 = (s1748 >> 64);
        s1749 = (((uint128_t ) t8131) + ((uint128_t ) t8127));
        s1750 = (((uint128_t ) s1749) + ((uint128_t ) c969));
        t8134 = ((uint64_t ) s1750);
        c970 = (s1750 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1751 = (((uint128_t ) t8130) + ((uint128_t ) t8126));
        t8135 = ((uint64_t ) s1751);
        c971 = (s1751 >> 64);
        s1752 = (((uint128_t ) t8129) + ((uint128_t ) t8125));
        s1753 = (((uint128_t ) s1752) + ((uint128_t ) c971));
        t8136 = ((uint64_t ) s1753);
        c972 = (s1753 >> 64);
        /* MPPropagateCarry 64 */
        t8137 = (t8135 + c970);
        a21227 = ((t8137 == 0));
        a21228 = (t8136 + c970);
        t8138 = ((a21227) ? (a21228) : (t8136));
        a21229 = ((t8138 == 0));
        a21230 = ((a21229) && (a21227));
        a21231 = (c972 + c970);
        t8139 = ((a21230) ? (a21231) : (c972));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a21235 = (2*a21219);
        a21236 = (a21235 + 1);
        /* MPAssignDD 64 */
        a21237 = (2*a21236);
        t8141 = P2[a21237];
        a21238 = (a21237 + 1);
        t8142 = P2[a21238];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1754 = (((uint128_t ) t8142) + ((uint128_t ) t8124));
        t8143 = ((uint64_t ) s1754);
        c973 = (s1754 >> 64);
        s1755 = (((uint128_t ) t8141) + ((uint128_t ) t8123));
        s1756 = (((uint128_t ) s1755) + ((uint128_t ) c973));
        t8144 = ((uint64_t ) s1756);
        c974 = (s1756 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t8145 = ((uint64_t ) t8122);
        c975 = (t8122 >> 64);
        s1757 = (((uint128_t ) t8121) + ((uint128_t ) c975));
        t8146 = ((uint64_t ) s1757);
        /* MPPropagateCarry 64 */
        t8147 = (t8145 + c974);
        a21239 = ((t8147 == 0));
        a21240 = (t8146 + c974);
        t8148 = ((a21239) ? (a21240) : (t8146));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1758 = (((uint128_t ) t8143) + ((uint128_t ) t8139));
        t8151 = ((uint64_t ) s1758);
        c977 = (s1758 >> 64);
        s1759 = (((uint128_t ) t8144) + ((uint128_t ) c977));
        t8152 = ((uint64_t ) s1759);
        /* MPEqualDI 64 */
        a21247 = ((t8152 == 0));
        a21248 = ((t8151 == 0));
        a21249 = ((a21247) && (a21248));
        /* MPAddDDI 64 */
        s1760 = (((uint128_t ) t8147) + ((uint128_t ) t8139));
        t8153 = ((uint64_t ) s1760);
        c978 = (s1760 >> 64);
        s1761 = (((uint128_t ) t8148) + ((uint128_t ) c978));
        t8154 = ((uint64_t ) s1761);
        /* MPCondD 64 */
        t8155 = ((a21249) ? (t8154) : (t8148));
        t8156 = ((a21249) ? (t8153) : (t8147));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a21250 = ((0 < t8155));
        a21251 = ((0 == t8155));
        a21252 = ((0 < t8156));
        a21253 = ((a21251) && (a21252));
        a21254 = ((a21250) || (a21253));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a21255 = ((0 == t8156));
        a21256 = ((a21251) && (a21255));
        /* MPLessThan 64 */
        a21257 = ((a16839 < t8152));
        a21258 = ((a16839 == t8152));
        a21259 = ((a16840 < t8151));
        a21260 = ((a21258) && (a21259));
        a21261 = ((a21257) || (a21260));
        a21262 = ((a21256) && (a21261));
        a21263 = ((a21254) || (a21262));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21264 = ((a16840 == t8151));
        a21265 = ((a21258) && (a21264));
        a21266 = ((a21256) && (a21265));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21267 = ((a16841 < t8138));
        a21268 = ((a16841 == t8138));
        a21269 = ((a16842 < t8137));
        a21270 = ((a21268) && (a21269));
        a21271 = ((a21267) || (a21270));
        /* MPEqual 64 */
        a21272 = ((a16842 == t8137));
        a21273 = ((a21268) && (a21272));
        /* MPLessThan 64 */
        a21274 = ((a16843 < t8134));
        a21275 = ((a16843 == t8134));
        a21276 = ((a16844 < t8133));
        a21277 = ((a21275) && (a21276));
        a21278 = ((a21274) || (a21277));
        a21279 = ((a21273) && (a21278));
        a21280 = ((a21271) || (a21279));
        a21281 = ((a21266) && (a21280));
        i352 = ((a21263) || (a21281));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1438 = (t8133 - a16844);
        b1112 = ((t8133 < a16844));
        d1439 = (t8134 - a16843);
        d1440 = (d1439 - b1112);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21283 = ((t8134 < a16843));
        a21284 = ((t8134 == a16843));
        a21285 = ((a21284) && (b1112));
        b1113 = ((a21283) || (a21285));
        /* Begin of MPSubDDD 64 */
        d1441 = (t8137 - a16842);
        b1114 = ((t8137 < a16842));
        d1442 = (t8138 - a16841);
        d1443 = (d1442 - b1114);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1444 = (d1441 - b1113);
        b1115 = ((d1441 < b1113));
        t8157 = (d1443 - b1115);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21289 = ((t8138 < a16841));
        a21290 = ((t8138 == a16841));
        a21291 = ((a21290) && (b1114));
        a21292 = ((a21289) || (a21291));
        /* MPEqual 64 */
        a21293 = ((t8137 == a16842));
        a21294 = ((a21290) && (a21293));
        /* MPLessThan 64 */
        a21295 = ((a21294) && (b1113));
        b1116 = ((a21292) || (a21295));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1445 = (t8151 - a16840);
        b1117 = ((t8151 < a16840));
        d1446 = (t8152 - a16839);
        d1447 = (d1446 - b1117);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1448 = (d1445 - b1116);
        b1118 = ((d1445 < b1116));
        t8158 = (d1447 - b1118);
        /* End of MPSubDDD 256 */
        a21299 = (2*a21218);
        /* MPCondD 128 */
        a21300 = (2*a21299);
        a21301 = (a21300 + 1);
        /* MPCondD 64 */
        a21302 = (2*a21301);
        P1[a21302] = ((i352) ? (t8158) : (t8152));
        a21303 = (a21302 + 1);
        P1[a21303] = ((i352) ? (d1448) : (t8151));
        a21304 = (a21299 + 1);
        /* MPCondD 128 */
        a21305 = (2*a21304);
        /* MPCondD 64 */
        a21306 = (2*a21305);
        P1[a21306] = ((i352) ? (t8157) : (t8138));
        a21307 = (a21306 + 1);
        P1[a21307] = ((i352) ? (d1444) : (t8137));
        a21308 = (a21305 + 1);
        /* MPCondD 64 */
        a21309 = (2*a21308);
        P1[a21309] = ((i352) ? (d1440) : (t8134));
        a21310 = (a21309 + 1);
        P1[a21310] = ((i352) ? (d1438) : (t8133));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        a21311 = (a21218 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1449 = (t8132 - t8128);
        b1119 = ((t8132 < t8128));
        d1450 = (t8131 - t8127);
        d1451 = (d1450 - b1119);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21313 = ((t8131 < t8127));
        a21314 = ((t8131 == t8127));
        a21315 = ((a21314) && (b1119));
        b1120 = ((a21313) || (a21315));
        /* Begin of MPSubDDD 64 */
        d1452 = (t8130 - t8126);
        b1121 = ((t8130 < t8126));
        d1453 = (t8129 - t8125);
        d1454 = (d1453 - b1121);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1455 = (d1452 - b1120);
        b1122 = ((d1452 < b1120));
        t8159 = (d1454 - b1122);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21319 = ((t8129 < t8125));
        a21320 = ((t8129 == t8125));
        a21321 = ((a21320) && (b1121));
        a21322 = ((a21319) || (a21321));
        /* MPEqual 64 */
        a21323 = ((t8130 == t8126));
        a21324 = ((a21320) && (a21323));
        /* MPLessThan 64 */
        a21325 = ((a21324) && (b1120));
        b1123 = ((a21322) || (a21325));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1456 = (t8142 - t8124);
        b1124 = ((t8142 < t8124));
        d1457 = (t8141 - t8123);
        d1458 = (d1457 - b1124);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1459 = (d1456 - b1123);
        b1125 = ((d1456 < b1123));
        t8160 = (d1458 - b1125);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1762 = (((uint128_t ) d1449) + ((uint128_t ) a16844));
        t8161 = ((uint64_t ) s1762);
        c979 = (s1762 >> 64);
        s1763 = (((uint128_t ) d1451) + ((uint128_t ) a16843));
        s1764 = (((uint128_t ) s1763) + ((uint128_t ) c979));
        t8162 = ((uint64_t ) s1764);
        c980 = (s1764 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1765 = (((uint128_t ) d1455) + ((uint128_t ) a16842));
        t8163 = ((uint64_t ) s1765);
        c981 = (s1765 >> 64);
        s1766 = (((uint128_t ) t8159) + ((uint128_t ) a16841));
        s1767 = (((uint128_t ) s1766) + ((uint128_t ) c981));
        t8164 = ((uint64_t ) s1767);
        c982 = (s1767 >> 64);
        /* MPPropagateCarry 64 */
        t8165 = (t8163 + c980);
        a21329 = ((t8165 == 0));
        a21330 = (t8164 + c980);
        t8166 = ((a21329) ? (a21330) : (t8164));
        a21331 = ((t8166 == 0));
        a21332 = ((a21331) && (a21329));
        a21333 = (c982 + c980);
        t8167 = ((a21332) ? (a21333) : (c982));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1768 = (((uint128_t ) d1459) + ((uint128_t ) a16840));
        t8169 = ((uint64_t ) s1768);
        c983 = (s1768 >> 64);
        s1769 = (((uint128_t ) t8160) + ((uint128_t ) a16839));
        s1770 = (((uint128_t ) s1769) + ((uint128_t ) c983));
        t8170 = ((uint64_t ) s1770);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1771 = (((uint128_t ) t8169) + ((uint128_t ) t8167));
        t8171 = ((uint64_t ) s1771);
        c985 = (s1771 >> 64);
        s1772 = (((uint128_t ) t8170) + ((uint128_t ) c985));
        t8172 = ((uint64_t ) s1772);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21337 = ((0 < t8121));
        a21338 = ((0 == t8121));
        a21339 = ((0 < t8122));
        a21340 = ((a21338) && (a21339));
        a21341 = ((a21337) || (a21340));
        /* MPEqual 64 */
        a21342 = ((0 == t8122));
        a21343 = ((a21338) && (a21342));
        /* MPLessThan 64 */
        a21344 = ((t8141 < t8123));
        a21345 = ((t8141 == t8123));
        a21346 = ((a21345) && (b1124));
        a21347 = ((a21344) || (a21346));
        a21348 = ((a21343) && (a21347));
        a21349 = ((a21341) || (a21348));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21350 = ((t8142 == t8124));
        a21351 = ((a21345) && (a21350));
        a21352 = ((a21343) && (a21351));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a21353 = ((a21352) && (b1123));
        i353 = ((a21349) || (a21353));
        a21354 = (2*a21311);
        /* MPCondD 128 */
        a21355 = (2*a21354);
        a21356 = (a21355 + 1);
        /* MPCondD 64 */
        a21357 = (2*a21356);
        P1[a21357] = ((i353) ? (t8172) : (t8160));
        a21358 = (a21357 + 1);
        P1[a21358] = ((i353) ? (t8171) : (d1459));
        a21359 = (a21354 + 1);
        /* MPCondD 128 */
        a21360 = (2*a21359);
        /* MPCondD 64 */
        a21361 = (2*a21360);
        P1[a21361] = ((i353) ? (t8166) : (t8159));
        a21362 = (a21361 + 1);
        P1[a21362] = ((i353) ? (t8165) : (d1455));
        a21363 = (a21360 + 1);
        /* MPCondD 64 */
        a21364 = (2*a21363);
        P1[a21364] = ((i353) ? (t8162) : (d1451));
        a21365 = (a21364 + 1);
        P1[a21365] = ((i353) ? (t8161) : (d1449));
        /* End of MPModSub 256 */
    }
}

__global__ void ker_code9(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a21366, a21367, a21368, a21369, a21370, a21371, a21372, a21373, 
            a21374, a21375, a21376, a21377, a21378, a21379, a21380, a21381, 
            a21382, a21383, a21384, a21385, a21386, a21387, a21388, a21389, 
            a21390, a21391, a21392, a21393, a21394, a21413, a21414, a21415, 
            a21419, a21420, a21421, a21422, a21423, a21424, a21425, a21428, 
            a21429, a21430, a21435, a21439, a21440, a21441, a21445, a21446, 
            a21447, a21448, a21449, a21450, a21451, a21454, a21455, a21456, 
            a21460, a21463, a21464, a21465, a21466, a21467, a21468, a21469, 
            a21470, a21471, a21472, a21473, a21474, a21475, a21476, a21477, 
            a21478, a21479, a21480, a21481, a21482, a21483, a21485, a21486, 
            a21491, a21492, a21493, a21494, a21495, a21503, a21504, a21505, 
            a21506, a21507, a21508, a21509, a21510, a21511, a21512, a21513, 
            a21514, a21515, a21516, a21517, a21518, a21519, a21520, a21521, 
            a21522, a21523, a21524, a21525, a21526, a21527, a21528, a21529, 
            a21530, a21531, a21532, a21533, a21534, a21535, a21536, a21537, 
            a21539, a21540, a21541, a21545, a21546, a21547, a21548, a21549, 
            a21550, a21551, a21555, a21556, a21557, a21558, a21559, a21560, 
            a21561, a21562, a21563, a21564, a21565, a21566, a21567, a21569, 
            a21570, a21571, a21575, a21576, a21577, a21578, a21579, a21580, 
            a21581, a21585, a21587, a21588, a21593, a21594, a21595, a21596, 
            a21597, a21598, a21599, a21600, a21601, a21602, a21603, a21604, 
            a21605, a21606, a21607, a21608, a21609, a21610, a21611, a21612, 
            a21613, a21614, a21615, a21616, a21617, a21618, a21619, a21620, 
            a21621, b1126, b1128, b1129, b1130, b1131, b1132, b1133, 
            b1134, b1135, b1136, b1137, b1138, b1139, b1140, b1141, 
            b1142, b1143, b1144, b1145, b1146, b1147, b1148, b1149, 
            b1150, b1151, b1152, b1153, b1154, b1155, b1156, b1157, 
            b1158, b1159, b1160, b1161, b1162, b1163, b1164, b1165, 
            c1000, c1002, c986, c987, c988, c989, c990, c991, 
            c992, c994, c995, c996, c997, c998, c999, i354, 
            i355, i356;
    uint64_t a17645, a17646, a17647, a17648, a17649, a17650, a17750, a17751, 
            a17752, a17753, a17754, a17755, a21395, a21396, a21397, a21398, 
            a21399, a21400, a21401, a21402, a21403, a21404, a21406, a21407, 
            a21408, a21409, a21410, a21411, a21484, a21487, a21496, a21586, 
            a21589, d1460, d1461, d1462, d1463, d1464, d1465, d1466, 
            d1467, d1468, d1469, d1470, d1471, d1472, d1473, d1474, 
            d1475, d1476, d1477, d1478, d1479, d1480, d1481, d1482, 
            d1483, d1484, d1485, d1486, d1487, d1488, d1489, d1490, 
            d1491, d1492, d1493, d1494, d1495, d1496, d1497, d1498, 
            d1499, d1500, d1501, d1502, d1503, d1504, d1505, d1506, 
            d1507, d1508, d1509, d1510, d1511, t4515, t4516, t4517, 
            t4518, t4519, t4520, t4521, t4522, t4523, t4524, t4525, 
            t4526, t4527, t4528, t4529, t4530, t4531, t4532, t4533, 
            t4534, t4535, t4536, t4537, t4538, t4539, t4540, t4541, 
            t4542, t4543, t4544, t4545, t4546, t4547, t4548, t4549, 
            t4550, t4551, t4552, t4553, t4554, t4555, t4556, t4557, 
            t4558, t4559, t4560, t4561, t4562, t8173, t8174, t8175, 
            t8176, t8177, t8178, t8179, t8180, t8181, t8182, t8183, 
            t8184, t8185, t8186, t8187, t8188, t8189, t8190, t8191, 
            t8192, t8193, t8194, t8195, t8196, t8197, t8198, t8199, 
            t8200, t8201, t8202, t8203, t8204, t8205, t8206, t8209, 
            t8210, t8211, t8212, t8213, t8214, t8215, t8216, t8217, 
            t8218, t8219, t8220, t8221, t8222, t8223, t8224, t8225, 
            t8226, t8227, t8228, t8229, t8230, t8231, t8232, t8233, 
            t8234, t8235, t8236, t8237, t8238, t8239, t8240, t8241, 
            t8242, t8243, t8244, t8245, t8246, t8247, t8248, t8249, 
            t8250, t8251, t8252, t8254, t8255, t8256, t8257, t8258, 
            t8259, t8260, t8261, t8264, t8265, t8266, t8267, t8268, 
            t8269, t8270, t8271, t8272, t8273, t8274, t8275, t8276, 
            t8277, t8278, t8279, t8280, t8282, t8283, t8284, t8285;
    uint128_t s1773, s1774, s1775, s1776, s1777, s1778, s1779, s1780, 
            s1781, s1782, s1783, s1784, s1785, s1786, s1787, s1788, 
            s1789, s1790, s1791, s1792, s1793, s1794, s1795, s1796, 
            s1797;
    for(int i3 = 0; i3 <= 3; i3++) {
        a21366 = (128*i3);
        a21367 = (threadIdx.x + a21366);
        a21368 = (a21367 + 512);
        a21369 = (a21368 % 512);
        a21370 = (512 + a21369);
        /* Begin of MPModMul 256 */
        a21371 = (2*a21370);
        a21372 = (a21371 + 1);
        a21373 = (2*a21368);
        a21374 = (a21373 + 1);
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a21375 = (2*a21371);
        a21376 = (a21375 + 1);
        /* MPAssignDD 64 */
        a21377 = (2*a21376);
        t8173 = twiddles[a21377];
        a21378 = (a21377 + 1);
        t8174 = twiddles[a21378];
        /* MPAssignDD 128 */
        a21379 = (2*a21372);
        /* MPAssignDD 64 */
        a21380 = (2*a21379);
        t8175 = twiddles[a21380];
        a21381 = (a21380 + 1);
        t8176 = twiddles[a21381];
        a21382 = (a21379 + 1);
        /* MPAssignDD 64 */
        a21383 = (2*a21382);
        t8177 = twiddles[a21383];
        a21384 = (a21383 + 1);
        t8178 = twiddles[a21384];
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a21385 = (2*a21373);
        a21386 = (a21385 + 1);
        /* MPAssignDD 64 */
        a21387 = (2*a21386);
        t8179 = P1[a21387];
        a21388 = (a21387 + 1);
        t8180 = P1[a21388];
        /* MPAssignDD 128 */
        a21389 = (2*a21374);
        /* MPAssignDD 64 */
        a21390 = (2*a21389);
        t8181 = P1[a21390];
        a21391 = (a21390 + 1);
        t8182 = P1[a21391];
        a21392 = (a21389 + 1);
        /* MPAssignDD 64 */
        a21393 = (2*a21392);
        t8183 = P1[a21393];
        a21394 = (a21393 + 1);
        t8184 = P1[a21394];
        MPMulQDD_L3_2(t4527, t4528, t4529, t4530, t4523, t4524, t4525, t4526, 
    t4519, t4520, t4521, t4522, t4515, t4516, t4517, t4518, 
    0, 0, t8173, t8174, t8175, t8176, t8177, t8178, 
    0, 0, t8179, t8180, t8181, t8182, t8183, t8184);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t8185 = (t4519 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a21395 = (t4519 << 6);
        a21396 = (t4520 >> 58);
        t8186 = (((a21395)|(a21396)));
        t8187 = (t4520 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t8188 = (t4521 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t8189 = (((t8187)|(t8188)));
        /* End of MPShiftRight2D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        b1126 = ((int) 1);
        t8190 = (288230376151711744 - b1126);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t8191 = (((t4529)&(t8190)));
        t8192 = (((t4530)&((-1))));
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a21397 = (t8191 << 6);
        a21398 = (t8192 >> 58);
        t8193 = (((a21397)|(a21398)));
        t8194 = (t8192 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        /* Begin of MPShiftRight1D */
        t8195 = (t4523 >> 58);
        /* End of MPShiftRight1D */
        /* Begin of MPShiftLeft2D */
        a21399 = (t4523 << 6);
        a21400 = (t4524 >> 58);
        t8196 = (((a21399)|(a21400)));
        t8197 = (t4524 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t8198 = (t4525 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t8199 = (((t8197)|(t8198)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t8200 = (((t8194)|(t8195)));
        /* MPBinOrD 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        a21401 = (t4525 << 6);
        a21402 = (t4526 >> 58);
        t8201 = (((a21401)|(a21402)));
        t8202 = (t4526 << 6);
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        t8203 = (((t8202)|(t8185)));
        /* MPBinOrD 64 */
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a17645 = mu[2];
        a17646 = mu[3];
        a17647 = mu[4];
        a17648 = mu[5];
        a17649 = mu[6];
        a17650 = mu[7];
        MPMulQDD_L3_1(t4559, t4560, t4561, t4562, t4555, t4556, t4557, t4558, 
    t4551, t4552, t4553, t4554, t4547, t4548, t4549, t4550, 
    t8193, t8200, t8196, t8199, t8201, t8203, t8186, t8189, 
    0, 0, a17645, a17646, a17647, a17648, a17649, a17650);
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t8204 = (t4551 >> 1);
        a21403 = (t4551 << 63);
        a21404 = (t4552 >> 1);
        t8205 = (((a21403)|(a21404)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 128 */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* Begin of MPShiftLeft2D */
        /* End of MPShiftLeft2D */
        /* MPTypeCastDI 64 */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        t8206 = (0 - b1126);
        /* MPLessThanDI 64 */
        /* MPSubDDI 64 */
        d1460 = (2 - b1126);
        /* MPBinAndD 128 */
        /* MPBinAndD 64 */
        t8209 = (((t4560)&(d1460)));
        /* MPBinAndD 64 */
        t8210 = (((t4561)&(t8206)));
        t8211 = (((t4562)&((-1))));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t8212 = (t8209 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t8213 = (t8210 >> 1);
        a21406 = (t8210 << 63);
        a21407 = (t8211 >> 1);
        t8214 = (((a21406)|(a21407)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t8215 = (((t8212)|(t8213)));
        /* Begin of MPShiftLeft1D */
        t8216 = (t8211 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftRight2D */
        t8217 = (t4555 >> 1);
        a21408 = (t4555 << 63);
        a21409 = (t4556 >> 1);
        t8218 = (((a21408)|(a21409)));
        /* End of MPShiftRight2D */
        /* End of MPShiftRight1D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t8219 = (((t8216)|(t8217)));
        /* Begin of MPShiftLeft2D */
        /* Begin of MPShiftLeft1D */
        t8220 = (t4556 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t8221 = (t4557 >> 1);
        a21410 = (t4557 << 63);
        a21411 = (t4558 >> 1);
        t8222 = (((a21410)|(a21411)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t8223 = (((t8220)|(t8221)));
        /* Begin of MPShiftLeft1D */
        t8224 = (t4558 << 63);
        /* End of MPShiftLeft1D */
        /* End of MPShiftLeft2D */
        /* MPBinOrD 128 */
        /* MPBinOrD 64 */
        /* MPBinOrD 64 */
        t8225 = (((t8224)|(t8204)));
        /* End of MPShiftRight3 */
        /* MPTypeCastDI 64 */
        a17750 = modulus[2];
        a17751 = modulus[3];
        a17752 = modulus[4];
        a17753 = modulus[5];
        a17754 = modulus[6];
        a17755 = modulus[7];
        MPMulQDD_L3_1(t4543, t4544, t4545, t4546, t4539, t4540, t4541, t4542, 
    t4535, t4536, t4537, t4538, t4531, t4532, t4533, t4534, 
    t8215, t8214, t8219, t8218, t8223, t8222, t8225, t8205, 
    0, 0, a17750, a17751, a17752, a17753, a17754, a17755);
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1461 = (t4518 - t4534);
        b1128 = ((t4518 < t4534));
        d1462 = (t4517 - t4533);
        d1463 = (d1462 - b1128);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21413 = ((t4517 < t4533));
        a21414 = ((t4517 == t4533));
        a21415 = ((a21414) && (b1128));
        b1129 = ((a21413) || (a21415));
        /* Begin of MPSubDDD 64 */
        d1464 = (t4516 - t4532);
        b1130 = ((t4516 < t4532));
        d1465 = (t4515 - t4531);
        d1466 = (d1465 - b1130);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1467 = (d1464 - b1129);
        b1131 = ((d1464 < b1129));
        t8226 = (d1466 - b1131);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21419 = ((t4515 < t4531));
        a21420 = ((t4515 == t4531));
        a21421 = ((a21420) && (b1130));
        a21422 = ((a21419) || (a21421));
        /* MPEqual 64 */
        a21423 = ((t4516 == t4532));
        a21424 = ((a21420) && (a21423));
        /* MPLessThan 64 */
        a21425 = ((a21424) && (b1129));
        b1132 = ((a21422) || (a21425));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1468 = (t4522 - t4538);
        b1133 = ((t4522 < t4538));
        d1469 = (t4521 - t4537);
        d1470 = (d1469 - b1133);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21428 = ((t4521 < t4537));
        a21429 = ((t4521 == t4537));
        a21430 = ((a21429) && (b1133));
        b1134 = ((a21428) || (a21430));
        /* Begin of MPSubDDD 64 */
        d1471 = (t4520 - t4536);
        b1135 = ((t4520 < t4536));
        d1472 = (t4519 - t4535);
        d1473 = (d1472 - b1135);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1474 = (d1471 - b1134);
        b1136 = ((d1471 < b1134));
        t8227 = (d1473 - b1136);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1475 = (d1468 - b1132);
        b1137 = ((d1468 < b1132));
        t8228 = (d1470 - b1137);
        /* MPLessThanDI 64 */
        a21435 = ((d1470 == 0));
        b1138 = ((a21435) && (b1137));
        /* MPSubDDI 64 */
        d1476 = (d1474 - b1138);
        b1139 = ((d1474 < b1138));
        t8229 = (t8227 - b1139);
        /* End of MPSubDDD 256 */
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1477 = (d1461 - a17755);
        b1140 = ((d1461 < a17755));
        d1478 = (d1463 - a17754);
        d1479 = (d1478 - b1140);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21439 = ((d1463 < a17754));
        a21440 = ((d1463 == a17754));
        a21441 = ((a21440) && (b1140));
        b1141 = ((a21439) || (a21441));
        /* Begin of MPSubDDD 64 */
        d1480 = (d1467 - a17753);
        b1142 = ((d1467 < a17753));
        d1481 = (t8226 - a17752);
        d1482 = (d1481 - b1142);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1483 = (d1480 - b1141);
        b1143 = ((d1480 < b1141));
        t8230 = (d1482 - b1143);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21445 = ((t8226 < a17752));
        a21446 = ((t8226 == a17752));
        a21447 = ((a21446) && (b1142));
        a21448 = ((a21445) || (a21447));
        /* MPEqual 64 */
        a21449 = ((d1467 == a17753));
        a21450 = ((a21446) && (a21449));
        /* MPLessThan 64 */
        a21451 = ((a21450) && (b1141));
        b1144 = ((a21448) || (a21451));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1484 = (d1475 - a17751);
        b1145 = ((d1475 < a17751));
        d1485 = (t8228 - a17750);
        d1486 = (d1485 - b1145);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21454 = ((t8228 < a17750));
        a21455 = ((t8228 == a17750));
        a21456 = ((a21455) && (b1145));
        b1146 = ((a21454) || (a21456));
        /* MPTypeCastDI 64 */
        /* Begin of MPSubDDD 64 */
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1487 = (d1476 - b1146);
        b1147 = ((d1476 < b1146));
        t8231 = (t8229 - b1147);
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1488 = (d1484 - b1144);
        b1148 = ((d1484 < b1144));
        t8232 = (d1486 - b1148);
        /* MPLessThanDI 64 */
        a21460 = ((d1486 == 0));
        b1149 = ((a21460) && (b1148));
        /* MPSubDDI 64 */
        d1489 = (d1487 - b1149);
        b1150 = ((d1487 < b1149));
        t8233 = (t8231 - b1150);
        /* End of MPSubDDD 256 */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a21463 = ((t8229 == 0));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a21464 = ((d1476 == 0));
        a21465 = ((a21463) && (a21464));
        /* MPLessThan 64 */
        a21466 = ((a21465) && (b1146));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21467 = ((d1475 == a17751));
        a21468 = ((a21455) && (a21467));
        a21469 = ((a21465) && (a21468));
        /* MPLessThan 128 */
        a21470 = ((a21469) && (b1144));
        i354 = ((a21466) || (a21470));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t8234 = ((i354) ? (t8229) : (t8233));
        t8235 = ((i354) ? (d1476) : (d1489));
        /* MPCondD 64 */
        t8236 = ((i354) ? (t8228) : (t8232));
        t8237 = ((i354) ? (d1475) : (d1488));
        /* MPCondD 128 */
        /* MPCondD 64 */
        t8238 = ((i354) ? (t8226) : (t8230));
        t8239 = ((i354) ? (d1467) : (d1483));
        /* MPCondD 64 */
        t8240 = ((i354) ? (d1463) : (d1479));
        t8241 = ((i354) ? (d1461) : (d1477));
        /* End of MPModDQ */
        /* End of MPModMul 256 */
        a21471 = (1024*blockIdx.x);
        a21472 = (2*threadIdx.x);
        a21473 = (256*i3);
        b1151 = (a21471 + a21472);
        a21474 = (b1151 + a21473);
        /* Begin of MPModAdd 256 */
        /* MPAddDDD 256 */
        a21475 = (2*a21367);
        a21476 = (a21475 + 1);
        /* MPAssignDD 128 */
        a21477 = (2*a21476);
        /* MPAssignDD 64 */
        a21478 = (2*a21477);
        t8242 = P1[a21478];
        a21479 = (a21478 + 1);
        t8243 = P1[a21479];
        a21480 = (a21477 + 1);
        /* MPAssignDD 64 */
        a21481 = (2*a21480);
        t8244 = P1[a21481];
        a21482 = (a21481 + 1);
        t8245 = P1[a21482];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1773 = (((uint128_t ) t8245) + ((uint128_t ) t8241));
        t8246 = ((uint64_t ) s1773);
        c986 = (s1773 >> 64);
        s1774 = (((uint128_t ) t8244) + ((uint128_t ) t8240));
        s1775 = (((uint128_t ) s1774) + ((uint128_t ) c986));
        t8247 = ((uint64_t ) s1775);
        c987 = (s1775 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1776 = (((uint128_t ) t8243) + ((uint128_t ) t8239));
        t8248 = ((uint64_t ) s1776);
        c988 = (s1776 >> 64);
        s1777 = (((uint128_t ) t8242) + ((uint128_t ) t8238));
        s1778 = (((uint128_t ) s1777) + ((uint128_t ) c988));
        t8249 = ((uint64_t ) s1778);
        c989 = (s1778 >> 64);
        /* MPPropagateCarry 64 */
        t8250 = (t8248 + c987);
        a21483 = ((t8250 == 0));
        a21484 = (t8249 + c987);
        t8251 = ((a21483) ? (a21484) : (t8249));
        a21485 = ((t8251 == 0));
        a21486 = ((a21485) && (a21483));
        a21487 = (c989 + c987);
        t8252 = ((a21486) ? (a21487) : (c989));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        a21491 = (2*a21475);
        a21492 = (a21491 + 1);
        /* MPAssignDD 64 */
        a21493 = (2*a21492);
        t8254 = P1[a21493];
        a21494 = (a21493 + 1);
        t8255 = P1[a21494];
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1779 = (((uint128_t ) t8255) + ((uint128_t ) t8237));
        t8256 = ((uint64_t ) s1779);
        c990 = (s1779 >> 64);
        s1780 = (((uint128_t ) t8254) + ((uint128_t ) t8236));
        s1781 = (((uint128_t ) s1780) + ((uint128_t ) c990));
        t8257 = ((uint64_t ) s1781);
        c991 = (s1781 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        t8258 = ((uint64_t ) t8235);
        c992 = (t8235 >> 64);
        s1782 = (((uint128_t ) t8234) + ((uint128_t ) c992));
        t8259 = ((uint64_t ) s1782);
        /* MPPropagateCarry 64 */
        t8260 = (t8258 + c991);
        a21495 = ((t8260 == 0));
        a21496 = (t8259 + c991);
        t8261 = ((a21495) ? (a21496) : (t8259));
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1783 = (((uint128_t ) t8256) + ((uint128_t ) t8252));
        t8264 = ((uint64_t ) s1783);
        c994 = (s1783 >> 64);
        s1784 = (((uint128_t ) t8257) + ((uint128_t ) c994));
        t8265 = ((uint64_t ) s1784);
        /* MPEqualDI 64 */
        a21503 = ((t8265 == 0));
        a21504 = ((t8264 == 0));
        a21505 = ((a21503) && (a21504));
        /* MPAddDDI 64 */
        s1785 = (((uint128_t ) t8260) + ((uint128_t ) t8252));
        t8266 = ((uint64_t ) s1785);
        c995 = (s1785 >> 64);
        s1786 = (((uint128_t ) t8261) + ((uint128_t ) c995));
        t8267 = ((uint64_t ) s1786);
        /* MPCondD 64 */
        t8268 = ((a21505) ? (t8267) : (t8261));
        t8269 = ((a21505) ? (t8266) : (t8260));
        /* MPExtractLow 128 */
        /* Begin of MPModDD */
        /* MPLessThan 256 */
        /* MPLessThan 128 */
        /* MPTypeCastDI 64 */
        /* MPLessThan 64 */
        a21506 = ((0 < t8268));
        a21507 = ((0 == t8268));
        a21508 = ((0 < t8269));
        a21509 = ((a21507) && (a21508));
        a21510 = ((a21506) || (a21509));
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        a21511 = ((0 == t8269));
        a21512 = ((a21507) && (a21511));
        /* MPLessThan 64 */
        a21513 = ((a17750 < t8265));
        a21514 = ((a17750 == t8265));
        a21515 = ((a17751 < t8264));
        a21516 = ((a21514) && (a21515));
        a21517 = ((a21513) || (a21516));
        a21518 = ((a21512) && (a21517));
        a21519 = ((a21510) || (a21518));
        /* MPEqual 128 */
        /* MPTypeCastDI 64 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21520 = ((a17751 == t8264));
        a21521 = ((a21514) && (a21520));
        a21522 = ((a21512) && (a21521));
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21523 = ((a17752 < t8251));
        a21524 = ((a17752 == t8251));
        a21525 = ((a17753 < t8250));
        a21526 = ((a21524) && (a21525));
        a21527 = ((a21523) || (a21526));
        /* MPEqual 64 */
        a21528 = ((a17753 == t8250));
        a21529 = ((a21524) && (a21528));
        /* MPLessThan 64 */
        a21530 = ((a17754 < t8247));
        a21531 = ((a17754 == t8247));
        a21532 = ((a17755 < t8246));
        a21533 = ((a21531) && (a21532));
        a21534 = ((a21530) || (a21533));
        a21535 = ((a21529) && (a21534));
        a21536 = ((a21527) || (a21535));
        a21537 = ((a21522) && (a21536));
        i355 = ((a21519) || (a21537));
        /* Begin of MPSubDDD 256 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1490 = (t8246 - a17755);
        b1152 = ((t8246 < a17755));
        d1491 = (t8247 - a17754);
        d1492 = (d1491 - b1152);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21539 = ((t8247 < a17754));
        a21540 = ((t8247 == a17754));
        a21541 = ((a21540) && (b1152));
        b1153 = ((a21539) || (a21541));
        /* Begin of MPSubDDD 64 */
        d1493 = (t8250 - a17753);
        b1154 = ((t8250 < a17753));
        d1494 = (t8251 - a17752);
        d1495 = (d1494 - b1154);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1496 = (d1493 - b1153);
        b1155 = ((d1493 < b1153));
        t8270 = (d1495 - b1155);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21545 = ((t8251 < a17752));
        a21546 = ((t8251 == a17752));
        a21547 = ((a21546) && (b1154));
        a21548 = ((a21545) || (a21547));
        /* MPEqual 64 */
        a21549 = ((t8250 == a17753));
        a21550 = ((a21546) && (a21549));
        /* MPLessThan 64 */
        a21551 = ((a21550) && (b1153));
        b1156 = ((a21548) || (a21551));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1497 = (t8264 - a17751);
        b1157 = ((t8264 < a17751));
        d1498 = (t8265 - a17750);
        d1499 = (d1498 - b1157);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1500 = (d1497 - b1156);
        b1158 = ((d1497 < b1156));
        t8271 = (d1499 - b1158);
        /* End of MPSubDDD 256 */
        a21555 = (2*a21474);
        /* MPCondD 128 */
        a21556 = (2*a21555);
        a21557 = (a21556 + 1);
        /* MPCondD 64 */
        a21558 = (2*a21557);
        Y[a21558] = ((i355) ? (t8271) : (t8265));
        a21559 = (a21558 + 1);
        Y[a21559] = ((i355) ? (d1500) : (t8264));
        a21560 = (a21555 + 1);
        /* MPCondD 128 */
        a21561 = (2*a21560);
        /* MPCondD 64 */
        a21562 = (2*a21561);
        Y[a21562] = ((i355) ? (t8270) : (t8251));
        a21563 = (a21562 + 1);
        Y[a21563] = ((i355) ? (d1496) : (t8250));
        a21564 = (a21561 + 1);
        /* MPCondD 64 */
        a21565 = (2*a21564);
        Y[a21565] = ((i355) ? (d1492) : (t8247));
        a21566 = (a21565 + 1);
        Y[a21566] = ((i355) ? (d1490) : (t8246));
        /* End of MPModDD */
        /* End of MPModAdd 256 */
        a21567 = (a21474 + 1);
        /* Begin of MPModSub 256 */
        /* Begin of MPSubDDD 256 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1501 = (t8245 - t8241);
        b1159 = ((t8245 < t8241));
        d1502 = (t8244 - t8240);
        d1503 = (d1502 - b1159);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a21569 = ((t8244 < t8240));
        a21570 = ((t8244 == t8240));
        a21571 = ((a21570) && (b1159));
        b1160 = ((a21569) || (a21571));
        /* Begin of MPSubDDD 64 */
        d1504 = (t8243 - t8239);
        b1161 = ((t8243 < t8239));
        d1505 = (t8242 - t8238);
        d1506 = (d1505 - b1161);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d1507 = (d1504 - b1160);
        b1162 = ((d1504 < b1160));
        t8272 = (d1506 - b1162);
        /* End of MPSubDDD 128 */
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21575 = ((t8242 < t8238));
        a21576 = ((t8242 == t8238));
        a21577 = ((a21576) && (b1161));
        a21578 = ((a21575) || (a21577));
        /* MPEqual 64 */
        a21579 = ((t8243 == t8239));
        a21580 = ((a21576) && (a21579));
        /* MPLessThan 64 */
        a21581 = ((a21580) && (b1160));
        b1163 = ((a21578) || (a21581));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d1508 = (t8255 - t8237);
        b1164 = ((t8255 < t8237));
        d1509 = (t8254 - t8236);
        d1510 = (d1509 - b1164);
        /* End of MPSubDDD 64 */
        /* End of MPSubDDD 128 */
        /* MPSubDDI 128 */
        /* MPSubDDI 64 */
        d1511 = (d1508 - b1163);
        b1165 = ((d1508 < b1163));
        t8273 = (d1510 - b1165);
        /* End of MPSubDDD 256 */
        /* MPAddDDD 256 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1787 = (((uint128_t ) d1501) + ((uint128_t ) a17755));
        t8274 = ((uint64_t ) s1787);
        c996 = (s1787 >> 64);
        s1788 = (((uint128_t ) d1503) + ((uint128_t ) a17754));
        s1789 = (((uint128_t ) s1788) + ((uint128_t ) c996));
        t8275 = ((uint64_t ) s1789);
        c997 = (s1789 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s1790 = (((uint128_t ) d1507) + ((uint128_t ) a17753));
        t8276 = ((uint64_t ) s1790);
        c998 = (s1790 >> 64);
        s1791 = (((uint128_t ) t8272) + ((uint128_t ) a17752));
        s1792 = (((uint128_t ) s1791) + ((uint128_t ) c998));
        t8277 = ((uint64_t ) s1792);
        c999 = (s1792 >> 64);
        /* MPPropagateCarry 64 */
        t8278 = (t8276 + c997);
        a21585 = ((t8278 == 0));
        a21586 = (t8277 + c997);
        t8279 = ((a21585) ? (a21586) : (t8277));
        a21587 = ((t8279 == 0));
        a21588 = ((a21587) && (a21585));
        a21589 = (c999 + c997);
        t8280 = ((a21588) ? (a21589) : (c999));
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPExtractLow 128 */
        /* MPExtractCarry 128 */
        /* MPAddQDD 128 */
        /* MPAddQDD 64 */
        s1793 = (((uint128_t ) d1511) + ((uint128_t ) a17751));
        t8282 = ((uint64_t ) s1793);
        c1000 = (s1793 >> 64);
        s1794 = (((uint128_t ) t8273) + ((uint128_t ) a17750));
        s1795 = (((uint128_t ) s1794) + ((uint128_t ) c1000));
        t8283 = ((uint64_t ) s1795);
        /* MPExtractLow 64 */
        /* MPPropagateCarry 128 */
        /* MPAddDDI 64 */
        s1796 = (((uint128_t ) t8282) + ((uint128_t ) t8280));
        t8284 = ((uint64_t ) s1796);
        c1002 = (s1796 >> 64);
        s1797 = (((uint128_t ) t8283) + ((uint128_t ) c1002));
        t8285 = ((uint64_t ) s1797);
        /* MPExtractLow 128 */
        /* MPLessThan 256 */
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a21593 = ((0 < t8234));
        a21594 = ((0 == t8234));
        a21595 = ((0 < t8235));
        a21596 = ((a21594) && (a21595));
        a21597 = ((a21593) || (a21596));
        /* MPEqual 64 */
        a21598 = ((0 == t8235));
        a21599 = ((a21594) && (a21598));
        /* MPLessThan 64 */
        a21600 = ((t8254 < t8236));
        a21601 = ((t8254 == t8236));
        a21602 = ((a21601) && (b1164));
        a21603 = ((a21600) || (a21602));
        a21604 = ((a21599) && (a21603));
        a21605 = ((a21597) || (a21604));
        /* MPAssignDD 128 */
        /* MPTypeCastDI 64 */
        /* MPAssignDD 64 */
        /* MPEqual 128 */
        /* MPEqual 64 */
        /* MPEqual 64 */
        a21606 = ((t8255 == t8237));
        a21607 = ((a21601) && (a21606));
        a21608 = ((a21599) && (a21607));
        /* MPAssignDD 128 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        /* MPEqual 64 */
        /* MPLessThan 64 */
        a21609 = ((a21608) && (b1163));
        i356 = ((a21605) || (a21609));
        a21610 = (2*a21567);
        /* MPCondD 128 */
        a21611 = (2*a21610);
        a21612 = (a21611 + 1);
        /* MPCondD 64 */
        a21613 = (2*a21612);
        Y[a21613] = ((i356) ? (t8285) : (t8273));
        a21614 = (a21613 + 1);
        Y[a21614] = ((i356) ? (t8284) : (d1511));
        a21615 = (a21610 + 1);
        /* MPCondD 128 */
        a21616 = (2*a21615);
        /* MPCondD 64 */
        a21617 = (2*a21616);
        Y[a21617] = ((i356) ? (t8279) : (t8272));
        a21618 = (a21617 + 1);
        Y[a21618] = ((i356) ? (t8278) : (d1507));
        a21619 = (a21616 + 1);
        /* MPCondD 64 */
        a21620 = (2*a21619);
        Y[a21620] = ((i356) ? (t8275) : (d1503));
        a21621 = (a21620 + 1);
        Y[a21621] = ((i356) ? (t8274) : (d1501));
        /* End of MPModSub 256 */
    }
}

void nttmpcuda(uint64_t  *Y, uint64_t  *X, uint64_t modulus[2], uint64_t  *twiddles, uint64_t mu[2]) {
    dim3 b47(128, 1, 1), b48(128, 1, 1), b49(128, 1, 1), b50(128, 1, 1), b51(128, 1, 1), b52(128, 1, 1), b53(128, 1, 1), b54(128, 1, 1), 
    b55(128, 1, 1), b56(128, 1, 1), g1(2, 1, 1), g10(2, 1, 1), g2(2, 1, 1), g3(2, 1, 1), g4(2, 1, 1), g5(2, 1, 1), 
    g6(2, 1, 1), g7(2, 1, 1), g8(2, 1, 1), g9(2, 1, 1);
    ker_code0<<<g1, b47>>>(X, Y, modulus, twiddles, mu);
    ker_code1<<<g2, b48>>>(X, Y, modulus, twiddles, mu);
    ker_code2<<<g3, b49>>>(X, Y, modulus, twiddles, mu);
    ker_code3<<<g4, b50>>>(X, Y, modulus, twiddles, mu);
    ker_code4<<<g5, b51>>>(X, Y, modulus, twiddles, mu);
    ker_code5<<<g6, b52>>>(X, Y, modulus, twiddles, mu);
    ker_code6<<<g7, b53>>>(X, Y, modulus, twiddles, mu);
    ker_code7<<<g8, b54>>>(X, Y, modulus, twiddles, mu);
    ker_code8<<<g9, b55>>>(X, Y, modulus, twiddles, mu);
    ker_code9<<<g10, b56>>>(X, Y, modulus, twiddles, mu);
}

void destroy_nttmpcuda() {
    /* skip */
}
