
/*
 * This code was generated by Spiral 8.5.1, www.spiral.net
 */

#include <stdint.h>
__device__ uint64_t P1[8192];
__device__ uint64_t P2[8192];

__device__ void MPMulQDD_L2(uint64_t &t1955, uint64_t &t1956, uint64_t &t1963, uint64_t &t1964, uint64_t &t1981, uint64_t &t1990, uint64_t &t1993, uint64_t &t1994, uint64_t t1477, uint64_t t1478, uint64_t t1475, uint64_t t1476, uint64_t t1481, uint64_t t1482, uint64_t t1479, uint64_t t1480) {
    int a7221, a7222, a7223, a7224, a7232, a7233, a7234, a7235, 
            a7237, a7238, a7240, a7242, a7243, a7245, a7256, a7257, 
            a7258, a7259, a7261, a7263, a7264, a7269, a7271, a7272, 
            a7277, a7285, a7286, a7287, a7291, a7292, a7293, a7294, 
            a7295, a7296, a7297, a7298, a7306, a7308, a7309, a7314, 
            b337, b338, b339, b340, b341, b342, b343, b344, 
            b345, b346, b347, b348, b349, b350, b351, b352, 
            c151, c152, c153, c154, c156, c157, c158, c159, 
            c160, c161, c163, c164, c165, c166, c167, c168, 
            c170, c171, c172, c173, c174, c175, c176, c177, 
            c178, c179, c180, c182, c183, c184, c185, c186, 
            i302, i303, i304, i305, s430, s431, s448, s449, 
            s464, s465, s468, s469;
    uint64_t a7218, a7219, a7229, a7230, a7253, a7254, a7262, a7265, 
            a7270, a7273, a7278, a7307, a7310, a7315, d444, d445, 
            d446, d447, d448, d449, d450, d451, d452, d453, 
            d454, d455, d456, d457, d458, d459, d460, d461, 
            d462, d463, d464, d465, d466, d467, d468, d469, 
            d470, d471, d472, p37, p38, p39, p40, p41, 
            p42, p43, p44, p45, p46, p47, p48, t2127, 
            t2128, t2129, t2130, t2131, t2132, t2133, t2134, t2135, 
            t2136, t2137, t2139, t2141, t2142, t2143, t2144, t2145, 
            t2146, t2147, t2148, t2149, t2150, t2151, t2152, t2153, 
            t2154, t2155, t2156, t2157, t2158, t2160, t2162, t2163, 
            t2164, t2165, t2166, t2167, t2168, t2169, t2170, t2171, 
            t2172, t2173, t2174, t2175, t2176, t2177, t2178, t2179, 
            t2180, t2181, t2182, t2183, t2185, t2187, t2188, t2189, 
            t2190, t2191, t2192, t2193, t2194, t2195, t2196, t2197, 
            t2198, t2199, t2200, t2202, t2203, t2204, t2205, t2206, 
            t2207, t2208, t2210, t2211, t2212, t2213, t2216, t2217, 
            t2218, t2219, t2220, t2221, t2222, t2223, t2224, t2225, 
            t2226, t2228, t2229;
    uint128_t s428, s429, s432, s433, s434, s435, s436, s437, 
            s438, s439, s441, s442, s443, s444, s445, s446, 
            s447, s450, s451, s452, s453, s454, s455, s456, 
            s457, s459, s460, s461, s462, s463, s466, s467, 
            s470, s471, s472, s473, s474, s475, s476, s477, 
            s479, s480, s481, s482, s483, s484, s485, s486, 
            s487, s488, s489, s490, s491, s492, s493, s494, 
            s495, s496, s497, s498, s499, s500, s501, s502, 
            s503, s504, s505;
    /* Begin of MPMulQDD_Karatsuba */
    /* Begin of MPMulQDD_Karatsuba */
    s428 = (((uint128_t ) t1477)*((uint128_t ) t1481));
    t2127 = (s428 >> 64);
    t2128 = ((uint64_t ) s428);
    s429 = (((uint128_t ) t1478)*((uint128_t ) t1482));
    t2129 = (s429 >> 64);
    t2130 = ((uint64_t ) s429);
    s430 = ((t1478 > t1477));
    s431 = ((t1481 > t1482));
    i302 = ((s430 == s431));
    p37 = (t1478 - t1477);
    p38 = (t1477 - t1478);
    a7218 = ((s430) ? (p37) : (p38));
    p39 = (t1482 - t1481);
    p40 = (t1481 - t1482);
    a7219 = ((s431) ? (p40) : (p39));
    s432 = (((uint128_t ) a7218)*((uint128_t ) a7219));
    t2131 = (s432 >> 64);
    t2132 = ((uint64_t ) s432);
    /* MPAddQDD 64 */
    s433 = (((uint128_t ) t2128) + ((uint128_t ) t2130));
    t2133 = ((uint64_t ) s433);
    c151 = (s433 >> 64);
    s434 = (((uint128_t ) t2127) + ((uint128_t ) t2129));
    s435 = (((uint128_t ) s434) + ((uint128_t ) c151));
    t2134 = ((uint64_t ) s435);
    c152 = (s435 >> 64);
    /* Begin of MPAddQQQ 64 */
    s436 = (((uint128_t ) t2133) + ((uint128_t ) t2132));
    t2135 = ((uint64_t ) s436);
    c153 = (s436 >> 64);
    s437 = (((uint128_t ) t2134) + ((uint128_t ) t2131));
    s438 = (((uint128_t ) s437) + ((uint128_t ) c153));
    t2136 = ((uint64_t ) s438);
    c154 = (s438 >> 64);
    s439 = (((uint128_t ) c152) + ((uint128_t ) c154));
    t2137 = ((uint64_t ) s439);
    /* End of MPAddQQQ 64 */
    /* Begin of MPSubQQD 64 */
    d444 = (t2133 - t2132);
    b337 = ((t2133 < t2132));
    d445 = (t2134 - t2131);
    d446 = (d445 - b337);
    a7221 = ((t2134 < t2131));
    a7222 = ((t2134 == t2131));
    a7223 = ((b337 == 1));
    a7224 = ((a7222) && (a7223));
    b338 = ((a7221) || (a7224));
    t2139 = (c152 - b338);
    /* End of MPSubQQD 64 */
    t2141 = ((i302) ? (t2137) : (t2139));
    t2142 = ((i302) ? (t2136) : (d446));
    t2143 = ((i302) ? (t2135) : (d444));
    /* Begin of MPAddQQQ 64 */
    t2144 = ((uint64_t ) t2130);
    s441 = (((uint128_t ) t2129) + ((uint128_t ) t2143));
    t2145 = ((uint64_t ) s441);
    c156 = (s441 >> 64);
    s442 = (((uint128_t ) t2128) + ((uint128_t ) t2142));
    s443 = (((uint128_t ) s442) + ((uint128_t ) c156));
    t2146 = ((uint64_t ) s443);
    c157 = (s443 >> 64);
    s444 = (((uint128_t ) t2127) + ((uint128_t ) t2141));
    s445 = (((uint128_t ) s444) + ((uint128_t ) c157));
    t2147 = ((uint64_t ) s445);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Karatsuba */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* Begin of MPMulQDD_Karatsuba */
    s446 = (((uint128_t ) t1475)*((uint128_t ) t1479));
    t2148 = (s446 >> 64);
    t2149 = ((uint64_t ) s446);
    s447 = (((uint128_t ) t1476)*((uint128_t ) t1480));
    t2150 = (s447 >> 64);
    t2151 = ((uint64_t ) s447);
    s448 = ((t1476 > t1475));
    s449 = ((t1479 > t1480));
    i303 = ((s448 == s449));
    p41 = (t1476 - t1475);
    p42 = (t1475 - t1476);
    a7229 = ((s448) ? (p41) : (p42));
    p43 = (t1480 - t1479);
    p44 = (t1479 - t1480);
    a7230 = ((s449) ? (p44) : (p43));
    s450 = (((uint128_t ) a7229)*((uint128_t ) a7230));
    t2152 = (s450 >> 64);
    t2153 = ((uint64_t ) s450);
    /* MPAddQDD 64 */
    s451 = (((uint128_t ) t2149) + ((uint128_t ) t2151));
    t2154 = ((uint64_t ) s451);
    c158 = (s451 >> 64);
    s452 = (((uint128_t ) t2148) + ((uint128_t ) t2150));
    s453 = (((uint128_t ) s452) + ((uint128_t ) c158));
    t2155 = ((uint64_t ) s453);
    c159 = (s453 >> 64);
    /* Begin of MPAddQQQ 64 */
    s454 = (((uint128_t ) t2154) + ((uint128_t ) t2153));
    t2156 = ((uint64_t ) s454);
    c160 = (s454 >> 64);
    s455 = (((uint128_t ) t2155) + ((uint128_t ) t2152));
    s456 = (((uint128_t ) s455) + ((uint128_t ) c160));
    t2157 = ((uint64_t ) s456);
    c161 = (s456 >> 64);
    s457 = (((uint128_t ) c159) + ((uint128_t ) c161));
    t2158 = ((uint64_t ) s457);
    /* End of MPAddQQQ 64 */
    /* Begin of MPSubQQD 64 */
    d447 = (t2154 - t2153);
    b339 = ((t2154 < t2153));
    d448 = (t2155 - t2152);
    d449 = (d448 - b339);
    a7232 = ((t2155 < t2152));
    a7233 = ((t2155 == t2152));
    a7234 = ((b339 == 1));
    a7235 = ((a7233) && (a7234));
    b340 = ((a7232) || (a7235));
    t2160 = (c159 - b340);
    /* End of MPSubQQD 64 */
    t2162 = ((i303) ? (t2158) : (t2160));
    t2163 = ((i303) ? (t2157) : (d449));
    t2164 = ((i303) ? (t2156) : (d447));
    /* Begin of MPAddQQQ 64 */
    t2165 = ((uint64_t ) t2151);
    s459 = (((uint128_t ) t2150) + ((uint128_t ) t2164));
    t2166 = ((uint64_t ) s459);
    c163 = (s459 >> 64);
    s460 = (((uint128_t ) t2149) + ((uint128_t ) t2163));
    s461 = (((uint128_t ) s460) + ((uint128_t ) c163));
    t2167 = ((uint64_t ) s461);
    c164 = (s461 >> 64);
    s462 = (((uint128_t ) t2148) + ((uint128_t ) t2162));
    s463 = (((uint128_t ) s462) + ((uint128_t ) c164));
    t2168 = ((uint64_t ) s463);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Karatsuba */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPLessThan 64 */
    a7237 = ((t1477 < t1475));
    a7238 = ((t1477 == t1475));
    b342 = ((t1478 < t1476));
    a7240 = ((a7238) && (b342));
    s464 = ((a7237) || (a7240));
    /* MPLessThan 64 */
    a7242 = ((t1479 < t1481));
    a7243 = ((t1479 == t1481));
    b343 = ((t1480 < t1482));
    a7245 = ((a7243) && (b343));
    s465 = ((a7242) || (a7245));
    i304 = ((s464 == s465));
    /* Begin of MPSubDDD 64 */
    d450 = (t1476 - t1478);
    b341 = ((t1476 < t1478));
    d451 = (t1475 - t1477);
    d452 = (d451 - b341);
    /* End of MPSubDDD 64 */
    /* Begin of MPSubDDD 64 */
    d453 = (t1478 - t1476);
    d454 = (t1477 - t1475);
    d455 = (d454 - b342);
    /* End of MPSubDDD 64 */
    /* MPCondD 64 */
    t2169 = ((s464) ? (d452) : (d455));
    t2170 = ((s464) ? (d450) : (d453));
    /* Begin of MPSubDDD 64 */
    d456 = (t1480 - t1482);
    d457 = (t1479 - t1481);
    d458 = (d457 - b343);
    /* End of MPSubDDD 64 */
    /* Begin of MPSubDDD 64 */
    d459 = (t1482 - t1480);
    b344 = ((t1482 < t1480));
    d460 = (t1481 - t1479);
    d461 = (d460 - b344);
    /* End of MPSubDDD 64 */
    /* MPCondD 64 */
    t2171 = ((s465) ? (d461) : (d458));
    t2172 = ((s465) ? (d459) : (d456));
    /* Begin of MPMulQDD_Karatsuba */
    s466 = (((uint128_t ) t2169)*((uint128_t ) t2171));
    t2173 = (s466 >> 64);
    t2174 = ((uint64_t ) s466);
    s467 = (((uint128_t ) t2170)*((uint128_t ) t2172));
    t2175 = (s467 >> 64);
    t2176 = ((uint64_t ) s467);
    s468 = ((t2170 > t2169));
    s469 = ((t2171 > t2172));
    i305 = ((s468 == s469));
    p45 = (t2170 - t2169);
    p46 = (t2169 - t2170);
    a7253 = ((s468) ? (p45) : (p46));
    p47 = (t2172 - t2171);
    p48 = (t2171 - t2172);
    a7254 = ((s469) ? (p48) : (p47));
    s470 = (((uint128_t ) a7253)*((uint128_t ) a7254));
    t2177 = (s470 >> 64);
    t2178 = ((uint64_t ) s470);
    /* MPAddQDD 64 */
    s471 = (((uint128_t ) t2174) + ((uint128_t ) t2176));
    t2179 = ((uint64_t ) s471);
    c165 = (s471 >> 64);
    s472 = (((uint128_t ) t2173) + ((uint128_t ) t2175));
    s473 = (((uint128_t ) s472) + ((uint128_t ) c165));
    t2180 = ((uint64_t ) s473);
    c166 = (s473 >> 64);
    /* Begin of MPAddQQQ 64 */
    s474 = (((uint128_t ) t2179) + ((uint128_t ) t2178));
    t2181 = ((uint64_t ) s474);
    c167 = (s474 >> 64);
    s475 = (((uint128_t ) t2180) + ((uint128_t ) t2177));
    s476 = (((uint128_t ) s475) + ((uint128_t ) c167));
    t2182 = ((uint64_t ) s476);
    c168 = (s476 >> 64);
    s477 = (((uint128_t ) c166) + ((uint128_t ) c168));
    t2183 = ((uint64_t ) s477);
    /* End of MPAddQQQ 64 */
    /* Begin of MPSubQQD 64 */
    d462 = (t2179 - t2178);
    b345 = ((t2179 < t2178));
    d463 = (t2180 - t2177);
    d464 = (d463 - b345);
    a7256 = ((t2180 < t2177));
    a7257 = ((t2180 == t2177));
    a7258 = ((b345 == 1));
    a7259 = ((a7257) && (a7258));
    b346 = ((a7256) || (a7259));
    t2185 = (c166 - b346);
    /* End of MPSubQQD 64 */
    t2187 = ((i305) ? (t2183) : (t2185));
    t2188 = ((i305) ? (t2182) : (d464));
    t2189 = ((i305) ? (t2181) : (d462));
    /* Begin of MPAddQQQ 64 */
    t2190 = ((uint64_t ) t2176);
    s479 = (((uint128_t ) t2175) + ((uint128_t ) t2189));
    t2191 = ((uint64_t ) s479);
    c170 = (s479 >> 64);
    s480 = (((uint128_t ) t2174) + ((uint128_t ) t2188));
    s481 = (((uint128_t ) s480) + ((uint128_t ) c170));
    t2192 = ((uint64_t ) s481);
    c171 = (s481 >> 64);
    s482 = (((uint128_t ) t2173) + ((uint128_t ) t2187));
    s483 = (((uint128_t ) s482) + ((uint128_t ) c171));
    t2193 = ((uint64_t ) s483);
    /* End of MPAddQQQ 64 */
    /* End of MPMulQDD_Karatsuba */
    /* MPExtractHigh 64 */
    /* MPExtractLow 64 */
    /* MPAddQDD 128 */
    /* MPAddQDD 64 */
    s484 = (((uint128_t ) t2144) + ((uint128_t ) t2165));
    t2194 = ((uint64_t ) s484);
    c172 = (s484 >> 64);
    s485 = (((uint128_t ) t2145) + ((uint128_t ) t2166));
    s486 = (((uint128_t ) s485) + ((uint128_t ) c172));
    t2195 = ((uint64_t ) s486);
    c173 = (s486 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s487 = (((uint128_t ) t2146) + ((uint128_t ) t2167));
    t2196 = ((uint64_t ) s487);
    c174 = (s487 >> 64);
    s488 = (((uint128_t ) t2147) + ((uint128_t ) t2168));
    s489 = (((uint128_t ) s488) + ((uint128_t ) c174));
    t2197 = ((uint64_t ) s489);
    c175 = (s489 >> 64);
    /* MPPropagateCarry 64 */
    t2198 = (t2196 + c173);
    a7261 = ((t2198 == 0));
    a7262 = (t2197 + c173);
    t2199 = ((a7261) ? (a7262) : (t2197));
    a7263 = ((t2199 == 0));
    a7264 = ((a7263) && (a7261));
    a7265 = (c175 + c173);
    t2200 = ((a7264) ? (a7265) : (c175));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    s490 = (((uint128_t ) t2194) + ((uint128_t ) t2190));
    t2202 = ((uint64_t ) s490);
    c176 = (s490 >> 64);
    s491 = (((uint128_t ) t2195) + ((uint128_t ) t2191));
    s492 = (((uint128_t ) s491) + ((uint128_t ) c176));
    t2203 = ((uint64_t ) s492);
    c177 = (s492 >> 64);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s493 = (((uint128_t ) t2198) + ((uint128_t ) t2192));
    t2204 = ((uint64_t ) s493);
    c178 = (s493 >> 64);
    s494 = (((uint128_t ) t2199) + ((uint128_t ) t2193));
    s495 = (((uint128_t ) s494) + ((uint128_t ) c178));
    t2205 = ((uint64_t ) s495);
    c179 = (s495 >> 64);
    /* MPPropagateCarry 64 */
    t2206 = (t2204 + c177);
    a7269 = ((t2206 == 0));
    a7270 = (t2205 + c177);
    t2207 = ((a7269) ? (a7270) : (t2205));
    a7271 = ((t2207 == 0));
    a7272 = ((a7271) && (a7269));
    a7273 = (c179 + c177);
    t2208 = ((a7272) ? (a7273) : (c179));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQID 64 */
    t2210 = ((uint64_t ) t2200);
    c180 = (t2200 >> 64);
    s496 = (((uint128_t ) 0) + ((uint128_t ) c180));
    t2211 = ((uint64_t ) s496);
    /* MPPropagateCarry 64 */
    t2212 = (t2210 + t2208);
    a7277 = ((t2212 == 0));
    a7278 = (t2211 + t2208);
    t2213 = ((a7277) ? (a7278) : (t2211));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* Begin of MPSubQQD 128 */
    /* Begin of MPSubDDD 64 */
    d465 = (t2194 - t2190);
    b347 = ((t2194 < t2190));
    d466 = (t2195 - t2191);
    d467 = (d466 - b347);
    /* End of MPSubDDD 64 */
    /* MPLessThan 64 */
    a7285 = ((t2195 < t2191));
    a7286 = ((t2195 == t2191));
    a7287 = ((a7286) && (b347));
    b348 = ((a7285) || (a7287));
    /* Begin of MPSubDDD 64 */
    d468 = (t2198 - t2192);
    b349 = ((t2198 < t2192));
    d469 = (t2199 - t2193);
    d470 = (d469 - b349);
    /* End of MPSubDDD 64 */
    /* MPSubDDI 64 */
    d471 = (d468 - b348);
    b350 = ((d468 < b348));
    t2216 = (d470 - b350);
    /* MPLessThan 64 */
    a7291 = ((t2199 < t2193));
    a7292 = ((t2199 == t2193));
    a7293 = ((a7292) && (b349));
    a7294 = ((a7291) || (a7293));
    /* MPEqual 64 */
    a7295 = ((t2198 == t2192));
    a7296 = ((a7292) && (a7295));
    a7297 = ((b348 == 1));
    a7298 = ((a7296) && (a7297));
    b351 = ((a7294) || (a7298));
    /* MPSubDII 64 */
    d472 = (t2200 - b351);
    b352 = ((t2200 < b351));
    /* End of MPSubQQD 128 */
    /* MPCondD 64 */
    t2217 = ((i304) ? (t2213) : (-(b352)));
    t2218 = ((i304) ? (t2212) : (d472));
    /* MPCondD 64 */
    t2219 = ((i304) ? (t2207) : (t2216));
    t2220 = ((i304) ? (t2206) : (d471));
    /* MPCondD 64 */
    t2221 = ((i304) ? (t2203) : (d467));
    t2222 = ((i304) ? (t2202) : (d465));
    /* MPTypeCastDI 64 */
    /* Begin of MPAddQQQ 128 */
    /* MPAddQDD 64 */
    t1994 = ((uint64_t ) t2165);
    t1993 = ((uint64_t ) t2166);
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s497 = (((uint128_t ) t2167) + ((uint128_t ) t2222));
    t1990 = ((uint64_t ) s497);
    c182 = (s497 >> 64);
    s498 = (((uint128_t ) t2168) + ((uint128_t ) t2221));
    s499 = (((uint128_t ) s498) + ((uint128_t ) c182));
    t2223 = ((uint64_t ) s499);
    c183 = (s499 >> 64);
    /* MPPropagateCarry 64 */
    t1981 = t2223;
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s500 = (((uint128_t ) t2144) + ((uint128_t ) t2220));
    t2224 = ((uint64_t ) s500);
    c184 = (s500 >> 64);
    s501 = (((uint128_t ) t2145) + ((uint128_t ) t2219));
    s502 = (((uint128_t ) s501) + ((uint128_t ) c184));
    t2225 = ((uint64_t ) s502);
    c185 = (s502 >> 64);
    /* MPPropagateCarry 64 */
    t1964 = (t2224 + c183);
    a7306 = ((t1964 == 0));
    a7307 = (t2225 + c183);
    t1963 = ((a7306) ? (a7307) : (t2225));
    a7308 = ((t1963 == 0));
    a7309 = ((a7308) && (a7306));
    a7310 = (c185 + c183);
    t2226 = ((a7309) ? (a7310) : (c185));
    /* MPExtractLow 64 */
    /* MPExtractCarry 64 */
    /* MPAddQDD 64 */
    s503 = (((uint128_t ) t2146) + ((uint128_t ) t2218));
    t2228 = ((uint64_t ) s503);
    c186 = (s503 >> 64);
    s504 = (((uint128_t ) t2147) + ((uint128_t ) t2217));
    s505 = (((uint128_t ) s504) + ((uint128_t ) c186));
    t2229 = ((uint64_t ) s505);
    /* MPPropagateCarry 64 */
    t1956 = (t2228 + t2226);
    a7314 = ((t1956 == 0));
    a7315 = (t2229 + t2226);
    t1955 = ((a7314) ? (a7315) : (t2229));
    /* MPExtractLow 64 */
    /* End of MPAddQQQ 128 */
    /* End of MPMulQDD_Karatsuba */
}

void init_nttmpcuda() {
    /* skip */
}

__global__ void ker_code0(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a7321, a7322, a7323, a7324, a7325, a7326, a7327, a7328, 
            a7329, a7330, a7340, a7341, a7342, a7347, a7348, a7349, 
            a7353, a7354, a7355, a7356, a7357, a7358, a7359, a7360, 
            a7361, a7362, a7363, a7364, a7365, a7366, a7367, a7368, 
            a7369, a7377, a7378, a7379, a7380, a7381, a7382, a7383, 
            a7384, a7385, a7386, a7387, a7388, a7389, a7391, a7392, 
            a7393, a7397, a7398, a7399, a7400, a7401, a7402, a7403, 
            a7405, a7406, a7407, a7411, a7419, a7420, a7421, a7422, 
            a7423, a7424, a7425, a7426, a7427, a7428, a7429, a7430, 
            a7431, b353, b354, b355, b356, b357, b358, b359, 
            b360, b361, b362, b363, b364, b365, b366, b367, 
            b368, b369, b370, b371, c188, c189, c190, c192, 
            c193, c194, i306, i307, i308;
    uint64_t a3124, a3125, a3126, a3127, a3155, a3156, a3157, a3158, 
            a7331, a7332, a7333, a7334, a7335, a7336, a7337, a7338, 
            a7370, a7412, d473, d474, d475, d476, d477, d478, 
            d479, d480, d481, d482, d483, d484, d485, d486, 
            d487, d488, d489, d490, d491, d492, d493, d494, 
            d495, d496, d497, d498, d499, d500, t1055, t1056, 
            t1057, t1058, t1059, t1060, t1061, t1062, t1063, t1064, 
            t1065, t1066, t1067, t1068, t1069, t1070, t1071, t1072, 
            t1073, t1074, t1075, t1076, t1077, t1078, t2232, t2233, 
            t2234, t2235, t2236, t2237, t2238, t2239, t2240, t2241, 
            t2242, t2243, t2244, t2245, t2246, t2247, t2248, t2249, 
            t2250, t2251, t2252, t2253, t2254, t2255, t2256, t2257, 
            t2258, t2259, t2260, t2261, t2262, t2263, t2264, t2265, 
            t2266, t2267, t2268, t2271, t2272, t2273, t2274, t2275, 
            t2276, t2277, t2278;
    uint128_t s506, s507, s508, s509, s510, s511, s512, s513, 
            s514, s515, s516, s517;
    for(int i21 = 0; i21 <= 1; i21++) {
        a7321 = (1024*blockIdx.x);
        a7322 = (256*i21);
        b353 = (a7321 + threadIdx.x);
        a7323 = (b353 + a7322);
        a7324 = (a7323 + 512);
        /* Begin of MPModMul 128 */
        a7325 = (2*a7324);
        a7326 = (a7325 + 1);
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        /* MPAssignDD 64 */
        a7327 = (2*a7325);
        t2232 = X[a7327];
        a7328 = (a7327 + 1);
        t2233 = X[a7328];
        /* MPAssignDD 64 */
        a7329 = (2*a7326);
        t2234 = X[a7329];
        a7330 = (a7329 + 1);
        t2235 = X[a7330];
        MPMulQDD_L2(t1061, t1062, t1059, t1060, t1057, t1058, t1055, t1056, 
    twiddles[4], twiddles[5], twiddles[6], twiddles[7], t2232, t2233, t2234, t2235);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2236 = (t1057 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b354 = ((int) 1);
        t2237 = (288230376151711744 - b354);
        /* MPBinAndD 64 */
        t2238 = (((t1061)&(t2237)));
        t2239 = (((t1062)&((-1))));
        /* Begin of MPShiftLeft2D */
        a7331 = (t2238 << 6);
        a7332 = (t2239 >> 58);
        t2240 = (((a7331)|(a7332)));
        t2241 = (t2239 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2242 = (t1059 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2243 = (((t2241)|(t2242)));
        /* Begin of MPShiftLeft2D */
        a7333 = (t1059 << 6);
        a7334 = (t1060 >> 58);
        t2244 = (((a7333)|(a7334)));
        t2245 = (t1060 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2246 = (((t2245)|(t2236)));
        /* End of MPShiftRight3 */
        a3124 = mu[0];
        a3125 = mu[1];
        a3126 = mu[2];
        a3127 = mu[3];
        MPMulQDD_L2(t1077, t1078, t1075, t1076, t1073, t1074, t1071, t1072, 
    t2240, t2243, t2244, t2246, a3124, a3125, a3126, a3127);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2247 = (t1077 >> 1);
        a7335 = (t1077 << 63);
        a7336 = (t1078 >> 1);
        t2248 = (((a7335)|(a7336)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2249 = (t1078 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2250 = (t1075 >> 1);
        a7337 = (t1075 << 63);
        a7338 = (t1076 >> 1);
        t2251 = (((a7337)|(a7338)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2252 = (((t2249)|(t2250)));
        /* End of MPShiftRight2 */
        a3155 = modulus[0];
        a3156 = modulus[1];
        a3157 = modulus[2];
        a3158 = modulus[3];
        MPMulQDD_L2(t1069, t1070, t1067, t1068, t1065, t1066, t1063, t1064, 
    t2247, t2248, t2252, t2251, a3155, a3156, a3157, a3158);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d473 = (t1056 - t1064);
        b355 = ((t1056 < t1064));
        d474 = (t1055 - t1063);
        d475 = (d474 - b355);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7340 = ((t1055 < t1063));
        a7341 = ((t1055 == t1063));
        a7342 = ((a7341) && (b355));
        b356 = ((a7340) || (a7342));
        /* Begin of MPSubDDD 64 */
        d476 = (t1058 - t1066);
        b357 = ((t1058 < t1066));
        d477 = (t1057 - t1065);
        d478 = (d477 - b357);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d479 = (d476 - b356);
        b358 = ((d476 < b356));
        t2253 = (d478 - b358);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d480 = (d473 - a3158);
        b359 = ((d473 < a3158));
        d481 = (d475 - a3157);
        d482 = (d481 - b359);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7347 = ((d475 < a3157));
        a7348 = ((d475 == a3157));
        a7349 = ((a7348) && (b359));
        b360 = ((a7347) || (a7349));
        /* Begin of MPSubDDD 64 */
        d483 = (d479 - a3156);
        b361 = ((d479 < a3156));
        d484 = (t2253 - a3155);
        d485 = (d484 - b361);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d486 = (d483 - b360);
        b362 = ((d483 < b360));
        t2254 = (d485 - b362);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7353 = ((t2253 < a3155));
        a7354 = ((t2253 == a3155));
        a7355 = ((a7354) && (b361));
        a7356 = ((a7353) || (a7355));
        /* MPEqual 64 */
        a7357 = ((d479 == a3156));
        a7358 = ((a7354) && (a7357));
        /* MPLessThan 64 */
        a7359 = ((a7358) && (b360));
        i306 = ((a7356) || (a7359));
        /* MPCondD 64 */
        t2255 = ((i306) ? (t2253) : (t2254));
        t2256 = ((i306) ? (d479) : (d486));
        /* MPCondD 64 */
        t2257 = ((i306) ? (d475) : (d482));
        t2258 = ((i306) ? (d473) : (d480));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a7360 = (512*i21);
        a7361 = (2*threadIdx.x);
        a7362 = (a7360 + a7361);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a7363 = (2*a7323);
        a7364 = (a7363 + 1);
        /* MPAssignDD 64 */
        a7365 = (2*a7364);
        t2259 = X[a7365];
        a7366 = (a7365 + 1);
        t2260 = X[a7366];
        /* MPAddQDD 64 */
        s506 = (((uint128_t ) t2260) + ((uint128_t ) t2258));
        t2261 = ((uint64_t ) s506);
        c188 = (s506 >> 64);
        s507 = (((uint128_t ) t2259) + ((uint128_t ) t2257));
        s508 = (((uint128_t ) s507) + ((uint128_t ) c188));
        t2262 = ((uint64_t ) s508);
        c189 = (s508 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a7367 = (2*a7363);
        t2263 = X[a7367];
        a7368 = (a7367 + 1);
        t2264 = X[a7368];
        /* MPAddQDD 64 */
        s509 = (((uint128_t ) t2264) + ((uint128_t ) t2256));
        t2265 = ((uint64_t ) s509);
        c190 = (s509 >> 64);
        s510 = (((uint128_t ) t2263) + ((uint128_t ) t2255));
        s511 = (((uint128_t ) s510) + ((uint128_t ) c190));
        t2266 = ((uint64_t ) s511);
        /* MPPropagateCarry 64 */
        t2267 = (t2265 + c189);
        a7369 = ((t2267 == 0));
        a7370 = (t2266 + c189);
        t2268 = ((a7369) ? (a7370) : (t2266));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7377 = ((a3155 < t2268));
        a7378 = ((a3155 == t2268));
        a7379 = ((a3156 < t2267));
        a7380 = ((a7378) && (a7379));
        a7381 = ((a7377) || (a7380));
        /* MPEqual 64 */
        a7382 = ((a3156 == t2267));
        a7383 = ((a7378) && (a7382));
        /* MPLessThan 64 */
        a7384 = ((a3157 < t2262));
        a7385 = ((a3157 == t2262));
        a7386 = ((a3158 < t2261));
        a7387 = ((a7385) && (a7386));
        a7388 = ((a7384) || (a7387));
        a7389 = ((a7383) && (a7388));
        i307 = ((a7381) || (a7389));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d487 = (t2261 - a3158);
        b363 = ((t2261 < a3158));
        d488 = (t2262 - a3157);
        d489 = (d488 - b363);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7391 = ((t2262 < a3157));
        a7392 = ((t2262 == a3157));
        a7393 = ((a7392) && (b363));
        b364 = ((a7391) || (a7393));
        /* Begin of MPSubDDD 64 */
        d490 = (t2267 - a3156);
        b365 = ((t2267 < a3156));
        d491 = (t2268 - a3155);
        d492 = (d491 - b365);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d493 = (d490 - b364);
        b366 = ((d490 < b364));
        t2271 = (d492 - b366);
        /* End of MPSubDDD 128 */
        a7397 = (2*a7362);
        /* MPCondD 64 */
        a7398 = (2*a7397);
        P1[a7398] = ((i307) ? (t2271) : (t2268));
        a7399 = (a7398 + 1);
        P1[a7399] = ((i307) ? (d493) : (t2267));
        a7400 = (a7397 + 1);
        /* MPCondD 64 */
        a7401 = (2*a7400);
        P1[a7401] = ((i307) ? (d489) : (t2262));
        a7402 = (a7401 + 1);
        P1[a7402] = ((i307) ? (d487) : (t2261));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b367 = (a7361 + a7360);
        a7403 = (b367 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d494 = (t2260 - t2258);
        b368 = ((t2260 < t2258));
        d495 = (t2259 - t2257);
        d496 = (d495 - b368);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7405 = ((t2259 < t2257));
        a7406 = ((t2259 == t2257));
        a7407 = ((a7406) && (b368));
        b369 = ((a7405) || (a7407));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d497 = (t2264 - t2256);
        b370 = ((t2264 < t2256));
        d498 = (t2263 - t2255);
        d499 = (d498 - b370);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d500 = (d497 - b369);
        b371 = ((d497 < b369));
        t2272 = (d499 - b371);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s512 = (((uint128_t ) d494) + ((uint128_t ) a3158));
        t2273 = ((uint64_t ) s512);
        c192 = (s512 >> 64);
        s513 = (((uint128_t ) d496) + ((uint128_t ) a3157));
        s514 = (((uint128_t ) s513) + ((uint128_t ) c192));
        t2274 = ((uint64_t ) s514);
        c193 = (s514 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s515 = (((uint128_t ) d500) + ((uint128_t ) a3156));
        t2275 = ((uint64_t ) s515);
        c194 = (s515 >> 64);
        s516 = (((uint128_t ) t2272) + ((uint128_t ) a3155));
        s517 = (((uint128_t ) s516) + ((uint128_t ) c194));
        t2276 = ((uint64_t ) s517);
        /* MPPropagateCarry 64 */
        t2277 = (t2275 + c193);
        a7411 = ((t2277 == 0));
        a7412 = (t2276 + c193);
        t2278 = ((a7411) ? (a7412) : (t2276));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7419 = ((t2263 < t2255));
        a7420 = ((t2263 == t2255));
        a7421 = ((a7420) && (b370));
        a7422 = ((a7419) || (a7421));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a7423 = ((t2264 == t2256));
        a7424 = ((a7420) && (a7423));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7425 = ((a7424) && (b369));
        i308 = ((a7422) || (a7425));
        a7426 = (2*a7403);
        /* MPCondD 64 */
        a7427 = (2*a7426);
        P1[a7427] = ((i308) ? (t2278) : (t2272));
        a7428 = (a7427 + 1);
        P1[a7428] = ((i308) ? (t2277) : (d500));
        a7429 = (a7426 + 1);
        /* MPCondD 64 */
        a7430 = (2*a7429);
        P1[a7430] = ((i308) ? (t2274) : (d496));
        a7431 = (a7430 + 1);
        P1[a7431] = ((i308) ? (t2273) : (d494));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code1(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a7432, a7433, a7434, a7435, a7436, a7437, a7438, a7439, 
            a7440, a7441, a7442, a7443, a7444, a7445, a7446, a7447, 
            a7448, a7458, a7459, a7460, a7465, a7466, a7467, a7471, 
            a7472, a7473, a7474, a7475, a7476, a7477, a7478, a7479, 
            a7480, a7481, a7482, a7483, a7484, a7485, a7486, a7487, 
            a7495, a7496, a7497, a7498, a7499, a7500, a7501, a7502, 
            a7503, a7504, a7505, a7506, a7507, a7509, a7510, a7511, 
            a7515, a7516, a7517, a7518, a7519, a7520, a7521, a7523, 
            a7524, a7525, a7529, a7537, a7538, a7539, a7540, a7541, 
            a7542, a7543, a7544, a7545, a7546, a7547, a7548, a7549, 
            b372, b373, b374, b375, b376, b377, b378, b379, 
            b380, b381, b382, b383, b384, b385, b387, b388, 
            b389, b390, b391, c196, c197, c198, c200, c201, 
            c202, i309, i310, i311;
    uint64_t a3540, a3541, a3542, a3543, a3571, a3572, a3573, a3574, 
            a7449, a7450, a7451, a7452, a7453, a7454, a7455, a7456, 
            a7488, a7530, d501, d502, d503, d504, d505, d506, 
            d507, d508, d509, d510, d511, d512, d513, d514, 
            d515, d516, d517, d518, d519, d520, d521, d522, 
            d523, d524, d525, d526, d527, d528, t1087, t1088, 
            t1089, t1090, t1091, t1092, t1093, t1094, t1095, t1096, 
            t1097, t1098, t1099, t1100, t1101, t1102, t1103, t1104, 
            t1105, t1106, t1107, t1108, t1109, t1110, t2281, t2282, 
            t2283, t2284, t2285, t2286, t2287, t2288, t2289, t2290, 
            t2291, t2292, t2293, t2294, t2295, t2296, t2297, t2298, 
            t2299, t2300, t2301, t2302, t2303, t2304, t2305, t2306, 
            t2307, t2308, t2309, t2310, t2311, t2312, t2313, t2314, 
            t2315, t2316, t2317, t2318, t2319, t2320, t2321, t2324, 
            t2325, t2326, t2327, t2328, t2329, t2330, t2331;
    uint128_t s518, s519, s520, s521, s522, s523, s524, s525, 
            s526, s527, s528, s529;
    for(int i19 = 0; i19 <= 1; i19++) {
        a7432 = (256*i19);
        a7433 = (a7432 + threadIdx.x);
        b372 = (threadIdx.x + a7432);
        a7434 = (b372 + 512);
        a7435 = (a7434 % 2);
        a7436 = (2 + a7435);
        /* Begin of MPModMul 128 */
        a7437 = (2*a7436);
        a7438 = (a7437 + 1);
        a7439 = (2*a7434);
        a7440 = (a7439 + 1);
        /* MPAssignDD 64 */
        a7441 = (2*a7437);
        t2281 = twiddles[a7441];
        a7442 = (a7441 + 1);
        t2282 = twiddles[a7442];
        /* MPAssignDD 64 */
        a7443 = (2*a7438);
        t2283 = twiddles[a7443];
        a7444 = (a7443 + 1);
        t2284 = twiddles[a7444];
        /* MPAssignDD 64 */
        a7445 = (2*a7439);
        t2285 = P1[a7445];
        a7446 = (a7445 + 1);
        t2286 = P1[a7446];
        /* MPAssignDD 64 */
        a7447 = (2*a7440);
        t2287 = P1[a7447];
        a7448 = (a7447 + 1);
        t2288 = P1[a7448];
        MPMulQDD_L2(t1093, t1094, t1091, t1092, t1089, t1090, t1087, t1088, 
    t2281, t2282, t2283, t2284, t2285, t2286, t2287, t2288);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2289 = (t1089 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b373 = ((int) 1);
        t2290 = (288230376151711744 - b373);
        /* MPBinAndD 64 */
        t2291 = (((t1093)&(t2290)));
        t2292 = (((t1094)&((-1))));
        /* Begin of MPShiftLeft2D */
        a7449 = (t2291 << 6);
        a7450 = (t2292 >> 58);
        t2293 = (((a7449)|(a7450)));
        t2294 = (t2292 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2295 = (t1091 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2296 = (((t2294)|(t2295)));
        /* Begin of MPShiftLeft2D */
        a7451 = (t1091 << 6);
        a7452 = (t1092 >> 58);
        t2297 = (((a7451)|(a7452)));
        t2298 = (t1092 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2299 = (((t2298)|(t2289)));
        /* End of MPShiftRight3 */
        a3540 = mu[0];
        a3541 = mu[1];
        a3542 = mu[2];
        a3543 = mu[3];
        MPMulQDD_L2(t1109, t1110, t1107, t1108, t1105, t1106, t1103, t1104, 
    t2293, t2296, t2297, t2299, a3540, a3541, a3542, a3543);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2300 = (t1109 >> 1);
        a7453 = (t1109 << 63);
        a7454 = (t1110 >> 1);
        t2301 = (((a7453)|(a7454)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2302 = (t1110 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2303 = (t1107 >> 1);
        a7455 = (t1107 << 63);
        a7456 = (t1108 >> 1);
        t2304 = (((a7455)|(a7456)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2305 = (((t2302)|(t2303)));
        /* End of MPShiftRight2 */
        a3571 = modulus[0];
        a3572 = modulus[1];
        a3573 = modulus[2];
        a3574 = modulus[3];
        MPMulQDD_L2(t1101, t1102, t1099, t1100, t1097, t1098, t1095, t1096, 
    t2300, t2301, t2305, t2304, a3571, a3572, a3573, a3574);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d501 = (t1088 - t1096);
        b374 = ((t1088 < t1096));
        d502 = (t1087 - t1095);
        d503 = (d502 - b374);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7458 = ((t1087 < t1095));
        a7459 = ((t1087 == t1095));
        a7460 = ((a7459) && (b374));
        b375 = ((a7458) || (a7460));
        /* Begin of MPSubDDD 64 */
        d504 = (t1090 - t1098);
        b376 = ((t1090 < t1098));
        d505 = (t1089 - t1097);
        d506 = (d505 - b376);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d507 = (d504 - b375);
        b377 = ((d504 < b375));
        t2306 = (d506 - b377);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d508 = (d501 - a3574);
        b378 = ((d501 < a3574));
        d509 = (d503 - a3573);
        d510 = (d509 - b378);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7465 = ((d503 < a3573));
        a7466 = ((d503 == a3573));
        a7467 = ((a7466) && (b378));
        b379 = ((a7465) || (a7467));
        /* Begin of MPSubDDD 64 */
        d511 = (d507 - a3572);
        b380 = ((d507 < a3572));
        d512 = (t2306 - a3571);
        d513 = (d512 - b380);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d514 = (d511 - b379);
        b381 = ((d511 < b379));
        t2307 = (d513 - b381);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7471 = ((t2306 < a3571));
        a7472 = ((t2306 == a3571));
        a7473 = ((a7472) && (b380));
        a7474 = ((a7471) || (a7473));
        /* MPEqual 64 */
        a7475 = ((d507 == a3572));
        a7476 = ((a7472) && (a7475));
        /* MPLessThan 64 */
        a7477 = ((a7476) && (b379));
        i309 = ((a7474) || (a7477));
        /* MPCondD 64 */
        t2308 = ((i309) ? (t2306) : (t2307));
        t2309 = ((i309) ? (d507) : (d514));
        /* MPCondD 64 */
        t2310 = ((i309) ? (d503) : (d510));
        t2311 = ((i309) ? (d501) : (d508));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a7478 = (512*i19);
        a7479 = (2*threadIdx.x);
        a7480 = (a7478 + a7479);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a7481 = (2*a7433);
        a7482 = (a7481 + 1);
        /* MPAssignDD 64 */
        a7483 = (2*a7482);
        t2312 = P1[a7483];
        a7484 = (a7483 + 1);
        t2313 = P1[a7484];
        /* MPAddQDD 64 */
        s518 = (((uint128_t ) t2313) + ((uint128_t ) t2311));
        t2314 = ((uint64_t ) s518);
        c196 = (s518 >> 64);
        s519 = (((uint128_t ) t2312) + ((uint128_t ) t2310));
        s520 = (((uint128_t ) s519) + ((uint128_t ) c196));
        t2315 = ((uint64_t ) s520);
        c197 = (s520 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a7485 = (2*a7481);
        t2316 = P1[a7485];
        a7486 = (a7485 + 1);
        t2317 = P1[a7486];
        /* MPAddQDD 64 */
        s521 = (((uint128_t ) t2317) + ((uint128_t ) t2309));
        t2318 = ((uint64_t ) s521);
        c198 = (s521 >> 64);
        s522 = (((uint128_t ) t2316) + ((uint128_t ) t2308));
        s523 = (((uint128_t ) s522) + ((uint128_t ) c198));
        t2319 = ((uint64_t ) s523);
        /* MPPropagateCarry 64 */
        t2320 = (t2318 + c197);
        a7487 = ((t2320 == 0));
        a7488 = (t2319 + c197);
        t2321 = ((a7487) ? (a7488) : (t2319));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7495 = ((a3571 < t2321));
        a7496 = ((a3571 == t2321));
        a7497 = ((a3572 < t2320));
        a7498 = ((a7496) && (a7497));
        a7499 = ((a7495) || (a7498));
        /* MPEqual 64 */
        a7500 = ((a3572 == t2320));
        a7501 = ((a7496) && (a7500));
        /* MPLessThan 64 */
        a7502 = ((a3573 < t2315));
        a7503 = ((a3573 == t2315));
        a7504 = ((a3574 < t2314));
        a7505 = ((a7503) && (a7504));
        a7506 = ((a7502) || (a7505));
        a7507 = ((a7501) && (a7506));
        i310 = ((a7499) || (a7507));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d515 = (t2314 - a3574);
        b382 = ((t2314 < a3574));
        d516 = (t2315 - a3573);
        d517 = (d516 - b382);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7509 = ((t2315 < a3573));
        a7510 = ((t2315 == a3573));
        a7511 = ((a7510) && (b382));
        b383 = ((a7509) || (a7511));
        /* Begin of MPSubDDD 64 */
        d518 = (t2320 - a3572);
        b384 = ((t2320 < a3572));
        d519 = (t2321 - a3571);
        d520 = (d519 - b384);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d521 = (d518 - b383);
        b385 = ((d518 < b383));
        t2324 = (d520 - b385);
        /* End of MPSubDDD 128 */
        a7515 = (2*a7480);
        /* MPCondD 64 */
        a7516 = (2*a7515);
        P2[a7516] = ((i310) ? (t2324) : (t2321));
        a7517 = (a7516 + 1);
        P2[a7517] = ((i310) ? (d521) : (t2320));
        a7518 = (a7515 + 1);
        /* MPCondD 64 */
        a7519 = (2*a7518);
        P2[a7519] = ((i310) ? (d517) : (t2315));
        a7520 = (a7519 + 1);
        P2[a7520] = ((i310) ? (d515) : (t2314));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b387 = (a7479 + a7478);
        a7521 = (b387 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d522 = (t2313 - t2311);
        b388 = ((t2313 < t2311));
        d523 = (t2312 - t2310);
        d524 = (d523 - b388);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7523 = ((t2312 < t2310));
        a7524 = ((t2312 == t2310));
        a7525 = ((a7524) && (b388));
        b389 = ((a7523) || (a7525));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d525 = (t2317 - t2309);
        b390 = ((t2317 < t2309));
        d526 = (t2316 - t2308);
        d527 = (d526 - b390);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d528 = (d525 - b389);
        b391 = ((d525 < b389));
        t2325 = (d527 - b391);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s524 = (((uint128_t ) d522) + ((uint128_t ) a3574));
        t2326 = ((uint64_t ) s524);
        c200 = (s524 >> 64);
        s525 = (((uint128_t ) d524) + ((uint128_t ) a3573));
        s526 = (((uint128_t ) s525) + ((uint128_t ) c200));
        t2327 = ((uint64_t ) s526);
        c201 = (s526 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s527 = (((uint128_t ) d528) + ((uint128_t ) a3572));
        t2328 = ((uint64_t ) s527);
        c202 = (s527 >> 64);
        s528 = (((uint128_t ) t2325) + ((uint128_t ) a3571));
        s529 = (((uint128_t ) s528) + ((uint128_t ) c202));
        t2329 = ((uint64_t ) s529);
        /* MPPropagateCarry 64 */
        t2330 = (t2328 + c201);
        a7529 = ((t2330 == 0));
        a7530 = (t2329 + c201);
        t2331 = ((a7529) ? (a7530) : (t2329));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7537 = ((t2316 < t2308));
        a7538 = ((t2316 == t2308));
        a7539 = ((a7538) && (b390));
        a7540 = ((a7537) || (a7539));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a7541 = ((t2317 == t2309));
        a7542 = ((a7538) && (a7541));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7543 = ((a7542) && (b389));
        i311 = ((a7540) || (a7543));
        a7544 = (2*a7521);
        /* MPCondD 64 */
        a7545 = (2*a7544);
        P2[a7545] = ((i311) ? (t2331) : (t2325));
        a7546 = (a7545 + 1);
        P2[a7546] = ((i311) ? (t2330) : (d528));
        a7547 = (a7544 + 1);
        /* MPCondD 64 */
        a7548 = (2*a7547);
        P2[a7548] = ((i311) ? (t2327) : (d524));
        a7549 = (a7548 + 1);
        P2[a7549] = ((i311) ? (t2326) : (d522));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code2(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a7550, a7551, a7552, a7553, a7554, a7555, a7556, a7557, 
            a7558, a7559, a7560, a7561, a7562, a7563, a7564, a7565, 
            a7566, a7576, a7577, a7578, a7583, a7584, a7585, a7589, 
            a7590, a7591, a7592, a7593, a7594, a7595, a7596, a7597, 
            a7598, a7599, a7600, a7601, a7602, a7603, a7604, a7605, 
            a7613, a7614, a7615, a7616, a7617, a7618, a7619, a7620, 
            a7621, a7622, a7623, a7624, a7625, a7627, a7628, a7629, 
            a7633, a7634, a7635, a7636, a7637, a7638, a7639, a7641, 
            a7642, a7643, a7647, a7655, a7656, a7657, a7658, a7659, 
            a7660, a7661, a7662, a7663, a7664, a7665, a7666, a7667, 
            b392, b393, b394, b395, b396, b397, b398, b399, 
            b400, b401, b402, b403, b404, b405, b406, b407, 
            b408, b409, b410, c204, c205, c206, c208, c209, 
            c210, i312, i313, i314;
    uint64_t a3956, a3957, a3958, a3959, a3987, a3988, a3989, a3990, 
            a7567, a7568, a7569, a7570, a7571, a7572, a7573, a7574, 
            a7606, a7648, d529, d530, d531, d532, d533, d534, 
            d535, d536, d537, d538, d539, d540, d541, d542, 
            d543, d544, d545, d546, d547, d548, d549, d550, 
            d551, d552, d553, d554, d555, d556, t1119, t1120, 
            t1121, t1122, t1123, t1124, t1125, t1126, t1127, t1128, 
            t1129, t1130, t1131, t1132, t1133, t1134, t1135, t1136, 
            t1137, t1138, t1139, t1140, t1141, t1142, t2334, t2335, 
            t2336, t2337, t2338, t2339, t2340, t2341, t2342, t2343, 
            t2344, t2345, t2346, t2347, t2348, t2349, t2350, t2351, 
            t2352, t2353, t2354, t2355, t2356, t2357, t2358, t2359, 
            t2360, t2361, t2362, t2363, t2364, t2365, t2366, t2367, 
            t2368, t2369, t2370, t2371, t2372, t2373, t2374, t2377, 
            t2378, t2379, t2380, t2381, t2382, t2383, t2384;
    uint128_t s530, s531, s532, s533, s534, s535, s536, s537, 
            s538, s539, s540, s541;
    for(int i17 = 0; i17 <= 1; i17++) {
        a7550 = (256*i17);
        a7551 = (a7550 + threadIdx.x);
        b392 = (threadIdx.x + a7550);
        a7552 = (b392 + 512);
        a7553 = (a7552 % 4);
        a7554 = (4 + a7553);
        /* Begin of MPModMul 128 */
        a7555 = (2*a7554);
        a7556 = (a7555 + 1);
        a7557 = (2*a7552);
        a7558 = (a7557 + 1);
        /* MPAssignDD 64 */
        a7559 = (2*a7555);
        t2334 = twiddles[a7559];
        a7560 = (a7559 + 1);
        t2335 = twiddles[a7560];
        /* MPAssignDD 64 */
        a7561 = (2*a7556);
        t2336 = twiddles[a7561];
        a7562 = (a7561 + 1);
        t2337 = twiddles[a7562];
        /* MPAssignDD 64 */
        a7563 = (2*a7557);
        t2338 = P2[a7563];
        a7564 = (a7563 + 1);
        t2339 = P2[a7564];
        /* MPAssignDD 64 */
        a7565 = (2*a7558);
        t2340 = P2[a7565];
        a7566 = (a7565 + 1);
        t2341 = P2[a7566];
        MPMulQDD_L2(t1125, t1126, t1123, t1124, t1121, t1122, t1119, t1120, 
    t2334, t2335, t2336, t2337, t2338, t2339, t2340, t2341);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2342 = (t1121 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b393 = ((int) 1);
        t2343 = (288230376151711744 - b393);
        /* MPBinAndD 64 */
        t2344 = (((t1125)&(t2343)));
        t2345 = (((t1126)&((-1))));
        /* Begin of MPShiftLeft2D */
        a7567 = (t2344 << 6);
        a7568 = (t2345 >> 58);
        t2346 = (((a7567)|(a7568)));
        t2347 = (t2345 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2348 = (t1123 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2349 = (((t2347)|(t2348)));
        /* Begin of MPShiftLeft2D */
        a7569 = (t1123 << 6);
        a7570 = (t1124 >> 58);
        t2350 = (((a7569)|(a7570)));
        t2351 = (t1124 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2352 = (((t2351)|(t2342)));
        /* End of MPShiftRight3 */
        a3956 = mu[0];
        a3957 = mu[1];
        a3958 = mu[2];
        a3959 = mu[3];
        MPMulQDD_L2(t1141, t1142, t1139, t1140, t1137, t1138, t1135, t1136, 
    t2346, t2349, t2350, t2352, a3956, a3957, a3958, a3959);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2353 = (t1141 >> 1);
        a7571 = (t1141 << 63);
        a7572 = (t1142 >> 1);
        t2354 = (((a7571)|(a7572)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2355 = (t1142 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2356 = (t1139 >> 1);
        a7573 = (t1139 << 63);
        a7574 = (t1140 >> 1);
        t2357 = (((a7573)|(a7574)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2358 = (((t2355)|(t2356)));
        /* End of MPShiftRight2 */
        a3987 = modulus[0];
        a3988 = modulus[1];
        a3989 = modulus[2];
        a3990 = modulus[3];
        MPMulQDD_L2(t1133, t1134, t1131, t1132, t1129, t1130, t1127, t1128, 
    t2353, t2354, t2358, t2357, a3987, a3988, a3989, a3990);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d529 = (t1120 - t1128);
        b394 = ((t1120 < t1128));
        d530 = (t1119 - t1127);
        d531 = (d530 - b394);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7576 = ((t1119 < t1127));
        a7577 = ((t1119 == t1127));
        a7578 = ((a7577) && (b394));
        b395 = ((a7576) || (a7578));
        /* Begin of MPSubDDD 64 */
        d532 = (t1122 - t1130);
        b396 = ((t1122 < t1130));
        d533 = (t1121 - t1129);
        d534 = (d533 - b396);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d535 = (d532 - b395);
        b397 = ((d532 < b395));
        t2359 = (d534 - b397);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d536 = (d529 - a3990);
        b398 = ((d529 < a3990));
        d537 = (d531 - a3989);
        d538 = (d537 - b398);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7583 = ((d531 < a3989));
        a7584 = ((d531 == a3989));
        a7585 = ((a7584) && (b398));
        b399 = ((a7583) || (a7585));
        /* Begin of MPSubDDD 64 */
        d539 = (d535 - a3988);
        b400 = ((d535 < a3988));
        d540 = (t2359 - a3987);
        d541 = (d540 - b400);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d542 = (d539 - b399);
        b401 = ((d539 < b399));
        t2360 = (d541 - b401);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7589 = ((t2359 < a3987));
        a7590 = ((t2359 == a3987));
        a7591 = ((a7590) && (b400));
        a7592 = ((a7589) || (a7591));
        /* MPEqual 64 */
        a7593 = ((d535 == a3988));
        a7594 = ((a7590) && (a7593));
        /* MPLessThan 64 */
        a7595 = ((a7594) && (b399));
        i312 = ((a7592) || (a7595));
        /* MPCondD 64 */
        t2361 = ((i312) ? (t2359) : (t2360));
        t2362 = ((i312) ? (d535) : (d542));
        /* MPCondD 64 */
        t2363 = ((i312) ? (d531) : (d538));
        t2364 = ((i312) ? (d529) : (d536));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a7596 = (512*i17);
        a7597 = (2*threadIdx.x);
        a7598 = (a7596 + a7597);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a7599 = (2*a7551);
        a7600 = (a7599 + 1);
        /* MPAssignDD 64 */
        a7601 = (2*a7600);
        t2365 = P2[a7601];
        a7602 = (a7601 + 1);
        t2366 = P2[a7602];
        /* MPAddQDD 64 */
        s530 = (((uint128_t ) t2366) + ((uint128_t ) t2364));
        t2367 = ((uint64_t ) s530);
        c204 = (s530 >> 64);
        s531 = (((uint128_t ) t2365) + ((uint128_t ) t2363));
        s532 = (((uint128_t ) s531) + ((uint128_t ) c204));
        t2368 = ((uint64_t ) s532);
        c205 = (s532 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a7603 = (2*a7599);
        t2369 = P2[a7603];
        a7604 = (a7603 + 1);
        t2370 = P2[a7604];
        /* MPAddQDD 64 */
        s533 = (((uint128_t ) t2370) + ((uint128_t ) t2362));
        t2371 = ((uint64_t ) s533);
        c206 = (s533 >> 64);
        s534 = (((uint128_t ) t2369) + ((uint128_t ) t2361));
        s535 = (((uint128_t ) s534) + ((uint128_t ) c206));
        t2372 = ((uint64_t ) s535);
        /* MPPropagateCarry 64 */
        t2373 = (t2371 + c205);
        a7605 = ((t2373 == 0));
        a7606 = (t2372 + c205);
        t2374 = ((a7605) ? (a7606) : (t2372));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7613 = ((a3987 < t2374));
        a7614 = ((a3987 == t2374));
        a7615 = ((a3988 < t2373));
        a7616 = ((a7614) && (a7615));
        a7617 = ((a7613) || (a7616));
        /* MPEqual 64 */
        a7618 = ((a3988 == t2373));
        a7619 = ((a7614) && (a7618));
        /* MPLessThan 64 */
        a7620 = ((a3989 < t2368));
        a7621 = ((a3989 == t2368));
        a7622 = ((a3990 < t2367));
        a7623 = ((a7621) && (a7622));
        a7624 = ((a7620) || (a7623));
        a7625 = ((a7619) && (a7624));
        i313 = ((a7617) || (a7625));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d543 = (t2367 - a3990);
        b402 = ((t2367 < a3990));
        d544 = (t2368 - a3989);
        d545 = (d544 - b402);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7627 = ((t2368 < a3989));
        a7628 = ((t2368 == a3989));
        a7629 = ((a7628) && (b402));
        b403 = ((a7627) || (a7629));
        /* Begin of MPSubDDD 64 */
        d546 = (t2373 - a3988);
        b404 = ((t2373 < a3988));
        d547 = (t2374 - a3987);
        d548 = (d547 - b404);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d549 = (d546 - b403);
        b405 = ((d546 < b403));
        t2377 = (d548 - b405);
        /* End of MPSubDDD 128 */
        a7633 = (2*a7598);
        /* MPCondD 64 */
        a7634 = (2*a7633);
        P1[a7634] = ((i313) ? (t2377) : (t2374));
        a7635 = (a7634 + 1);
        P1[a7635] = ((i313) ? (d549) : (t2373));
        a7636 = (a7633 + 1);
        /* MPCondD 64 */
        a7637 = (2*a7636);
        P1[a7637] = ((i313) ? (d545) : (t2368));
        a7638 = (a7637 + 1);
        P1[a7638] = ((i313) ? (d543) : (t2367));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b406 = (a7597 + a7596);
        a7639 = (b406 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d550 = (t2366 - t2364);
        b407 = ((t2366 < t2364));
        d551 = (t2365 - t2363);
        d552 = (d551 - b407);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7641 = ((t2365 < t2363));
        a7642 = ((t2365 == t2363));
        a7643 = ((a7642) && (b407));
        b408 = ((a7641) || (a7643));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d553 = (t2370 - t2362);
        b409 = ((t2370 < t2362));
        d554 = (t2369 - t2361);
        d555 = (d554 - b409);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d556 = (d553 - b408);
        b410 = ((d553 < b408));
        t2378 = (d555 - b410);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s536 = (((uint128_t ) d550) + ((uint128_t ) a3990));
        t2379 = ((uint64_t ) s536);
        c208 = (s536 >> 64);
        s537 = (((uint128_t ) d552) + ((uint128_t ) a3989));
        s538 = (((uint128_t ) s537) + ((uint128_t ) c208));
        t2380 = ((uint64_t ) s538);
        c209 = (s538 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s539 = (((uint128_t ) d556) + ((uint128_t ) a3988));
        t2381 = ((uint64_t ) s539);
        c210 = (s539 >> 64);
        s540 = (((uint128_t ) t2378) + ((uint128_t ) a3987));
        s541 = (((uint128_t ) s540) + ((uint128_t ) c210));
        t2382 = ((uint64_t ) s541);
        /* MPPropagateCarry 64 */
        t2383 = (t2381 + c209);
        a7647 = ((t2383 == 0));
        a7648 = (t2382 + c209);
        t2384 = ((a7647) ? (a7648) : (t2382));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7655 = ((t2369 < t2361));
        a7656 = ((t2369 == t2361));
        a7657 = ((a7656) && (b409));
        a7658 = ((a7655) || (a7657));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a7659 = ((t2370 == t2362));
        a7660 = ((a7656) && (a7659));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7661 = ((a7660) && (b408));
        i314 = ((a7658) || (a7661));
        a7662 = (2*a7639);
        /* MPCondD 64 */
        a7663 = (2*a7662);
        P1[a7663] = ((i314) ? (t2384) : (t2378));
        a7664 = (a7663 + 1);
        P1[a7664] = ((i314) ? (t2383) : (d556));
        a7665 = (a7662 + 1);
        /* MPCondD 64 */
        a7666 = (2*a7665);
        P1[a7666] = ((i314) ? (t2380) : (d552));
        a7667 = (a7666 + 1);
        P1[a7667] = ((i314) ? (t2379) : (d550));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code3(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a7668, a7669, a7670, a7671, a7672, a7673, a7674, a7675, 
            a7676, a7677, a7678, a7679, a7680, a7681, a7682, a7683, 
            a7684, a7694, a7695, a7696, a7701, a7702, a7703, a7707, 
            a7708, a7709, a7710, a7711, a7712, a7713, a7714, a7715, 
            a7716, a7717, a7718, a7719, a7720, a7721, a7722, a7723, 
            a7731, a7732, a7733, a7734, a7735, a7736, a7737, a7738, 
            a7739, a7740, a7741, a7742, a7743, a7745, a7746, a7747, 
            a7751, a7752, a7753, a7754, a7755, a7756, a7757, a7759, 
            a7760, a7761, a7765, a7773, a7774, a7775, a7776, a7777, 
            a7778, a7779, a7780, a7781, a7782, a7783, a7784, a7785, 
            b411, b412, b413, b414, b415, b416, b417, b418, 
            b419, b420, b421, b422, b423, b424, b425, b426, 
            b427, b428, b429, c212, c213, c214, c216, c217, 
            c218, i315, i316, i317;
    uint64_t a4372, a4373, a4374, a4375, a4403, a4404, a4405, a4406, 
            a7685, a7686, a7687, a7688, a7689, a7690, a7691, a7692, 
            a7724, a7766, d557, d558, d559, d560, d561, d562, 
            d563, d564, d565, d566, d567, d568, d569, d570, 
            d571, d572, d573, d574, d575, d576, d577, d578, 
            d579, d580, d581, d582, d583, d584, t1151, t1152, 
            t1153, t1154, t1155, t1156, t1157, t1158, t1159, t1160, 
            t1161, t1162, t1163, t1164, t1165, t1166, t1167, t1168, 
            t1169, t1170, t1171, t1172, t1173, t1174, t2387, t2388, 
            t2389, t2390, t2391, t2392, t2393, t2394, t2395, t2396, 
            t2397, t2398, t2399, t2400, t2401, t2402, t2403, t2404, 
            t2405, t2406, t2407, t2408, t2409, t2410, t2411, t2412, 
            t2413, t2414, t2415, t2416, t2417, t2418, t2419, t2420, 
            t2421, t2422, t2423, t2424, t2425, t2426, t2427, t2430, 
            t2431, t2432, t2433, t2434, t2435, t2436, t2437;
    uint128_t s542, s543, s544, s545, s546, s547, s548, s549, 
            s550, s551, s552, s553;
    for(int i15 = 0; i15 <= 1; i15++) {
        a7668 = (256*i15);
        a7669 = (a7668 + threadIdx.x);
        b411 = (threadIdx.x + a7668);
        a7670 = (b411 + 512);
        a7671 = (a7670 % 8);
        a7672 = (8 + a7671);
        /* Begin of MPModMul 128 */
        a7673 = (2*a7672);
        a7674 = (a7673 + 1);
        a7675 = (2*a7670);
        a7676 = (a7675 + 1);
        /* MPAssignDD 64 */
        a7677 = (2*a7673);
        t2387 = twiddles[a7677];
        a7678 = (a7677 + 1);
        t2388 = twiddles[a7678];
        /* MPAssignDD 64 */
        a7679 = (2*a7674);
        t2389 = twiddles[a7679];
        a7680 = (a7679 + 1);
        t2390 = twiddles[a7680];
        /* MPAssignDD 64 */
        a7681 = (2*a7675);
        t2391 = P1[a7681];
        a7682 = (a7681 + 1);
        t2392 = P1[a7682];
        /* MPAssignDD 64 */
        a7683 = (2*a7676);
        t2393 = P1[a7683];
        a7684 = (a7683 + 1);
        t2394 = P1[a7684];
        MPMulQDD_L2(t1157, t1158, t1155, t1156, t1153, t1154, t1151, t1152, 
    t2387, t2388, t2389, t2390, t2391, t2392, t2393, t2394);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2395 = (t1153 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b412 = ((int) 1);
        t2396 = (288230376151711744 - b412);
        /* MPBinAndD 64 */
        t2397 = (((t1157)&(t2396)));
        t2398 = (((t1158)&((-1))));
        /* Begin of MPShiftLeft2D */
        a7685 = (t2397 << 6);
        a7686 = (t2398 >> 58);
        t2399 = (((a7685)|(a7686)));
        t2400 = (t2398 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2401 = (t1155 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2402 = (((t2400)|(t2401)));
        /* Begin of MPShiftLeft2D */
        a7687 = (t1155 << 6);
        a7688 = (t1156 >> 58);
        t2403 = (((a7687)|(a7688)));
        t2404 = (t1156 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2405 = (((t2404)|(t2395)));
        /* End of MPShiftRight3 */
        a4372 = mu[0];
        a4373 = mu[1];
        a4374 = mu[2];
        a4375 = mu[3];
        MPMulQDD_L2(t1173, t1174, t1171, t1172, t1169, t1170, t1167, t1168, 
    t2399, t2402, t2403, t2405, a4372, a4373, a4374, a4375);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2406 = (t1173 >> 1);
        a7689 = (t1173 << 63);
        a7690 = (t1174 >> 1);
        t2407 = (((a7689)|(a7690)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2408 = (t1174 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2409 = (t1171 >> 1);
        a7691 = (t1171 << 63);
        a7692 = (t1172 >> 1);
        t2410 = (((a7691)|(a7692)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2411 = (((t2408)|(t2409)));
        /* End of MPShiftRight2 */
        a4403 = modulus[0];
        a4404 = modulus[1];
        a4405 = modulus[2];
        a4406 = modulus[3];
        MPMulQDD_L2(t1165, t1166, t1163, t1164, t1161, t1162, t1159, t1160, 
    t2406, t2407, t2411, t2410, a4403, a4404, a4405, a4406);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d557 = (t1152 - t1160);
        b413 = ((t1152 < t1160));
        d558 = (t1151 - t1159);
        d559 = (d558 - b413);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7694 = ((t1151 < t1159));
        a7695 = ((t1151 == t1159));
        a7696 = ((a7695) && (b413));
        b414 = ((a7694) || (a7696));
        /* Begin of MPSubDDD 64 */
        d560 = (t1154 - t1162);
        b415 = ((t1154 < t1162));
        d561 = (t1153 - t1161);
        d562 = (d561 - b415);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d563 = (d560 - b414);
        b416 = ((d560 < b414));
        t2412 = (d562 - b416);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d564 = (d557 - a4406);
        b417 = ((d557 < a4406));
        d565 = (d559 - a4405);
        d566 = (d565 - b417);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7701 = ((d559 < a4405));
        a7702 = ((d559 == a4405));
        a7703 = ((a7702) && (b417));
        b418 = ((a7701) || (a7703));
        /* Begin of MPSubDDD 64 */
        d567 = (d563 - a4404);
        b419 = ((d563 < a4404));
        d568 = (t2412 - a4403);
        d569 = (d568 - b419);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d570 = (d567 - b418);
        b420 = ((d567 < b418));
        t2413 = (d569 - b420);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7707 = ((t2412 < a4403));
        a7708 = ((t2412 == a4403));
        a7709 = ((a7708) && (b419));
        a7710 = ((a7707) || (a7709));
        /* MPEqual 64 */
        a7711 = ((d563 == a4404));
        a7712 = ((a7708) && (a7711));
        /* MPLessThan 64 */
        a7713 = ((a7712) && (b418));
        i315 = ((a7710) || (a7713));
        /* MPCondD 64 */
        t2414 = ((i315) ? (t2412) : (t2413));
        t2415 = ((i315) ? (d563) : (d570));
        /* MPCondD 64 */
        t2416 = ((i315) ? (d559) : (d566));
        t2417 = ((i315) ? (d557) : (d564));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a7714 = (512*i15);
        a7715 = (2*threadIdx.x);
        a7716 = (a7714 + a7715);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a7717 = (2*a7669);
        a7718 = (a7717 + 1);
        /* MPAssignDD 64 */
        a7719 = (2*a7718);
        t2418 = P1[a7719];
        a7720 = (a7719 + 1);
        t2419 = P1[a7720];
        /* MPAddQDD 64 */
        s542 = (((uint128_t ) t2419) + ((uint128_t ) t2417));
        t2420 = ((uint64_t ) s542);
        c212 = (s542 >> 64);
        s543 = (((uint128_t ) t2418) + ((uint128_t ) t2416));
        s544 = (((uint128_t ) s543) + ((uint128_t ) c212));
        t2421 = ((uint64_t ) s544);
        c213 = (s544 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a7721 = (2*a7717);
        t2422 = P1[a7721];
        a7722 = (a7721 + 1);
        t2423 = P1[a7722];
        /* MPAddQDD 64 */
        s545 = (((uint128_t ) t2423) + ((uint128_t ) t2415));
        t2424 = ((uint64_t ) s545);
        c214 = (s545 >> 64);
        s546 = (((uint128_t ) t2422) + ((uint128_t ) t2414));
        s547 = (((uint128_t ) s546) + ((uint128_t ) c214));
        t2425 = ((uint64_t ) s547);
        /* MPPropagateCarry 64 */
        t2426 = (t2424 + c213);
        a7723 = ((t2426 == 0));
        a7724 = (t2425 + c213);
        t2427 = ((a7723) ? (a7724) : (t2425));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7731 = ((a4403 < t2427));
        a7732 = ((a4403 == t2427));
        a7733 = ((a4404 < t2426));
        a7734 = ((a7732) && (a7733));
        a7735 = ((a7731) || (a7734));
        /* MPEqual 64 */
        a7736 = ((a4404 == t2426));
        a7737 = ((a7732) && (a7736));
        /* MPLessThan 64 */
        a7738 = ((a4405 < t2421));
        a7739 = ((a4405 == t2421));
        a7740 = ((a4406 < t2420));
        a7741 = ((a7739) && (a7740));
        a7742 = ((a7738) || (a7741));
        a7743 = ((a7737) && (a7742));
        i316 = ((a7735) || (a7743));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d571 = (t2420 - a4406);
        b421 = ((t2420 < a4406));
        d572 = (t2421 - a4405);
        d573 = (d572 - b421);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7745 = ((t2421 < a4405));
        a7746 = ((t2421 == a4405));
        a7747 = ((a7746) && (b421));
        b422 = ((a7745) || (a7747));
        /* Begin of MPSubDDD 64 */
        d574 = (t2426 - a4404);
        b423 = ((t2426 < a4404));
        d575 = (t2427 - a4403);
        d576 = (d575 - b423);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d577 = (d574 - b422);
        b424 = ((d574 < b422));
        t2430 = (d576 - b424);
        /* End of MPSubDDD 128 */
        a7751 = (2*a7716);
        /* MPCondD 64 */
        a7752 = (2*a7751);
        P2[a7752] = ((i316) ? (t2430) : (t2427));
        a7753 = (a7752 + 1);
        P2[a7753] = ((i316) ? (d577) : (t2426));
        a7754 = (a7751 + 1);
        /* MPCondD 64 */
        a7755 = (2*a7754);
        P2[a7755] = ((i316) ? (d573) : (t2421));
        a7756 = (a7755 + 1);
        P2[a7756] = ((i316) ? (d571) : (t2420));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b425 = (a7715 + a7714);
        a7757 = (b425 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d578 = (t2419 - t2417);
        b426 = ((t2419 < t2417));
        d579 = (t2418 - t2416);
        d580 = (d579 - b426);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7759 = ((t2418 < t2416));
        a7760 = ((t2418 == t2416));
        a7761 = ((a7760) && (b426));
        b427 = ((a7759) || (a7761));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d581 = (t2423 - t2415);
        b428 = ((t2423 < t2415));
        d582 = (t2422 - t2414);
        d583 = (d582 - b428);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d584 = (d581 - b427);
        b429 = ((d581 < b427));
        t2431 = (d583 - b429);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s548 = (((uint128_t ) d578) + ((uint128_t ) a4406));
        t2432 = ((uint64_t ) s548);
        c216 = (s548 >> 64);
        s549 = (((uint128_t ) d580) + ((uint128_t ) a4405));
        s550 = (((uint128_t ) s549) + ((uint128_t ) c216));
        t2433 = ((uint64_t ) s550);
        c217 = (s550 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s551 = (((uint128_t ) d584) + ((uint128_t ) a4404));
        t2434 = ((uint64_t ) s551);
        c218 = (s551 >> 64);
        s552 = (((uint128_t ) t2431) + ((uint128_t ) a4403));
        s553 = (((uint128_t ) s552) + ((uint128_t ) c218));
        t2435 = ((uint64_t ) s553);
        /* MPPropagateCarry 64 */
        t2436 = (t2434 + c217);
        a7765 = ((t2436 == 0));
        a7766 = (t2435 + c217);
        t2437 = ((a7765) ? (a7766) : (t2435));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7773 = ((t2422 < t2414));
        a7774 = ((t2422 == t2414));
        a7775 = ((a7774) && (b428));
        a7776 = ((a7773) || (a7775));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a7777 = ((t2423 == t2415));
        a7778 = ((a7774) && (a7777));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7779 = ((a7778) && (b427));
        i317 = ((a7776) || (a7779));
        a7780 = (2*a7757);
        /* MPCondD 64 */
        a7781 = (2*a7780);
        P2[a7781] = ((i317) ? (t2437) : (t2431));
        a7782 = (a7781 + 1);
        P2[a7782] = ((i317) ? (t2436) : (d584));
        a7783 = (a7780 + 1);
        /* MPCondD 64 */
        a7784 = (2*a7783);
        P2[a7784] = ((i317) ? (t2433) : (d580));
        a7785 = (a7784 + 1);
        P2[a7785] = ((i317) ? (t2432) : (d578));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code4(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a7786, a7787, a7788, a7789, a7790, a7791, a7792, a7793, 
            a7794, a7795, a7796, a7797, a7798, a7799, a7800, a7801, 
            a7802, a7812, a7813, a7814, a7819, a7820, a7821, a7825, 
            a7826, a7827, a7828, a7829, a7830, a7831, a7832, a7833, 
            a7834, a7835, a7836, a7837, a7838, a7839, a7840, a7841, 
            a7849, a7850, a7851, a7852, a7853, a7854, a7855, a7856, 
            a7857, a7858, a7859, a7860, a7861, a7863, a7864, a7865, 
            a7869, a7870, a7871, a7872, a7873, a7874, a7875, a7877, 
            a7878, a7879, a7883, a7891, a7892, a7893, a7894, a7895, 
            a7896, a7897, a7898, a7899, a7900, a7901, a7902, a7903, 
            b430, b431, b432, b433, b434, b435, b436, b437, 
            b438, b439, b440, b441, b442, b443, b444, b445, 
            b446, b447, b448, c220, c221, c222, c224, c225, 
            c226, i318, i319, i320;
    uint64_t a4788, a4789, a4790, a4791, a4819, a4820, a4821, a4822, 
            a7803, a7804, a7805, a7806, a7807, a7808, a7809, a7810, 
            a7842, a7884, d585, d586, d587, d588, d589, d590, 
            d591, d592, d593, d594, d595, d596, d597, d598, 
            d599, d600, d601, d602, d603, d604, d605, d606, 
            d607, d608, d609, d610, d611, d612, t1187, t1188, 
            t1189, t1190, t1191, t1192, t1193, t1194, t1195, t1196, 
            t1197, t1198, t1199, t1200, t1201, t1202, t1203, t1204, 
            t1205, t1206, t1207, t1208, t1209, t1210, t2440, t2441, 
            t2442, t2443, t2444, t2445, t2446, t2447, t2448, t2449, 
            t2450, t2451, t2452, t2453, t2454, t2455, t2456, t2457, 
            t2458, t2459, t2460, t2461, t2462, t2463, t2464, t2465, 
            t2466, t2467, t2468, t2469, t2470, t2471, t2472, t2473, 
            t2474, t2475, t2476, t2477, t2478, t2479, t2480, t2483, 
            t2484, t2485, t2486, t2487, t2488, t2489, t2490;
    uint128_t s554, s555, s556, s557, s558, s559, s560, s561, 
            s562, s563, s564, s565;
    for(int i13 = 0; i13 <= 1; i13++) {
        a7786 = (256*i13);
        a7787 = (a7786 + threadIdx.x);
        b430 = (threadIdx.x + a7786);
        a7788 = (b430 + 512);
        a7789 = (a7788 % 16);
        a7790 = (16 + a7789);
        /* Begin of MPModMul 128 */
        a7791 = (2*a7790);
        a7792 = (a7791 + 1);
        a7793 = (2*a7788);
        a7794 = (a7793 + 1);
        /* MPAssignDD 64 */
        a7795 = (2*a7791);
        t2440 = twiddles[a7795];
        a7796 = (a7795 + 1);
        t2441 = twiddles[a7796];
        /* MPAssignDD 64 */
        a7797 = (2*a7792);
        t2442 = twiddles[a7797];
        a7798 = (a7797 + 1);
        t2443 = twiddles[a7798];
        /* MPAssignDD 64 */
        a7799 = (2*a7793);
        t2444 = P2[a7799];
        a7800 = (a7799 + 1);
        t2445 = P2[a7800];
        /* MPAssignDD 64 */
        a7801 = (2*a7794);
        t2446 = P2[a7801];
        a7802 = (a7801 + 1);
        t2447 = P2[a7802];
        MPMulQDD_L2(t1193, t1194, t1191, t1192, t1189, t1190, t1187, t1188, 
    t2440, t2441, t2442, t2443, t2444, t2445, t2446, t2447);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2448 = (t1189 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b431 = ((int) 1);
        t2449 = (288230376151711744 - b431);
        /* MPBinAndD 64 */
        t2450 = (((t1193)&(t2449)));
        t2451 = (((t1194)&((-1))));
        /* Begin of MPShiftLeft2D */
        a7803 = (t2450 << 6);
        a7804 = (t2451 >> 58);
        t2452 = (((a7803)|(a7804)));
        t2453 = (t2451 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2454 = (t1191 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2455 = (((t2453)|(t2454)));
        /* Begin of MPShiftLeft2D */
        a7805 = (t1191 << 6);
        a7806 = (t1192 >> 58);
        t2456 = (((a7805)|(a7806)));
        t2457 = (t1192 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2458 = (((t2457)|(t2448)));
        /* End of MPShiftRight3 */
        a4788 = mu[0];
        a4789 = mu[1];
        a4790 = mu[2];
        a4791 = mu[3];
        MPMulQDD_L2(t1209, t1210, t1207, t1208, t1205, t1206, t1203, t1204, 
    t2452, t2455, t2456, t2458, a4788, a4789, a4790, a4791);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2459 = (t1209 >> 1);
        a7807 = (t1209 << 63);
        a7808 = (t1210 >> 1);
        t2460 = (((a7807)|(a7808)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2461 = (t1210 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2462 = (t1207 >> 1);
        a7809 = (t1207 << 63);
        a7810 = (t1208 >> 1);
        t2463 = (((a7809)|(a7810)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2464 = (((t2461)|(t2462)));
        /* End of MPShiftRight2 */
        a4819 = modulus[0];
        a4820 = modulus[1];
        a4821 = modulus[2];
        a4822 = modulus[3];
        MPMulQDD_L2(t1201, t1202, t1199, t1200, t1197, t1198, t1195, t1196, 
    t2459, t2460, t2464, t2463, a4819, a4820, a4821, a4822);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d585 = (t1188 - t1196);
        b432 = ((t1188 < t1196));
        d586 = (t1187 - t1195);
        d587 = (d586 - b432);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7812 = ((t1187 < t1195));
        a7813 = ((t1187 == t1195));
        a7814 = ((a7813) && (b432));
        b433 = ((a7812) || (a7814));
        /* Begin of MPSubDDD 64 */
        d588 = (t1190 - t1198);
        b434 = ((t1190 < t1198));
        d589 = (t1189 - t1197);
        d590 = (d589 - b434);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d591 = (d588 - b433);
        b435 = ((d588 < b433));
        t2465 = (d590 - b435);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d592 = (d585 - a4822);
        b436 = ((d585 < a4822));
        d593 = (d587 - a4821);
        d594 = (d593 - b436);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7819 = ((d587 < a4821));
        a7820 = ((d587 == a4821));
        a7821 = ((a7820) && (b436));
        b437 = ((a7819) || (a7821));
        /* Begin of MPSubDDD 64 */
        d595 = (d591 - a4820);
        b438 = ((d591 < a4820));
        d596 = (t2465 - a4819);
        d597 = (d596 - b438);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d598 = (d595 - b437);
        b439 = ((d595 < b437));
        t2466 = (d597 - b439);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7825 = ((t2465 < a4819));
        a7826 = ((t2465 == a4819));
        a7827 = ((a7826) && (b438));
        a7828 = ((a7825) || (a7827));
        /* MPEqual 64 */
        a7829 = ((d591 == a4820));
        a7830 = ((a7826) && (a7829));
        /* MPLessThan 64 */
        a7831 = ((a7830) && (b437));
        i318 = ((a7828) || (a7831));
        /* MPCondD 64 */
        t2467 = ((i318) ? (t2465) : (t2466));
        t2468 = ((i318) ? (d591) : (d598));
        /* MPCondD 64 */
        t2469 = ((i318) ? (d587) : (d594));
        t2470 = ((i318) ? (d585) : (d592));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a7832 = (512*i13);
        a7833 = (2*threadIdx.x);
        a7834 = (a7832 + a7833);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a7835 = (2*a7787);
        a7836 = (a7835 + 1);
        /* MPAssignDD 64 */
        a7837 = (2*a7836);
        t2471 = P2[a7837];
        a7838 = (a7837 + 1);
        t2472 = P2[a7838];
        /* MPAddQDD 64 */
        s554 = (((uint128_t ) t2472) + ((uint128_t ) t2470));
        t2473 = ((uint64_t ) s554);
        c220 = (s554 >> 64);
        s555 = (((uint128_t ) t2471) + ((uint128_t ) t2469));
        s556 = (((uint128_t ) s555) + ((uint128_t ) c220));
        t2474 = ((uint64_t ) s556);
        c221 = (s556 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a7839 = (2*a7835);
        t2475 = P2[a7839];
        a7840 = (a7839 + 1);
        t2476 = P2[a7840];
        /* MPAddQDD 64 */
        s557 = (((uint128_t ) t2476) + ((uint128_t ) t2468));
        t2477 = ((uint64_t ) s557);
        c222 = (s557 >> 64);
        s558 = (((uint128_t ) t2475) + ((uint128_t ) t2467));
        s559 = (((uint128_t ) s558) + ((uint128_t ) c222));
        t2478 = ((uint64_t ) s559);
        /* MPPropagateCarry 64 */
        t2479 = (t2477 + c221);
        a7841 = ((t2479 == 0));
        a7842 = (t2478 + c221);
        t2480 = ((a7841) ? (a7842) : (t2478));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7849 = ((a4819 < t2480));
        a7850 = ((a4819 == t2480));
        a7851 = ((a4820 < t2479));
        a7852 = ((a7850) && (a7851));
        a7853 = ((a7849) || (a7852));
        /* MPEqual 64 */
        a7854 = ((a4820 == t2479));
        a7855 = ((a7850) && (a7854));
        /* MPLessThan 64 */
        a7856 = ((a4821 < t2474));
        a7857 = ((a4821 == t2474));
        a7858 = ((a4822 < t2473));
        a7859 = ((a7857) && (a7858));
        a7860 = ((a7856) || (a7859));
        a7861 = ((a7855) && (a7860));
        i319 = ((a7853) || (a7861));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d599 = (t2473 - a4822);
        b440 = ((t2473 < a4822));
        d600 = (t2474 - a4821);
        d601 = (d600 - b440);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7863 = ((t2474 < a4821));
        a7864 = ((t2474 == a4821));
        a7865 = ((a7864) && (b440));
        b441 = ((a7863) || (a7865));
        /* Begin of MPSubDDD 64 */
        d602 = (t2479 - a4820);
        b442 = ((t2479 < a4820));
        d603 = (t2480 - a4819);
        d604 = (d603 - b442);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d605 = (d602 - b441);
        b443 = ((d602 < b441));
        t2483 = (d604 - b443);
        /* End of MPSubDDD 128 */
        a7869 = (2*a7834);
        /* MPCondD 64 */
        a7870 = (2*a7869);
        P1[a7870] = ((i319) ? (t2483) : (t2480));
        a7871 = (a7870 + 1);
        P1[a7871] = ((i319) ? (d605) : (t2479));
        a7872 = (a7869 + 1);
        /* MPCondD 64 */
        a7873 = (2*a7872);
        P1[a7873] = ((i319) ? (d601) : (t2474));
        a7874 = (a7873 + 1);
        P1[a7874] = ((i319) ? (d599) : (t2473));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b444 = (a7833 + a7832);
        a7875 = (b444 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d606 = (t2472 - t2470);
        b445 = ((t2472 < t2470));
        d607 = (t2471 - t2469);
        d608 = (d607 - b445);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7877 = ((t2471 < t2469));
        a7878 = ((t2471 == t2469));
        a7879 = ((a7878) && (b445));
        b446 = ((a7877) || (a7879));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d609 = (t2476 - t2468);
        b447 = ((t2476 < t2468));
        d610 = (t2475 - t2467);
        d611 = (d610 - b447);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d612 = (d609 - b446);
        b448 = ((d609 < b446));
        t2484 = (d611 - b448);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s560 = (((uint128_t ) d606) + ((uint128_t ) a4822));
        t2485 = ((uint64_t ) s560);
        c224 = (s560 >> 64);
        s561 = (((uint128_t ) d608) + ((uint128_t ) a4821));
        s562 = (((uint128_t ) s561) + ((uint128_t ) c224));
        t2486 = ((uint64_t ) s562);
        c225 = (s562 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s563 = (((uint128_t ) d612) + ((uint128_t ) a4820));
        t2487 = ((uint64_t ) s563);
        c226 = (s563 >> 64);
        s564 = (((uint128_t ) t2484) + ((uint128_t ) a4819));
        s565 = (((uint128_t ) s564) + ((uint128_t ) c226));
        t2488 = ((uint64_t ) s565);
        /* MPPropagateCarry 64 */
        t2489 = (t2487 + c225);
        a7883 = ((t2489 == 0));
        a7884 = (t2488 + c225);
        t2490 = ((a7883) ? (a7884) : (t2488));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7891 = ((t2475 < t2467));
        a7892 = ((t2475 == t2467));
        a7893 = ((a7892) && (b447));
        a7894 = ((a7891) || (a7893));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a7895 = ((t2476 == t2468));
        a7896 = ((a7892) && (a7895));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7897 = ((a7896) && (b446));
        i320 = ((a7894) || (a7897));
        a7898 = (2*a7875);
        /* MPCondD 64 */
        a7899 = (2*a7898);
        P1[a7899] = ((i320) ? (t2490) : (t2484));
        a7900 = (a7899 + 1);
        P1[a7900] = ((i320) ? (t2489) : (d612));
        a7901 = (a7898 + 1);
        /* MPCondD 64 */
        a7902 = (2*a7901);
        P1[a7902] = ((i320) ? (t2486) : (d608));
        a7903 = (a7902 + 1);
        P1[a7903] = ((i320) ? (t2485) : (d606));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code5(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a7904, a7905, a7906, a7907, a7908, a7909, a7910, a7911, 
            a7912, a7913, a7914, a7915, a7916, a7917, a7918, a7919, 
            a7920, a7930, a7931, a7932, a7937, a7938, a7939, a7943, 
            a7944, a7945, a7946, a7947, a7948, a7949, a7950, a7951, 
            a7952, a7953, a7954, a7955, a7956, a7957, a7958, a7959, 
            a7967, a7968, a7969, a7970, a7971, a7972, a7973, a7974, 
            a7975, a7976, a7977, a7978, a7979, a7981, a7982, a7983, 
            a7987, a7988, a7989, a7990, a7991, a7992, a7993, a7995, 
            a7996, a7997, a8001, a8009, a8010, a8011, a8012, a8013, 
            a8014, a8015, a8016, a8017, a8018, a8019, a8020, a8021, 
            b449, b450, b451, b452, b453, b454, b455, b456, 
            b457, b458, b459, b460, b461, b462, b463, b464, 
            b465, b466, b467, c228, c229, c230, c232, c233, 
            c234, i321, i322, i323;
    uint64_t a5204, a5205, a5206, a5207, a5235, a5236, a5237, a5238, 
            a7921, a7922, a7923, a7924, a7925, a7926, a7927, a7928, 
            a7960, a8002, d613, d614, d615, d616, d617, d618, 
            d619, d620, d621, d622, d623, d624, d625, d626, 
            d627, d628, d629, d630, d631, d632, d633, d634, 
            d635, d636, d637, d638, d639, d640, t1219, t1220, 
            t1221, t1222, t1223, t1224, t1225, t1226, t1227, t1228, 
            t1229, t1230, t1231, t1232, t1233, t1234, t1235, t1236, 
            t1237, t1238, t1239, t1240, t1241, t1242, t2493, t2494, 
            t2495, t2496, t2497, t2498, t2499, t2500, t2501, t2502, 
            t2503, t2504, t2505, t2506, t2507, t2508, t2509, t2510, 
            t2511, t2512, t2513, t2514, t2515, t2516, t2517, t2518, 
            t2519, t2520, t2521, t2522, t2523, t2524, t2525, t2526, 
            t2527, t2528, t2529, t2530, t2531, t2532, t2533, t2536, 
            t2537, t2538, t2539, t2540, t2541, t2542, t2543;
    uint128_t s566, s567, s568, s569, s570, s571, s572, s573, 
            s574, s575, s576, s577;
    for(int i11 = 0; i11 <= 1; i11++) {
        a7904 = (256*i11);
        a7905 = (a7904 + threadIdx.x);
        b449 = (threadIdx.x + a7904);
        a7906 = (b449 + 512);
        a7907 = (a7906 % 32);
        a7908 = (32 + a7907);
        /* Begin of MPModMul 128 */
        a7909 = (2*a7908);
        a7910 = (a7909 + 1);
        a7911 = (2*a7906);
        a7912 = (a7911 + 1);
        /* MPAssignDD 64 */
        a7913 = (2*a7909);
        t2493 = twiddles[a7913];
        a7914 = (a7913 + 1);
        t2494 = twiddles[a7914];
        /* MPAssignDD 64 */
        a7915 = (2*a7910);
        t2495 = twiddles[a7915];
        a7916 = (a7915 + 1);
        t2496 = twiddles[a7916];
        /* MPAssignDD 64 */
        a7917 = (2*a7911);
        t2497 = P1[a7917];
        a7918 = (a7917 + 1);
        t2498 = P1[a7918];
        /* MPAssignDD 64 */
        a7919 = (2*a7912);
        t2499 = P1[a7919];
        a7920 = (a7919 + 1);
        t2500 = P1[a7920];
        MPMulQDD_L2(t1225, t1226, t1223, t1224, t1221, t1222, t1219, t1220, 
    t2493, t2494, t2495, t2496, t2497, t2498, t2499, t2500);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2501 = (t1221 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b450 = ((int) 1);
        t2502 = (288230376151711744 - b450);
        /* MPBinAndD 64 */
        t2503 = (((t1225)&(t2502)));
        t2504 = (((t1226)&((-1))));
        /* Begin of MPShiftLeft2D */
        a7921 = (t2503 << 6);
        a7922 = (t2504 >> 58);
        t2505 = (((a7921)|(a7922)));
        t2506 = (t2504 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2507 = (t1223 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2508 = (((t2506)|(t2507)));
        /* Begin of MPShiftLeft2D */
        a7923 = (t1223 << 6);
        a7924 = (t1224 >> 58);
        t2509 = (((a7923)|(a7924)));
        t2510 = (t1224 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2511 = (((t2510)|(t2501)));
        /* End of MPShiftRight3 */
        a5204 = mu[0];
        a5205 = mu[1];
        a5206 = mu[2];
        a5207 = mu[3];
        MPMulQDD_L2(t1241, t1242, t1239, t1240, t1237, t1238, t1235, t1236, 
    t2505, t2508, t2509, t2511, a5204, a5205, a5206, a5207);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2512 = (t1241 >> 1);
        a7925 = (t1241 << 63);
        a7926 = (t1242 >> 1);
        t2513 = (((a7925)|(a7926)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2514 = (t1242 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2515 = (t1239 >> 1);
        a7927 = (t1239 << 63);
        a7928 = (t1240 >> 1);
        t2516 = (((a7927)|(a7928)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2517 = (((t2514)|(t2515)));
        /* End of MPShiftRight2 */
        a5235 = modulus[0];
        a5236 = modulus[1];
        a5237 = modulus[2];
        a5238 = modulus[3];
        MPMulQDD_L2(t1233, t1234, t1231, t1232, t1229, t1230, t1227, t1228, 
    t2512, t2513, t2517, t2516, a5235, a5236, a5237, a5238);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d613 = (t1220 - t1228);
        b451 = ((t1220 < t1228));
        d614 = (t1219 - t1227);
        d615 = (d614 - b451);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7930 = ((t1219 < t1227));
        a7931 = ((t1219 == t1227));
        a7932 = ((a7931) && (b451));
        b452 = ((a7930) || (a7932));
        /* Begin of MPSubDDD 64 */
        d616 = (t1222 - t1230);
        b453 = ((t1222 < t1230));
        d617 = (t1221 - t1229);
        d618 = (d617 - b453);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d619 = (d616 - b452);
        b454 = ((d616 < b452));
        t2518 = (d618 - b454);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d620 = (d613 - a5238);
        b455 = ((d613 < a5238));
        d621 = (d615 - a5237);
        d622 = (d621 - b455);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7937 = ((d615 < a5237));
        a7938 = ((d615 == a5237));
        a7939 = ((a7938) && (b455));
        b456 = ((a7937) || (a7939));
        /* Begin of MPSubDDD 64 */
        d623 = (d619 - a5236);
        b457 = ((d619 < a5236));
        d624 = (t2518 - a5235);
        d625 = (d624 - b457);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d626 = (d623 - b456);
        b458 = ((d623 < b456));
        t2519 = (d625 - b458);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7943 = ((t2518 < a5235));
        a7944 = ((t2518 == a5235));
        a7945 = ((a7944) && (b457));
        a7946 = ((a7943) || (a7945));
        /* MPEqual 64 */
        a7947 = ((d619 == a5236));
        a7948 = ((a7944) && (a7947));
        /* MPLessThan 64 */
        a7949 = ((a7948) && (b456));
        i321 = ((a7946) || (a7949));
        /* MPCondD 64 */
        t2520 = ((i321) ? (t2518) : (t2519));
        t2521 = ((i321) ? (d619) : (d626));
        /* MPCondD 64 */
        t2522 = ((i321) ? (d615) : (d622));
        t2523 = ((i321) ? (d613) : (d620));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a7950 = (512*i11);
        a7951 = (2*threadIdx.x);
        a7952 = (a7950 + a7951);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a7953 = (2*a7905);
        a7954 = (a7953 + 1);
        /* MPAssignDD 64 */
        a7955 = (2*a7954);
        t2524 = P1[a7955];
        a7956 = (a7955 + 1);
        t2525 = P1[a7956];
        /* MPAddQDD 64 */
        s566 = (((uint128_t ) t2525) + ((uint128_t ) t2523));
        t2526 = ((uint64_t ) s566);
        c228 = (s566 >> 64);
        s567 = (((uint128_t ) t2524) + ((uint128_t ) t2522));
        s568 = (((uint128_t ) s567) + ((uint128_t ) c228));
        t2527 = ((uint64_t ) s568);
        c229 = (s568 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a7957 = (2*a7953);
        t2528 = P1[a7957];
        a7958 = (a7957 + 1);
        t2529 = P1[a7958];
        /* MPAddQDD 64 */
        s569 = (((uint128_t ) t2529) + ((uint128_t ) t2521));
        t2530 = ((uint64_t ) s569);
        c230 = (s569 >> 64);
        s570 = (((uint128_t ) t2528) + ((uint128_t ) t2520));
        s571 = (((uint128_t ) s570) + ((uint128_t ) c230));
        t2531 = ((uint64_t ) s571);
        /* MPPropagateCarry 64 */
        t2532 = (t2530 + c229);
        a7959 = ((t2532 == 0));
        a7960 = (t2531 + c229);
        t2533 = ((a7959) ? (a7960) : (t2531));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a7967 = ((a5235 < t2533));
        a7968 = ((a5235 == t2533));
        a7969 = ((a5236 < t2532));
        a7970 = ((a7968) && (a7969));
        a7971 = ((a7967) || (a7970));
        /* MPEqual 64 */
        a7972 = ((a5236 == t2532));
        a7973 = ((a7968) && (a7972));
        /* MPLessThan 64 */
        a7974 = ((a5237 < t2527));
        a7975 = ((a5237 == t2527));
        a7976 = ((a5238 < t2526));
        a7977 = ((a7975) && (a7976));
        a7978 = ((a7974) || (a7977));
        a7979 = ((a7973) && (a7978));
        i322 = ((a7971) || (a7979));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d627 = (t2526 - a5238);
        b459 = ((t2526 < a5238));
        d628 = (t2527 - a5237);
        d629 = (d628 - b459);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a7981 = ((t2527 < a5237));
        a7982 = ((t2527 == a5237));
        a7983 = ((a7982) && (b459));
        b460 = ((a7981) || (a7983));
        /* Begin of MPSubDDD 64 */
        d630 = (t2532 - a5236);
        b461 = ((t2532 < a5236));
        d631 = (t2533 - a5235);
        d632 = (d631 - b461);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d633 = (d630 - b460);
        b462 = ((d630 < b460));
        t2536 = (d632 - b462);
        /* End of MPSubDDD 128 */
        a7987 = (2*a7952);
        /* MPCondD 64 */
        a7988 = (2*a7987);
        P2[a7988] = ((i322) ? (t2536) : (t2533));
        a7989 = (a7988 + 1);
        P2[a7989] = ((i322) ? (d633) : (t2532));
        a7990 = (a7987 + 1);
        /* MPCondD 64 */
        a7991 = (2*a7990);
        P2[a7991] = ((i322) ? (d629) : (t2527));
        a7992 = (a7991 + 1);
        P2[a7992] = ((i322) ? (d627) : (t2526));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        b463 = (a7951 + a7950);
        a7993 = (b463 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d634 = (t2525 - t2523);
        b464 = ((t2525 < t2523));
        d635 = (t2524 - t2522);
        d636 = (d635 - b464);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a7995 = ((t2524 < t2522));
        a7996 = ((t2524 == t2522));
        a7997 = ((a7996) && (b464));
        b465 = ((a7995) || (a7997));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d637 = (t2529 - t2521);
        b466 = ((t2529 < t2521));
        d638 = (t2528 - t2520);
        d639 = (d638 - b466);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d640 = (d637 - b465);
        b467 = ((d637 < b465));
        t2537 = (d639 - b467);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s572 = (((uint128_t ) d634) + ((uint128_t ) a5238));
        t2538 = ((uint64_t ) s572);
        c232 = (s572 >> 64);
        s573 = (((uint128_t ) d636) + ((uint128_t ) a5237));
        s574 = (((uint128_t ) s573) + ((uint128_t ) c232));
        t2539 = ((uint64_t ) s574);
        c233 = (s574 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s575 = (((uint128_t ) d640) + ((uint128_t ) a5236));
        t2540 = ((uint64_t ) s575);
        c234 = (s575 >> 64);
        s576 = (((uint128_t ) t2537) + ((uint128_t ) a5235));
        s577 = (((uint128_t ) s576) + ((uint128_t ) c234));
        t2541 = ((uint64_t ) s577);
        /* MPPropagateCarry 64 */
        t2542 = (t2540 + c233);
        a8001 = ((t2542 == 0));
        a8002 = (t2541 + c233);
        t2543 = ((a8001) ? (a8002) : (t2541));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8009 = ((t2528 < t2520));
        a8010 = ((t2528 == t2520));
        a8011 = ((a8010) && (b466));
        a8012 = ((a8009) || (a8011));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a8013 = ((t2529 == t2521));
        a8014 = ((a8010) && (a8013));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8015 = ((a8014) && (b465));
        i323 = ((a8012) || (a8015));
        a8016 = (2*a7993);
        /* MPCondD 64 */
        a8017 = (2*a8016);
        P2[a8017] = ((i323) ? (t2543) : (t2537));
        a8018 = (a8017 + 1);
        P2[a8018] = ((i323) ? (t2542) : (d640));
        a8019 = (a8016 + 1);
        /* MPCondD 64 */
        a8020 = (2*a8019);
        P2[a8020] = ((i323) ? (t2539) : (d636));
        a8021 = (a8020 + 1);
        P2[a8021] = ((i323) ? (t2538) : (d634));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code6(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a8022, a8023, a8024, a8025, a8026, a8027, a8028, a8029, 
            a8030, a8031, a8032, a8033, a8034, a8035, a8036, a8037, 
            a8038, a8048, a8049, a8050, a8055, a8056, a8057, a8061, 
            a8062, a8063, a8064, a8065, a8066, a8067, a8068, a8069, 
            a8070, a8071, a8072, a8073, a8074, a8075, a8076, a8077, 
            a8085, a8086, a8087, a8088, a8089, a8090, a8091, a8092, 
            a8093, a8094, a8095, a8096, a8097, a8099, a8100, a8101, 
            a8105, a8106, a8107, a8108, a8109, a8110, a8111, a8113, 
            a8114, a8115, a8119, a8127, a8128, a8129, a8130, a8131, 
            a8132, a8133, a8134, a8135, a8136, a8137, a8138, a8139, 
            b468, b469, b470, b471, b472, b473, b474, b475, 
            b476, b477, b478, b479, b480, b481, b482, b483, 
            b484, c236, c237, c238, c240, c241, c242, i324, 
            i325, i326;
    uint64_t a5620, a5621, a5622, a5623, a5651, a5652, a5653, a5654, 
            a8039, a8040, a8041, a8042, a8043, a8044, a8045, a8046, 
            a8078, a8120, d641, d642, d643, d644, d645, d646, 
            d647, d648, d649, d650, d651, d652, d653, d654, 
            d655, d656, d657, d658, d659, d660, d661, d662, 
            d663, d664, d665, d666, d667, d668, t1251, t1252, 
            t1253, t1254, t1255, t1256, t1257, t1258, t1259, t1260, 
            t1261, t1262, t1263, t1264, t1265, t1266, t1267, t1268, 
            t1269, t1270, t1271, t1272, t1273, t1274, t2546, t2547, 
            t2548, t2549, t2550, t2551, t2552, t2553, t2554, t2555, 
            t2556, t2557, t2558, t2559, t2560, t2561, t2562, t2563, 
            t2564, t2565, t2566, t2567, t2568, t2569, t2570, t2571, 
            t2572, t2573, t2574, t2575, t2576, t2577, t2578, t2579, 
            t2580, t2581, t2582, t2583, t2584, t2585, t2586, t2589, 
            t2590, t2591, t2592, t2593, t2594, t2595, t2596;
    uint128_t s578, s579, s580, s581, s582, s583, s584, s585, 
            s586, s587, s588, s589;
    for(int i9 = 0; i9 <= 1; i9++) {
        a8022 = (256*i9);
        a8023 = (threadIdx.x + a8022);
        a8024 = (a8023 + 512);
        a8025 = (a8024 % 64);
        a8026 = (64 + a8025);
        /* Begin of MPModMul 128 */
        a8027 = (2*a8026);
        a8028 = (a8027 + 1);
        a8029 = (2*a8024);
        a8030 = (a8029 + 1);
        /* MPAssignDD 64 */
        a8031 = (2*a8027);
        t2546 = twiddles[a8031];
        a8032 = (a8031 + 1);
        t2547 = twiddles[a8032];
        /* MPAssignDD 64 */
        a8033 = (2*a8028);
        t2548 = twiddles[a8033];
        a8034 = (a8033 + 1);
        t2549 = twiddles[a8034];
        /* MPAssignDD 64 */
        a8035 = (2*a8029);
        t2550 = P2[a8035];
        a8036 = (a8035 + 1);
        t2551 = P2[a8036];
        /* MPAssignDD 64 */
        a8037 = (2*a8030);
        t2552 = P2[a8037];
        a8038 = (a8037 + 1);
        t2553 = P2[a8038];
        MPMulQDD_L2(t1257, t1258, t1255, t1256, t1253, t1254, t1251, t1252, 
    t2546, t2547, t2548, t2549, t2550, t2551, t2552, t2553);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2554 = (t1253 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b468 = ((int) 1);
        t2555 = (288230376151711744 - b468);
        /* MPBinAndD 64 */
        t2556 = (((t1257)&(t2555)));
        t2557 = (((t1258)&((-1))));
        /* Begin of MPShiftLeft2D */
        a8039 = (t2556 << 6);
        a8040 = (t2557 >> 58);
        t2558 = (((a8039)|(a8040)));
        t2559 = (t2557 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2560 = (t1255 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2561 = (((t2559)|(t2560)));
        /* Begin of MPShiftLeft2D */
        a8041 = (t1255 << 6);
        a8042 = (t1256 >> 58);
        t2562 = (((a8041)|(a8042)));
        t2563 = (t1256 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2564 = (((t2563)|(t2554)));
        /* End of MPShiftRight3 */
        a5620 = mu[0];
        a5621 = mu[1];
        a5622 = mu[2];
        a5623 = mu[3];
        MPMulQDD_L2(t1273, t1274, t1271, t1272, t1269, t1270, t1267, t1268, 
    t2558, t2561, t2562, t2564, a5620, a5621, a5622, a5623);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2565 = (t1273 >> 1);
        a8043 = (t1273 << 63);
        a8044 = (t1274 >> 1);
        t2566 = (((a8043)|(a8044)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2567 = (t1274 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2568 = (t1271 >> 1);
        a8045 = (t1271 << 63);
        a8046 = (t1272 >> 1);
        t2569 = (((a8045)|(a8046)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2570 = (((t2567)|(t2568)));
        /* End of MPShiftRight2 */
        a5651 = modulus[0];
        a5652 = modulus[1];
        a5653 = modulus[2];
        a5654 = modulus[3];
        MPMulQDD_L2(t1265, t1266, t1263, t1264, t1261, t1262, t1259, t1260, 
    t2565, t2566, t2570, t2569, a5651, a5652, a5653, a5654);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d641 = (t1252 - t1260);
        b469 = ((t1252 < t1260));
        d642 = (t1251 - t1259);
        d643 = (d642 - b469);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8048 = ((t1251 < t1259));
        a8049 = ((t1251 == t1259));
        a8050 = ((a8049) && (b469));
        b470 = ((a8048) || (a8050));
        /* Begin of MPSubDDD 64 */
        d644 = (t1254 - t1262);
        b471 = ((t1254 < t1262));
        d645 = (t1253 - t1261);
        d646 = (d645 - b471);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d647 = (d644 - b470);
        b472 = ((d644 < b470));
        t2571 = (d646 - b472);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d648 = (d641 - a5654);
        b473 = ((d641 < a5654));
        d649 = (d643 - a5653);
        d650 = (d649 - b473);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8055 = ((d643 < a5653));
        a8056 = ((d643 == a5653));
        a8057 = ((a8056) && (b473));
        b474 = ((a8055) || (a8057));
        /* Begin of MPSubDDD 64 */
        d651 = (d647 - a5652);
        b475 = ((d647 < a5652));
        d652 = (t2571 - a5651);
        d653 = (d652 - b475);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d654 = (d651 - b474);
        b476 = ((d651 < b474));
        t2572 = (d653 - b476);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8061 = ((t2571 < a5651));
        a8062 = ((t2571 == a5651));
        a8063 = ((a8062) && (b475));
        a8064 = ((a8061) || (a8063));
        /* MPEqual 64 */
        a8065 = ((d647 == a5652));
        a8066 = ((a8062) && (a8065));
        /* MPLessThan 64 */
        a8067 = ((a8066) && (b474));
        i324 = ((a8064) || (a8067));
        /* MPCondD 64 */
        t2573 = ((i324) ? (t2571) : (t2572));
        t2574 = ((i324) ? (d647) : (d654));
        /* MPCondD 64 */
        t2575 = ((i324) ? (d643) : (d650));
        t2576 = ((i324) ? (d641) : (d648));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a8068 = (2*threadIdx.x);
        a8069 = (512*i9);
        a8070 = (a8068 + a8069);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a8071 = (2*a8023);
        a8072 = (a8071 + 1);
        /* MPAssignDD 64 */
        a8073 = (2*a8072);
        t2577 = P2[a8073];
        a8074 = (a8073 + 1);
        t2578 = P2[a8074];
        /* MPAddQDD 64 */
        s578 = (((uint128_t ) t2578) + ((uint128_t ) t2576));
        t2579 = ((uint64_t ) s578);
        c236 = (s578 >> 64);
        s579 = (((uint128_t ) t2577) + ((uint128_t ) t2575));
        s580 = (((uint128_t ) s579) + ((uint128_t ) c236));
        t2580 = ((uint64_t ) s580);
        c237 = (s580 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a8075 = (2*a8071);
        t2581 = P2[a8075];
        a8076 = (a8075 + 1);
        t2582 = P2[a8076];
        /* MPAddQDD 64 */
        s581 = (((uint128_t ) t2582) + ((uint128_t ) t2574));
        t2583 = ((uint64_t ) s581);
        c238 = (s581 >> 64);
        s582 = (((uint128_t ) t2581) + ((uint128_t ) t2573));
        s583 = (((uint128_t ) s582) + ((uint128_t ) c238));
        t2584 = ((uint64_t ) s583);
        /* MPPropagateCarry 64 */
        t2585 = (t2583 + c237);
        a8077 = ((t2585 == 0));
        a8078 = (t2584 + c237);
        t2586 = ((a8077) ? (a8078) : (t2584));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8085 = ((a5651 < t2586));
        a8086 = ((a5651 == t2586));
        a8087 = ((a5652 < t2585));
        a8088 = ((a8086) && (a8087));
        a8089 = ((a8085) || (a8088));
        /* MPEqual 64 */
        a8090 = ((a5652 == t2585));
        a8091 = ((a8086) && (a8090));
        /* MPLessThan 64 */
        a8092 = ((a5653 < t2580));
        a8093 = ((a5653 == t2580));
        a8094 = ((a5654 < t2579));
        a8095 = ((a8093) && (a8094));
        a8096 = ((a8092) || (a8095));
        a8097 = ((a8091) && (a8096));
        i325 = ((a8089) || (a8097));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d655 = (t2579 - a5654);
        b477 = ((t2579 < a5654));
        d656 = (t2580 - a5653);
        d657 = (d656 - b477);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8099 = ((t2580 < a5653));
        a8100 = ((t2580 == a5653));
        a8101 = ((a8100) && (b477));
        b478 = ((a8099) || (a8101));
        /* Begin of MPSubDDD 64 */
        d658 = (t2585 - a5652);
        b479 = ((t2585 < a5652));
        d659 = (t2586 - a5651);
        d660 = (d659 - b479);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d661 = (d658 - b478);
        b480 = ((d658 < b478));
        t2589 = (d660 - b480);
        /* End of MPSubDDD 128 */
        a8105 = (2*a8070);
        /* MPCondD 64 */
        a8106 = (2*a8105);
        P1[a8106] = ((i325) ? (t2589) : (t2586));
        a8107 = (a8106 + 1);
        P1[a8107] = ((i325) ? (d661) : (t2585));
        a8108 = (a8105 + 1);
        /* MPCondD 64 */
        a8109 = (2*a8108);
        P1[a8109] = ((i325) ? (d657) : (t2580));
        a8110 = (a8109 + 1);
        P1[a8110] = ((i325) ? (d655) : (t2579));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a8111 = (a8070 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d662 = (t2578 - t2576);
        b481 = ((t2578 < t2576));
        d663 = (t2577 - t2575);
        d664 = (d663 - b481);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8113 = ((t2577 < t2575));
        a8114 = ((t2577 == t2575));
        a8115 = ((a8114) && (b481));
        b482 = ((a8113) || (a8115));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d665 = (t2582 - t2574);
        b483 = ((t2582 < t2574));
        d666 = (t2581 - t2573);
        d667 = (d666 - b483);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d668 = (d665 - b482);
        b484 = ((d665 < b482));
        t2590 = (d667 - b484);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s584 = (((uint128_t ) d662) + ((uint128_t ) a5654));
        t2591 = ((uint64_t ) s584);
        c240 = (s584 >> 64);
        s585 = (((uint128_t ) d664) + ((uint128_t ) a5653));
        s586 = (((uint128_t ) s585) + ((uint128_t ) c240));
        t2592 = ((uint64_t ) s586);
        c241 = (s586 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s587 = (((uint128_t ) d668) + ((uint128_t ) a5652));
        t2593 = ((uint64_t ) s587);
        c242 = (s587 >> 64);
        s588 = (((uint128_t ) t2590) + ((uint128_t ) a5651));
        s589 = (((uint128_t ) s588) + ((uint128_t ) c242));
        t2594 = ((uint64_t ) s589);
        /* MPPropagateCarry 64 */
        t2595 = (t2593 + c241);
        a8119 = ((t2595 == 0));
        a8120 = (t2594 + c241);
        t2596 = ((a8119) ? (a8120) : (t2594));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8127 = ((t2581 < t2573));
        a8128 = ((t2581 == t2573));
        a8129 = ((a8128) && (b483));
        a8130 = ((a8127) || (a8129));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a8131 = ((t2582 == t2574));
        a8132 = ((a8128) && (a8131));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8133 = ((a8132) && (b482));
        i326 = ((a8130) || (a8133));
        a8134 = (2*a8111);
        /* MPCondD 64 */
        a8135 = (2*a8134);
        P1[a8135] = ((i326) ? (t2596) : (t2590));
        a8136 = (a8135 + 1);
        P1[a8136] = ((i326) ? (t2595) : (d668));
        a8137 = (a8134 + 1);
        /* MPCondD 64 */
        a8138 = (2*a8137);
        P1[a8138] = ((i326) ? (t2592) : (d664));
        a8139 = (a8138 + 1);
        P1[a8139] = ((i326) ? (t2591) : (d662));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code7(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a8140, a8141, a8142, a8143, a8144, a8145, a8146, a8147, 
            a8148, a8149, a8150, a8151, a8152, a8153, a8154, a8155, 
            a8156, a8166, a8167, a8168, a8173, a8174, a8175, a8179, 
            a8180, a8181, a8182, a8183, a8184, a8185, a8186, a8187, 
            a8188, a8189, a8190, a8191, a8192, a8193, a8194, a8195, 
            a8203, a8204, a8205, a8206, a8207, a8208, a8209, a8210, 
            a8211, a8212, a8213, a8214, a8215, a8217, a8218, a8219, 
            a8223, a8224, a8225, a8226, a8227, a8228, a8229, a8231, 
            a8232, a8233, a8237, a8245, a8246, a8247, a8248, a8249, 
            a8250, a8251, a8252, a8253, a8254, a8255, a8256, a8257, 
            b485, b486, b487, b488, b489, b490, b491, b492, 
            b493, b494, b495, b496, b497, b498, b499, b500, 
            b501, c244, c245, c246, c248, c249, c250, i327, 
            i328, i329;
    uint64_t a6036, a6037, a6038, a6039, a6067, a6068, a6069, a6070, 
            a8157, a8158, a8159, a8160, a8161, a8162, a8163, a8164, 
            a8196, a8238, d669, d670, d671, d672, d673, d674, 
            d675, d676, d677, d678, d679, d680, d681, d682, 
            d683, d684, d685, d686, d687, d688, d689, d690, 
            d691, d692, d693, d694, d695, d696, t1283, t1284, 
            t1285, t1286, t1287, t1288, t1289, t1290, t1291, t1292, 
            t1293, t1294, t1295, t1296, t1297, t1298, t1299, t1300, 
            t1301, t1302, t1303, t1304, t1305, t1306, t2599, t2600, 
            t2601, t2602, t2603, t2604, t2605, t2606, t2607, t2608, 
            t2609, t2610, t2611, t2612, t2613, t2614, t2615, t2616, 
            t2617, t2618, t2619, t2620, t2621, t2622, t2623, t2624, 
            t2625, t2626, t2627, t2628, t2629, t2630, t2631, t2632, 
            t2633, t2634, t2635, t2636, t2637, t2638, t2639, t2642, 
            t2643, t2644, t2645, t2646, t2647, t2648, t2649;
    uint128_t s590, s591, s592, s593, s594, s595, s596, s597, 
            s598, s599, s600, s601;
    for(int i7 = 0; i7 <= 1; i7++) {
        a8140 = (256*i7);
        a8141 = (threadIdx.x + a8140);
        a8142 = (a8141 + 512);
        a8143 = (a8142 % 128);
        a8144 = (128 + a8143);
        /* Begin of MPModMul 128 */
        a8145 = (2*a8144);
        a8146 = (a8145 + 1);
        a8147 = (2*a8142);
        a8148 = (a8147 + 1);
        /* MPAssignDD 64 */
        a8149 = (2*a8145);
        t2599 = twiddles[a8149];
        a8150 = (a8149 + 1);
        t2600 = twiddles[a8150];
        /* MPAssignDD 64 */
        a8151 = (2*a8146);
        t2601 = twiddles[a8151];
        a8152 = (a8151 + 1);
        t2602 = twiddles[a8152];
        /* MPAssignDD 64 */
        a8153 = (2*a8147);
        t2603 = P1[a8153];
        a8154 = (a8153 + 1);
        t2604 = P1[a8154];
        /* MPAssignDD 64 */
        a8155 = (2*a8148);
        t2605 = P1[a8155];
        a8156 = (a8155 + 1);
        t2606 = P1[a8156];
        MPMulQDD_L2(t1289, t1290, t1287, t1288, t1285, t1286, t1283, t1284, 
    t2599, t2600, t2601, t2602, t2603, t2604, t2605, t2606);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2607 = (t1285 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b485 = ((int) 1);
        t2608 = (288230376151711744 - b485);
        /* MPBinAndD 64 */
        t2609 = (((t1289)&(t2608)));
        t2610 = (((t1290)&((-1))));
        /* Begin of MPShiftLeft2D */
        a8157 = (t2609 << 6);
        a8158 = (t2610 >> 58);
        t2611 = (((a8157)|(a8158)));
        t2612 = (t2610 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2613 = (t1287 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2614 = (((t2612)|(t2613)));
        /* Begin of MPShiftLeft2D */
        a8159 = (t1287 << 6);
        a8160 = (t1288 >> 58);
        t2615 = (((a8159)|(a8160)));
        t2616 = (t1288 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2617 = (((t2616)|(t2607)));
        /* End of MPShiftRight3 */
        a6036 = mu[0];
        a6037 = mu[1];
        a6038 = mu[2];
        a6039 = mu[3];
        MPMulQDD_L2(t1305, t1306, t1303, t1304, t1301, t1302, t1299, t1300, 
    t2611, t2614, t2615, t2617, a6036, a6037, a6038, a6039);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2618 = (t1305 >> 1);
        a8161 = (t1305 << 63);
        a8162 = (t1306 >> 1);
        t2619 = (((a8161)|(a8162)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2620 = (t1306 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2621 = (t1303 >> 1);
        a8163 = (t1303 << 63);
        a8164 = (t1304 >> 1);
        t2622 = (((a8163)|(a8164)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2623 = (((t2620)|(t2621)));
        /* End of MPShiftRight2 */
        a6067 = modulus[0];
        a6068 = modulus[1];
        a6069 = modulus[2];
        a6070 = modulus[3];
        MPMulQDD_L2(t1297, t1298, t1295, t1296, t1293, t1294, t1291, t1292, 
    t2618, t2619, t2623, t2622, a6067, a6068, a6069, a6070);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d669 = (t1284 - t1292);
        b486 = ((t1284 < t1292));
        d670 = (t1283 - t1291);
        d671 = (d670 - b486);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8166 = ((t1283 < t1291));
        a8167 = ((t1283 == t1291));
        a8168 = ((a8167) && (b486));
        b487 = ((a8166) || (a8168));
        /* Begin of MPSubDDD 64 */
        d672 = (t1286 - t1294);
        b488 = ((t1286 < t1294));
        d673 = (t1285 - t1293);
        d674 = (d673 - b488);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d675 = (d672 - b487);
        b489 = ((d672 < b487));
        t2624 = (d674 - b489);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d676 = (d669 - a6070);
        b490 = ((d669 < a6070));
        d677 = (d671 - a6069);
        d678 = (d677 - b490);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8173 = ((d671 < a6069));
        a8174 = ((d671 == a6069));
        a8175 = ((a8174) && (b490));
        b491 = ((a8173) || (a8175));
        /* Begin of MPSubDDD 64 */
        d679 = (d675 - a6068);
        b492 = ((d675 < a6068));
        d680 = (t2624 - a6067);
        d681 = (d680 - b492);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d682 = (d679 - b491);
        b493 = ((d679 < b491));
        t2625 = (d681 - b493);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8179 = ((t2624 < a6067));
        a8180 = ((t2624 == a6067));
        a8181 = ((a8180) && (b492));
        a8182 = ((a8179) || (a8181));
        /* MPEqual 64 */
        a8183 = ((d675 == a6068));
        a8184 = ((a8180) && (a8183));
        /* MPLessThan 64 */
        a8185 = ((a8184) && (b491));
        i327 = ((a8182) || (a8185));
        /* MPCondD 64 */
        t2626 = ((i327) ? (t2624) : (t2625));
        t2627 = ((i327) ? (d675) : (d682));
        /* MPCondD 64 */
        t2628 = ((i327) ? (d671) : (d678));
        t2629 = ((i327) ? (d669) : (d676));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a8186 = (2*threadIdx.x);
        a8187 = (512*i7);
        a8188 = (a8186 + a8187);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a8189 = (2*a8141);
        a8190 = (a8189 + 1);
        /* MPAssignDD 64 */
        a8191 = (2*a8190);
        t2630 = P1[a8191];
        a8192 = (a8191 + 1);
        t2631 = P1[a8192];
        /* MPAddQDD 64 */
        s590 = (((uint128_t ) t2631) + ((uint128_t ) t2629));
        t2632 = ((uint64_t ) s590);
        c244 = (s590 >> 64);
        s591 = (((uint128_t ) t2630) + ((uint128_t ) t2628));
        s592 = (((uint128_t ) s591) + ((uint128_t ) c244));
        t2633 = ((uint64_t ) s592);
        c245 = (s592 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a8193 = (2*a8189);
        t2634 = P1[a8193];
        a8194 = (a8193 + 1);
        t2635 = P1[a8194];
        /* MPAddQDD 64 */
        s593 = (((uint128_t ) t2635) + ((uint128_t ) t2627));
        t2636 = ((uint64_t ) s593);
        c246 = (s593 >> 64);
        s594 = (((uint128_t ) t2634) + ((uint128_t ) t2626));
        s595 = (((uint128_t ) s594) + ((uint128_t ) c246));
        t2637 = ((uint64_t ) s595);
        /* MPPropagateCarry 64 */
        t2638 = (t2636 + c245);
        a8195 = ((t2638 == 0));
        a8196 = (t2637 + c245);
        t2639 = ((a8195) ? (a8196) : (t2637));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8203 = ((a6067 < t2639));
        a8204 = ((a6067 == t2639));
        a8205 = ((a6068 < t2638));
        a8206 = ((a8204) && (a8205));
        a8207 = ((a8203) || (a8206));
        /* MPEqual 64 */
        a8208 = ((a6068 == t2638));
        a8209 = ((a8204) && (a8208));
        /* MPLessThan 64 */
        a8210 = ((a6069 < t2633));
        a8211 = ((a6069 == t2633));
        a8212 = ((a6070 < t2632));
        a8213 = ((a8211) && (a8212));
        a8214 = ((a8210) || (a8213));
        a8215 = ((a8209) && (a8214));
        i328 = ((a8207) || (a8215));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d683 = (t2632 - a6070);
        b494 = ((t2632 < a6070));
        d684 = (t2633 - a6069);
        d685 = (d684 - b494);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8217 = ((t2633 < a6069));
        a8218 = ((t2633 == a6069));
        a8219 = ((a8218) && (b494));
        b495 = ((a8217) || (a8219));
        /* Begin of MPSubDDD 64 */
        d686 = (t2638 - a6068);
        b496 = ((t2638 < a6068));
        d687 = (t2639 - a6067);
        d688 = (d687 - b496);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d689 = (d686 - b495);
        b497 = ((d686 < b495));
        t2642 = (d688 - b497);
        /* End of MPSubDDD 128 */
        a8223 = (2*a8188);
        /* MPCondD 64 */
        a8224 = (2*a8223);
        P2[a8224] = ((i328) ? (t2642) : (t2639));
        a8225 = (a8224 + 1);
        P2[a8225] = ((i328) ? (d689) : (t2638));
        a8226 = (a8223 + 1);
        /* MPCondD 64 */
        a8227 = (2*a8226);
        P2[a8227] = ((i328) ? (d685) : (t2633));
        a8228 = (a8227 + 1);
        P2[a8228] = ((i328) ? (d683) : (t2632));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a8229 = (a8188 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d690 = (t2631 - t2629);
        b498 = ((t2631 < t2629));
        d691 = (t2630 - t2628);
        d692 = (d691 - b498);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8231 = ((t2630 < t2628));
        a8232 = ((t2630 == t2628));
        a8233 = ((a8232) && (b498));
        b499 = ((a8231) || (a8233));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d693 = (t2635 - t2627);
        b500 = ((t2635 < t2627));
        d694 = (t2634 - t2626);
        d695 = (d694 - b500);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d696 = (d693 - b499);
        b501 = ((d693 < b499));
        t2643 = (d695 - b501);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s596 = (((uint128_t ) d690) + ((uint128_t ) a6070));
        t2644 = ((uint64_t ) s596);
        c248 = (s596 >> 64);
        s597 = (((uint128_t ) d692) + ((uint128_t ) a6069));
        s598 = (((uint128_t ) s597) + ((uint128_t ) c248));
        t2645 = ((uint64_t ) s598);
        c249 = (s598 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s599 = (((uint128_t ) d696) + ((uint128_t ) a6068));
        t2646 = ((uint64_t ) s599);
        c250 = (s599 >> 64);
        s600 = (((uint128_t ) t2643) + ((uint128_t ) a6067));
        s601 = (((uint128_t ) s600) + ((uint128_t ) c250));
        t2647 = ((uint64_t ) s601);
        /* MPPropagateCarry 64 */
        t2648 = (t2646 + c249);
        a8237 = ((t2648 == 0));
        a8238 = (t2647 + c249);
        t2649 = ((a8237) ? (a8238) : (t2647));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8245 = ((t2634 < t2626));
        a8246 = ((t2634 == t2626));
        a8247 = ((a8246) && (b500));
        a8248 = ((a8245) || (a8247));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a8249 = ((t2635 == t2627));
        a8250 = ((a8246) && (a8249));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8251 = ((a8250) && (b499));
        i329 = ((a8248) || (a8251));
        a8252 = (2*a8229);
        /* MPCondD 64 */
        a8253 = (2*a8252);
        P2[a8253] = ((i329) ? (t2649) : (t2643));
        a8254 = (a8253 + 1);
        P2[a8254] = ((i329) ? (t2648) : (d696));
        a8255 = (a8252 + 1);
        /* MPCondD 64 */
        a8256 = (2*a8255);
        P2[a8256] = ((i329) ? (t2645) : (d692));
        a8257 = (a8256 + 1);
        P2[a8257] = ((i329) ? (t2644) : (d690));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code8(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a8258, a8259, a8260, a8261, a8262, a8263, a8264, a8265, 
            a8266, a8267, a8268, a8269, a8270, a8271, a8272, a8273, 
            a8274, a8284, a8285, a8286, a8291, a8292, a8293, a8297, 
            a8298, a8299, a8300, a8301, a8302, a8303, a8304, a8305, 
            a8306, a8307, a8308, a8309, a8310, a8311, a8312, a8313, 
            a8321, a8322, a8323, a8324, a8325, a8326, a8327, a8328, 
            a8329, a8330, a8331, a8332, a8333, a8335, a8336, a8337, 
            a8341, a8342, a8343, a8344, a8345, a8346, a8347, a8349, 
            a8350, a8351, a8355, a8363, a8364, a8365, a8366, a8367, 
            a8368, a8369, a8370, a8371, a8372, a8373, a8374, a8375, 
            b502, b503, b504, b505, b506, b507, b508, b509, 
            b510, b511, b512, b513, b514, b515, b516, b517, 
            b518, c252, c253, c254, c256, c257, c258, i330, 
            i331, i332;
    uint64_t a6452, a6453, a6454, a6455, a6483, a6484, a6485, a6486, 
            a8275, a8276, a8277, a8278, a8279, a8280, a8281, a8282, 
            a8314, a8356, d697, d698, d699, d700, d701, d702, 
            d703, d704, d705, d706, d707, d708, d709, d710, 
            d711, d712, d713, d714, d715, d716, d717, d718, 
            d719, d720, d721, d722, d723, d724, t1315, t1316, 
            t1317, t1318, t1319, t1320, t1321, t1322, t1323, t1324, 
            t1325, t1326, t1327, t1328, t1329, t1330, t1331, t1332, 
            t1333, t1334, t1335, t1336, t1337, t1338, t2652, t2653, 
            t2654, t2655, t2656, t2657, t2658, t2659, t2660, t2661, 
            t2662, t2663, t2664, t2665, t2666, t2667, t2668, t2669, 
            t2670, t2671, t2672, t2673, t2674, t2675, t2676, t2677, 
            t2678, t2679, t2680, t2681, t2682, t2683, t2684, t2685, 
            t2686, t2687, t2688, t2689, t2690, t2691, t2692, t2695, 
            t2696, t2697, t2698, t2699, t2700, t2701, t2702;
    uint128_t s602, s603, s604, s605, s606, s607, s608, s609, 
            s610, s611, s612, s613;
    for(int i5 = 0; i5 <= 1; i5++) {
        a8258 = (256*i5);
        a8259 = (threadIdx.x + a8258);
        a8260 = (a8259 + 512);
        a8261 = (a8260 % 256);
        a8262 = (256 + a8261);
        /* Begin of MPModMul 128 */
        a8263 = (2*a8262);
        a8264 = (a8263 + 1);
        a8265 = (2*a8260);
        a8266 = (a8265 + 1);
        /* MPAssignDD 64 */
        a8267 = (2*a8263);
        t2652 = twiddles[a8267];
        a8268 = (a8267 + 1);
        t2653 = twiddles[a8268];
        /* MPAssignDD 64 */
        a8269 = (2*a8264);
        t2654 = twiddles[a8269];
        a8270 = (a8269 + 1);
        t2655 = twiddles[a8270];
        /* MPAssignDD 64 */
        a8271 = (2*a8265);
        t2656 = P2[a8271];
        a8272 = (a8271 + 1);
        t2657 = P2[a8272];
        /* MPAssignDD 64 */
        a8273 = (2*a8266);
        t2658 = P2[a8273];
        a8274 = (a8273 + 1);
        t2659 = P2[a8274];
        MPMulQDD_L2(t1321, t1322, t1319, t1320, t1317, t1318, t1315, t1316, 
    t2652, t2653, t2654, t2655, t2656, t2657, t2658, t2659);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2660 = (t1317 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b502 = ((int) 1);
        t2661 = (288230376151711744 - b502);
        /* MPBinAndD 64 */
        t2662 = (((t1321)&(t2661)));
        t2663 = (((t1322)&((-1))));
        /* Begin of MPShiftLeft2D */
        a8275 = (t2662 << 6);
        a8276 = (t2663 >> 58);
        t2664 = (((a8275)|(a8276)));
        t2665 = (t2663 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2666 = (t1319 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2667 = (((t2665)|(t2666)));
        /* Begin of MPShiftLeft2D */
        a8277 = (t1319 << 6);
        a8278 = (t1320 >> 58);
        t2668 = (((a8277)|(a8278)));
        t2669 = (t1320 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2670 = (((t2669)|(t2660)));
        /* End of MPShiftRight3 */
        a6452 = mu[0];
        a6453 = mu[1];
        a6454 = mu[2];
        a6455 = mu[3];
        MPMulQDD_L2(t1337, t1338, t1335, t1336, t1333, t1334, t1331, t1332, 
    t2664, t2667, t2668, t2670, a6452, a6453, a6454, a6455);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2671 = (t1337 >> 1);
        a8279 = (t1337 << 63);
        a8280 = (t1338 >> 1);
        t2672 = (((a8279)|(a8280)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2673 = (t1338 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2674 = (t1335 >> 1);
        a8281 = (t1335 << 63);
        a8282 = (t1336 >> 1);
        t2675 = (((a8281)|(a8282)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2676 = (((t2673)|(t2674)));
        /* End of MPShiftRight2 */
        a6483 = modulus[0];
        a6484 = modulus[1];
        a6485 = modulus[2];
        a6486 = modulus[3];
        MPMulQDD_L2(t1329, t1330, t1327, t1328, t1325, t1326, t1323, t1324, 
    t2671, t2672, t2676, t2675, a6483, a6484, a6485, a6486);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d697 = (t1316 - t1324);
        b503 = ((t1316 < t1324));
        d698 = (t1315 - t1323);
        d699 = (d698 - b503);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8284 = ((t1315 < t1323));
        a8285 = ((t1315 == t1323));
        a8286 = ((a8285) && (b503));
        b504 = ((a8284) || (a8286));
        /* Begin of MPSubDDD 64 */
        d700 = (t1318 - t1326);
        b505 = ((t1318 < t1326));
        d701 = (t1317 - t1325);
        d702 = (d701 - b505);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d703 = (d700 - b504);
        b506 = ((d700 < b504));
        t2677 = (d702 - b506);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d704 = (d697 - a6486);
        b507 = ((d697 < a6486));
        d705 = (d699 - a6485);
        d706 = (d705 - b507);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8291 = ((d699 < a6485));
        a8292 = ((d699 == a6485));
        a8293 = ((a8292) && (b507));
        b508 = ((a8291) || (a8293));
        /* Begin of MPSubDDD 64 */
        d707 = (d703 - a6484);
        b509 = ((d703 < a6484));
        d708 = (t2677 - a6483);
        d709 = (d708 - b509);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d710 = (d707 - b508);
        b510 = ((d707 < b508));
        t2678 = (d709 - b510);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8297 = ((t2677 < a6483));
        a8298 = ((t2677 == a6483));
        a8299 = ((a8298) && (b509));
        a8300 = ((a8297) || (a8299));
        /* MPEqual 64 */
        a8301 = ((d703 == a6484));
        a8302 = ((a8298) && (a8301));
        /* MPLessThan 64 */
        a8303 = ((a8302) && (b508));
        i330 = ((a8300) || (a8303));
        /* MPCondD 64 */
        t2679 = ((i330) ? (t2677) : (t2678));
        t2680 = ((i330) ? (d703) : (d710));
        /* MPCondD 64 */
        t2681 = ((i330) ? (d699) : (d706));
        t2682 = ((i330) ? (d697) : (d704));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a8304 = (2*threadIdx.x);
        a8305 = (512*i5);
        a8306 = (a8304 + a8305);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a8307 = (2*a8259);
        a8308 = (a8307 + 1);
        /* MPAssignDD 64 */
        a8309 = (2*a8308);
        t2683 = P2[a8309];
        a8310 = (a8309 + 1);
        t2684 = P2[a8310];
        /* MPAddQDD 64 */
        s602 = (((uint128_t ) t2684) + ((uint128_t ) t2682));
        t2685 = ((uint64_t ) s602);
        c252 = (s602 >> 64);
        s603 = (((uint128_t ) t2683) + ((uint128_t ) t2681));
        s604 = (((uint128_t ) s603) + ((uint128_t ) c252));
        t2686 = ((uint64_t ) s604);
        c253 = (s604 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a8311 = (2*a8307);
        t2687 = P2[a8311];
        a8312 = (a8311 + 1);
        t2688 = P2[a8312];
        /* MPAddQDD 64 */
        s605 = (((uint128_t ) t2688) + ((uint128_t ) t2680));
        t2689 = ((uint64_t ) s605);
        c254 = (s605 >> 64);
        s606 = (((uint128_t ) t2687) + ((uint128_t ) t2679));
        s607 = (((uint128_t ) s606) + ((uint128_t ) c254));
        t2690 = ((uint64_t ) s607);
        /* MPPropagateCarry 64 */
        t2691 = (t2689 + c253);
        a8313 = ((t2691 == 0));
        a8314 = (t2690 + c253);
        t2692 = ((a8313) ? (a8314) : (t2690));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8321 = ((a6483 < t2692));
        a8322 = ((a6483 == t2692));
        a8323 = ((a6484 < t2691));
        a8324 = ((a8322) && (a8323));
        a8325 = ((a8321) || (a8324));
        /* MPEqual 64 */
        a8326 = ((a6484 == t2691));
        a8327 = ((a8322) && (a8326));
        /* MPLessThan 64 */
        a8328 = ((a6485 < t2686));
        a8329 = ((a6485 == t2686));
        a8330 = ((a6486 < t2685));
        a8331 = ((a8329) && (a8330));
        a8332 = ((a8328) || (a8331));
        a8333 = ((a8327) && (a8332));
        i331 = ((a8325) || (a8333));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d711 = (t2685 - a6486);
        b511 = ((t2685 < a6486));
        d712 = (t2686 - a6485);
        d713 = (d712 - b511);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8335 = ((t2686 < a6485));
        a8336 = ((t2686 == a6485));
        a8337 = ((a8336) && (b511));
        b512 = ((a8335) || (a8337));
        /* Begin of MPSubDDD 64 */
        d714 = (t2691 - a6484);
        b513 = ((t2691 < a6484));
        d715 = (t2692 - a6483);
        d716 = (d715 - b513);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d717 = (d714 - b512);
        b514 = ((d714 < b512));
        t2695 = (d716 - b514);
        /* End of MPSubDDD 128 */
        a8341 = (2*a8306);
        /* MPCondD 64 */
        a8342 = (2*a8341);
        P1[a8342] = ((i331) ? (t2695) : (t2692));
        a8343 = (a8342 + 1);
        P1[a8343] = ((i331) ? (d717) : (t2691));
        a8344 = (a8341 + 1);
        /* MPCondD 64 */
        a8345 = (2*a8344);
        P1[a8345] = ((i331) ? (d713) : (t2686));
        a8346 = (a8345 + 1);
        P1[a8346] = ((i331) ? (d711) : (t2685));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a8347 = (a8306 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d718 = (t2684 - t2682);
        b515 = ((t2684 < t2682));
        d719 = (t2683 - t2681);
        d720 = (d719 - b515);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8349 = ((t2683 < t2681));
        a8350 = ((t2683 == t2681));
        a8351 = ((a8350) && (b515));
        b516 = ((a8349) || (a8351));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d721 = (t2688 - t2680);
        b517 = ((t2688 < t2680));
        d722 = (t2687 - t2679);
        d723 = (d722 - b517);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d724 = (d721 - b516);
        b518 = ((d721 < b516));
        t2696 = (d723 - b518);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s608 = (((uint128_t ) d718) + ((uint128_t ) a6486));
        t2697 = ((uint64_t ) s608);
        c256 = (s608 >> 64);
        s609 = (((uint128_t ) d720) + ((uint128_t ) a6485));
        s610 = (((uint128_t ) s609) + ((uint128_t ) c256));
        t2698 = ((uint64_t ) s610);
        c257 = (s610 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s611 = (((uint128_t ) d724) + ((uint128_t ) a6484));
        t2699 = ((uint64_t ) s611);
        c258 = (s611 >> 64);
        s612 = (((uint128_t ) t2696) + ((uint128_t ) a6483));
        s613 = (((uint128_t ) s612) + ((uint128_t ) c258));
        t2700 = ((uint64_t ) s613);
        /* MPPropagateCarry 64 */
        t2701 = (t2699 + c257);
        a8355 = ((t2701 == 0));
        a8356 = (t2700 + c257);
        t2702 = ((a8355) ? (a8356) : (t2700));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8363 = ((t2687 < t2679));
        a8364 = ((t2687 == t2679));
        a8365 = ((a8364) && (b517));
        a8366 = ((a8363) || (a8365));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a8367 = ((t2688 == t2680));
        a8368 = ((a8364) && (a8367));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8369 = ((a8368) && (b516));
        i332 = ((a8366) || (a8369));
        a8370 = (2*a8347);
        /* MPCondD 64 */
        a8371 = (2*a8370);
        P1[a8371] = ((i332) ? (t2702) : (t2696));
        a8372 = (a8371 + 1);
        P1[a8372] = ((i332) ? (t2701) : (d724));
        a8373 = (a8370 + 1);
        /* MPCondD 64 */
        a8374 = (2*a8373);
        P1[a8374] = ((i332) ? (t2698) : (d720));
        a8375 = (a8374 + 1);
        P1[a8375] = ((i332) ? (t2697) : (d718));
        /* End of MPModSub 128 */
    }
}

__global__ void ker_code9(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a8376, a8377, a8378, a8379, a8380, a8381, a8382, a8383, 
            a8384, a8385, a8386, a8387, a8388, a8389, a8390, a8391, 
            a8392, a8402, a8403, a8404, a8409, a8410, a8411, a8415, 
            a8416, a8417, a8418, a8419, a8420, a8421, a8422, a8423, 
            a8424, a8425, a8426, a8427, a8428, a8429, a8430, a8431, 
            a8432, a8440, a8441, a8442, a8443, a8444, a8445, a8446, 
            a8447, a8448, a8449, a8450, a8451, a8452, a8454, a8455, 
            a8456, a8460, a8461, a8462, a8463, a8464, a8465, a8466, 
            a8468, a8469, a8470, a8474, a8482, a8483, a8484, a8485, 
            a8486, a8487, a8488, a8489, a8490, a8491, a8492, a8493, 
            a8494, b519, b520, b521, b522, b523, b524, b525, 
            b526, b527, b528, b529, b530, b531, b532, b533, 
            b534, b535, b536, c260, c261, c262, c264, c265, 
            c266, i333, i334, i335;
    uint64_t a6868, a6869, a6870, a6871, a6899, a6900, a6901, a6902, 
            a8393, a8394, a8395, a8396, a8397, a8398, a8399, a8400, 
            a8433, a8475, d725, d726, d727, d728, d729, d730, 
            d731, d732, d733, d734, d735, d736, d737, d738, 
            d739, d740, d741, d742, d743, d744, d745, d746, 
            d747, d748, d749, d750, d751, d752, t1351, t1352, 
            t1353, t1354, t1355, t1356, t1357, t1358, t1359, t1360, 
            t1361, t1362, t1363, t1364, t1365, t1366, t1367, t1368, 
            t1369, t1370, t1371, t1372, t1373, t1374, t2705, t2706, 
            t2707, t2708, t2709, t2710, t2711, t2712, t2713, t2714, 
            t2715, t2716, t2717, t2718, t2719, t2720, t2721, t2722, 
            t2723, t2724, t2725, t2726, t2727, t2728, t2729, t2730, 
            t2731, t2732, t2733, t2734, t2735, t2736, t2737, t2738, 
            t2739, t2740, t2741, t2742, t2743, t2744, t2745, t2748, 
            t2749, t2750, t2751, t2752, t2753, t2754, t2755;
    uint128_t s614, s615, s616, s617, s618, s619, s620, s621, 
            s622, s623, s624, s625;
    for(int i3 = 0; i3 <= 1; i3++) {
        a8376 = (256*i3);
        a8377 = (threadIdx.x + a8376);
        a8378 = (a8377 + 512);
        a8379 = (a8378 % 512);
        a8380 = (512 + a8379);
        /* Begin of MPModMul 128 */
        a8381 = (2*a8380);
        a8382 = (a8381 + 1);
        a8383 = (2*a8378);
        a8384 = (a8383 + 1);
        /* MPAssignDD 64 */
        a8385 = (2*a8381);
        t2705 = twiddles[a8385];
        a8386 = (a8385 + 1);
        t2706 = twiddles[a8386];
        /* MPAssignDD 64 */
        a8387 = (2*a8382);
        t2707 = twiddles[a8387];
        a8388 = (a8387 + 1);
        t2708 = twiddles[a8388];
        /* MPAssignDD 64 */
        a8389 = (2*a8383);
        t2709 = P1[a8389];
        a8390 = (a8389 + 1);
        t2710 = P1[a8390];
        /* MPAssignDD 64 */
        a8391 = (2*a8384);
        t2711 = P1[a8391];
        a8392 = (a8391 + 1);
        t2712 = P1[a8392];
        MPMulQDD_L2(t1357, t1358, t1355, t1356, t1353, t1354, t1351, t1352, 
    t2705, t2706, t2707, t2708, t2709, t2710, t2711, t2712);
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        /* Begin of MPShiftRight1D */
        t2713 = (t1353 >> 58);
        /* End of MPShiftRight1D */
        /* MPTypeCastDI 64 */
        /* Begin of MPShiftLeft1D */
        /* End of MPShiftLeft1D */
        /* MPSubDDI 64 */
        b519 = ((int) 1);
        t2714 = (288230376151711744 - b519);
        /* MPBinAndD 64 */
        t2715 = (((t1357)&(t2714)));
        t2716 = (((t1358)&((-1))));
        /* Begin of MPShiftLeft2D */
        a8393 = (t2715 << 6);
        a8394 = (t2716 >> 58);
        t2717 = (((a8393)|(a8394)));
        t2718 = (t2716 << 6);
        /* End of MPShiftLeft2D */
        /* Begin of MPShiftRight1D */
        t2719 = (t1355 >> 58);
        /* End of MPShiftRight1D */
        /* MPBinOrD 64 */
        t2720 = (((t2718)|(t2719)));
        /* Begin of MPShiftLeft2D */
        a8395 = (t1355 << 6);
        a8396 = (t1356 >> 58);
        t2721 = (((a8395)|(a8396)));
        t2722 = (t1356 << 6);
        /* End of MPShiftLeft2D */
        /* MPBinOrD 64 */
        t2723 = (((t2722)|(t2713)));
        /* End of MPShiftRight3 */
        a6868 = mu[0];
        a6869 = mu[1];
        a6870 = mu[2];
        a6871 = mu[3];
        MPMulQDD_L2(t1373, t1374, t1371, t1372, t1369, t1370, t1367, t1368, 
    t2717, t2720, t2721, t2723, a6868, a6869, a6870, a6871);
        /* Begin of MPShiftRight2 */
        /* Begin of MPShiftRight2D */
        t2724 = (t1373 >> 1);
        a8397 = (t1373 << 63);
        a8398 = (t1374 >> 1);
        t2725 = (((a8397)|(a8398)));
        /* End of MPShiftRight2D */
        /* Begin of MPShiftLeft1D */
        t2726 = (t1374 << 63);
        /* End of MPShiftLeft1D */
        /* Begin of MPShiftRight2D */
        t2727 = (t1371 >> 1);
        a8399 = (t1371 << 63);
        a8400 = (t1372 >> 1);
        t2728 = (((a8399)|(a8400)));
        /* End of MPShiftRight2D */
        /* MPBinOrD 64 */
        t2729 = (((t2726)|(t2727)));
        /* End of MPShiftRight2 */
        a6899 = modulus[0];
        a6900 = modulus[1];
        a6901 = modulus[2];
        a6902 = modulus[3];
        MPMulQDD_L2(t1365, t1366, t1363, t1364, t1361, t1362, t1359, t1360, 
    t2724, t2725, t2729, t2728, a6899, a6900, a6901, a6902);
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d725 = (t1352 - t1360);
        b520 = ((t1352 < t1360));
        d726 = (t1351 - t1359);
        d727 = (d726 - b520);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8402 = ((t1351 < t1359));
        a8403 = ((t1351 == t1359));
        a8404 = ((a8403) && (b520));
        b521 = ((a8402) || (a8404));
        /* Begin of MPSubDDD 64 */
        d728 = (t1354 - t1362);
        b522 = ((t1354 < t1362));
        d729 = (t1353 - t1361);
        d730 = (d729 - b522);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d731 = (d728 - b521);
        b523 = ((d728 < b521));
        t2730 = (d730 - b523);
        /* End of MPSubDDD 128 */
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d732 = (d725 - a6902);
        b524 = ((d725 < a6902));
        d733 = (d727 - a6901);
        d734 = (d733 - b524);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8409 = ((d727 < a6901));
        a8410 = ((d727 == a6901));
        a8411 = ((a8410) && (b524));
        b525 = ((a8409) || (a8411));
        /* Begin of MPSubDDD 64 */
        d735 = (d731 - a6900);
        b526 = ((d731 < a6900));
        d736 = (t2730 - a6899);
        d737 = (d736 - b526);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d738 = (d735 - b525);
        b527 = ((d735 < b525));
        t2731 = (d737 - b527);
        /* End of MPSubDDD 128 */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8415 = ((t2730 < a6899));
        a8416 = ((t2730 == a6899));
        a8417 = ((a8416) && (b526));
        a8418 = ((a8415) || (a8417));
        /* MPEqual 64 */
        a8419 = ((d731 == a6900));
        a8420 = ((a8416) && (a8419));
        /* MPLessThan 64 */
        a8421 = ((a8420) && (b525));
        i333 = ((a8418) || (a8421));
        /* MPCondD 64 */
        t2732 = ((i333) ? (t2730) : (t2731));
        t2733 = ((i333) ? (d731) : (d738));
        /* MPCondD 64 */
        t2734 = ((i333) ? (d727) : (d734));
        t2735 = ((i333) ? (d725) : (d732));
        /* End of MPModDQ */
        /* End of MPModMul 128 */
        a8422 = (1024*blockIdx.x);
        a8423 = (2*threadIdx.x);
        a8424 = (512*i3);
        b528 = (a8422 + a8423);
        a8425 = (b528 + a8424);
        /* Begin of MPModAdd 128 */
        /* MPAddDDD 128 */
        a8426 = (2*a8377);
        a8427 = (a8426 + 1);
        /* MPAssignDD 64 */
        a8428 = (2*a8427);
        t2736 = P1[a8428];
        a8429 = (a8428 + 1);
        t2737 = P1[a8429];
        /* MPAddQDD 64 */
        s614 = (((uint128_t ) t2737) + ((uint128_t ) t2735));
        t2738 = ((uint64_t ) s614);
        c260 = (s614 >> 64);
        s615 = (((uint128_t ) t2736) + ((uint128_t ) t2734));
        s616 = (((uint128_t ) s615) + ((uint128_t ) c260));
        t2739 = ((uint64_t ) s616);
        c261 = (s616 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAssignDD 64 */
        a8430 = (2*a8426);
        t2740 = P1[a8430];
        a8431 = (a8430 + 1);
        t2741 = P1[a8431];
        /* MPAddQDD 64 */
        s617 = (((uint128_t ) t2741) + ((uint128_t ) t2733));
        t2742 = ((uint64_t ) s617);
        c262 = (s617 >> 64);
        s618 = (((uint128_t ) t2740) + ((uint128_t ) t2732));
        s619 = (((uint128_t ) s618) + ((uint128_t ) c262));
        t2743 = ((uint64_t ) s619);
        /* MPPropagateCarry 64 */
        t2744 = (t2742 + c261);
        a8432 = ((t2744 == 0));
        a8433 = (t2743 + c261);
        t2745 = ((a8432) ? (a8433) : (t2743));
        /* MPExtractLow 64 */
        /* Begin of MPModDD */
        /* MPLessThan 128 */
        /* MPLessThan 64 */
        a8440 = ((a6899 < t2745));
        a8441 = ((a6899 == t2745));
        a8442 = ((a6900 < t2744));
        a8443 = ((a8441) && (a8442));
        a8444 = ((a8440) || (a8443));
        /* MPEqual 64 */
        a8445 = ((a6900 == t2744));
        a8446 = ((a8441) && (a8445));
        /* MPLessThan 64 */
        a8447 = ((a6901 < t2739));
        a8448 = ((a6901 == t2739));
        a8449 = ((a6902 < t2738));
        a8450 = ((a8448) && (a8449));
        a8451 = ((a8447) || (a8450));
        a8452 = ((a8446) && (a8451));
        i334 = ((a8444) || (a8452));
        /* Begin of MPSubDDD 128 */
        /* Begin of MPSubDDD 64 */
        d739 = (t2738 - a6902);
        b529 = ((t2738 < a6902));
        d740 = (t2739 - a6901);
        d741 = (d740 - b529);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a8454 = ((t2739 < a6901));
        a8455 = ((t2739 == a6901));
        a8456 = ((a8455) && (b529));
        b530 = ((a8454) || (a8456));
        /* Begin of MPSubDDD 64 */
        d742 = (t2744 - a6900);
        b531 = ((t2744 < a6900));
        d743 = (t2745 - a6899);
        d744 = (d743 - b531);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d745 = (d742 - b530);
        b532 = ((d742 < b530));
        t2748 = (d744 - b532);
        /* End of MPSubDDD 128 */
        a8460 = (2*a8425);
        /* MPCondD 64 */
        a8461 = (2*a8460);
        Y[a8461] = ((i334) ? (t2748) : (t2745));
        a8462 = (a8461 + 1);
        Y[a8462] = ((i334) ? (d745) : (t2744));
        a8463 = (a8460 + 1);
        /* MPCondD 64 */
        a8464 = (2*a8463);
        Y[a8464] = ((i334) ? (d741) : (t2739));
        a8465 = (a8464 + 1);
        Y[a8465] = ((i334) ? (d739) : (t2738));
        /* End of MPModDD */
        /* End of MPModAdd 128 */
        a8466 = (a8425 + 1);
        /* Begin of MPModSub 128 */
        /* Begin of MPSubDDD 128 */
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d746 = (t2737 - t2735);
        b533 = ((t2737 < t2735));
        d747 = (t2736 - t2734);
        d748 = (d747 - b533);
        /* End of MPSubDDD 64 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8468 = ((t2736 < t2734));
        a8469 = ((t2736 == t2734));
        a8470 = ((a8469) && (b533));
        b534 = ((a8468) || (a8470));
        /* MPAssignDD 64 */
        /* Begin of MPSubDDD 64 */
        d749 = (t2741 - t2733);
        b535 = ((t2741 < t2733));
        d750 = (t2740 - t2732);
        d751 = (d750 - b535);
        /* End of MPSubDDD 64 */
        /* MPSubDDI 64 */
        d752 = (d749 - b534);
        b536 = ((d749 < b534));
        t2749 = (d751 - b536);
        /* End of MPSubDDD 128 */
        /* MPAddDDD 128 */
        /* MPAddQDD 64 */
        s620 = (((uint128_t ) d746) + ((uint128_t ) a6902));
        t2750 = ((uint64_t ) s620);
        c264 = (s620 >> 64);
        s621 = (((uint128_t ) d748) + ((uint128_t ) a6901));
        s622 = (((uint128_t ) s621) + ((uint128_t ) c264));
        t2751 = ((uint64_t ) s622);
        c265 = (s622 >> 64);
        /* MPExtractLow 64 */
        /* MPExtractCarry 64 */
        /* MPAddQDD 64 */
        s623 = (((uint128_t ) d752) + ((uint128_t ) a6900));
        t2752 = ((uint64_t ) s623);
        c266 = (s623 >> 64);
        s624 = (((uint128_t ) t2749) + ((uint128_t ) a6899));
        s625 = (((uint128_t ) s624) + ((uint128_t ) c266));
        t2753 = ((uint64_t ) s625);
        /* MPPropagateCarry 64 */
        t2754 = (t2752 + c265);
        a8474 = ((t2754 == 0));
        a8475 = (t2753 + c265);
        t2755 = ((a8474) ? (a8475) : (t2753));
        /* MPExtractLow 64 */
        /* MPLessThan 128 */
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8482 = ((t2740 < t2732));
        a8483 = ((t2740 == t2732));
        a8484 = ((a8483) && (b535));
        a8485 = ((a8482) || (a8484));
        /* MPAssignDD 64 */
        /* MPEqual 64 */
        a8486 = ((t2741 == t2733));
        a8487 = ((a8483) && (a8486));
        /* MPAssignDD 64 */
        /* MPLessThan 64 */
        a8488 = ((a8487) && (b534));
        i335 = ((a8485) || (a8488));
        a8489 = (2*a8466);
        /* MPCondD 64 */
        a8490 = (2*a8489);
        Y[a8490] = ((i335) ? (t2755) : (t2749));
        a8491 = (a8490 + 1);
        Y[a8491] = ((i335) ? (t2754) : (d752));
        a8492 = (a8489 + 1);
        /* MPCondD 64 */
        a8493 = (2*a8492);
        Y[a8493] = ((i335) ? (t2751) : (d748));
        a8494 = (a8493 + 1);
        Y[a8494] = ((i335) ? (t2750) : (d746));
        /* End of MPModSub 128 */
    }
}

void nttmpcuda(uint64_t  *Y, uint64_t  *X, uint64_t modulus[2], uint64_t  *twiddles, uint64_t mu[2]) {
    dim3 b47(256, 1, 1), b48(256, 1, 1), b49(256, 1, 1), b50(256, 1, 1), b51(256, 1, 1), b52(256, 1, 1), b53(256, 1, 1), b54(256, 1, 1), 
    b55(256, 1, 1), b56(256, 1, 1), g1(2, 1, 1), g10(2, 1, 1), g2(2, 1, 1), g3(2, 1, 1), g4(2, 1, 1), g5(2, 1, 1), 
    g6(2, 1, 1), g7(2, 1, 1), g8(2, 1, 1), g9(2, 1, 1);
    ker_code0<<<g1, b47>>>(X, Y, modulus, twiddles, mu);
    ker_code1<<<g2, b48>>>(X, Y, modulus, twiddles, mu);
    ker_code2<<<g3, b49>>>(X, Y, modulus, twiddles, mu);
    ker_code3<<<g4, b50>>>(X, Y, modulus, twiddles, mu);
    ker_code4<<<g5, b51>>>(X, Y, modulus, twiddles, mu);
    ker_code5<<<g6, b52>>>(X, Y, modulus, twiddles, mu);
    ker_code6<<<g7, b53>>>(X, Y, modulus, twiddles, mu);
    ker_code7<<<g8, b54>>>(X, Y, modulus, twiddles, mu);
    ker_code8<<<g9, b55>>>(X, Y, modulus, twiddles, mu);
    ker_code9<<<g10, b56>>>(X, Y, modulus, twiddles, mu);
}

void destroy_nttmpcuda() {
    /* skip */
}
