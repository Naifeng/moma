
/*
 * This code was generated by Spiral 8.5.1, www.spiral.net
 */

#include <stdint.h>
__device__ uint64_t P2[32768];
__device__ uint64_t P1[32768];

void init_nttmpcuda() {
    /* skip */
}

__global__ void ker_code0(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3069, a3070, a3071, a3072, a3073, a3074, a3095, a3096, 
            a3097, a3098, a3099, a3100, a3101, a3102, a3103, a3104, 
            a3105, a3106, a3108, a3109, a3110, a3112, a3113, a3114, 
            a3115, a3116, b204, b205, b206, b207, b208, b209, 
            c163, c164, i371, i372, i373;
    uint64_t a3079, a3080, a3081, a3082, a3083, a3088, a3089, d169, 
            d170, d171, d172, d173, d174, d175, d176, d177, 
            d178, d179, d180, m17, p29, p30, t707, t708, 
            t711, t712, t759, t760, t761, t762, t763, t764, 
            t765, t766, t767, t768, t769, t770, t771, t772, 
            t773, t774, t775, t776, t777, t778, t779, t780, 
            t781;
    uint128_t a3075, a3076, a3077, a3078, a3084, a3085, a3086, a3087, 
            a3090, a3091, a3092, c155, c156, c157, c158, c159, 
            c160, c161, c162, s267, s268, s269, s270, s271, 
            s272;
    for(int i29 = 0; i29 <= 127; i29++) {
        a3069 = (16384*blockIdx.x);
        a3070 = (64*i29);
        b204 = (a3069 + threadIdx.x);
        a3071 = (b204 + a3070);
        a3072 = (a3071 + 8192);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3073 = (2*a3072);
        a3074 = (a3073 + 1);
        a3075 = (((uint128_t ) twiddles[3])*((uint128_t ) X[a3074]));
        a3076 = (((uint128_t ) twiddles[3])*((uint128_t ) X[a3073]));
        a3077 = (((uint128_t ) twiddles[2])*((uint128_t ) X[a3074]));
        a3078 = (((uint128_t ) twiddles[2])*((uint128_t ) X[a3073]));
        c155 = (((uint128_t ) a3076) + ((uint128_t ) a3077));
        t759 = (a3075 >> 64);
        c156 = (((uint128_t ) c155) + ((uint128_t ) t759));
        t760 = (c156 >> 64);
        c157 = (((uint128_t ) a3078) + ((uint128_t ) t760));
        t761 = (c157 >> 64);
        t762 = ((uint64_t ) c157);
        t763 = ((uint64_t ) c156);
        t764 = ((uint64_t ) a3075);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p29 = (t763 >> 58);
        a3079 = ((uint64_t ) 1);
        a3080 = (a3079 << 58);
        m17 = (a3080 - 1);
        p30 = (((t761)&(m17)));
        a3081 = (p30 << 6);
        a3082 = (t762 >> 58);
        t765 = (((a3081)|(a3082)));
        a3083 = (t762 << 6);
        t766 = (((a3083)|(p29)));
        /* End of MPShiftRight3 */
        t711 = mu[0];
        t712 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3084 = (((uint128_t ) t766)*((uint128_t ) t712));
        a3085 = (((uint128_t ) t766)*((uint128_t ) t711));
        a3086 = (((uint128_t ) t765)*((uint128_t ) t712));
        a3087 = (((uint128_t ) t765)*((uint128_t ) t711));
        c158 = (((uint128_t ) a3085) + ((uint128_t ) a3086));
        t767 = (a3084 >> 64);
        c159 = (((uint128_t ) c158) + ((uint128_t ) t767));
        t768 = (c159 >> 64);
        c160 = (((uint128_t ) a3087) + ((uint128_t ) t768));
        t769 = (c160 >> 64);
        t770 = ((uint64_t ) c160);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t771 = (t769 >> 1);
        a3088 = (t769 << 63);
        a3089 = (t770 >> 1);
        t772 = (((a3088)|(a3089)));
        /* End of MPShiftRight2 */
        t707 = modulus[0];
        t708 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3090 = (((uint128_t ) t772)*((uint128_t ) t708));
        a3091 = (((uint128_t ) t772)*((uint128_t ) t707));
        a3092 = (((uint128_t ) t771)*((uint128_t ) t708));
        c161 = (((uint128_t ) a3091) + ((uint128_t ) a3092));
        t773 = (a3090 >> 64);
        c162 = (((uint128_t ) c161) + ((uint128_t ) t773));
        t774 = ((uint64_t ) c162);
        t775 = ((uint64_t ) a3090);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d169 = (t764 - t775);
        b205 = ((t764 < t775));
        d170 = (t763 - t774);
        d171 = (d170 - b205);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d172 = (d169 - t708);
        b206 = ((d169 < t708));
        d173 = (d171 - t707);
        d174 = (d173 - b206);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3095 = ((d171 < t707));
        a3096 = ((d171 == t707));
        a3097 = ((a3096) && (b206));
        i371 = ((a3095) || (a3097));
        t776 = ((i371) ? (d171) : (d174));
        t777 = ((i371) ? (d169) : (d172));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3098 = (128*i29);
        a3099 = (2*threadIdx.x);
        a3100 = (a3098 + a3099);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3101 = (2*a3071);
        a3102 = (a3101 + 1);
        s267 = (((uint128_t ) X[a3102]) + ((uint128_t ) t777));
        t778 = ((uint64_t ) s267);
        c163 = (s267 >> 64);
        s268 = (((uint128_t ) X[a3101]) + ((uint128_t ) t776));
        s269 = (((uint128_t ) s268) + ((uint128_t ) c163));
        t779 = ((uint64_t ) s269);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3103 = ((t707 < t779));
        a3104 = ((t707 == t779));
        a3105 = ((t708 < t778));
        a3106 = ((a3104) && (a3105));
        i372 = ((a3103) || (a3106));
        /* Begin of MPSubDDD 64 */
        d175 = (t778 - t708);
        b207 = ((t778 < t708));
        d176 = (t779 - t707);
        d177 = (d176 - b207);
        /* End of MPSubDDD 64 */
        a3108 = (2*a3100);
        P1[a3108] = ((i372) ? (d177) : (t779));
        a3109 = (a3108 + 1);
        P1[a3109] = ((i372) ? (d175) : (t778));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b208 = (a3099 + a3098);
        a3110 = (b208 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d178 = (X[a3102] - t777);
        b209 = ((X[a3102] < t777));
        d179 = (X[a3101] - t776);
        d180 = (d179 - b209);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s270 = (((uint128_t ) d178) + ((uint128_t ) t708));
        t780 = ((uint64_t ) s270);
        c164 = (s270 >> 64);
        s271 = (((uint128_t ) d180) + ((uint128_t ) t707));
        s272 = (((uint128_t ) s271) + ((uint128_t ) c164));
        t781 = ((uint64_t ) s272);
        /* MPLessThan 64 */
        a3112 = ((X[a3101] < t776));
        a3113 = ((X[a3101] == t776));
        a3114 = ((a3113) && (b209));
        i373 = ((a3112) || (a3114));
        a3115 = (2*a3110);
        P1[a3115] = ((i373) ? (t781) : (d180));
        a3116 = (a3115 + 1);
        P1[a3116] = ((i373) ? (t780) : (d178));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code1(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3117, a3118, a3119, a3120, a3121, a3122, a3123, a3124, 
            a3125, a3146, a3147, a3148, a3149, a3150, a3151, a3152, 
            a3153, a3154, a3155, a3156, a3157, a3159, a3160, a3161, 
            a3163, a3164, a3165, a3166, a3167, b210, b211, b212, 
            b213, b214, b215, c173, c174, i374, i375, i376;
    uint64_t a3130, a3131, a3132, a3133, a3134, a3139, a3140, d181, 
            d182, d183, d184, d185, d186, d187, d188, d189, 
            d190, d191, d192, m18, p31, p32, t675, t676, 
            t679, t680, t782, t783, t784, t785, t786, t787, 
            t788, t789, t790, t791, t792, t793, t794, t795, 
            t796, t797, t798, t799, t800, t801, t802, t803, 
            t804;
    uint128_t a3126, a3127, a3128, a3129, a3135, a3136, a3137, a3138, 
            a3141, a3142, a3143, c165, c166, c167, c168, c169, 
            c170, c171, c172, s273, s274, s275, s276, s277, 
            s278;
    for(int i27 = 0; i27 <= 127; i27++) {
        a3117 = (64*i27);
        a3118 = (a3117 + threadIdx.x);
        b210 = (threadIdx.x + a3117);
        a3119 = (b210 + 8192);
        a3120 = (a3119 % 2);
        a3121 = (2 + a3120);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3122 = (2*a3121);
        a3123 = (a3122 + 1);
        a3124 = (2*a3119);
        a3125 = (a3124 + 1);
        a3126 = (((uint128_t ) twiddles[a3123])*((uint128_t ) P1[a3125]));
        a3127 = (((uint128_t ) twiddles[a3123])*((uint128_t ) P1[a3124]));
        a3128 = (((uint128_t ) twiddles[a3122])*((uint128_t ) P1[a3125]));
        a3129 = (((uint128_t ) twiddles[a3122])*((uint128_t ) P1[a3124]));
        c165 = (((uint128_t ) a3127) + ((uint128_t ) a3128));
        t782 = (a3126 >> 64);
        c166 = (((uint128_t ) c165) + ((uint128_t ) t782));
        t783 = (c166 >> 64);
        c167 = (((uint128_t ) a3129) + ((uint128_t ) t783));
        t784 = (c167 >> 64);
        t785 = ((uint64_t ) c167);
        t786 = ((uint64_t ) c166);
        t787 = ((uint64_t ) a3126);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p31 = (t786 >> 58);
        a3130 = ((uint64_t ) 1);
        a3131 = (a3130 << 58);
        m18 = (a3131 - 1);
        p32 = (((t784)&(m18)));
        a3132 = (p32 << 6);
        a3133 = (t785 >> 58);
        t788 = (((a3132)|(a3133)));
        a3134 = (t785 << 6);
        t789 = (((a3134)|(p31)));
        /* End of MPShiftRight3 */
        t679 = mu[0];
        t680 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3135 = (((uint128_t ) t789)*((uint128_t ) t680));
        a3136 = (((uint128_t ) t789)*((uint128_t ) t679));
        a3137 = (((uint128_t ) t788)*((uint128_t ) t680));
        a3138 = (((uint128_t ) t788)*((uint128_t ) t679));
        c168 = (((uint128_t ) a3136) + ((uint128_t ) a3137));
        t790 = (a3135 >> 64);
        c169 = (((uint128_t ) c168) + ((uint128_t ) t790));
        t791 = (c169 >> 64);
        c170 = (((uint128_t ) a3138) + ((uint128_t ) t791));
        t792 = (c170 >> 64);
        t793 = ((uint64_t ) c170);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t794 = (t792 >> 1);
        a3139 = (t792 << 63);
        a3140 = (t793 >> 1);
        t795 = (((a3139)|(a3140)));
        /* End of MPShiftRight2 */
        t675 = modulus[0];
        t676 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3141 = (((uint128_t ) t795)*((uint128_t ) t676));
        a3142 = (((uint128_t ) t795)*((uint128_t ) t675));
        a3143 = (((uint128_t ) t794)*((uint128_t ) t676));
        c171 = (((uint128_t ) a3142) + ((uint128_t ) a3143));
        t796 = (a3141 >> 64);
        c172 = (((uint128_t ) c171) + ((uint128_t ) t796));
        t797 = ((uint64_t ) c172);
        t798 = ((uint64_t ) a3141);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d181 = (t787 - t798);
        b211 = ((t787 < t798));
        d182 = (t786 - t797);
        d183 = (d182 - b211);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d184 = (d181 - t676);
        b212 = ((d181 < t676));
        d185 = (d183 - t675);
        d186 = (d185 - b212);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3146 = ((d183 < t675));
        a3147 = ((d183 == t675));
        a3148 = ((a3147) && (b212));
        i374 = ((a3146) || (a3148));
        t799 = ((i374) ? (d183) : (d186));
        t800 = ((i374) ? (d181) : (d184));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3149 = (128*i27);
        a3150 = (2*threadIdx.x);
        a3151 = (a3149 + a3150);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3152 = (2*a3118);
        a3153 = (a3152 + 1);
        s273 = (((uint128_t ) P1[a3153]) + ((uint128_t ) t800));
        t801 = ((uint64_t ) s273);
        c173 = (s273 >> 64);
        s274 = (((uint128_t ) P1[a3152]) + ((uint128_t ) t799));
        s275 = (((uint128_t ) s274) + ((uint128_t ) c173));
        t802 = ((uint64_t ) s275);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3154 = ((t675 < t802));
        a3155 = ((t675 == t802));
        a3156 = ((t676 < t801));
        a3157 = ((a3155) && (a3156));
        i375 = ((a3154) || (a3157));
        /* Begin of MPSubDDD 64 */
        d187 = (t801 - t676);
        b213 = ((t801 < t676));
        d188 = (t802 - t675);
        d189 = (d188 - b213);
        /* End of MPSubDDD 64 */
        a3159 = (2*a3151);
        P2[a3159] = ((i375) ? (d189) : (t802));
        a3160 = (a3159 + 1);
        P2[a3160] = ((i375) ? (d187) : (t801));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b214 = (a3150 + a3149);
        a3161 = (b214 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d190 = (P1[a3153] - t800);
        b215 = ((P1[a3153] < t800));
        d191 = (P1[a3152] - t799);
        d192 = (d191 - b215);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s276 = (((uint128_t ) d190) + ((uint128_t ) t676));
        t803 = ((uint64_t ) s276);
        c174 = (s276 >> 64);
        s277 = (((uint128_t ) d192) + ((uint128_t ) t675));
        s278 = (((uint128_t ) s277) + ((uint128_t ) c174));
        t804 = ((uint64_t ) s278);
        /* MPLessThan 64 */
        a3163 = ((P1[a3152] < t799));
        a3164 = ((P1[a3152] == t799));
        a3165 = ((a3164) && (b215));
        i376 = ((a3163) || (a3165));
        a3166 = (2*a3161);
        P2[a3166] = ((i376) ? (t804) : (d192));
        a3167 = (a3166 + 1);
        P2[a3167] = ((i376) ? (t803) : (d190));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code2(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3168, a3169, a3170, a3171, a3172, a3173, a3174, a3175, 
            a3176, a3197, a3198, a3199, a3200, a3201, a3202, a3203, 
            a3204, a3205, a3206, a3207, a3208, a3210, a3211, a3212, 
            a3214, a3215, a3216, a3217, a3218, b216, b217, b218, 
            b219, b220, b221, c183, c184, i377, i378, i379;
    uint64_t a3181, a3182, a3183, a3184, a3185, a3190, a3191, d193, 
            d194, d195, d196, d197, d198, d199, d200, d201, 
            d202, d203, d204, m19, p33, p34, t643, t644, 
            t647, t648, t805, t806, t807, t808, t809, t810, 
            t811, t812, t813, t814, t815, t816, t817, t818, 
            t819, t820, t821, t822, t823, t824, t825, t826, 
            t827;
    uint128_t a3177, a3178, a3179, a3180, a3186, a3187, a3188, a3189, 
            a3192, a3193, a3194, c175, c176, c177, c178, c179, 
            c180, c181, c182, s279, s280, s281, s282, s283, 
            s284;
    for(int i25 = 0; i25 <= 127; i25++) {
        a3168 = (64*i25);
        a3169 = (a3168 + threadIdx.x);
        b216 = (threadIdx.x + a3168);
        a3170 = (b216 + 8192);
        a3171 = (a3170 % 4);
        a3172 = (4 + a3171);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3173 = (2*a3172);
        a3174 = (a3173 + 1);
        a3175 = (2*a3170);
        a3176 = (a3175 + 1);
        a3177 = (((uint128_t ) twiddles[a3174])*((uint128_t ) P2[a3176]));
        a3178 = (((uint128_t ) twiddles[a3174])*((uint128_t ) P2[a3175]));
        a3179 = (((uint128_t ) twiddles[a3173])*((uint128_t ) P2[a3176]));
        a3180 = (((uint128_t ) twiddles[a3173])*((uint128_t ) P2[a3175]));
        c175 = (((uint128_t ) a3178) + ((uint128_t ) a3179));
        t805 = (a3177 >> 64);
        c176 = (((uint128_t ) c175) + ((uint128_t ) t805));
        t806 = (c176 >> 64);
        c177 = (((uint128_t ) a3180) + ((uint128_t ) t806));
        t807 = (c177 >> 64);
        t808 = ((uint64_t ) c177);
        t809 = ((uint64_t ) c176);
        t810 = ((uint64_t ) a3177);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p33 = (t809 >> 58);
        a3181 = ((uint64_t ) 1);
        a3182 = (a3181 << 58);
        m19 = (a3182 - 1);
        p34 = (((t807)&(m19)));
        a3183 = (p34 << 6);
        a3184 = (t808 >> 58);
        t811 = (((a3183)|(a3184)));
        a3185 = (t808 << 6);
        t812 = (((a3185)|(p33)));
        /* End of MPShiftRight3 */
        t647 = mu[0];
        t648 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3186 = (((uint128_t ) t812)*((uint128_t ) t648));
        a3187 = (((uint128_t ) t812)*((uint128_t ) t647));
        a3188 = (((uint128_t ) t811)*((uint128_t ) t648));
        a3189 = (((uint128_t ) t811)*((uint128_t ) t647));
        c178 = (((uint128_t ) a3187) + ((uint128_t ) a3188));
        t813 = (a3186 >> 64);
        c179 = (((uint128_t ) c178) + ((uint128_t ) t813));
        t814 = (c179 >> 64);
        c180 = (((uint128_t ) a3189) + ((uint128_t ) t814));
        t815 = (c180 >> 64);
        t816 = ((uint64_t ) c180);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t817 = (t815 >> 1);
        a3190 = (t815 << 63);
        a3191 = (t816 >> 1);
        t818 = (((a3190)|(a3191)));
        /* End of MPShiftRight2 */
        t643 = modulus[0];
        t644 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3192 = (((uint128_t ) t818)*((uint128_t ) t644));
        a3193 = (((uint128_t ) t818)*((uint128_t ) t643));
        a3194 = (((uint128_t ) t817)*((uint128_t ) t644));
        c181 = (((uint128_t ) a3193) + ((uint128_t ) a3194));
        t819 = (a3192 >> 64);
        c182 = (((uint128_t ) c181) + ((uint128_t ) t819));
        t820 = ((uint64_t ) c182);
        t821 = ((uint64_t ) a3192);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d193 = (t810 - t821);
        b217 = ((t810 < t821));
        d194 = (t809 - t820);
        d195 = (d194 - b217);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d196 = (d193 - t644);
        b218 = ((d193 < t644));
        d197 = (d195 - t643);
        d198 = (d197 - b218);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3197 = ((d195 < t643));
        a3198 = ((d195 == t643));
        a3199 = ((a3198) && (b218));
        i377 = ((a3197) || (a3199));
        t822 = ((i377) ? (d195) : (d198));
        t823 = ((i377) ? (d193) : (d196));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3200 = (128*i25);
        a3201 = (2*threadIdx.x);
        a3202 = (a3200 + a3201);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3203 = (2*a3169);
        a3204 = (a3203 + 1);
        s279 = (((uint128_t ) P2[a3204]) + ((uint128_t ) t823));
        t824 = ((uint64_t ) s279);
        c183 = (s279 >> 64);
        s280 = (((uint128_t ) P2[a3203]) + ((uint128_t ) t822));
        s281 = (((uint128_t ) s280) + ((uint128_t ) c183));
        t825 = ((uint64_t ) s281);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3205 = ((t643 < t825));
        a3206 = ((t643 == t825));
        a3207 = ((t644 < t824));
        a3208 = ((a3206) && (a3207));
        i378 = ((a3205) || (a3208));
        /* Begin of MPSubDDD 64 */
        d199 = (t824 - t644);
        b219 = ((t824 < t644));
        d200 = (t825 - t643);
        d201 = (d200 - b219);
        /* End of MPSubDDD 64 */
        a3210 = (2*a3202);
        P1[a3210] = ((i378) ? (d201) : (t825));
        a3211 = (a3210 + 1);
        P1[a3211] = ((i378) ? (d199) : (t824));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b220 = (a3201 + a3200);
        a3212 = (b220 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d202 = (P2[a3204] - t823);
        b221 = ((P2[a3204] < t823));
        d203 = (P2[a3203] - t822);
        d204 = (d203 - b221);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s282 = (((uint128_t ) d202) + ((uint128_t ) t644));
        t826 = ((uint64_t ) s282);
        c184 = (s282 >> 64);
        s283 = (((uint128_t ) d204) + ((uint128_t ) t643));
        s284 = (((uint128_t ) s283) + ((uint128_t ) c184));
        t827 = ((uint64_t ) s284);
        /* MPLessThan 64 */
        a3214 = ((P2[a3203] < t822));
        a3215 = ((P2[a3203] == t822));
        a3216 = ((a3215) && (b221));
        i379 = ((a3214) || (a3216));
        a3217 = (2*a3212);
        P1[a3217] = ((i379) ? (t827) : (d204));
        a3218 = (a3217 + 1);
        P1[a3218] = ((i379) ? (t826) : (d202));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code3(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3219, a3220, a3221, a3222, a3223, a3224, a3225, a3226, 
            a3227, a3248, a3249, a3250, a3251, a3252, a3253, a3254, 
            a3255, a3256, a3257, a3258, a3259, a3261, a3262, a3263, 
            a3265, a3266, a3267, a3268, a3269, b222, b223, b224, 
            b225, b226, b227, c193, c194, i380, i381, i382;
    uint64_t a3232, a3233, a3234, a3235, a3236, a3241, a3242, d205, 
            d206, d207, d208, d209, d210, d211, d212, d213, 
            d214, d215, d216, m20, p35, p36, t611, t612, 
            t615, t616, t828, t829, t830, t831, t832, t833, 
            t834, t835, t836, t837, t838, t839, t840, t841, 
            t842, t843, t844, t845, t846, t847, t848, t849, 
            t850;
    uint128_t a3228, a3229, a3230, a3231, a3237, a3238, a3239, a3240, 
            a3243, a3244, a3245, c185, c186, c187, c188, c189, 
            c190, c191, c192, s285, s286, s287, s288, s289, 
            s290;
    for(int i23 = 0; i23 <= 127; i23++) {
        a3219 = (64*i23);
        a3220 = (a3219 + threadIdx.x);
        b222 = (threadIdx.x + a3219);
        a3221 = (b222 + 8192);
        a3222 = (a3221 % 8);
        a3223 = (8 + a3222);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3224 = (2*a3223);
        a3225 = (a3224 + 1);
        a3226 = (2*a3221);
        a3227 = (a3226 + 1);
        a3228 = (((uint128_t ) twiddles[a3225])*((uint128_t ) P1[a3227]));
        a3229 = (((uint128_t ) twiddles[a3225])*((uint128_t ) P1[a3226]));
        a3230 = (((uint128_t ) twiddles[a3224])*((uint128_t ) P1[a3227]));
        a3231 = (((uint128_t ) twiddles[a3224])*((uint128_t ) P1[a3226]));
        c185 = (((uint128_t ) a3229) + ((uint128_t ) a3230));
        t828 = (a3228 >> 64);
        c186 = (((uint128_t ) c185) + ((uint128_t ) t828));
        t829 = (c186 >> 64);
        c187 = (((uint128_t ) a3231) + ((uint128_t ) t829));
        t830 = (c187 >> 64);
        t831 = ((uint64_t ) c187);
        t832 = ((uint64_t ) c186);
        t833 = ((uint64_t ) a3228);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p35 = (t832 >> 58);
        a3232 = ((uint64_t ) 1);
        a3233 = (a3232 << 58);
        m20 = (a3233 - 1);
        p36 = (((t830)&(m20)));
        a3234 = (p36 << 6);
        a3235 = (t831 >> 58);
        t834 = (((a3234)|(a3235)));
        a3236 = (t831 << 6);
        t835 = (((a3236)|(p35)));
        /* End of MPShiftRight3 */
        t615 = mu[0];
        t616 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3237 = (((uint128_t ) t835)*((uint128_t ) t616));
        a3238 = (((uint128_t ) t835)*((uint128_t ) t615));
        a3239 = (((uint128_t ) t834)*((uint128_t ) t616));
        a3240 = (((uint128_t ) t834)*((uint128_t ) t615));
        c188 = (((uint128_t ) a3238) + ((uint128_t ) a3239));
        t836 = (a3237 >> 64);
        c189 = (((uint128_t ) c188) + ((uint128_t ) t836));
        t837 = (c189 >> 64);
        c190 = (((uint128_t ) a3240) + ((uint128_t ) t837));
        t838 = (c190 >> 64);
        t839 = ((uint64_t ) c190);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t840 = (t838 >> 1);
        a3241 = (t838 << 63);
        a3242 = (t839 >> 1);
        t841 = (((a3241)|(a3242)));
        /* End of MPShiftRight2 */
        t611 = modulus[0];
        t612 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3243 = (((uint128_t ) t841)*((uint128_t ) t612));
        a3244 = (((uint128_t ) t841)*((uint128_t ) t611));
        a3245 = (((uint128_t ) t840)*((uint128_t ) t612));
        c191 = (((uint128_t ) a3244) + ((uint128_t ) a3245));
        t842 = (a3243 >> 64);
        c192 = (((uint128_t ) c191) + ((uint128_t ) t842));
        t843 = ((uint64_t ) c192);
        t844 = ((uint64_t ) a3243);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d205 = (t833 - t844);
        b223 = ((t833 < t844));
        d206 = (t832 - t843);
        d207 = (d206 - b223);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d208 = (d205 - t612);
        b224 = ((d205 < t612));
        d209 = (d207 - t611);
        d210 = (d209 - b224);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3248 = ((d207 < t611));
        a3249 = ((d207 == t611));
        a3250 = ((a3249) && (b224));
        i380 = ((a3248) || (a3250));
        t845 = ((i380) ? (d207) : (d210));
        t846 = ((i380) ? (d205) : (d208));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3251 = (128*i23);
        a3252 = (2*threadIdx.x);
        a3253 = (a3251 + a3252);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3254 = (2*a3220);
        a3255 = (a3254 + 1);
        s285 = (((uint128_t ) P1[a3255]) + ((uint128_t ) t846));
        t847 = ((uint64_t ) s285);
        c193 = (s285 >> 64);
        s286 = (((uint128_t ) P1[a3254]) + ((uint128_t ) t845));
        s287 = (((uint128_t ) s286) + ((uint128_t ) c193));
        t848 = ((uint64_t ) s287);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3256 = ((t611 < t848));
        a3257 = ((t611 == t848));
        a3258 = ((t612 < t847));
        a3259 = ((a3257) && (a3258));
        i381 = ((a3256) || (a3259));
        /* Begin of MPSubDDD 64 */
        d211 = (t847 - t612);
        b225 = ((t847 < t612));
        d212 = (t848 - t611);
        d213 = (d212 - b225);
        /* End of MPSubDDD 64 */
        a3261 = (2*a3253);
        P2[a3261] = ((i381) ? (d213) : (t848));
        a3262 = (a3261 + 1);
        P2[a3262] = ((i381) ? (d211) : (t847));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b226 = (a3252 + a3251);
        a3263 = (b226 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d214 = (P1[a3255] - t846);
        b227 = ((P1[a3255] < t846));
        d215 = (P1[a3254] - t845);
        d216 = (d215 - b227);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s288 = (((uint128_t ) d214) + ((uint128_t ) t612));
        t849 = ((uint64_t ) s288);
        c194 = (s288 >> 64);
        s289 = (((uint128_t ) d216) + ((uint128_t ) t611));
        s290 = (((uint128_t ) s289) + ((uint128_t ) c194));
        t850 = ((uint64_t ) s290);
        /* MPLessThan 64 */
        a3265 = ((P1[a3254] < t845));
        a3266 = ((P1[a3254] == t845));
        a3267 = ((a3266) && (b227));
        i382 = ((a3265) || (a3267));
        a3268 = (2*a3263);
        P2[a3268] = ((i382) ? (t850) : (d216));
        a3269 = (a3268 + 1);
        P2[a3269] = ((i382) ? (t849) : (d214));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code4(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3270, a3271, a3272, a3273, a3274, a3275, a3276, a3277, 
            a3278, a3299, a3300, a3301, a3302, a3303, a3304, a3305, 
            a3306, a3307, a3308, a3309, a3310, a3312, a3313, a3314, 
            a3316, a3317, a3318, a3319, a3320, b228, b229, b230, 
            b231, b232, b233, c203, c204, i383, i384, i385;
    uint64_t a3283, a3284, a3285, a3286, a3287, a3292, a3293, d217, 
            d218, d219, d220, d221, d222, d223, d224, d225, 
            d226, d227, d228, m21, p37, p38, t579, t580, 
            t583, t584, t851, t852, t853, t854, t855, t856, 
            t857, t858, t859, t860, t861, t862, t863, t864, 
            t865, t866, t867, t868, t869, t870, t871, t872, 
            t873;
    uint128_t a3279, a3280, a3281, a3282, a3288, a3289, a3290, a3291, 
            a3294, a3295, a3296, c195, c196, c197, c198, c199, 
            c200, c201, c202, s291, s292, s293, s294, s295, 
            s296;
    for(int i21 = 0; i21 <= 127; i21++) {
        a3270 = (64*i21);
        a3271 = (a3270 + threadIdx.x);
        b228 = (threadIdx.x + a3270);
        a3272 = (b228 + 8192);
        a3273 = (a3272 % 16);
        a3274 = (16 + a3273);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3275 = (2*a3274);
        a3276 = (a3275 + 1);
        a3277 = (2*a3272);
        a3278 = (a3277 + 1);
        a3279 = (((uint128_t ) twiddles[a3276])*((uint128_t ) P2[a3278]));
        a3280 = (((uint128_t ) twiddles[a3276])*((uint128_t ) P2[a3277]));
        a3281 = (((uint128_t ) twiddles[a3275])*((uint128_t ) P2[a3278]));
        a3282 = (((uint128_t ) twiddles[a3275])*((uint128_t ) P2[a3277]));
        c195 = (((uint128_t ) a3280) + ((uint128_t ) a3281));
        t851 = (a3279 >> 64);
        c196 = (((uint128_t ) c195) + ((uint128_t ) t851));
        t852 = (c196 >> 64);
        c197 = (((uint128_t ) a3282) + ((uint128_t ) t852));
        t853 = (c197 >> 64);
        t854 = ((uint64_t ) c197);
        t855 = ((uint64_t ) c196);
        t856 = ((uint64_t ) a3279);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p37 = (t855 >> 58);
        a3283 = ((uint64_t ) 1);
        a3284 = (a3283 << 58);
        m21 = (a3284 - 1);
        p38 = (((t853)&(m21)));
        a3285 = (p38 << 6);
        a3286 = (t854 >> 58);
        t857 = (((a3285)|(a3286)));
        a3287 = (t854 << 6);
        t858 = (((a3287)|(p37)));
        /* End of MPShiftRight3 */
        t583 = mu[0];
        t584 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3288 = (((uint128_t ) t858)*((uint128_t ) t584));
        a3289 = (((uint128_t ) t858)*((uint128_t ) t583));
        a3290 = (((uint128_t ) t857)*((uint128_t ) t584));
        a3291 = (((uint128_t ) t857)*((uint128_t ) t583));
        c198 = (((uint128_t ) a3289) + ((uint128_t ) a3290));
        t859 = (a3288 >> 64);
        c199 = (((uint128_t ) c198) + ((uint128_t ) t859));
        t860 = (c199 >> 64);
        c200 = (((uint128_t ) a3291) + ((uint128_t ) t860));
        t861 = (c200 >> 64);
        t862 = ((uint64_t ) c200);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t863 = (t861 >> 1);
        a3292 = (t861 << 63);
        a3293 = (t862 >> 1);
        t864 = (((a3292)|(a3293)));
        /* End of MPShiftRight2 */
        t579 = modulus[0];
        t580 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3294 = (((uint128_t ) t864)*((uint128_t ) t580));
        a3295 = (((uint128_t ) t864)*((uint128_t ) t579));
        a3296 = (((uint128_t ) t863)*((uint128_t ) t580));
        c201 = (((uint128_t ) a3295) + ((uint128_t ) a3296));
        t865 = (a3294 >> 64);
        c202 = (((uint128_t ) c201) + ((uint128_t ) t865));
        t866 = ((uint64_t ) c202);
        t867 = ((uint64_t ) a3294);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d217 = (t856 - t867);
        b229 = ((t856 < t867));
        d218 = (t855 - t866);
        d219 = (d218 - b229);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d220 = (d217 - t580);
        b230 = ((d217 < t580));
        d221 = (d219 - t579);
        d222 = (d221 - b230);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3299 = ((d219 < t579));
        a3300 = ((d219 == t579));
        a3301 = ((a3300) && (b230));
        i383 = ((a3299) || (a3301));
        t868 = ((i383) ? (d219) : (d222));
        t869 = ((i383) ? (d217) : (d220));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3302 = (128*i21);
        a3303 = (2*threadIdx.x);
        a3304 = (a3302 + a3303);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3305 = (2*a3271);
        a3306 = (a3305 + 1);
        s291 = (((uint128_t ) P2[a3306]) + ((uint128_t ) t869));
        t870 = ((uint64_t ) s291);
        c203 = (s291 >> 64);
        s292 = (((uint128_t ) P2[a3305]) + ((uint128_t ) t868));
        s293 = (((uint128_t ) s292) + ((uint128_t ) c203));
        t871 = ((uint64_t ) s293);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3307 = ((t579 < t871));
        a3308 = ((t579 == t871));
        a3309 = ((t580 < t870));
        a3310 = ((a3308) && (a3309));
        i384 = ((a3307) || (a3310));
        /* Begin of MPSubDDD 64 */
        d223 = (t870 - t580);
        b231 = ((t870 < t580));
        d224 = (t871 - t579);
        d225 = (d224 - b231);
        /* End of MPSubDDD 64 */
        a3312 = (2*a3304);
        P1[a3312] = ((i384) ? (d225) : (t871));
        a3313 = (a3312 + 1);
        P1[a3313] = ((i384) ? (d223) : (t870));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b232 = (a3303 + a3302);
        a3314 = (b232 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d226 = (P2[a3306] - t869);
        b233 = ((P2[a3306] < t869));
        d227 = (P2[a3305] - t868);
        d228 = (d227 - b233);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s294 = (((uint128_t ) d226) + ((uint128_t ) t580));
        t872 = ((uint64_t ) s294);
        c204 = (s294 >> 64);
        s295 = (((uint128_t ) d228) + ((uint128_t ) t579));
        s296 = (((uint128_t ) s295) + ((uint128_t ) c204));
        t873 = ((uint64_t ) s296);
        /* MPLessThan 64 */
        a3316 = ((P2[a3305] < t868));
        a3317 = ((P2[a3305] == t868));
        a3318 = ((a3317) && (b233));
        i385 = ((a3316) || (a3318));
        a3319 = (2*a3314);
        P1[a3319] = ((i385) ? (t873) : (d228));
        a3320 = (a3319 + 1);
        P1[a3320] = ((i385) ? (t872) : (d226));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code5(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3321, a3322, a3323, a3324, a3325, a3326, a3327, a3328, 
            a3329, a3350, a3351, a3352, a3353, a3354, a3355, a3356, 
            a3357, a3358, a3359, a3360, a3361, a3363, a3364, a3365, 
            a3367, a3368, a3369, a3370, a3371, b234, b235, b236, 
            b237, b238, b239, c213, c214, i387, i388, i389;
    uint64_t a3334, a3335, a3336, a3337, a3338, a3343, a3344, d229, 
            d230, d231, d232, d233, d234, d235, d236, d237, 
            d238, d239, d240, m22, p39, p40, t547, t548, 
            t551, t552, t874, t875, t876, t877, t878, t879, 
            t880, t881, t882, t883, t884, t885, t886, t887, 
            t888, t889, t890, t891, t892, t893, t894, t895, 
            t896;
    uint128_t a3330, a3331, a3332, a3333, a3339, a3340, a3341, a3342, 
            a3345, a3346, a3347, c205, c206, c207, c208, c209, 
            c210, c211, c212, s297, s298, s299, s300, s301, 
            s302;
    for(int i19 = 0; i19 <= 127; i19++) {
        a3321 = (64*i19);
        a3322 = (a3321 + threadIdx.x);
        b234 = (threadIdx.x + a3321);
        a3323 = (b234 + 8192);
        a3324 = (a3323 % 32);
        a3325 = (32 + a3324);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3326 = (2*a3325);
        a3327 = (a3326 + 1);
        a3328 = (2*a3323);
        a3329 = (a3328 + 1);
        a3330 = (((uint128_t ) twiddles[a3327])*((uint128_t ) P1[a3329]));
        a3331 = (((uint128_t ) twiddles[a3327])*((uint128_t ) P1[a3328]));
        a3332 = (((uint128_t ) twiddles[a3326])*((uint128_t ) P1[a3329]));
        a3333 = (((uint128_t ) twiddles[a3326])*((uint128_t ) P1[a3328]));
        c205 = (((uint128_t ) a3331) + ((uint128_t ) a3332));
        t874 = (a3330 >> 64);
        c206 = (((uint128_t ) c205) + ((uint128_t ) t874));
        t875 = (c206 >> 64);
        c207 = (((uint128_t ) a3333) + ((uint128_t ) t875));
        t876 = (c207 >> 64);
        t877 = ((uint64_t ) c207);
        t878 = ((uint64_t ) c206);
        t879 = ((uint64_t ) a3330);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p39 = (t878 >> 58);
        a3334 = ((uint64_t ) 1);
        a3335 = (a3334 << 58);
        m22 = (a3335 - 1);
        p40 = (((t876)&(m22)));
        a3336 = (p40 << 6);
        a3337 = (t877 >> 58);
        t880 = (((a3336)|(a3337)));
        a3338 = (t877 << 6);
        t881 = (((a3338)|(p39)));
        /* End of MPShiftRight3 */
        t551 = mu[0];
        t552 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3339 = (((uint128_t ) t881)*((uint128_t ) t552));
        a3340 = (((uint128_t ) t881)*((uint128_t ) t551));
        a3341 = (((uint128_t ) t880)*((uint128_t ) t552));
        a3342 = (((uint128_t ) t880)*((uint128_t ) t551));
        c208 = (((uint128_t ) a3340) + ((uint128_t ) a3341));
        t882 = (a3339 >> 64);
        c209 = (((uint128_t ) c208) + ((uint128_t ) t882));
        t883 = (c209 >> 64);
        c210 = (((uint128_t ) a3342) + ((uint128_t ) t883));
        t884 = (c210 >> 64);
        t885 = ((uint64_t ) c210);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t886 = (t884 >> 1);
        a3343 = (t884 << 63);
        a3344 = (t885 >> 1);
        t887 = (((a3343)|(a3344)));
        /* End of MPShiftRight2 */
        t547 = modulus[0];
        t548 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3345 = (((uint128_t ) t887)*((uint128_t ) t548));
        a3346 = (((uint128_t ) t887)*((uint128_t ) t547));
        a3347 = (((uint128_t ) t886)*((uint128_t ) t548));
        c211 = (((uint128_t ) a3346) + ((uint128_t ) a3347));
        t888 = (a3345 >> 64);
        c212 = (((uint128_t ) c211) + ((uint128_t ) t888));
        t889 = ((uint64_t ) c212);
        t890 = ((uint64_t ) a3345);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d229 = (t879 - t890);
        b235 = ((t879 < t890));
        d230 = (t878 - t889);
        d231 = (d230 - b235);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d232 = (d229 - t548);
        b236 = ((d229 < t548));
        d233 = (d231 - t547);
        d234 = (d233 - b236);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3350 = ((d231 < t547));
        a3351 = ((d231 == t547));
        a3352 = ((a3351) && (b236));
        i387 = ((a3350) || (a3352));
        t891 = ((i387) ? (d231) : (d234));
        t892 = ((i387) ? (d229) : (d232));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3353 = (128*i19);
        a3354 = (2*threadIdx.x);
        a3355 = (a3353 + a3354);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3356 = (2*a3322);
        a3357 = (a3356 + 1);
        s297 = (((uint128_t ) P1[a3357]) + ((uint128_t ) t892));
        t893 = ((uint64_t ) s297);
        c213 = (s297 >> 64);
        s298 = (((uint128_t ) P1[a3356]) + ((uint128_t ) t891));
        s299 = (((uint128_t ) s298) + ((uint128_t ) c213));
        t894 = ((uint64_t ) s299);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3358 = ((t547 < t894));
        a3359 = ((t547 == t894));
        a3360 = ((t548 < t893));
        a3361 = ((a3359) && (a3360));
        i388 = ((a3358) || (a3361));
        /* Begin of MPSubDDD 64 */
        d235 = (t893 - t548);
        b237 = ((t893 < t548));
        d236 = (t894 - t547);
        d237 = (d236 - b237);
        /* End of MPSubDDD 64 */
        a3363 = (2*a3355);
        P2[a3363] = ((i388) ? (d237) : (t894));
        a3364 = (a3363 + 1);
        P2[a3364] = ((i388) ? (d235) : (t893));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b238 = (a3354 + a3353);
        a3365 = (b238 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d238 = (P1[a3357] - t892);
        b239 = ((P1[a3357] < t892));
        d239 = (P1[a3356] - t891);
        d240 = (d239 - b239);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s300 = (((uint128_t ) d238) + ((uint128_t ) t548));
        t895 = ((uint64_t ) s300);
        c214 = (s300 >> 64);
        s301 = (((uint128_t ) d240) + ((uint128_t ) t547));
        s302 = (((uint128_t ) s301) + ((uint128_t ) c214));
        t896 = ((uint64_t ) s302);
        /* MPLessThan 64 */
        a3367 = ((P1[a3356] < t891));
        a3368 = ((P1[a3356] == t891));
        a3369 = ((a3368) && (b239));
        i389 = ((a3367) || (a3369));
        a3370 = (2*a3365);
        P2[a3370] = ((i389) ? (t896) : (d240));
        a3371 = (a3370 + 1);
        P2[a3371] = ((i389) ? (t895) : (d238));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code6(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3372, a3373, a3374, a3375, a3376, a3377, a3378, a3379, 
            a3380, a3401, a3402, a3403, a3404, a3405, a3406, a3407, 
            a3408, a3409, a3410, a3411, a3412, a3414, a3415, a3416, 
            a3418, a3419, a3420, a3421, a3422, b240, b241, b242, 
            b243, b244, b245, c223, c224, i390, i391, i392;
    uint64_t a3385, a3386, a3387, a3388, a3389, a3394, a3395, d241, 
            d242, d243, d244, d245, d246, d247, d248, d249, 
            d250, d251, d252, m23, p41, p42, t515, t516, 
            t519, t520, t897, t898, t899, t900, t901, t902, 
            t903, t904, t905, t906, t907, t908, t909, t910, 
            t911, t912, t913, t914, t915, t916, t917, t918, 
            t919;
    uint128_t a3381, a3382, a3383, a3384, a3390, a3391, a3392, a3393, 
            a3396, a3397, a3398, c215, c216, c217, c218, c219, 
            c220, c221, c222, s303, s304, s305, s306, s307, 
            s308;
    for(int i17 = 0; i17 <= 127; i17++) {
        a3372 = (64*i17);
        a3373 = (a3372 + threadIdx.x);
        b240 = (threadIdx.x + a3372);
        a3374 = (b240 + 8192);
        a3375 = (a3374 % 64);
        a3376 = (64 + a3375);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3377 = (2*a3376);
        a3378 = (a3377 + 1);
        a3379 = (2*a3374);
        a3380 = (a3379 + 1);
        a3381 = (((uint128_t ) twiddles[a3378])*((uint128_t ) P2[a3380]));
        a3382 = (((uint128_t ) twiddles[a3378])*((uint128_t ) P2[a3379]));
        a3383 = (((uint128_t ) twiddles[a3377])*((uint128_t ) P2[a3380]));
        a3384 = (((uint128_t ) twiddles[a3377])*((uint128_t ) P2[a3379]));
        c215 = (((uint128_t ) a3382) + ((uint128_t ) a3383));
        t897 = (a3381 >> 64);
        c216 = (((uint128_t ) c215) + ((uint128_t ) t897));
        t898 = (c216 >> 64);
        c217 = (((uint128_t ) a3384) + ((uint128_t ) t898));
        t899 = (c217 >> 64);
        t900 = ((uint64_t ) c217);
        t901 = ((uint64_t ) c216);
        t902 = ((uint64_t ) a3381);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p41 = (t901 >> 58);
        a3385 = ((uint64_t ) 1);
        a3386 = (a3385 << 58);
        m23 = (a3386 - 1);
        p42 = (((t899)&(m23)));
        a3387 = (p42 << 6);
        a3388 = (t900 >> 58);
        t903 = (((a3387)|(a3388)));
        a3389 = (t900 << 6);
        t904 = (((a3389)|(p41)));
        /* End of MPShiftRight3 */
        t519 = mu[0];
        t520 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3390 = (((uint128_t ) t904)*((uint128_t ) t520));
        a3391 = (((uint128_t ) t904)*((uint128_t ) t519));
        a3392 = (((uint128_t ) t903)*((uint128_t ) t520));
        a3393 = (((uint128_t ) t903)*((uint128_t ) t519));
        c218 = (((uint128_t ) a3391) + ((uint128_t ) a3392));
        t905 = (a3390 >> 64);
        c219 = (((uint128_t ) c218) + ((uint128_t ) t905));
        t906 = (c219 >> 64);
        c220 = (((uint128_t ) a3393) + ((uint128_t ) t906));
        t907 = (c220 >> 64);
        t908 = ((uint64_t ) c220);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t909 = (t907 >> 1);
        a3394 = (t907 << 63);
        a3395 = (t908 >> 1);
        t910 = (((a3394)|(a3395)));
        /* End of MPShiftRight2 */
        t515 = modulus[0];
        t516 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3396 = (((uint128_t ) t910)*((uint128_t ) t516));
        a3397 = (((uint128_t ) t910)*((uint128_t ) t515));
        a3398 = (((uint128_t ) t909)*((uint128_t ) t516));
        c221 = (((uint128_t ) a3397) + ((uint128_t ) a3398));
        t911 = (a3396 >> 64);
        c222 = (((uint128_t ) c221) + ((uint128_t ) t911));
        t912 = ((uint64_t ) c222);
        t913 = ((uint64_t ) a3396);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d241 = (t902 - t913);
        b241 = ((t902 < t913));
        d242 = (t901 - t912);
        d243 = (d242 - b241);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d244 = (d241 - t516);
        b242 = ((d241 < t516));
        d245 = (d243 - t515);
        d246 = (d245 - b242);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3401 = ((d243 < t515));
        a3402 = ((d243 == t515));
        a3403 = ((a3402) && (b242));
        i390 = ((a3401) || (a3403));
        t914 = ((i390) ? (d243) : (d246));
        t915 = ((i390) ? (d241) : (d244));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3404 = (128*i17);
        a3405 = (2*threadIdx.x);
        a3406 = (a3404 + a3405);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3407 = (2*a3373);
        a3408 = (a3407 + 1);
        s303 = (((uint128_t ) P2[a3408]) + ((uint128_t ) t915));
        t916 = ((uint64_t ) s303);
        c223 = (s303 >> 64);
        s304 = (((uint128_t ) P2[a3407]) + ((uint128_t ) t914));
        s305 = (((uint128_t ) s304) + ((uint128_t ) c223));
        t917 = ((uint64_t ) s305);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3409 = ((t515 < t917));
        a3410 = ((t515 == t917));
        a3411 = ((t516 < t916));
        a3412 = ((a3410) && (a3411));
        i391 = ((a3409) || (a3412));
        /* Begin of MPSubDDD 64 */
        d247 = (t916 - t516);
        b243 = ((t916 < t516));
        d248 = (t917 - t515);
        d249 = (d248 - b243);
        /* End of MPSubDDD 64 */
        a3414 = (2*a3406);
        P1[a3414] = ((i391) ? (d249) : (t917));
        a3415 = (a3414 + 1);
        P1[a3415] = ((i391) ? (d247) : (t916));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b244 = (a3405 + a3404);
        a3416 = (b244 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d250 = (P2[a3408] - t915);
        b245 = ((P2[a3408] < t915));
        d251 = (P2[a3407] - t914);
        d252 = (d251 - b245);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s306 = (((uint128_t ) d250) + ((uint128_t ) t516));
        t918 = ((uint64_t ) s306);
        c224 = (s306 >> 64);
        s307 = (((uint128_t ) d252) + ((uint128_t ) t515));
        s308 = (((uint128_t ) s307) + ((uint128_t ) c224));
        t919 = ((uint64_t ) s308);
        /* MPLessThan 64 */
        a3418 = ((P2[a3407] < t914));
        a3419 = ((P2[a3407] == t914));
        a3420 = ((a3419) && (b245));
        i392 = ((a3418) || (a3420));
        a3421 = (2*a3416);
        P1[a3421] = ((i392) ? (t919) : (d252));
        a3422 = (a3421 + 1);
        P1[a3422] = ((i392) ? (t918) : (d250));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code7(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3423, a3424, a3425, a3426, a3427, a3428, a3429, a3430, 
            a3431, a3452, a3453, a3454, a3455, a3456, a3457, a3458, 
            a3459, a3460, a3461, a3462, a3463, a3465, a3466, a3467, 
            a3469, a3470, a3471, a3472, a3473, b246, b247, b248, 
            b249, b250, b251, c233, c234, i393, i394, i395;
    uint64_t a3436, a3437, a3438, a3439, a3440, a3445, a3446, d253, 
            d254, d255, d256, d257, d258, d259, d260, d261, 
            d262, d263, d264, m24, p43, p44, t483, t484, 
            t487, t488, t920, t921, t922, t923, t924, t925, 
            t926, t927, t928, t929, t930, t931, t932, t933, 
            t934, t935, t936, t937, t938, t939, t940, t941, 
            t942;
    uint128_t a3432, a3433, a3434, a3435, a3441, a3442, a3443, a3444, 
            a3447, a3448, a3449, c225, c226, c227, c228, c229, 
            c230, c231, c232, s309, s310, s311, s312, s313, 
            s314;
    for(int i15 = 0; i15 <= 127; i15++) {
        a3423 = (64*i15);
        a3424 = (a3423 + threadIdx.x);
        b246 = (threadIdx.x + a3423);
        a3425 = (b246 + 8192);
        a3426 = (a3425 % 128);
        a3427 = (128 + a3426);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3428 = (2*a3427);
        a3429 = (a3428 + 1);
        a3430 = (2*a3425);
        a3431 = (a3430 + 1);
        a3432 = (((uint128_t ) twiddles[a3429])*((uint128_t ) P1[a3431]));
        a3433 = (((uint128_t ) twiddles[a3429])*((uint128_t ) P1[a3430]));
        a3434 = (((uint128_t ) twiddles[a3428])*((uint128_t ) P1[a3431]));
        a3435 = (((uint128_t ) twiddles[a3428])*((uint128_t ) P1[a3430]));
        c225 = (((uint128_t ) a3433) + ((uint128_t ) a3434));
        t920 = (a3432 >> 64);
        c226 = (((uint128_t ) c225) + ((uint128_t ) t920));
        t921 = (c226 >> 64);
        c227 = (((uint128_t ) a3435) + ((uint128_t ) t921));
        t922 = (c227 >> 64);
        t923 = ((uint64_t ) c227);
        t924 = ((uint64_t ) c226);
        t925 = ((uint64_t ) a3432);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p43 = (t924 >> 58);
        a3436 = ((uint64_t ) 1);
        a3437 = (a3436 << 58);
        m24 = (a3437 - 1);
        p44 = (((t922)&(m24)));
        a3438 = (p44 << 6);
        a3439 = (t923 >> 58);
        t926 = (((a3438)|(a3439)));
        a3440 = (t923 << 6);
        t927 = (((a3440)|(p43)));
        /* End of MPShiftRight3 */
        t487 = mu[0];
        t488 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3441 = (((uint128_t ) t927)*((uint128_t ) t488));
        a3442 = (((uint128_t ) t927)*((uint128_t ) t487));
        a3443 = (((uint128_t ) t926)*((uint128_t ) t488));
        a3444 = (((uint128_t ) t926)*((uint128_t ) t487));
        c228 = (((uint128_t ) a3442) + ((uint128_t ) a3443));
        t928 = (a3441 >> 64);
        c229 = (((uint128_t ) c228) + ((uint128_t ) t928));
        t929 = (c229 >> 64);
        c230 = (((uint128_t ) a3444) + ((uint128_t ) t929));
        t930 = (c230 >> 64);
        t931 = ((uint64_t ) c230);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t932 = (t930 >> 1);
        a3445 = (t930 << 63);
        a3446 = (t931 >> 1);
        t933 = (((a3445)|(a3446)));
        /* End of MPShiftRight2 */
        t483 = modulus[0];
        t484 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3447 = (((uint128_t ) t933)*((uint128_t ) t484));
        a3448 = (((uint128_t ) t933)*((uint128_t ) t483));
        a3449 = (((uint128_t ) t932)*((uint128_t ) t484));
        c231 = (((uint128_t ) a3448) + ((uint128_t ) a3449));
        t934 = (a3447 >> 64);
        c232 = (((uint128_t ) c231) + ((uint128_t ) t934));
        t935 = ((uint64_t ) c232);
        t936 = ((uint64_t ) a3447);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d253 = (t925 - t936);
        b247 = ((t925 < t936));
        d254 = (t924 - t935);
        d255 = (d254 - b247);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d256 = (d253 - t484);
        b248 = ((d253 < t484));
        d257 = (d255 - t483);
        d258 = (d257 - b248);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3452 = ((d255 < t483));
        a3453 = ((d255 == t483));
        a3454 = ((a3453) && (b248));
        i393 = ((a3452) || (a3454));
        t937 = ((i393) ? (d255) : (d258));
        t938 = ((i393) ? (d253) : (d256));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3455 = (128*i15);
        a3456 = (2*threadIdx.x);
        a3457 = (a3455 + a3456);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3458 = (2*a3424);
        a3459 = (a3458 + 1);
        s309 = (((uint128_t ) P1[a3459]) + ((uint128_t ) t938));
        t939 = ((uint64_t ) s309);
        c233 = (s309 >> 64);
        s310 = (((uint128_t ) P1[a3458]) + ((uint128_t ) t937));
        s311 = (((uint128_t ) s310) + ((uint128_t ) c233));
        t940 = ((uint64_t ) s311);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3460 = ((t483 < t940));
        a3461 = ((t483 == t940));
        a3462 = ((t484 < t939));
        a3463 = ((a3461) && (a3462));
        i394 = ((a3460) || (a3463));
        /* Begin of MPSubDDD 64 */
        d259 = (t939 - t484);
        b249 = ((t939 < t484));
        d260 = (t940 - t483);
        d261 = (d260 - b249);
        /* End of MPSubDDD 64 */
        a3465 = (2*a3457);
        P2[a3465] = ((i394) ? (d261) : (t940));
        a3466 = (a3465 + 1);
        P2[a3466] = ((i394) ? (d259) : (t939));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b250 = (a3456 + a3455);
        a3467 = (b250 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d262 = (P1[a3459] - t938);
        b251 = ((P1[a3459] < t938));
        d263 = (P1[a3458] - t937);
        d264 = (d263 - b251);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s312 = (((uint128_t ) d262) + ((uint128_t ) t484));
        t941 = ((uint64_t ) s312);
        c234 = (s312 >> 64);
        s313 = (((uint128_t ) d264) + ((uint128_t ) t483));
        s314 = (((uint128_t ) s313) + ((uint128_t ) c234));
        t942 = ((uint64_t ) s314);
        /* MPLessThan 64 */
        a3469 = ((P1[a3458] < t937));
        a3470 = ((P1[a3458] == t937));
        a3471 = ((a3470) && (b251));
        i395 = ((a3469) || (a3471));
        a3472 = (2*a3467);
        P2[a3472] = ((i395) ? (t942) : (d264));
        a3473 = (a3472 + 1);
        P2[a3473] = ((i395) ? (t941) : (d262));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code8(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3474, a3475, a3476, a3477, a3478, a3479, a3480, a3481, 
            a3482, a3503, a3504, a3505, a3506, a3507, a3508, a3509, 
            a3510, a3511, a3512, a3513, a3514, a3516, a3517, a3518, 
            a3520, a3521, a3522, a3523, a3524, b252, b253, b254, 
            b255, b256, b257, c243, c244, i396, i397, i398;
    uint64_t a3487, a3488, a3489, a3490, a3491, a3496, a3497, d265, 
            d266, d267, d268, d269, d270, d271, d272, d273, 
            d274, d275, d276, m25, p45, p46, t451, t452, 
            t455, t456, t943, t944, t945, t946, t947, t948, 
            t949, t950, t951, t952, t953, t954, t955, t956, 
            t957, t958, t959, t960, t961, t962, t963, t964, 
            t965;
    uint128_t a3483, a3484, a3485, a3486, a3492, a3493, a3494, a3495, 
            a3498, a3499, a3500, c235, c236, c237, c238, c239, 
            c240, c241, c242, s315, s316, s317, s318, s319, 
            s320;
    for(int i13 = 0; i13 <= 127; i13++) {
        a3474 = (64*i13);
        a3475 = (a3474 + threadIdx.x);
        b252 = (threadIdx.x + a3474);
        a3476 = (b252 + 8192);
        a3477 = (a3476 % 256);
        a3478 = (256 + a3477);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3479 = (2*a3478);
        a3480 = (a3479 + 1);
        a3481 = (2*a3476);
        a3482 = (a3481 + 1);
        a3483 = (((uint128_t ) twiddles[a3480])*((uint128_t ) P2[a3482]));
        a3484 = (((uint128_t ) twiddles[a3480])*((uint128_t ) P2[a3481]));
        a3485 = (((uint128_t ) twiddles[a3479])*((uint128_t ) P2[a3482]));
        a3486 = (((uint128_t ) twiddles[a3479])*((uint128_t ) P2[a3481]));
        c235 = (((uint128_t ) a3484) + ((uint128_t ) a3485));
        t943 = (a3483 >> 64);
        c236 = (((uint128_t ) c235) + ((uint128_t ) t943));
        t944 = (c236 >> 64);
        c237 = (((uint128_t ) a3486) + ((uint128_t ) t944));
        t945 = (c237 >> 64);
        t946 = ((uint64_t ) c237);
        t947 = ((uint64_t ) c236);
        t948 = ((uint64_t ) a3483);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p45 = (t947 >> 58);
        a3487 = ((uint64_t ) 1);
        a3488 = (a3487 << 58);
        m25 = (a3488 - 1);
        p46 = (((t945)&(m25)));
        a3489 = (p46 << 6);
        a3490 = (t946 >> 58);
        t949 = (((a3489)|(a3490)));
        a3491 = (t946 << 6);
        t950 = (((a3491)|(p45)));
        /* End of MPShiftRight3 */
        t455 = mu[0];
        t456 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3492 = (((uint128_t ) t950)*((uint128_t ) t456));
        a3493 = (((uint128_t ) t950)*((uint128_t ) t455));
        a3494 = (((uint128_t ) t949)*((uint128_t ) t456));
        a3495 = (((uint128_t ) t949)*((uint128_t ) t455));
        c238 = (((uint128_t ) a3493) + ((uint128_t ) a3494));
        t951 = (a3492 >> 64);
        c239 = (((uint128_t ) c238) + ((uint128_t ) t951));
        t952 = (c239 >> 64);
        c240 = (((uint128_t ) a3495) + ((uint128_t ) t952));
        t953 = (c240 >> 64);
        t954 = ((uint64_t ) c240);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t955 = (t953 >> 1);
        a3496 = (t953 << 63);
        a3497 = (t954 >> 1);
        t956 = (((a3496)|(a3497)));
        /* End of MPShiftRight2 */
        t451 = modulus[0];
        t452 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3498 = (((uint128_t ) t956)*((uint128_t ) t452));
        a3499 = (((uint128_t ) t956)*((uint128_t ) t451));
        a3500 = (((uint128_t ) t955)*((uint128_t ) t452));
        c241 = (((uint128_t ) a3499) + ((uint128_t ) a3500));
        t957 = (a3498 >> 64);
        c242 = (((uint128_t ) c241) + ((uint128_t ) t957));
        t958 = ((uint64_t ) c242);
        t959 = ((uint64_t ) a3498);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d265 = (t948 - t959);
        b253 = ((t948 < t959));
        d266 = (t947 - t958);
        d267 = (d266 - b253);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d268 = (d265 - t452);
        b254 = ((d265 < t452));
        d269 = (d267 - t451);
        d270 = (d269 - b254);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3503 = ((d267 < t451));
        a3504 = ((d267 == t451));
        a3505 = ((a3504) && (b254));
        i396 = ((a3503) || (a3505));
        t960 = ((i396) ? (d267) : (d270));
        t961 = ((i396) ? (d265) : (d268));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3506 = (128*i13);
        a3507 = (2*threadIdx.x);
        a3508 = (a3506 + a3507);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3509 = (2*a3475);
        a3510 = (a3509 + 1);
        s315 = (((uint128_t ) P2[a3510]) + ((uint128_t ) t961));
        t962 = ((uint64_t ) s315);
        c243 = (s315 >> 64);
        s316 = (((uint128_t ) P2[a3509]) + ((uint128_t ) t960));
        s317 = (((uint128_t ) s316) + ((uint128_t ) c243));
        t963 = ((uint64_t ) s317);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3511 = ((t451 < t963));
        a3512 = ((t451 == t963));
        a3513 = ((t452 < t962));
        a3514 = ((a3512) && (a3513));
        i397 = ((a3511) || (a3514));
        /* Begin of MPSubDDD 64 */
        d271 = (t962 - t452);
        b255 = ((t962 < t452));
        d272 = (t963 - t451);
        d273 = (d272 - b255);
        /* End of MPSubDDD 64 */
        a3516 = (2*a3508);
        P1[a3516] = ((i397) ? (d273) : (t963));
        a3517 = (a3516 + 1);
        P1[a3517] = ((i397) ? (d271) : (t962));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b256 = (a3507 + a3506);
        a3518 = (b256 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d274 = (P2[a3510] - t961);
        b257 = ((P2[a3510] < t961));
        d275 = (P2[a3509] - t960);
        d276 = (d275 - b257);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s318 = (((uint128_t ) d274) + ((uint128_t ) t452));
        t964 = ((uint64_t ) s318);
        c244 = (s318 >> 64);
        s319 = (((uint128_t ) d276) + ((uint128_t ) t451));
        s320 = (((uint128_t ) s319) + ((uint128_t ) c244));
        t965 = ((uint64_t ) s320);
        /* MPLessThan 64 */
        a3520 = ((P2[a3509] < t960));
        a3521 = ((P2[a3509] == t960));
        a3522 = ((a3521) && (b257));
        i398 = ((a3520) || (a3522));
        a3523 = (2*a3518);
        P1[a3523] = ((i398) ? (t965) : (d276));
        a3524 = (a3523 + 1);
        P1[a3524] = ((i398) ? (t964) : (d274));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code9(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3525, a3526, a3527, a3528, a3529, a3530, a3531, a3532, 
            a3533, a3554, a3555, a3556, a3557, a3558, a3559, a3560, 
            a3561, a3562, a3563, a3564, a3565, a3567, a3568, a3569, 
            a3571, a3572, a3573, a3574, a3575, b258, b259, b260, 
            b261, b262, b263, c253, c254, i399, i400, i401;
    uint64_t a3538, a3539, a3540, a3541, a3542, a3547, a3548, d277, 
            d278, d279, d280, d281, d282, d283, d284, d285, 
            d286, d287, d288, m26, p47, p48, t419, t420, 
            t423, t424, t966, t967, t968, t969, t970, t971, 
            t972, t973, t974, t975, t976, t977, t978, t979, 
            t980, t981, t982, t983, t984, t985, t986, t987, 
            t988;
    uint128_t a3534, a3535, a3536, a3537, a3543, a3544, a3545, a3546, 
            a3549, a3550, a3551, c245, c246, c247, c248, c249, 
            c250, c251, c252, s321, s322, s323, s324, s325, 
            s326;
    for(int i11 = 0; i11 <= 127; i11++) {
        a3525 = (64*i11);
        a3526 = (a3525 + threadIdx.x);
        b258 = (threadIdx.x + a3525);
        a3527 = (b258 + 8192);
        a3528 = (a3527 % 512);
        a3529 = (512 + a3528);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3530 = (2*a3529);
        a3531 = (a3530 + 1);
        a3532 = (2*a3527);
        a3533 = (a3532 + 1);
        a3534 = (((uint128_t ) twiddles[a3531])*((uint128_t ) P1[a3533]));
        a3535 = (((uint128_t ) twiddles[a3531])*((uint128_t ) P1[a3532]));
        a3536 = (((uint128_t ) twiddles[a3530])*((uint128_t ) P1[a3533]));
        a3537 = (((uint128_t ) twiddles[a3530])*((uint128_t ) P1[a3532]));
        c245 = (((uint128_t ) a3535) + ((uint128_t ) a3536));
        t966 = (a3534 >> 64);
        c246 = (((uint128_t ) c245) + ((uint128_t ) t966));
        t967 = (c246 >> 64);
        c247 = (((uint128_t ) a3537) + ((uint128_t ) t967));
        t968 = (c247 >> 64);
        t969 = ((uint64_t ) c247);
        t970 = ((uint64_t ) c246);
        t971 = ((uint64_t ) a3534);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p47 = (t970 >> 58);
        a3538 = ((uint64_t ) 1);
        a3539 = (a3538 << 58);
        m26 = (a3539 - 1);
        p48 = (((t968)&(m26)));
        a3540 = (p48 << 6);
        a3541 = (t969 >> 58);
        t972 = (((a3540)|(a3541)));
        a3542 = (t969 << 6);
        t973 = (((a3542)|(p47)));
        /* End of MPShiftRight3 */
        t423 = mu[0];
        t424 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3543 = (((uint128_t ) t973)*((uint128_t ) t424));
        a3544 = (((uint128_t ) t973)*((uint128_t ) t423));
        a3545 = (((uint128_t ) t972)*((uint128_t ) t424));
        a3546 = (((uint128_t ) t972)*((uint128_t ) t423));
        c248 = (((uint128_t ) a3544) + ((uint128_t ) a3545));
        t974 = (a3543 >> 64);
        c249 = (((uint128_t ) c248) + ((uint128_t ) t974));
        t975 = (c249 >> 64);
        c250 = (((uint128_t ) a3546) + ((uint128_t ) t975));
        t976 = (c250 >> 64);
        t977 = ((uint64_t ) c250);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t978 = (t976 >> 1);
        a3547 = (t976 << 63);
        a3548 = (t977 >> 1);
        t979 = (((a3547)|(a3548)));
        /* End of MPShiftRight2 */
        t419 = modulus[0];
        t420 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3549 = (((uint128_t ) t979)*((uint128_t ) t420));
        a3550 = (((uint128_t ) t979)*((uint128_t ) t419));
        a3551 = (((uint128_t ) t978)*((uint128_t ) t420));
        c251 = (((uint128_t ) a3550) + ((uint128_t ) a3551));
        t980 = (a3549 >> 64);
        c252 = (((uint128_t ) c251) + ((uint128_t ) t980));
        t981 = ((uint64_t ) c252);
        t982 = ((uint64_t ) a3549);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d277 = (t971 - t982);
        b259 = ((t971 < t982));
        d278 = (t970 - t981);
        d279 = (d278 - b259);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d280 = (d277 - t420);
        b260 = ((d277 < t420));
        d281 = (d279 - t419);
        d282 = (d281 - b260);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3554 = ((d279 < t419));
        a3555 = ((d279 == t419));
        a3556 = ((a3555) && (b260));
        i399 = ((a3554) || (a3556));
        t983 = ((i399) ? (d279) : (d282));
        t984 = ((i399) ? (d277) : (d280));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3557 = (128*i11);
        a3558 = (2*threadIdx.x);
        a3559 = (a3557 + a3558);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3560 = (2*a3526);
        a3561 = (a3560 + 1);
        s321 = (((uint128_t ) P1[a3561]) + ((uint128_t ) t984));
        t985 = ((uint64_t ) s321);
        c253 = (s321 >> 64);
        s322 = (((uint128_t ) P1[a3560]) + ((uint128_t ) t983));
        s323 = (((uint128_t ) s322) + ((uint128_t ) c253));
        t986 = ((uint64_t ) s323);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3562 = ((t419 < t986));
        a3563 = ((t419 == t986));
        a3564 = ((t420 < t985));
        a3565 = ((a3563) && (a3564));
        i400 = ((a3562) || (a3565));
        /* Begin of MPSubDDD 64 */
        d283 = (t985 - t420);
        b261 = ((t985 < t420));
        d284 = (t986 - t419);
        d285 = (d284 - b261);
        /* End of MPSubDDD 64 */
        a3567 = (2*a3559);
        P2[a3567] = ((i400) ? (d285) : (t986));
        a3568 = (a3567 + 1);
        P2[a3568] = ((i400) ? (d283) : (t985));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        b262 = (a3558 + a3557);
        a3569 = (b262 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d286 = (P1[a3561] - t984);
        b263 = ((P1[a3561] < t984));
        d287 = (P1[a3560] - t983);
        d288 = (d287 - b263);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s324 = (((uint128_t ) d286) + ((uint128_t ) t420));
        t987 = ((uint64_t ) s324);
        c254 = (s324 >> 64);
        s325 = (((uint128_t ) d288) + ((uint128_t ) t419));
        s326 = (((uint128_t ) s325) + ((uint128_t ) c254));
        t988 = ((uint64_t ) s326);
        /* MPLessThan 64 */
        a3571 = ((P1[a3560] < t983));
        a3572 = ((P1[a3560] == t983));
        a3573 = ((a3572) && (b263));
        i401 = ((a3571) || (a3573));
        a3574 = (2*a3569);
        P2[a3574] = ((i401) ? (t988) : (d288));
        a3575 = (a3574 + 1);
        P2[a3575] = ((i401) ? (t987) : (d286));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code10(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3576, a3577, a3578, a3579, a3580, a3581, a3582, a3583, 
            a3584, a3605, a3606, a3607, a3608, a3609, a3610, a3611, 
            a3612, a3613, a3614, a3615, a3616, a3618, a3619, a3620, 
            a3622, a3623, a3624, a3625, a3626, b264, b265, b266, 
            b267, c263, c264, i402, i403, i404;
    uint64_t a3589, a3590, a3591, a3592, a3593, a3598, a3599, d289, 
            d290, d291, d292, d293, d294, d295, d296, d297, 
            d298, d299, d300, m27, p49, p50, t1000, t1001, 
            t1002, t1003, t1004, t1005, t1006, t1007, t1008, t1009, 
            t1010, t1011, t387, t388, t391, t392, t989, t990, 
            t991, t992, t993, t994, t995, t996, t997, t998, 
            t999;
    uint128_t a3585, a3586, a3587, a3588, a3594, a3595, a3596, a3597, 
            a3600, a3601, a3602, c255, c256, c257, c258, c259, 
            c260, c261, c262, s327, s328, s329, s330, s331, 
            s332;
    for(int i9 = 0; i9 <= 127; i9++) {
        a3576 = (64*i9);
        a3577 = (threadIdx.x + a3576);
        a3578 = (a3577 + 8192);
        a3579 = (a3578 % 1024);
        a3580 = (1024 + a3579);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3581 = (2*a3580);
        a3582 = (a3581 + 1);
        a3583 = (2*a3578);
        a3584 = (a3583 + 1);
        a3585 = (((uint128_t ) twiddles[a3582])*((uint128_t ) P2[a3584]));
        a3586 = (((uint128_t ) twiddles[a3582])*((uint128_t ) P2[a3583]));
        a3587 = (((uint128_t ) twiddles[a3581])*((uint128_t ) P2[a3584]));
        a3588 = (((uint128_t ) twiddles[a3581])*((uint128_t ) P2[a3583]));
        c255 = (((uint128_t ) a3586) + ((uint128_t ) a3587));
        t989 = (a3585 >> 64);
        c256 = (((uint128_t ) c255) + ((uint128_t ) t989));
        t990 = (c256 >> 64);
        c257 = (((uint128_t ) a3588) + ((uint128_t ) t990));
        t991 = (c257 >> 64);
        t992 = ((uint64_t ) c257);
        t993 = ((uint64_t ) c256);
        t994 = ((uint64_t ) a3585);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p49 = (t993 >> 58);
        a3589 = ((uint64_t ) 1);
        a3590 = (a3589 << 58);
        m27 = (a3590 - 1);
        p50 = (((t991)&(m27)));
        a3591 = (p50 << 6);
        a3592 = (t992 >> 58);
        t995 = (((a3591)|(a3592)));
        a3593 = (t992 << 6);
        t996 = (((a3593)|(p49)));
        /* End of MPShiftRight3 */
        t391 = mu[0];
        t392 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3594 = (((uint128_t ) t996)*((uint128_t ) t392));
        a3595 = (((uint128_t ) t996)*((uint128_t ) t391));
        a3596 = (((uint128_t ) t995)*((uint128_t ) t392));
        a3597 = (((uint128_t ) t995)*((uint128_t ) t391));
        c258 = (((uint128_t ) a3595) + ((uint128_t ) a3596));
        t997 = (a3594 >> 64);
        c259 = (((uint128_t ) c258) + ((uint128_t ) t997));
        t998 = (c259 >> 64);
        c260 = (((uint128_t ) a3597) + ((uint128_t ) t998));
        t999 = (c260 >> 64);
        t1000 = ((uint64_t ) c260);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1001 = (t999 >> 1);
        a3598 = (t999 << 63);
        a3599 = (t1000 >> 1);
        t1002 = (((a3598)|(a3599)));
        /* End of MPShiftRight2 */
        t387 = modulus[0];
        t388 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3600 = (((uint128_t ) t1002)*((uint128_t ) t388));
        a3601 = (((uint128_t ) t1002)*((uint128_t ) t387));
        a3602 = (((uint128_t ) t1001)*((uint128_t ) t388));
        c261 = (((uint128_t ) a3601) + ((uint128_t ) a3602));
        t1003 = (a3600 >> 64);
        c262 = (((uint128_t ) c261) + ((uint128_t ) t1003));
        t1004 = ((uint64_t ) c262);
        t1005 = ((uint64_t ) a3600);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d289 = (t994 - t1005);
        b264 = ((t994 < t1005));
        d290 = (t993 - t1004);
        d291 = (d290 - b264);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d292 = (d289 - t388);
        b265 = ((d289 < t388));
        d293 = (d291 - t387);
        d294 = (d293 - b265);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3605 = ((d291 < t387));
        a3606 = ((d291 == t387));
        a3607 = ((a3606) && (b265));
        i402 = ((a3605) || (a3607));
        t1006 = ((i402) ? (d291) : (d294));
        t1007 = ((i402) ? (d289) : (d292));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3608 = (2*threadIdx.x);
        a3609 = (128*i9);
        a3610 = (a3608 + a3609);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3611 = (2*a3577);
        a3612 = (a3611 + 1);
        s327 = (((uint128_t ) P2[a3612]) + ((uint128_t ) t1007));
        t1008 = ((uint64_t ) s327);
        c263 = (s327 >> 64);
        s328 = (((uint128_t ) P2[a3611]) + ((uint128_t ) t1006));
        s329 = (((uint128_t ) s328) + ((uint128_t ) c263));
        t1009 = ((uint64_t ) s329);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3613 = ((t387 < t1009));
        a3614 = ((t387 == t1009));
        a3615 = ((t388 < t1008));
        a3616 = ((a3614) && (a3615));
        i403 = ((a3613) || (a3616));
        /* Begin of MPSubDDD 64 */
        d295 = (t1008 - t388);
        b266 = ((t1008 < t388));
        d296 = (t1009 - t387);
        d297 = (d296 - b266);
        /* End of MPSubDDD 64 */
        a3618 = (2*a3610);
        P1[a3618] = ((i403) ? (d297) : (t1009));
        a3619 = (a3618 + 1);
        P1[a3619] = ((i403) ? (d295) : (t1008));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a3620 = (a3610 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d298 = (P2[a3612] - t1007);
        b267 = ((P2[a3612] < t1007));
        d299 = (P2[a3611] - t1006);
        d300 = (d299 - b267);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s330 = (((uint128_t ) d298) + ((uint128_t ) t388));
        t1010 = ((uint64_t ) s330);
        c264 = (s330 >> 64);
        s331 = (((uint128_t ) d300) + ((uint128_t ) t387));
        s332 = (((uint128_t ) s331) + ((uint128_t ) c264));
        t1011 = ((uint64_t ) s332);
        /* MPLessThan 64 */
        a3622 = ((P2[a3611] < t1006));
        a3623 = ((P2[a3611] == t1006));
        a3624 = ((a3623) && (b267));
        i404 = ((a3622) || (a3624));
        a3625 = (2*a3620);
        P1[a3625] = ((i404) ? (t1011) : (d300));
        a3626 = (a3625 + 1);
        P1[a3626] = ((i404) ? (t1010) : (d298));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code11(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3627, a3628, a3629, a3630, a3631, a3632, a3633, a3634, 
            a3635, a3656, a3657, a3658, a3659, a3660, a3661, a3662, 
            a3663, a3664, a3665, a3666, a3667, a3669, a3670, a3671, 
            a3673, a3674, a3675, a3676, a3677, b268, b269, b270, 
            b271, c273, c274, i405, i406, i407;
    uint64_t a3640, a3641, a3642, a3643, a3644, a3649, a3650, d301, 
            d302, d303, d304, d305, d306, d307, d308, d309, 
            d310, d311, d312, m28, p51, p52, t1012, t1013, 
            t1014, t1015, t1016, t1017, t1018, t1019, t1020, t1021, 
            t1022, t1023, t1024, t1025, t1026, t1027, t1028, t1029, 
            t1030, t1031, t1032, t1033, t1034, t354, t355, t358, 
            t359;
    uint128_t a3636, a3637, a3638, a3639, a3645, a3646, a3647, a3648, 
            a3651, a3652, a3653, c265, c266, c267, c268, c269, 
            c270, c271, c272, s333, s334, s335, s336, s337, 
            s338;
    for(int i7 = 0; i7 <= 127; i7++) {
        a3627 = (64*i7);
        a3628 = (threadIdx.x + a3627);
        a3629 = (a3628 + 8192);
        a3630 = (a3629 % 2048);
        a3631 = (2048 + a3630);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3632 = (2*a3631);
        a3633 = (a3632 + 1);
        a3634 = (2*a3629);
        a3635 = (a3634 + 1);
        a3636 = (((uint128_t ) twiddles[a3633])*((uint128_t ) P1[a3635]));
        a3637 = (((uint128_t ) twiddles[a3633])*((uint128_t ) P1[a3634]));
        a3638 = (((uint128_t ) twiddles[a3632])*((uint128_t ) P1[a3635]));
        a3639 = (((uint128_t ) twiddles[a3632])*((uint128_t ) P1[a3634]));
        c265 = (((uint128_t ) a3637) + ((uint128_t ) a3638));
        t1012 = (a3636 >> 64);
        c266 = (((uint128_t ) c265) + ((uint128_t ) t1012));
        t1013 = (c266 >> 64);
        c267 = (((uint128_t ) a3639) + ((uint128_t ) t1013));
        t1014 = (c267 >> 64);
        t1015 = ((uint64_t ) c267);
        t1016 = ((uint64_t ) c266);
        t1017 = ((uint64_t ) a3636);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p51 = (t1016 >> 58);
        a3640 = ((uint64_t ) 1);
        a3641 = (a3640 << 58);
        m28 = (a3641 - 1);
        p52 = (((t1014)&(m28)));
        a3642 = (p52 << 6);
        a3643 = (t1015 >> 58);
        t1018 = (((a3642)|(a3643)));
        a3644 = (t1015 << 6);
        t1019 = (((a3644)|(p51)));
        /* End of MPShiftRight3 */
        t358 = mu[0];
        t359 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3645 = (((uint128_t ) t1019)*((uint128_t ) t359));
        a3646 = (((uint128_t ) t1019)*((uint128_t ) t358));
        a3647 = (((uint128_t ) t1018)*((uint128_t ) t359));
        a3648 = (((uint128_t ) t1018)*((uint128_t ) t358));
        c268 = (((uint128_t ) a3646) + ((uint128_t ) a3647));
        t1020 = (a3645 >> 64);
        c269 = (((uint128_t ) c268) + ((uint128_t ) t1020));
        t1021 = (c269 >> 64);
        c270 = (((uint128_t ) a3648) + ((uint128_t ) t1021));
        t1022 = (c270 >> 64);
        t1023 = ((uint64_t ) c270);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1024 = (t1022 >> 1);
        a3649 = (t1022 << 63);
        a3650 = (t1023 >> 1);
        t1025 = (((a3649)|(a3650)));
        /* End of MPShiftRight2 */
        t354 = modulus[0];
        t355 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3651 = (((uint128_t ) t1025)*((uint128_t ) t355));
        a3652 = (((uint128_t ) t1025)*((uint128_t ) t354));
        a3653 = (((uint128_t ) t1024)*((uint128_t ) t355));
        c271 = (((uint128_t ) a3652) + ((uint128_t ) a3653));
        t1026 = (a3651 >> 64);
        c272 = (((uint128_t ) c271) + ((uint128_t ) t1026));
        t1027 = ((uint64_t ) c272);
        t1028 = ((uint64_t ) a3651);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d301 = (t1017 - t1028);
        b268 = ((t1017 < t1028));
        d302 = (t1016 - t1027);
        d303 = (d302 - b268);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d304 = (d301 - t355);
        b269 = ((d301 < t355));
        d305 = (d303 - t354);
        d306 = (d305 - b269);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3656 = ((d303 < t354));
        a3657 = ((d303 == t354));
        a3658 = ((a3657) && (b269));
        i405 = ((a3656) || (a3658));
        t1029 = ((i405) ? (d303) : (d306));
        t1030 = ((i405) ? (d301) : (d304));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3659 = (2*threadIdx.x);
        a3660 = (128*i7);
        a3661 = (a3659 + a3660);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3662 = (2*a3628);
        a3663 = (a3662 + 1);
        s333 = (((uint128_t ) P1[a3663]) + ((uint128_t ) t1030));
        t1031 = ((uint64_t ) s333);
        c273 = (s333 >> 64);
        s334 = (((uint128_t ) P1[a3662]) + ((uint128_t ) t1029));
        s335 = (((uint128_t ) s334) + ((uint128_t ) c273));
        t1032 = ((uint64_t ) s335);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3664 = ((t354 < t1032));
        a3665 = ((t354 == t1032));
        a3666 = ((t355 < t1031));
        a3667 = ((a3665) && (a3666));
        i406 = ((a3664) || (a3667));
        /* Begin of MPSubDDD 64 */
        d307 = (t1031 - t355);
        b270 = ((t1031 < t355));
        d308 = (t1032 - t354);
        d309 = (d308 - b270);
        /* End of MPSubDDD 64 */
        a3669 = (2*a3661);
        P2[a3669] = ((i406) ? (d309) : (t1032));
        a3670 = (a3669 + 1);
        P2[a3670] = ((i406) ? (d307) : (t1031));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a3671 = (a3661 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d310 = (P1[a3663] - t1030);
        b271 = ((P1[a3663] < t1030));
        d311 = (P1[a3662] - t1029);
        d312 = (d311 - b271);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s336 = (((uint128_t ) d310) + ((uint128_t ) t355));
        t1033 = ((uint64_t ) s336);
        c274 = (s336 >> 64);
        s337 = (((uint128_t ) d312) + ((uint128_t ) t354));
        s338 = (((uint128_t ) s337) + ((uint128_t ) c274));
        t1034 = ((uint64_t ) s338);
        /* MPLessThan 64 */
        a3673 = ((P1[a3662] < t1029));
        a3674 = ((P1[a3662] == t1029));
        a3675 = ((a3674) && (b271));
        i407 = ((a3673) || (a3675));
        a3676 = (2*a3671);
        P2[a3676] = ((i407) ? (t1034) : (d312));
        a3677 = (a3676 + 1);
        P2[a3677] = ((i407) ? (t1033) : (d310));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code12(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3678, a3679, a3680, a3681, a3682, a3683, a3684, a3685, 
            a3686, a3707, a3708, a3709, a3710, a3711, a3712, a3713, 
            a3714, a3715, a3716, a3717, a3718, a3720, a3721, a3722, 
            a3724, a3725, a3726, a3727, a3728, b272, b273, b274, 
            b275, c283, c284, i408, i409, i410;
    uint64_t a3691, a3692, a3693, a3694, a3695, a3700, a3701, d313, 
            d314, d315, d316, d317, d318, d319, d320, d321, 
            d322, d323, d324, m29, p53, p54, t1035, t1036, 
            t1037, t1038, t1039, t1040, t1041, t1042, t1043, t1044, 
            t1045, t1046, t1047, t1048, t1049, t1050, t1051, t1052, 
            t1053, t1054, t1055, t1056, t1057, t322, t323, t326, 
            t327;
    uint128_t a3687, a3688, a3689, a3690, a3696, a3697, a3698, a3699, 
            a3702, a3703, a3704, c275, c276, c277, c278, c279, 
            c280, c281, c282, s339, s340, s341, s342, s343, 
            s344;
    for(int i5 = 0; i5 <= 127; i5++) {
        a3678 = (64*i5);
        a3679 = (threadIdx.x + a3678);
        a3680 = (a3679 + 8192);
        a3681 = (a3680 % 4096);
        a3682 = (4096 + a3681);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3683 = (2*a3682);
        a3684 = (a3683 + 1);
        a3685 = (2*a3680);
        a3686 = (a3685 + 1);
        a3687 = (((uint128_t ) twiddles[a3684])*((uint128_t ) P2[a3686]));
        a3688 = (((uint128_t ) twiddles[a3684])*((uint128_t ) P2[a3685]));
        a3689 = (((uint128_t ) twiddles[a3683])*((uint128_t ) P2[a3686]));
        a3690 = (((uint128_t ) twiddles[a3683])*((uint128_t ) P2[a3685]));
        c275 = (((uint128_t ) a3688) + ((uint128_t ) a3689));
        t1035 = (a3687 >> 64);
        c276 = (((uint128_t ) c275) + ((uint128_t ) t1035));
        t1036 = (c276 >> 64);
        c277 = (((uint128_t ) a3690) + ((uint128_t ) t1036));
        t1037 = (c277 >> 64);
        t1038 = ((uint64_t ) c277);
        t1039 = ((uint64_t ) c276);
        t1040 = ((uint64_t ) a3687);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p53 = (t1039 >> 58);
        a3691 = ((uint64_t ) 1);
        a3692 = (a3691 << 58);
        m29 = (a3692 - 1);
        p54 = (((t1037)&(m29)));
        a3693 = (p54 << 6);
        a3694 = (t1038 >> 58);
        t1041 = (((a3693)|(a3694)));
        a3695 = (t1038 << 6);
        t1042 = (((a3695)|(p53)));
        /* End of MPShiftRight3 */
        t326 = mu[0];
        t327 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3696 = (((uint128_t ) t1042)*((uint128_t ) t327));
        a3697 = (((uint128_t ) t1042)*((uint128_t ) t326));
        a3698 = (((uint128_t ) t1041)*((uint128_t ) t327));
        a3699 = (((uint128_t ) t1041)*((uint128_t ) t326));
        c278 = (((uint128_t ) a3697) + ((uint128_t ) a3698));
        t1043 = (a3696 >> 64);
        c279 = (((uint128_t ) c278) + ((uint128_t ) t1043));
        t1044 = (c279 >> 64);
        c280 = (((uint128_t ) a3699) + ((uint128_t ) t1044));
        t1045 = (c280 >> 64);
        t1046 = ((uint64_t ) c280);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1047 = (t1045 >> 1);
        a3700 = (t1045 << 63);
        a3701 = (t1046 >> 1);
        t1048 = (((a3700)|(a3701)));
        /* End of MPShiftRight2 */
        t322 = modulus[0];
        t323 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3702 = (((uint128_t ) t1048)*((uint128_t ) t323));
        a3703 = (((uint128_t ) t1048)*((uint128_t ) t322));
        a3704 = (((uint128_t ) t1047)*((uint128_t ) t323));
        c281 = (((uint128_t ) a3703) + ((uint128_t ) a3704));
        t1049 = (a3702 >> 64);
        c282 = (((uint128_t ) c281) + ((uint128_t ) t1049));
        t1050 = ((uint64_t ) c282);
        t1051 = ((uint64_t ) a3702);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d313 = (t1040 - t1051);
        b272 = ((t1040 < t1051));
        d314 = (t1039 - t1050);
        d315 = (d314 - b272);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d316 = (d313 - t323);
        b273 = ((d313 < t323));
        d317 = (d315 - t322);
        d318 = (d317 - b273);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3707 = ((d315 < t322));
        a3708 = ((d315 == t322));
        a3709 = ((a3708) && (b273));
        i408 = ((a3707) || (a3709));
        t1052 = ((i408) ? (d315) : (d318));
        t1053 = ((i408) ? (d313) : (d316));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3710 = (2*threadIdx.x);
        a3711 = (128*i5);
        a3712 = (a3710 + a3711);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3713 = (2*a3679);
        a3714 = (a3713 + 1);
        s339 = (((uint128_t ) P2[a3714]) + ((uint128_t ) t1053));
        t1054 = ((uint64_t ) s339);
        c283 = (s339 >> 64);
        s340 = (((uint128_t ) P2[a3713]) + ((uint128_t ) t1052));
        s341 = (((uint128_t ) s340) + ((uint128_t ) c283));
        t1055 = ((uint64_t ) s341);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3715 = ((t322 < t1055));
        a3716 = ((t322 == t1055));
        a3717 = ((t323 < t1054));
        a3718 = ((a3716) && (a3717));
        i409 = ((a3715) || (a3718));
        /* Begin of MPSubDDD 64 */
        d319 = (t1054 - t323);
        b274 = ((t1054 < t323));
        d320 = (t1055 - t322);
        d321 = (d320 - b274);
        /* End of MPSubDDD 64 */
        a3720 = (2*a3712);
        P1[a3720] = ((i409) ? (d321) : (t1055));
        a3721 = (a3720 + 1);
        P1[a3721] = ((i409) ? (d319) : (t1054));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a3722 = (a3712 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d322 = (P2[a3714] - t1053);
        b275 = ((P2[a3714] < t1053));
        d323 = (P2[a3713] - t1052);
        d324 = (d323 - b275);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s342 = (((uint128_t ) d322) + ((uint128_t ) t323));
        t1056 = ((uint64_t ) s342);
        c284 = (s342 >> 64);
        s343 = (((uint128_t ) d324) + ((uint128_t ) t322));
        s344 = (((uint128_t ) s343) + ((uint128_t ) c284));
        t1057 = ((uint64_t ) s344);
        /* MPLessThan 64 */
        a3724 = ((P2[a3713] < t1052));
        a3725 = ((P2[a3713] == t1052));
        a3726 = ((a3725) && (b275));
        i410 = ((a3724) || (a3726));
        a3727 = (2*a3722);
        P1[a3727] = ((i410) ? (t1057) : (d324));
        a3728 = (a3727 + 1);
        P1[a3728] = ((i410) ? (t1056) : (d322));
        /* End of MPModSub 64 */
    }
}

__global__ void ker_code13(uint64_t  *X, uint64_t  *Y, uint64_t *modulus, uint64_t  *twiddles, uint64_t *mu) {
    int a3729, a3730, a3731, a3732, a3733, a3734, a3735, a3736, 
            a3737, a3758, a3759, a3760, a3761, a3762, a3763, a3764, 
            a3765, a3766, a3767, a3768, a3769, a3770, a3772, a3773, 
            a3774, a3776, a3777, a3778, a3779, a3780, b276, b277, 
            b278, b279, b280, b281, c293, c294, i411, i412, 
            i413;
    uint64_t a3742, a3743, a3744, a3745, a3746, a3751, a3752, d325, 
            d326, d327, d328, d329, d330, d331, d332, d333, 
            d334, d335, d336, m30, p55, p56, t1058, t1059, 
            t1060, t1061, t1062, t1063, t1064, t1065, t1066, t1067, 
            t1068, t1069, t1070, t1071, t1072, t1073, t1074, t1075, 
            t1076, t1077, t1078, t1079, t1080, t290, t291, t294, 
            t295;
    uint128_t a3738, a3739, a3740, a3741, a3747, a3748, a3749, a3750, 
            a3753, a3754, a3755, c285, c286, c287, c288, c289, 
            c290, c291, c292, s345, s346, s347, s348, s349, 
            s350;
    for(int i3 = 0; i3 <= 127; i3++) {
        a3729 = (64*i3);
        a3730 = (a3729 + threadIdx.x);
        b276 = (threadIdx.x + a3729);
        a3731 = (b276 + 8192);
        a3732 = (a3731 % 8192);
        a3733 = (8192 + a3732);
        /* Begin of MPModMul 64 */
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3734 = (2*a3733);
        a3735 = (a3734 + 1);
        a3736 = (2*a3731);
        a3737 = (a3736 + 1);
        a3738 = (((uint128_t ) twiddles[a3735])*((uint128_t ) P1[a3737]));
        a3739 = (((uint128_t ) twiddles[a3735])*((uint128_t ) P1[a3736]));
        a3740 = (((uint128_t ) twiddles[a3734])*((uint128_t ) P1[a3737]));
        a3741 = (((uint128_t ) twiddles[a3734])*((uint128_t ) P1[a3736]));
        c285 = (((uint128_t ) a3739) + ((uint128_t ) a3740));
        t1058 = (a3738 >> 64);
        c286 = (((uint128_t ) c285) + ((uint128_t ) t1058));
        t1059 = (c286 >> 64);
        c287 = (((uint128_t ) a3741) + ((uint128_t ) t1059));
        t1060 = (c287 >> 64);
        t1061 = ((uint64_t ) c287);
        t1062 = ((uint64_t ) c286);
        t1063 = ((uint64_t ) a3738);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPModDQ */
        /* Begin of MPShiftRight3 */
        p55 = (t1062 >> 58);
        a3742 = ((uint64_t ) 1);
        a3743 = (a3742 << 58);
        m30 = (a3743 - 1);
        p56 = (((t1060)&(m30)));
        a3744 = (p56 << 6);
        a3745 = (t1061 >> 58);
        t1064 = (((a3744)|(a3745)));
        a3746 = (t1061 << 6);
        t1065 = (((a3746)|(p55)));
        /* End of MPShiftRight3 */
        t294 = mu[0];
        t295 = mu[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3747 = (((uint128_t ) t1065)*((uint128_t ) t295));
        a3748 = (((uint128_t ) t1065)*((uint128_t ) t294));
        a3749 = (((uint128_t ) t1064)*((uint128_t ) t295));
        a3750 = (((uint128_t ) t1064)*((uint128_t ) t294));
        c288 = (((uint128_t ) a3748) + ((uint128_t ) a3749));
        t1066 = (a3747 >> 64);
        c289 = (((uint128_t ) c288) + ((uint128_t ) t1066));
        t1067 = (c289 >> 64);
        c290 = (((uint128_t ) a3750) + ((uint128_t ) t1067));
        t1068 = (c290 >> 64);
        t1069 = ((uint64_t ) c290);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPShiftRight2 */
        t1070 = (t1068 >> 1);
        a3751 = (t1068 << 63);
        a3752 = (t1069 >> 1);
        t1071 = (((a3751)|(a3752)));
        /* End of MPShiftRight2 */
        t290 = modulus[0];
        t291 = modulus[1];
        /* Begin of MPMulQDD_Schoolbook_Partial */
        a3753 = (((uint128_t ) t1071)*((uint128_t ) t291));
        a3754 = (((uint128_t ) t1071)*((uint128_t ) t290));
        a3755 = (((uint128_t ) t1070)*((uint128_t ) t291));
        c291 = (((uint128_t ) a3754) + ((uint128_t ) a3755));
        t1072 = (a3753 >> 64);
        c292 = (((uint128_t ) c291) + ((uint128_t ) t1072));
        t1073 = ((uint64_t ) c292);
        t1074 = ((uint64_t ) a3753);
        /* End of MPMulQDD_Schoolbook_Partial */
        /* Begin of MPSubDDD 64 */
        d325 = (t1063 - t1074);
        b277 = ((t1063 < t1074));
        d326 = (t1062 - t1073);
        d327 = (d326 - b277);
        /* End of MPSubDDD 64 */
        /* Begin of MPSubDDD 64 */
        d328 = (d325 - t291);
        b278 = ((d325 < t291));
        d329 = (d327 - t290);
        d330 = (d329 - b278);
        /* End of MPSubDDD 64 */
        /* MPLessThan 64 */
        a3758 = ((d327 < t290));
        a3759 = ((d327 == t290));
        a3760 = ((a3759) && (b278));
        i411 = ((a3758) || (a3760));
        t1075 = ((i411) ? (d327) : (d330));
        t1076 = ((i411) ? (d325) : (d328));
        /* End of MPModDQ */
        /* End of MPModMul 64 */
        a3761 = (16384*blockIdx.x);
        a3762 = (2*threadIdx.x);
        a3763 = (128*i3);
        b279 = (a3761 + a3762);
        a3764 = (b279 + a3763);
        /* Begin of MPModAdd 64 */
        /* MPAddDDD 64 */
        a3765 = (2*a3730);
        a3766 = (a3765 + 1);
        s345 = (((uint128_t ) P1[a3766]) + ((uint128_t ) t1076));
        t1077 = ((uint64_t ) s345);
        c293 = (s345 >> 64);
        s346 = (((uint128_t ) P1[a3765]) + ((uint128_t ) t1075));
        s347 = (((uint128_t ) s346) + ((uint128_t ) c293));
        t1078 = ((uint64_t ) s347);
        /* Begin of MPModDD */
        /* MPLessThan 64 */
        a3767 = ((t290 < t1078));
        a3768 = ((t290 == t1078));
        a3769 = ((t291 < t1077));
        a3770 = ((a3768) && (a3769));
        i412 = ((a3767) || (a3770));
        /* Begin of MPSubDDD 64 */
        d331 = (t1077 - t291);
        b280 = ((t1077 < t291));
        d332 = (t1078 - t290);
        d333 = (d332 - b280);
        /* End of MPSubDDD 64 */
        a3772 = (2*a3764);
        Y[a3772] = ((i412) ? (d333) : (t1078));
        a3773 = (a3772 + 1);
        Y[a3773] = ((i412) ? (d331) : (t1077));
        /* End of MPModDD */
        /* End of MPModAdd 64 */
        a3774 = (a3764 + 1);
        /* Begin of MPModSub 64 */
        /* Begin of MPSubDDD 64 */
        d334 = (P1[a3766] - t1076);
        b281 = ((P1[a3766] < t1076));
        d335 = (P1[a3765] - t1075);
        d336 = (d335 - b281);
        /* End of MPSubDDD 64 */
        /* MPAddDDD 64 */
        s348 = (((uint128_t ) d334) + ((uint128_t ) t291));
        t1079 = ((uint64_t ) s348);
        c294 = (s348 >> 64);
        s349 = (((uint128_t ) d336) + ((uint128_t ) t290));
        s350 = (((uint128_t ) s349) + ((uint128_t ) c294));
        t1080 = ((uint64_t ) s350);
        /* MPLessThan 64 */
        a3776 = ((P1[a3765] < t1075));
        a3777 = ((P1[a3765] == t1075));
        a3778 = ((a3777) && (b281));
        i413 = ((a3776) || (a3778));
        a3779 = (2*a3774);
        Y[a3779] = ((i413) ? (t1080) : (d336));
        a3780 = (a3779 + 1);
        Y[a3780] = ((i413) ? (t1079) : (d334));
        /* End of MPModSub 64 */
    }
}

void nttmpcuda(uint64_t  *Y, uint64_t  *X, uint64_t modulus[2], uint64_t  *twiddles, uint64_t mu[2]) {
    dim3 b68(64, 1, 1), b69(64, 1, 1), b70(64, 1, 1), b71(64, 1, 1), b72(64, 1, 1), b73(64, 1, 1), b74(64, 1, 1), b75(64, 1, 1), 
    b76(64, 1, 1), b77(64, 1, 1), b78(64, 1, 1), b79(64, 1, 1), b80(64, 1, 1), b81(64, 1, 1), g1(2, 1, 1), g10(2, 1, 1), 
    g11(2, 1, 1), g12(2, 1, 1), g13(2, 1, 1), g14(2, 1, 1), g2(2, 1, 1), g3(2, 1, 1), g4(2, 1, 1), g5(2, 1, 1), 
    g6(2, 1, 1), g7(2, 1, 1), g8(2, 1, 1), g9(2, 1, 1);
    ker_code0<<<g1, b68>>>(X, Y, modulus, twiddles, mu);
    ker_code1<<<g2, b69>>>(X, Y, modulus, twiddles, mu);
    ker_code2<<<g3, b70>>>(X, Y, modulus, twiddles, mu);
    ker_code3<<<g4, b71>>>(X, Y, modulus, twiddles, mu);
    ker_code4<<<g5, b72>>>(X, Y, modulus, twiddles, mu);
    ker_code5<<<g6, b73>>>(X, Y, modulus, twiddles, mu);
    ker_code6<<<g7, b74>>>(X, Y, modulus, twiddles, mu);
    ker_code7<<<g8, b75>>>(X, Y, modulus, twiddles, mu);
    ker_code8<<<g9, b76>>>(X, Y, modulus, twiddles, mu);
    ker_code9<<<g10, b77>>>(X, Y, modulus, twiddles, mu);
    ker_code10<<<g11, b78>>>(X, Y, modulus, twiddles, mu);
    ker_code11<<<g12, b79>>>(X, Y, modulus, twiddles, mu);
    ker_code12<<<g13, b80>>>(X, Y, modulus, twiddles, mu);
    ker_code13<<<g14, b81>>>(X, Y, modulus, twiddles, mu);
}

void destroy_nttmpcuda() {
    /* skip */
}
